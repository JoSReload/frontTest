4002 silly lockFile 293789b7-er-autoprefixer-1-0-20140103-tgz https://registry.npmjs.org/autoprefixer/-/autoprefixer-1.0.20140103.tgz
4003 silly lockFile 1d7247d9-autoprefixer-1-0-20140103 autoprefixer@1.0.20140103
4004 silly lockFile 1d7247d9-autoprefixer-1-0-20140103 autoprefixer@1.0.20140103
4005 silly lockFile 04c6c220-autoprefixer-1-0-20131222 autoprefixer@~1.0.20131222
4006 silly lockFile 04c6c220-autoprefixer-1-0-20131222 autoprefixer@~1.0.20131222
4007 silly resolved [ { name: 'diff',
4007 silly resolved     version: '1.0.8',
4007 silly resolved     description: 'A javascript text diff implementation.',
4007 silly resolved     keywords: [ 'diff', 'javascript' ],
4007 silly resolved     maintainers: [ [Object] ],
4007 silly resolved     bugs:
4007 silly resolved      { url: 'http://github.com/kpdecker/jsdiff/issues',
4007 silly resolved        email: 'kpdecker@gmail.com' },
4007 silly resolved     licenses: [ [Object] ],
4007 silly resolved     repository: { type: 'git', url: 'git://github.com/kpdecker/jsdiff.git' },
4007 silly resolved     engines: { node: '>=0.3.1' },
4007 silly resolved     main: './diff',
4007 silly resolved     scripts: { test: 'node_modules/.bin/mocha test/*.js' },
4007 silly resolved     dependencies: {},
4007 silly resolved     devDependencies: { mocha: '~1.6', should: '~1.2', colors: '~0.6.2' },
4007 silly resolved     optionalDependencies: {},
4007 silly resolved     files: [ 'diff.js' ],
4007 silly resolved     readme: '# jsdiff\n\n[![Build Status](https://secure.travis-ci.org/kpdecker/jsdiff.png)](http://travis-ci.org/kpdecker/jsdiff)\n\nA javascript text differencing implementation.\n\nBased on the algorithm proposed in\n["An O(ND) Difference Algorithm and its Variations" (Myers, 1986)](http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.4.6927).\n\n## Installation\n\n    npm install diff\n\nor\n\n    git clone git://github.com/kpdecker/jsdiff.git\n\n## API\n\n* `JsDiff.diffChars(oldStr, newStr)` - diffs two blocks of text, comparing character by character.\n\n    Returns a list of change objects (See below).\n\n* `JsDiff.diffWords(oldStr, newStr)` - diffs two blocks of text, comparing word by word.\n\n    Returns a list of change objects (See below).\n\n* `JsDiff.diffLines(oldStr, newStr)` - diffs two blocks of text, comparing line by line.\n\n    Returns a list of change objects (See below).\n\n* `JsDiff.diffCss(oldStr, newStr)` - diffs two blocks of text, comparing CSS tokens.\n\n    Returns a list of change objects (See below).\n\n* `JsDiff.createPatch(fileName, oldStr, newStr, oldHeader, newHeader)` - creates a unified diff patch.\n\n    Parameters:\n    * `fileName` : String to be output in the filename sections of the patch\n    * `oldStr` : Original string value\n    * `newStr` : New string value\n    * `oldHeader` : Additional information to include in the old file header\n    * `newHeader` : Additional information to include in thew new file header\n\n* `JsDiff.applyPatch(oldStr, diffStr)` - applies a unified diff patch.\n\n    Return a string containing new version of provided data.\n\n* `convertChangesToXML(changes)` - converts a list of changes to a serialized XML format\n\n### Change Objects\nMany of the methods above return change objects. These objects are consist of the following fields:\n\n* `value`: Text content\n* `added`: True if the value was inserted into the new string\n* `removed`: True of the value was removed from the old string\n\nNote that some cases may omit a particular flag field. Comparison on the flag fields should always be done in a truthy or falsy manner.\n\n## Examples\n\nBasic example in Node\n\n```js\nrequire(\'colors\')\nvar jsdiff = require(\'diff\');\n\nvar one = \'beep boop\';\nvar other = \'beep boob blah\';\n\nvar diff = jsdiff.diffChars(one, other);\n\ndiff.forEach(function(part){\n  // green for additions, red for deletions\n  // grey for common parts\n  var color = part.added ? \'green\' :\n    part.removed ? \'red\' : \'grey\';\n  process.stderr.write(part.value[color]);\n});\n\nconsole.log()\n```\nRunning the above program should yield\n\n<img src="images/node_example.png" alt="Node Example">\n\nBasic example in a web page\n\n```html\n<pre id="display"></pre>\n<script src="diff.js"></script>\n<script>\nvar one = \'beep boop\';\nvar other = \'beep boob blah\';\n\nvar diff = JsDiff.diffChars(one, other);\n\ndiff.forEach(function(part){\n  // green for additions, red for deletions\n  // grey for common parts\n  var color = part.added ? \'green\' :\n    part.removed ? \'red\' : \'grey\';\n  var span = document.createElement(\'span\');\n  span.style.color = color;\n  span.appendChild(document\n    .createTextNode(part.value));\n  display.appendChild(span);\n});\n</script>\n```\n\nOpen the above .html file in a browser and you should see\n\n<img src="images/web_example.png" alt="Node Example">\n\n**[Full online demo](http://kpdecker.github.com/jsdiff)**\n\n## License\n\nSoftware License Agreement (BSD License)\n\nCopyright (c) 2009-2011, Kevin Decker kpdecker@gmail.com\n\nAll rights reserved.\n\nRedistribution and use of this software in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above\n  copyright notice, this list of conditions and the\n  following disclaimer.\n\n* Redistributions in binary form must reproduce the above\n  copyright notice, this list of conditions and the\n  following disclaimer in the documentation and/or other\n  materials provided with the distribution.\n\n* Neither the name of Kevin Decker nor the names of its\n  contributors may be used to endorse or promote products\n  derived from this software without specific prior\n  written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR\nIMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\nIN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\nOF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/kpdecker/jsdiff/trend.png)](https://bitdeli.com/free "Bitdeli Badge")\n\n',
4007 silly resolved     readmeFilename: 'README.md',
4007 silly resolved     homepage: 'https://github.com/kpdecker/jsdiff',
4007 silly resolved     _id: 'diff@1.0.8',
4007 silly resolved     dist: { shasum: '5d7a6a3a63e2f07bd739bc8ed6c7a80cfd7fae7c' },
4007 silly resolved     _from: 'diff@~1.0.8',
4007 silly resolved     _resolved: 'https://registry.npmjs.org/diff/-/diff-1.0.8.tgz' },
4007 silly resolved   { name: 'autoprefixer',
4007 silly resolved     version: '1.0.20140103',
4007 silly resolved     description: 'Parse CSS and add vendor prefixes to CSS rules using values from the Can I Use website',
4007 silly resolved     keywords: [ 'css', 'prefix', 'postprocessor', 'postcss' ],
4007 silly resolved     author: { name: 'Andrey Sitnik', email: 'andrey@sitnik.ru' },
4007 silly resolved     license: 'MIT',
4007 silly resolved     repository: { type: 'git', url: 'https://github.com/ai/autoprefixer.git' },
4007 silly resolved     dependencies: { postcss: '~0.2', 'fs-extra': '~0.8.1' },
4007 silly resolved     devDependencies:
4007 silly resolved      { 'coffee-script': '1.6.3',
4007 silly resolved        browserify: '3.18.0',
4007 silly resolved        should: '2.1.1',
4007 silly resolved        stylus: '0.41.3',
4007 silly resolved        mocha: '1.16.2',
4007 silly resolved        glob: '3.2.7',
4007 silly resolved        nib: '1.0.1' },
4007 silly resolved     bin: { autoprefixer: './bin/autoprefixer' },
4007 silly resolved     main: 'lib/autoprefixer',
4007 silly resolved     scripts: { test: 'mocha' },
4007 silly resolved     readme: '# Autoprefixer\n\n<img align="right" width="94" src="http://ai.github.io/autoprefixer/logo.svg" title="Autoprefixer logo by Anton Lovchikov">\n\nParse CSS and add vendor prefixes to CSS rules using values\nfrom the [Can I Use](http://caniuse.com/).\n\nWrite your CSS rules without vendor prefixes (in fact, forget about them\nentirely):\n\n```css\n:fullscreen a {\n    transition: transform 1s\n}\n```\n\nProcess your CSS by Autoprefixer:\n\n```js\nvar prefixed = autoprefixer.process(css).css;\n```\n\nIt will use the data on current browser popularity and properties support\nto apply prefixes for you:\n\n```css\n:-webkit-full-screen a {\n    -webkit-transition: -webkit-transform 1s;\n    transition: transform 1s\n}\n:-moz-full-screen a {\n    transition: transform 1s\n}\n:-ms-fullscreen a {\n    transition: transform 1s\n}\n:fullscreen a {\n    -webkit-transition: -webkit-transform 1s;\n    transition: transform 1s\n}\n```\n\nTwitter account for news and releases:\n[@autoprefixer](https://twitter.com/autoprefixer).\n\nSponsored by [Evil Martians](http://evilmartians.com/).\nBased on [PostCSS](https://github.com/ai/postcss) framework.\n\n## Features\n\n### Forget about prefixes\n\nThe best tool is a tool you can\'t see and one that does the work for you.\nThis is the main idea behind Autoprefixer.\n\nAutoprefixer interface is simple: just forget about vendor prefixes\nand write normal CSS according to latest W3C specs. You don’t need\na special language (like Sass) or special mixins.\n\nBecause Autoprefixer is a postprocessor for CSS,\nyou can also use it with preprocessors, such as Sass, Stylus or LESS.\n\n### Actual data from Can I Use\n\nAutoprefixer uses the most recent data from [Can I Use](http://caniuse.com/),\nunderstands which browsers are actual and popular and adds only the necessary\nvendor prefixes.\n\nIt also cleans your CSS from old prefixes (like prefixed `border-radius`,\nproduced by many CSS libraries):\n\n```css\na {\n    -webkit-border-radius: 5px;\n    border-radius: 5px\n}\n```\n\ncompiles to:\n\n```css\na {\n    border-radius: 5px\n}\n```\n\nNote, that Autoprefixer doesn’t load Can I Use data every time. This data\nis already packed to release, so with same Autoprefixer version you always will\nhave same output result.\n\n### Flexbox, Gradients, etc.\n\nFlexbox or gradients have different syntaxes in different browsers\n(sometimes you need to recalculate angles, sometimes you need 2 old properties\ninstead of new one), but Autoprefixer hides this from you.\n\nJust code by latest W3C specs and Autoprefixer will produce the code\nfor old browsers:\n\n```css\na {\n    display: flex;\n}\n```\n\ncompiles to:\n\n```css\na {\n    display: -webkit-box;\n    display: -webkit-flex;\n    display: -moz-box;\n    display: -ms-flexbox;\n    display: flex\n}\n```\n\nAutoprefixer has [22 special hack] to fix browser’s differences.\n\n[22 special hack]: https://github.com/ai/autoprefixer/tree/master/lib/hacks\n\n### Fast\n\nAutoprefixer is about 16 times faster than Compass and 8 times faster\nthan Stylus.\n\nOn a Core i7 with 10 GB of RAM and SSD, benchmark with GitHub styles is:\n\n```\n~/Dev/autoprefixer$ ./node_modules/.bin/cake bench\nLoad GitHub styles\nAutoprefixer: 489 ms\nCompass:      4156 ms (8.5 times slower)\nStylus:       4165 ms (8.5 times slower)\n```\n\nUnlike [-prefix-free](http://leaverou.github.io/prefixfree/), Autoprefixer\ncompiles CSS once on deploy and doesn’t hit client-side performance.\n\n## Browsers\n\nYou can specify the browsers you want to target in your project:\n\n```js\nautoprefixer("last 1 version", "> 1%", "explorer 7").process(css).css;\n```\n\n* `last 2 versions` is last versions for each browser. Like “last 2 versions”\n  [strategy](http://support.google.com/a/bin/answer.py?answer=33864) in\n  Google.\n* `last 2 chrome versions` is last versions of specify browser.\n* `> 5%` is browser versions, selected by global usage statistics.\n* `firefox > 20` and `firefox >= 20` is Firefox versions newer, that 20.\n* `none` don’t set any browsers to clean CSS from any vendor prefixes.\n* You can also set browsers directly.\n\nBlackberry and stock Android browsers will not be used in `last n versions`.\nYou can add them by name:\n\n```js\nautoprefixer("last 1 version", "blackberry 10", "android 4").process(css).css;\n```\n\nBrowsers names (case insensitive):\n* `android` for old Android stock browser.\n* `blackberry` or `bb` for Blackberry browser.\n* `chrome` for Google Chrome.\n* `firefox` or `ff` for Mozilla Firefox.\n* `explorer` or `ie` for Internet Explorer.\n* `ios` for iOS Safari.\n* `opera` for Opera.\n* `safari` for desktop Safari.\n\nBy default, Autoprefixer uses `> 1%, last 2 versions, firefox 24, opera 12.1`:\n* Firefox 24 is a latest [ESR].\n* Opera 12.1 will be in list until Opera supports non-Blink 12.x branch.\n\n[ESR]: http://www.mozilla.org/en/firefox/organizations/faq/\n\n## Source Map\n\nAutoprefixer will generate source map, if you set `map` option to `true`.\n\nYou must set input and output CSS files paths (by `from` and `to` options)\nto generate correct map.\n\n```js\nvar result = autoprefixer.process(css, {\n    map:  true,\n    from: \'main.css\',\n    to:   \'main.out.css\'\n});\n\nresult.css //=> Prefixed CSS\nresult.map //=> Source map content\n\nfs.writeFileSync(\'main.out.css.map\', result.map);\n```\n\nAutoprefixer can also modify previous source map (for example, from Sass\ncompilation). Just set original source map content (as string or JS object)\nto `map` option:\n\n```js\nvar result = autoprefixer.process(css, {\n    map:   fs.readFileSync(\'main.sass.css.map\'),\n    from: \'main.sass.css\',\n    to:   \'main.min.css\'\n});\n\nresult.map //=> Source map from main.sass to main.min.css\n```\n\n## Debug\n\nYou can check which browsers are selected and which properties will be prefixed:\n\n```js\ninfo = autoprefixer("last 1 version").info();\nconsole.log(info);\n```\n\nOr by CLI command:\n\n```sh\nautoprefixer -i\n```\n\n## FAQ\n\n### Does it add polyfills for old browsers?\n\nNo. Autoprefixer only adds prefixes, not polyfills. There are two reasons:\n\n1. Prefixes and polyfills are very different and need a different API.\n   Two separate libraries would be much better.\n2. Most of IE polyfills are very bad for client perfomance. They use slow hacks\n   and old IEs is mostly used on old hardware. Most of CSS 3 features that is\n   only used for styling should be ignored in old IEs as it is recommended in\n   Graceful Degradation.\n\n### Why Autoprefixer doesn’t add prefixes to `border-radius`?\n\nDevelopers are often surprised by how few prefixes are required today.\nIf Autoprefixer doesn’t add prefixes to your CSS, check if they’re still\nrequired on [Can I Use](http://caniuse.com/).\n\nIf a prefix is required, but Autoprefixer doesn’t add it or adds it\nincorrectly, please\n[report an issue](https://github.com/ai/autoprefixer/issues/new)\nand include your source CSS and expected output.\n\n### Why Autoprefixer doesn’t support `appearance`?\n\nInstead of `transition`, `appearance` property is not a part of\nany specification. So there is no `appearance`, only `-moz-appearance`\nand `-webkit-appearance`. Quote from [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/-moz-appearance):\n\n> Do not use this property on Web sites: not only is it non-standard, but its\n> behavior changes from one browser to another. Even the keyword `none` does not\n> have the same behavior on each form element across different browsers, and\n> some do not support it at all.\n\n## Usage\n\n### Grunt\n\nYou can use the\n[grunt-autoprefixer](https://github.com/nDmitry/grunt-autoprefixer)\nplugin for Grunt. Install the npm package and add it to Gruntfile:\n\n```js\ngrunt.loadNpmTasks(\'grunt-autoprefixer\');\n```\n\n### Compass\n\nIf you use Compass binary to compile your styles, you can easily integrate\nAutoprefixer with it. Install `autoprefixer-rails` gem:\n\n```\ngem install autoprefixer-rails\n```\n\nand add post-compile hook to `config.rb`:\n\n```ruby\nrequire \'autoprefixer-rails\'\nrequire \'csso\'\n\non_stylesheet_saved do |file|\n  css = File.read(file)\n  File.open(file, \'w\') do |io|\n    io << AutoprefixerRails.compile(css)\n  end\nend\n```\n\nYou can set browsers array as second argument in `AutoprefixerRails.compile`.\n\n### Stylus\n\nIf you use Stylus CLI, you can add Autoprefixer by\n[autoprefixer-stylus](https://github.com/jenius/autoprefixer-stylus) plugin.\n\nJust install npm package and use it in `-u` option:\n\n```\nstylus -u autoprefixer-stylus file.css\n```\n\n### Ruby on Rails\n\nAdd [autoprefixer-rails](https://github.com/ai/autoprefixer-rails) gem\nto `Gemfile` and write CSS in a usual way:\n\n```ruby\ngem "autoprefixer-rails"\n```\n\n### Ruby\n\nYou can integrate Autoprefixer into your Sprockets environment\nby `autoprefixer-rails` gem:\n\n```ruby\nAutoprefixerRails.install(sprockets_env)\n```\n\nor process CSS from plain Ruby:\n\n```ruby\nprefixed = AutoprefixerRails.compile(css)\n```\n\n### Prepros\n\nIf you want to build your assets in GUI, try\n[Prepros](http://alphapixels.com/prepros/). Just set “Auto Prefix CSS”\n[checkbox](https://f.cloud.github.com/assets/3478693/930798/faa29892-0016-11e3-8901-87850de7aed2.jpg)\nin right panel.\n\n<img src="http://alphapixels.com/prepros/static/img/prepros.jpg" width="550" height="340" />\n\n### Mincer\n\nTo use Autoprefixer in [Mincer](https://github.com/nodeca/mincer),\ninstall `autoprefixer` npm package and enable it:\n\n```js\nenvironment.enable(\'autoprefixer\');\n```\n\n### Middleman\n\nAdd [middleman-autoprefixer](https://github.com/porada/middleman-autoprefixer)\ngem to `Gemfile`:\n\n```ruby\ngem "middleman-autoprefixer"\n```\n\nand activate the extension in your project’s `config.rb`:\n\n```ruby\nactivate :autoprefixer\n```\n\n### Node.js\n\nUse `autoprefixer` npm package:\n\n```js\nvar autoprefixer = require(\'autoprefixer\');\nvar css          = \'a { transition: transform 1s }\';\nvar prefixed     = autoprefixer.process(css).css;\n```\n\n### PHP\n\nYou can use Autoprefixer in PHP by\n[autoprefixer-php](https://github.com/vladkens/autoprefixer-php) library:\n\n\n```php\n$autoprefixer = new Autoprefixer();\n$css          = \'a { transition: transform 1s }\';\n$prefixed     = $autoprefixer->compile($css);\n```\n\n### JavaScript\n\nYou can use Autoprefixer in the browser or a non-Node.js runtime\nwith [standalone version](https://raw.github.com/ai/autoprefixer-rails/master/vendor/autoprefixer.js).\n\n### PostCSS\n\nAutoprefixer can be also used as a [PostCSS](https://github.com/ai/postcss)\nprocessor, so you can combine it with other processors and parse CSS only once:\n\n```js\npostcss().\n    use( autoprefixer([\'> 1%\', \'opera 12.5\']).postcss ).\n    use( compressor ).\n    process(css);\n```\n\n### Sublime Text\n\nYou can process your styles directly in Sublime Text with the\n[sublime-autoprefixer](https://github.com/sindresorhus/sublime-autoprefixer)\nplugin.\n\n### Brackets\n\nStyles can processed automatically in Brackets using the\n[brackets-autoprefixer](https://github.com/mikaeljorhult/brackets-autoprefixer)\nextension.\n\n\n### Others\n\nYou can use the `autoprefixer` binary to process CSS files using\nany assets manager:\n\n```\nsudo npm install --global autoprefixer\nautoprefixer *.css\n```\n\nSee `autoprefixer -h` for help.\n\n## In-package Update\n\nIt’s highly recommended that you always use the latest version of Autoprefixer.\nIf by any chance you or your company are not able to update the package\n(e.g. in case of long test periods before any library updates), you can still\nupdate the very browser data that Autoprefixer fetches from Can I Use:\n\n```\nautoprefixer --update\n```\n\nNote that the in-package update doesn’t get any code fixes nor the\nimplementation of new features. It just keeps the browser popularity and\nsupport data up to date, and adds new browser versions.\n',
4007 silly resolved     readmeFilename: 'README.md',
4007 silly resolved     bugs: { url: 'https://github.com/ai/autoprefixer/issues' },
4007 silly resolved     homepage: 'https://github.com/ai/autoprefixer',
4007 silly resolved     _id: 'autoprefixer@1.0.20140103',
4007 silly resolved     dist: { shasum: 'a94e6b80ed4aef829841e391c421401a83ef8ede' },
4007 silly resolved     _from: 'autoprefixer@~1.0.20131222',
4007 silly resolved     _resolved: 'https://registry.npmjs.org/autoprefixer/-/autoprefixer-1.0.20140103.tgz' } ]
4008 info install diff@1.0.8 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer
4009 info install autoprefixer@1.0.20140103 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer
4010 info installOne diff@1.0.8
4011 info installOne autoprefixer@1.0.20140103
4012 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\diff unbuild
4013 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer unbuild
4014 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\diff\1.0.8\package.tgz
4015 silly lockFile 73f9b6f6-t-autoprefixer-node-modules-diff tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\diff
4016 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\diff C:\Users\Gaston\AppData\Roaming\npm-cache\73f9b6f6-t-autoprefixer-node-modules-diff.lock
4017 silly lockFile d644be8b-npm-cache-diff-1-0-8-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\diff\1.0.8\package.tgz
4018 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\diff\1.0.8\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\d644be8b-npm-cache-diff-1-0-8-package-tgz.lock
4019 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\autoprefixer\1.0.20140103\package.tgz
4020 silly lockFile bb4ff531-efixer-node-modules-autoprefixer tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer
4021 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer C:\Users\Gaston\AppData\Roaming\npm-cache\bb4ff531-efixer-node-modules-autoprefixer.lock
4022 silly lockFile d75318fe-refixer-1-0-20140103-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\autoprefixer\1.0.20140103\package.tgz
4023 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\autoprefixer\1.0.20140103\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\d75318fe-refixer-1-0-20140103-package-tgz.lock
4024 silly gunzTarPerm modes [ '755', '644' ]
4025 silly gunzTarPerm modes [ '755', '644' ]
4026 silly gunzTarPerm extractEntry package.json
4027 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
4028 silly gunzTarPerm extractEntry package.json
4029 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
4030 silly gunzTarPerm extractEntry README.md
4031 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
4032 silly gunzTarPerm extractEntry diff.js
4033 silly gunzTarPerm modified mode [ 'diff.js', 438, 420 ]
4034 silly gunzTarPerm extractEntry README.md
4035 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
4036 silly gunzTarPerm extractEntry LICENSE
4037 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
4038 silly gunzTarPerm extractEntry bin/autoprefixer
4039 silly gunzTarPerm modified mode [ 'bin/autoprefixer', 438, 420 ]
4040 silly gunzTarPerm extractEntry ChangeLog.md
4041 silly gunzTarPerm modified mode [ 'ChangeLog.md', 438, 420 ]
4042 silly gunzTarPerm extractEntry data/browsers.js
4043 silly gunzTarPerm modified mode [ 'data/browsers.js', 438, 420 ]
4044 silly gunzTarPerm extractEntry data/prefixes.js
4045 silly gunzTarPerm modified mode [ 'data/prefixes.js', 438, 420 ]
4046 silly gunzTarPerm extractEntry lib/autoprefixer.js
4047 silly gunzTarPerm modified mode [ 'lib/autoprefixer.js', 438, 420 ]
4048 silly gunzTarPerm extractEntry lib/declaration.js
4049 silly gunzTarPerm modified mode [ 'lib/declaration.js', 438, 420 ]
4050 silly gunzTarPerm extractEntry lib/utils.js
4051 silly gunzTarPerm modified mode [ 'lib/utils.js', 438, 420 ]
4052 silly gunzTarPerm extractEntry lib/info.js
4053 silly gunzTarPerm modified mode [ 'lib/info.js', 438, 420 ]
4054 silly gunzTarPerm extractEntry lib/keyframes.js
4055 silly gunzTarPerm modified mode [ 'lib/keyframes.js', 438, 420 ]
4056 silly gunzTarPerm extractEntry lib/browsers.js
4057 silly gunzTarPerm modified mode [ 'lib/browsers.js', 438, 420 ]
4058 silly gunzTarPerm extractEntry lib/prefixer.js
4059 silly gunzTarPerm modified mode [ 'lib/prefixer.js', 438, 420 ]
4060 silly gunzTarPerm extractEntry lib/prefixes.js
4061 silly gunzTarPerm modified mode [ 'lib/prefixes.js', 438, 420 ]
4062 silly gunzTarPerm extractEntry lib/processor.js
4063 silly gunzTarPerm modified mode [ 'lib/processor.js', 438, 420 ]
4064 silly gunzTarPerm extractEntry lib/selector.js
4065 silly gunzTarPerm modified mode [ 'lib/selector.js', 438, 420 ]
4066 silly gunzTarPerm extractEntry lib/updater.js
4067 silly gunzTarPerm modified mode [ 'lib/updater.js', 438, 420 ]
4068 silly gunzTarPerm extractEntry lib/binary.js
4069 silly gunzTarPerm modified mode [ 'lib/binary.js', 438, 420 ]
4070 silly gunzTarPerm extractEntry lib/value.js
4071 silly gunzTarPerm modified mode [ 'lib/value.js', 438, 420 ]
4072 silly gunzTarPerm extractEntry lib/old-value.js
4073 silly gunzTarPerm modified mode [ 'lib/old-value.js', 438, 420 ]
4074 silly gunzTarPerm extractEntry lib/hacks/align-content.js
4075 silly gunzTarPerm modified mode [ 'lib/hacks/align-content.js', 438, 420 ]
4076 silly gunzTarPerm extractEntry lib/hacks/filter.js
4077 silly gunzTarPerm modified mode [ 'lib/hacks/filter.js', 438, 420 ]
4078 silly gunzTarPerm extractEntry lib/hacks/flex-basis.js
4079 silly gunzTarPerm modified mode [ 'lib/hacks/flex-basis.js', 438, 420 ]
4080 silly gunzTarPerm extractEntry lib/hacks/flex-direction.js
4081 silly gunzTarPerm modified mode [ 'lib/hacks/flex-direction.js', 438, 420 ]
4082 silly gunzTarPerm extractEntry lib/hacks/flex-flow.js
4083 silly gunzTarPerm modified mode [ 'lib/hacks/flex-flow.js', 438, 420 ]
4084 silly gunzTarPerm extractEntry lib/hacks/fill-available.js
4085 silly gunzTarPerm modified mode [ 'lib/hacks/fill-available.js', 438, 420 ]
4086 silly gunzTarPerm extractEntry lib/hacks/flex-shrink.js
4087 silly gunzTarPerm modified mode [ 'lib/hacks/flex-shrink.js', 438, 420 ]
4088 silly gunzTarPerm extractEntry lib/hacks/flex-spec.js
4089 silly gunzTarPerm modified mode [ 'lib/hacks/flex-spec.js', 438, 420 ]
4090 silly gunzTarPerm extractEntry lib/hacks/flex-wrap.js
4091 silly gunzTarPerm modified mode [ 'lib/hacks/flex-wrap.js', 438, 420 ]
4092 silly gunzTarPerm extractEntry lib/hacks/flex.js
4093 silly gunzTarPerm modified mode [ 'lib/hacks/flex.js', 438, 420 ]
4094 silly gunzTarPerm extractEntry lib/hacks/fullscreen.js
4095 silly gunzTarPerm modified mode [ 'lib/hacks/fullscreen.js', 438, 420 ]
4096 silly gunzTarPerm extractEntry lib/hacks/display-flex.js
4097 silly gunzTarPerm modified mode [ 'lib/hacks/display-flex.js', 438, 420 ]
4098 silly gunzTarPerm extractEntry lib/hacks/gradient.js
4099 silly gunzTarPerm modified mode [ 'lib/hacks/gradient.js', 438, 420 ]
4100 silly gunzTarPerm extractEntry lib/hacks/border-radius.js
4101 silly gunzTarPerm modified mode [ 'lib/hacks/border-radius.js', 438, 420 ]
4102 silly gunzTarPerm extractEntry lib/hacks/justify-content.js
4103 silly gunzTarPerm modified mode [ 'lib/hacks/justify-content.js', 438, 420 ]
4104 silly gunzTarPerm extractEntry lib/hacks/border-image.js
4105 silly gunzTarPerm modified mode [ 'lib/hacks/border-image.js', 438, 420 ]
4106 silly gunzTarPerm extractEntry lib/hacks/order.js
4107 silly gunzTarPerm modified mode [ 'lib/hacks/order.js', 438, 420 ]
4108 silly gunzTarPerm extractEntry lib/hacks/align-self.js
4109 silly gunzTarPerm modified mode [ 'lib/hacks/align-self.js', 438, 420 ]
4110 silly gunzTarPerm extractEntry lib/hacks/placeholder.js
4111 silly gunzTarPerm modified mode [ 'lib/hacks/placeholder.js', 438, 420 ]
4112 silly gunzTarPerm extractEntry lib/hacks/align-items.js
4113 silly gunzTarPerm modified mode [ 'lib/hacks/align-items.js', 438, 420 ]
4114 silly gunzTarPerm extractEntry lib/hacks/transform.js
4115 silly gunzTarPerm modified mode [ 'lib/hacks/transform.js', 438, 420 ]
4116 silly gunzTarPerm extractEntry lib/hacks/flex-grow.js
4117 silly gunzTarPerm modified mode [ 'lib/hacks/flex-grow.js', 438, 420 ]
4118 silly gunzTarPerm extractEntry updaters/browsers.js
4119 silly gunzTarPerm modified mode [ 'updaters/browsers.js', 438, 420 ]
4120 silly gunzTarPerm extractEntry updaters/prefixes.js
4121 silly gunzTarPerm modified mode [ 'updaters/prefixes.js', 438, 420 ]
4122 silly lockFile 73f9b6f6-t-autoprefixer-node-modules-diff tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\diff
4123 silly lockFile 73f9b6f6-t-autoprefixer-node-modules-diff tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\diff
4124 silly lockFile d644be8b-npm-cache-diff-1-0-8-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\diff\1.0.8\package.tgz
4125 silly lockFile d644be8b-npm-cache-diff-1-0-8-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\diff\1.0.8\package.tgz
4126 info preinstall diff@1.0.8
4127 verbose readDependencies using package.json deps
4128 verbose readDependencies using package.json deps
4129 silly resolved []
4130 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\diff
4131 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\diff
4132 verbose linkStuff [ false,
4132 verbose linkStuff   false,
4132 verbose linkStuff   false,
4132 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-autoprefixer\\node_modules' ]
4133 info linkStuff diff@1.0.8
4134 verbose linkBins diff@1.0.8
4135 verbose linkMans diff@1.0.8
4136 verbose rebuildBundles diff@1.0.8
4137 info install diff@1.0.8
4138 info postinstall diff@1.0.8
4139 silly lockFile bb4ff531-efixer-node-modules-autoprefixer tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer
4140 silly lockFile bb4ff531-efixer-node-modules-autoprefixer tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer
4141 silly lockFile d75318fe-refixer-1-0-20140103-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\autoprefixer\1.0.20140103\package.tgz
4142 silly lockFile d75318fe-refixer-1-0-20140103-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\autoprefixer\1.0.20140103\package.tgz
4143 info preinstall autoprefixer@1.0.20140103
4144 verbose readDependencies using package.json deps
4145 verbose readDependencies using package.json deps
4146 verbose cache add [ 'postcss@~0.2', null ]
4147 verbose cache add name=undefined spec="postcss@~0.2" args=["postcss@~0.2",null]
4148 verbose parsed url { protocol: null,
4148 verbose parsed url   slashes: null,
4148 verbose parsed url   auth: null,
4148 verbose parsed url   host: null,
4148 verbose parsed url   port: null,
4148 verbose parsed url   hostname: null,
4148 verbose parsed url   hash: null,
4148 verbose parsed url   search: null,
4148 verbose parsed url   query: null,
4148 verbose parsed url   pathname: 'postcss@~0.2',
4148 verbose parsed url   path: 'postcss@~0.2',
4148 verbose parsed url   href: 'postcss@~0.2' }
4149 verbose cache add name="postcss" spec="~0.2" args=["postcss","~0.2"]
4150 verbose parsed url { protocol: null,
4150 verbose parsed url   slashes: null,
4150 verbose parsed url   auth: null,
4150 verbose parsed url   host: null,
4150 verbose parsed url   port: null,
4150 verbose parsed url   hostname: null,
4150 verbose parsed url   hash: null,
4150 verbose parsed url   search: null,
4150 verbose parsed url   query: null,
4150 verbose parsed url   pathname: '~0.2',
4150 verbose parsed url   path: '~0.2',
4150 verbose parsed url   href: '~0.2' }
4151 verbose addNamed [ 'postcss', '~0.2' ]
4152 verbose addNamed [ null, '>=0.2.0-0 <0.3.0-0' ]
4153 silly lockFile b7ee9c5c-postcss-0-2 postcss@~0.2
4154 verbose lock postcss@~0.2 C:\Users\Gaston\AppData\Roaming\npm-cache\b7ee9c5c-postcss-0-2.lock
4155 verbose cache add [ 'fs-extra@~0.8.1', null ]
4156 verbose cache add name=undefined spec="fs-extra@~0.8.1" args=["fs-extra@~0.8.1",null]
4157 verbose parsed url { protocol: null,
4157 verbose parsed url   slashes: null,
4157 verbose parsed url   auth: null,
4157 verbose parsed url   host: null,
4157 verbose parsed url   port: null,
4157 verbose parsed url   hostname: null,
4157 verbose parsed url   hash: null,
4157 verbose parsed url   search: null,
4157 verbose parsed url   query: null,
4157 verbose parsed url   pathname: 'fs-extra@~0.8.1',
4157 verbose parsed url   path: 'fs-extra@~0.8.1',
4157 verbose parsed url   href: 'fs-extra@~0.8.1' }
4158 verbose cache add name="fs-extra" spec="~0.8.1" args=["fs-extra","~0.8.1"]
4159 verbose parsed url { protocol: null,
4159 verbose parsed url   slashes: null,
4159 verbose parsed url   auth: null,
4159 verbose parsed url   host: null,
4159 verbose parsed url   port: null,
4159 verbose parsed url   hostname: null,
4159 verbose parsed url   hash: null,
4159 verbose parsed url   search: null,
4159 verbose parsed url   query: null,
4159 verbose parsed url   pathname: '~0.8.1',
4159 verbose parsed url   path: '~0.8.1',
4159 verbose parsed url   href: '~0.8.1' }
4160 verbose addNamed [ 'fs-extra', '~0.8.1' ]
4161 verbose addNamed [ null, '>=0.8.1-0 <0.9.0-0' ]
4162 silly lockFile d49a93e7-fs-extra-0-8-1 fs-extra@~0.8.1
4163 verbose lock fs-extra@~0.8.1 C:\Users\Gaston\AppData\Roaming\npm-cache\d49a93e7-fs-extra-0-8-1.lock
4164 silly addNameRange { name: 'postcss', range: '>=0.2.0-0 <0.3.0-0', hasData: false }
4165 verbose url raw postcss
4166 verbose url resolving [ 'https://registry.npmjs.org/', './postcss' ]
4167 verbose url resolved https://registry.npmjs.org/postcss
4168 info trying registry request attempt 1 at 16:37:50
4169 http GET https://registry.npmjs.org/postcss
4170 silly addNameRange { name: 'fs-extra', range: '>=0.8.1-0 <0.9.0-0', hasData: false }
4171 verbose url raw fs-extra
4172 verbose url resolving [ 'https://registry.npmjs.org/', './fs-extra' ]
4173 verbose url resolved https://registry.npmjs.org/fs-extra
4174 info trying registry request attempt 1 at 16:37:50
4175 http GET https://registry.npmjs.org/fs-extra
4176 http 200 https://registry.npmjs.org/grunt-lib-contrib/-/grunt-lib-contrib-0.6.1.tgz
4177 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777869448-0.5423765545710921\tmp.tgz
4178 silly lockFile d85a2313-69448-0-5423765545710921-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777869448-0.5423765545710921\package
4179 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777869448-0.5423765545710921\package C:\Users\Gaston\AppData\Roaming\npm-cache\d85a2313-69448-0-5423765545710921-package.lock
4180 silly lockFile 9378fdb9-69448-0-5423765545710921-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777869448-0.5423765545710921\tmp.tgz
4181 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777869448-0.5423765545710921\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\9378fdb9-69448-0-5423765545710921-tmp-tgz.lock
4182 silly gunzTarPerm modes [ '755', '644' ]
4183 silly gunzTarPerm extractEntry package.json
4184 silly gunzTarPerm extractEntry .npmignore
4185 silly gunzTarPerm extractEntry README.md
4186 silly gunzTarPerm extractEntry Gruntfile.js
4187 silly gunzTarPerm extractEntry AUTHORS
4188 silly gunzTarPerm extractEntry CHANGELOG
4189 silly gunzTarPerm extractEntry .jshintrc
4190 silly gunzTarPerm extractEntry LICENSE-MIT
4191 silly gunzTarPerm extractEntry .gitattributes
4192 silly gunzTarPerm extractEntry lib/contrib.js
4193 silly gunzTarPerm extractEntry .travis.yml
4194 silly gunzTarPerm extractEntry test/lib_test.js
4195 silly lockFile d85a2313-69448-0-5423765545710921-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777869448-0.5423765545710921\package
4196 silly lockFile d85a2313-69448-0-5423765545710921-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777869448-0.5423765545710921\package
4197 silly lockFile 9378fdb9-69448-0-5423765545710921-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777869448-0.5423765545710921\tmp.tgz
4198 silly lockFile 9378fdb9-69448-0-5423765545710921-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777869448-0.5423765545710921\tmp.tgz
4199 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\grunt-lib-contrib\\0.6.1\\package.tgz',
4199 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388777869448-0.5423765545710921\\package' ]
4200 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\grunt-lib-contrib\0.6.1\package.tgz
4201 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777869448-0.5423765545710921\package
4202 silly lockFile d85a2313-69448-0-5423765545710921-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777869448-0.5423765545710921\package
4203 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777869448-0.5423765545710921\package C:\Users\Gaston\AppData\Roaming\npm-cache\d85a2313-69448-0-5423765545710921-package.lock
4204 silly lockFile a27c0556-nt-lib-contrib-0-6-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\grunt-lib-contrib\0.6.1\package.tgz
4205 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\grunt-lib-contrib\0.6.1\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\a27c0556-nt-lib-contrib-0-6-1-package-tgz.lock
4206 silly lockFile d85a2313-69448-0-5423765545710921-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777869448-0.5423765545710921\package
4207 silly lockFile d85a2313-69448-0-5423765545710921-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777869448-0.5423765545710921\package
4208 silly lockFile a27c0556-nt-lib-contrib-0-6-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\grunt-lib-contrib\0.6.1\package.tgz
4209 silly lockFile a27c0556-nt-lib-contrib-0-6-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\grunt-lib-contrib\0.6.1\package.tgz
4210 silly lockFile 6bd71e73--grunt-lib-contrib-0-6-1-package C:\Users\Gaston\AppData\Roaming\npm-cache\grunt-lib-contrib\0.6.1\package
4211 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\grunt-lib-contrib\0.6.1\package C:\Users\Gaston\AppData\Roaming\npm-cache\6bd71e73--grunt-lib-contrib-0-6-1-package.lock
4212 silly lockFile 6bd71e73--grunt-lib-contrib-0-6-1-package C:\Users\Gaston\AppData\Roaming\npm-cache\grunt-lib-contrib\0.6.1\package
4213 silly lockFile 6bd71e73--grunt-lib-contrib-0-6-1-package C:\Users\Gaston\AppData\Roaming\npm-cache\grunt-lib-contrib\0.6.1\package
4214 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\grunt-lib-contrib\0.6.1\package.tgz
4215 silly lockFile 982c5901--grunt-lib-contrib-0-6-1-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\grunt-lib-contrib\0.6.1\package
4216 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\grunt-lib-contrib\0.6.1\package C:\Users\Gaston\AppData\Roaming\npm-cache\982c5901--grunt-lib-contrib-0-6-1-package.lock
4217 silly lockFile a27c0556-nt-lib-contrib-0-6-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\grunt-lib-contrib\0.6.1\package.tgz
4218 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\grunt-lib-contrib\0.6.1\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\a27c0556-nt-lib-contrib-0-6-1-package-tgz.lock
4219 silly gunzTarPerm modes [ '755', '644' ]
4220 silly gunzTarPerm extractEntry package.json
4221 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
4222 silly gunzTarPerm extractEntry .npmignore
4223 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
4224 silly gunzTarPerm extractEntry README.md
4225 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
4226 silly gunzTarPerm extractEntry Gruntfile.js
4227 silly gunzTarPerm modified mode [ 'Gruntfile.js', 438, 420 ]
4228 silly gunzTarPerm extractEntry AUTHORS
4229 silly gunzTarPerm modified mode [ 'AUTHORS', 438, 420 ]
4230 silly gunzTarPerm extractEntry CHANGELOG
4231 silly gunzTarPerm modified mode [ 'CHANGELOG', 438, 420 ]
4232 silly gunzTarPerm extractEntry .jshintrc
4233 silly gunzTarPerm modified mode [ '.jshintrc', 438, 420 ]
4234 silly gunzTarPerm extractEntry lib/contrib.js
4235 silly gunzTarPerm modified mode [ 'lib/contrib.js', 438, 420 ]
4236 silly gunzTarPerm extractEntry LICENSE-MIT
4237 silly gunzTarPerm modified mode [ 'LICENSE-MIT', 438, 420 ]
4238 silly gunzTarPerm extractEntry .gitattributes
4239 silly gunzTarPerm modified mode [ '.gitattributes', 438, 420 ]
4240 silly gunzTarPerm extractEntry .travis.yml
4241 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]
4242 silly gunzTarPerm extractEntry test/lib_test.js
4243 silly gunzTarPerm modified mode [ 'test/lib_test.js', 438, 420 ]
4244 silly lockFile 982c5901--grunt-lib-contrib-0-6-1-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\grunt-lib-contrib\0.6.1\package
4245 silly lockFile 982c5901--grunt-lib-contrib-0-6-1-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\grunt-lib-contrib\0.6.1\package
4246 silly lockFile a27c0556-nt-lib-contrib-0-6-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\grunt-lib-contrib\0.6.1\package.tgz
4247 silly lockFile a27c0556-nt-lib-contrib-0-6-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\grunt-lib-contrib\0.6.1\package.tgz
4248 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\grunt-lib-contrib\0.6.1\package.tgz 644
4249 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\grunt-lib-contrib\0.6.1\package.tgz
4250 silly lockFile 53fc1c4c-trib-grunt-lib-contrib-0-6-1-tgz https://registry.npmjs.org/grunt-lib-contrib/-/grunt-lib-contrib-0.6.1.tgz
4251 silly lockFile 53fc1c4c-trib-grunt-lib-contrib-0-6-1-tgz https://registry.npmjs.org/grunt-lib-contrib/-/grunt-lib-contrib-0.6.1.tgz
4252 silly lockFile 0ef65a81-grunt-lib-contrib-0-6-1 grunt-lib-contrib@0.6.1
4253 silly lockFile 0ef65a81-grunt-lib-contrib-0-6-1 grunt-lib-contrib@0.6.1
4254 silly lockFile 572493f7-grunt-lib-contrib-0-6-0 grunt-lib-contrib@~0.6.0
4255 silly lockFile 572493f7-grunt-lib-contrib-0-6-0 grunt-lib-contrib@~0.6.0
4256 http 200 https://registry.npmjs.org/connect
4257 silly registry.get cb [ 200,
4257 silly registry.get   { date: 'Fri, 03 Jan 2014 19:35:59 GMT',
4257 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
4257 silly registry.get     etag: '"C9QO99GBBBAZHUC7O6QGM8IJR"',
4257 silly registry.get     'content-type': 'application/json',
4257 silly registry.get     'content-length': '329764',
4257 silly registry.get     'accept-ranges': 'bytes',
4257 silly registry.get     via: '1.1 varnish',
4257 silly registry.get     age: '48423',
4257 silly registry.get     'x-served-by': 'cache-jfk1021-JFK',
4257 silly registry.get     'x-cache': 'HIT',
4257 silly registry.get     'x-cache-hits': '1',
4257 silly registry.get     'x-timer': 'S1388777759.124699831,VS0,VE57',
4257 silly registry.get     vary: 'Accept',
4257 silly registry.get     'keep-alive': 'timeout=10, max=48',
4257 silly registry.get     connection: 'Keep-Alive' } ]
4258 silly addNameRange number 2 { name: 'connect', range: '>=2.7.11-0 <2.8.0-0', hasData: true }
4259 silly addNameRange versions [ 'connect',
4259 silly addNameRange   [ '0.0.1',
4259 silly addNameRange     '0.0.2',
4259 silly addNameRange     '0.0.3',
4259 silly addNameRange     '0.0.4',
4259 silly addNameRange     '0.0.5',
4259 silly addNameRange     '0.0.6',
4259 silly addNameRange     '0.1.0',
4259 silly addNameRange     '0.2.0',
4259 silly addNameRange     '0.2.1',
4259 silly addNameRange     '0.2.2',
4259 silly addNameRange     '0.2.3',
4259 silly addNameRange     '0.2.4',
4259 silly addNameRange     '0.2.5',
4259 silly addNameRange     '0.2.6',
4259 silly addNameRange     '0.2.7',
4259 silly addNameRange     '0.3.0',
4259 silly addNameRange     '0.4.0',
4259 silly addNameRange     '0.5.0',
4259 silly addNameRange     '0.5.1',
4259 silly addNameRange     '0.5.2',
4259 silly addNameRange     '0.5.3',
4259 silly addNameRange     '0.5.4',
4259 silly addNameRange     '0.5.5',
4259 silly addNameRange     '0.5.6',
4259 silly addNameRange     '0.5.7',
4259 silly addNameRange     '0.5.8',
4259 silly addNameRange     '0.5.9',
4259 silly addNameRange     '0.5.10',
4259 silly addNameRange     '1.0.0',
4259 silly addNameRange     '1.0.1',
4259 silly addNameRange     '1.0.2',
4259 silly addNameRange     '1.0.3',
4259 silly addNameRange     '1.0.4',
4259 silly addNameRange     '1.0.5',
4259 silly addNameRange     '1.0.6',
4259 silly addNameRange     '1.1.0',
4259 silly addNameRange     '1.1.1',
4259 silly addNameRange     '1.1.2',
4259 silly addNameRange     '1.1.3',
4259 silly addNameRange     '1.1.4',
4259 silly addNameRange     '1.1.5',
4259 silly addNameRange     '1.2.0',
4259 silly addNameRange     '1.2.1',
4259 silly addNameRange     '1.2.2',
4259 silly addNameRange     '1.2.3',
4259 silly addNameRange     '1.3.0',
4259 silly addNameRange     '1.4.0',
4259 silly addNameRange     '1.4.1',
4259 silly addNameRange     '1.4.2',
4259 silly addNameRange     '1.4.3',
4259 silly addNameRange     '1.4.4',
4259 silly addNameRange     '1.4.5',
4259 silly addNameRange     '1.4.6',
4259 silly addNameRange     '1.5.0',
4259 silly addNameRange     '1.5.1',
4259 silly addNameRange     '1.5.2',
4259 silly addNameRange     '1.6.0',
4259 silly addNameRange     '1.6.1',
4259 silly addNameRange     '1.6.2',
4259 silly addNameRange     '1.6.3',
4259 silly addNameRange     '1.6.4',
4259 silly addNameRange     '1.7.0',
4259 silly addNameRange     '1.7.1',
4259 silly addNameRange     '1.7.2',
4259 silly addNameRange     '1.7.3',
4259 silly addNameRange     '1.8.0',
4259 silly addNameRange     '1.8.1',
4259 silly addNameRange     '1.8.2',
4259 silly addNameRange     '1.8.3',
4259 silly addNameRange     '1.8.4',
4259 silly addNameRange     '1.8.5',
4259 silly addNameRange     '2.0.0',
4259 silly addNameRange     '2.0.1',
4259 silly addNameRange     '2.0.2',
4259 silly addNameRange     '2.0.3',
4259 silly addNameRange     '1.8.6',
4259 silly addNameRange     '2.1.0',
4259 silly addNameRange     '2.1.1',
4259 silly addNameRange     '2.1.2',
4259 silly addNameRange     '1.8.7',
4259 silly addNameRange     '2.1.3',
4259 silly addNameRange     '2.2.0',
4259 silly addNameRange     '2.2.1',
4259 silly addNameRange     '2.2.2',
4259 silly addNameRange     '2.3.0',
4259 silly addNameRange     '2.3.1',
4259 silly addNameRange     '2.3.2',
4259 silly addNameRange     '2.3.3',
4259 silly addNameRange     '1.9.0',
4259 silly addNameRange     '1.9.1',
4259 silly addNameRange     '2.3.4',
4259 silly addNameRange     '2.3.5',
4259 silly addNameRange     '2.3.6',
4259 silly addNameRange     '2.3.7',
4259 silly addNameRange     '1.9.2',
4259 silly addNameRange     '2.3.8',
4259 silly addNameRange     '2.3.9',
4259 silly addNameRange     '2.4.0',
4259 silly addNameRange     '2.4.1',
4259 silly addNameRange     '2.4.2',
4259 silly addNameRange     '2.4.3',
4259 silly addNameRange     '2.4.4',
4259 silly addNameRange     '2.4.5',
4259 silly addNameRange     '2.4.6',
4259 silly addNameRange     '2.5.0',
4259 silly addNameRange     '2.6.0',
4259 silly addNameRange     '2.6.1',
4259 silly addNameRange     '2.6.2',
4259 silly addNameRange     '2.7.0',
4259 silly addNameRange     '2.7.1',
4259 silly addNameRange     '2.7.2',
4259 silly addNameRange     '2.7.3',
4259 silly addNameRange     '2.7.4',
4259 silly addNameRange     '2.7.5',
4259 silly addNameRange     '2.7.6',
4259 silly addNameRange     '2.7.7',
4259 silly addNameRange     '2.7.8',
4259 silly addNameRange     '2.7.9',
4259 silly addNameRange     '2.7.10',
4259 silly addNameRange     '2.7.11',
4259 silly addNameRange     '2.8.0',
4259 silly addNameRange     '2.8.1',
4259 silly addNameRange     '2.8.2',
4259 silly addNameRange     '2.8.3',
4259 silly addNameRange     '2.8.4',
4259 silly addNameRange     '2.8.5',
4259 silly addNameRange     '2.8.6',
4259 silly addNameRange     '2.8.7',
4259 silly addNameRange     '2.8.8',
4259 silly addNameRange     '2.9.0',
4259 silly addNameRange     '2.9.1',
4259 silly addNameRange     '2.9.2',
4259 silly addNameRange     '2.10.0',
4259 silly addNameRange     '2.10.1',
4259 silly addNameRange     '2.11.0',
4259 silly addNameRange     '2.11.1',
4259 silly addNameRange     '2.11.2',
4259 silly addNameRange     '2.12.0' ] ]
4260 verbose addNamed [ 'connect', '2.7.11' ]
4261 verbose addNamed [ '2.7.11', '2.7.11' ]
4262 silly lockFile 4ba73353-connect-2-7-11 connect@2.7.11
4263 verbose lock connect@2.7.11 C:\Users\Gaston\AppData\Roaming\npm-cache\4ba73353-connect-2-7-11.lock
4264 silly lockFile 3f1d2529-s-org-connect-connect-2-7-11-tgz https://registry.npmjs.org/connect/-/connect-2.7.11.tgz
4265 verbose lock https://registry.npmjs.org/connect/-/connect-2.7.11.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\3f1d2529-s-org-connect-connect-2-7-11-tgz.lock
4266 verbose addRemoteTarball [ 'https://registry.npmjs.org/connect/-/connect-2.7.11.tgz',
4266 verbose addRemoteTarball   'f561d5eef70b8d719c397f724d34ba4065c77a3e' ]
4267 info retry fetch attempt 1 at 16:38:00
4268 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777880292-0.5112150551285595\tmp.tgz
4269 http GET https://registry.npmjs.org/connect/-/connect-2.7.11.tgz
4270 http 200 https://registry.npmjs.org/clean-css
4271 silly registry.get cb [ 200,
4271 silly registry.get   { date: 'Fri, 03 Jan 2014 19:36:32 GMT',
4271 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
4271 silly registry.get     etag: '"6WYZK5XJLZ3XYFESSCYMAR17I"',
4271 silly registry.get     'content-type': 'application/json',
4271 silly registry.get     'content-length': '245512',
4271 silly registry.get     'accept-ranges': 'bytes',
4271 silly registry.get     via: '1.1 varnish',
4271 silly registry.get     age: '7059',
4271 silly registry.get     'x-served-by': 'cache-jfk1033-JFK',
4271 silly registry.get     'x-cache': 'HIT',
4271 silly registry.get     'x-cache-hits': '1',
4271 silly registry.get     'x-timer': 'S1388777792.031373262,VS0,VE53',
4271 silly registry.get     vary: 'Accept',
4271 silly registry.get     'keep-alive': 'timeout=10, max=42',
4271 silly registry.get     connection: 'Keep-Alive' } ]
4272 silly addNameRange number 2 { name: 'clean-css', range: '>=2.0.0-0 <2.1.0-0', hasData: true }
4273 silly addNameRange versions [ 'clean-css',
4273 silly addNameRange   [ '0.1.0',
4273 silly addNameRange     '0.2.0',
4273 silly addNameRange     '0.2.1',
4273 silly addNameRange     '0.2.2',
4273 silly addNameRange     '0.2.3',
4273 silly addNameRange     '0.2.4',
4273 silly addNameRange     '0.2.5',
4273 silly addNameRange     '0.2.6',
4273 silly addNameRange     '0.3.0',
4273 silly addNameRange     '0.3.1',
4273 silly addNameRange     '0.3.2',
4273 silly addNameRange     '0.3.3',
4273 silly addNameRange     '0.4.0',
4273 silly addNameRange     '0.4.1',
4273 silly addNameRange     '0.4.2',
4273 silly addNameRange     '0.5.0',
4273 silly addNameRange     '0.6.0',
4273 silly addNameRange     '0.7.0',
4273 silly addNameRange     '0.8.0',
4273 silly addNameRange     '0.8.1',
4273 silly addNameRange     '0.8.2',
4273 silly addNameRange     '0.8.3',
4273 silly addNameRange     '0.9.0',
4273 silly addNameRange     '0.9.1',
4273 silly addNameRange     '0.10.0',
4273 silly addNameRange     '0.10.1',
4273 silly addNameRange     '0.10.2',
4273 silly addNameRange     '1.0.0',
4273 silly addNameRange     '1.0.1',
4273 silly addNameRange     '1.0.2',
4273 silly addNameRange     '1.0.3',
4273 silly addNameRange     '1.0.4',
4273 silly addNameRange     '1.0.5',
4273 silly addNameRange     '1.0.6',
4273 silly addNameRange     '1.0.7',
4273 silly addNameRange     '1.0.8',
4273 silly addNameRange     '1.0.9',
4273 silly addNameRange     '1.0.10',
4273 silly addNameRange     '1.0.11',
4273 silly addNameRange     '1.0.12',
4273 silly addNameRange     '1.1.0',
4273 silly addNameRange     '1.1.1',
4273 silly addNameRange     '1.1.2',
4273 silly addNameRange     '1.1.3',
4273 silly addNameRange     '1.1.4',
4273 silly addNameRange     '1.1.5',
4273 silly addNameRange     '1.1.6',
4273 silly addNameRange     '1.1.7',
4273 silly addNameRange     '2.0.0',
4273 silly addNameRange     '2.0.1',
4273 silly addNameRange     '2.0.2',
4273 silly addNameRange     '2.0.3',
4273 silly addNameRange     '2.0.4',
4273 silly addNameRange     '2.0.5' ] ]
4274 verbose addNamed [ 'clean-css', '2.0.5' ]
4275 verbose addNamed [ '2.0.5', '2.0.5' ]
4276 silly lockFile 2b9f2229-clean-css-2-0-5 clean-css@2.0.5
4277 verbose lock clean-css@2.0.5 C:\Users\Gaston\AppData\Roaming\npm-cache\2b9f2229-clean-css-2-0-5.lock
4278 silly lockFile 2fa28513-rg-clean-css-clean-css-2-0-5-tgz https://registry.npmjs.org/clean-css/-/clean-css-2.0.5.tgz
4279 verbose lock https://registry.npmjs.org/clean-css/-/clean-css-2.0.5.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\2fa28513-rg-clean-css-clean-css-2-0-5-tgz.lock
4280 verbose addRemoteTarball [ 'https://registry.npmjs.org/clean-css/-/clean-css-2.0.5.tgz',
4280 verbose addRemoteTarball   'e693ca07bdbc69883665db6f8444d1af0442bbe3' ]
4281 info retry fetch attempt 1 at 16:38:00
4282 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777880910-0.3386205465067178\tmp.tgz
4283 http GET https://registry.npmjs.org/clean-css/-/clean-css-2.0.5.tgz
4284 http 200 https://registry.npmjs.org/clean-css/-/clean-css-2.0.5.tgz
4285 http 200 https://registry.npmjs.org/colors
4286 silly registry.get cb [ 200,
4286 silly registry.get   { date: 'Fri, 03 Jan 2014 19:37:00 GMT',
4286 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
4286 silly registry.get     etag: '"50328RT1Z6I8OES0RZJNRGKFV"',
4286 silly registry.get     'content-type': 'application/json',
4286 silly registry.get     'content-length': '9638',
4286 silly registry.get     'accept-ranges': 'bytes',
4286 silly registry.get     via: '1.1 varnish',
4286 silly registry.get     age: '428',
4286 silly registry.get     'x-served-by': 'cache-jfk1021-JFK',
4286 silly registry.get     'x-cache': 'HIT',
4286 silly registry.get     'x-cache-hits': '1',
4286 silly registry.get     'x-timer': 'S1388777820.928772688,VS0,VE49',
4286 silly registry.get     vary: 'Accept',
4286 silly registry.get     'keep-alive': 'timeout=10, max=47',
4286 silly registry.get     connection: 'Keep-Alive' } ]
4287 silly addNameRange number 2 { name: 'colors', range: '>=0.6.2-0 <0.7.0-0', hasData: true }
4288 silly addNameRange versions [ 'colors',
4288 silly addNameRange   [ '0.3.0', '0.5.0', '0.5.1', '0.6.0', '0.6.0-1', '0.6.1', '0.6.2' ] ]
4289 verbose addNamed [ 'colors', '0.6.2' ]
4290 verbose addNamed [ '0.6.2', '0.6.2' ]
4291 silly lockFile 1ce149d5-colors-0-6-2 colors@0.6.2
4292 verbose lock colors@0.6.2 C:\Users\Gaston\AppData\Roaming\npm-cache\1ce149d5-colors-0-6-2.lock
4293 silly lockFile ab5efc36-pmjs-org-colors-colors-0-6-2-tgz https://registry.npmjs.org/colors/-/colors-0.6.2.tgz
4294 verbose lock https://registry.npmjs.org/colors/-/colors-0.6.2.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\ab5efc36-pmjs-org-colors-colors-0-6-2-tgz.lock
4295 verbose addRemoteTarball [ 'https://registry.npmjs.org/colors/-/colors-0.6.2.tgz',
4295 verbose addRemoteTarball   '2423fe6678ac0c5dae8852e5d0e5be08c997abcc' ]
4296 info retry fetch attempt 1 at 16:38:02
4297 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777882265-0.36647784523665905\tmp.tgz
4298 http GET https://registry.npmjs.org/colors/-/colors-0.6.2.tgz
4299 http 200 https://registry.npmjs.org/dateformat/1.0.2-1.2.3
4300 silly registry.get cb [ 200,
4300 silly registry.get   { date: 'Fri, 03 Jan 2014 19:37:03 GMT',
4300 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
4300 silly registry.get     etag: '"47LMS3AJD1HS7FQJKEXDS125S"',
4300 silly registry.get     'content-type': 'application/json',
4300 silly registry.get     'content-length': '821',
4300 silly registry.get     'accept-ranges': 'bytes',
4300 silly registry.get     via: '1.1 varnish',
4300 silly registry.get     age: '14122',
4300 silly registry.get     'x-served-by': 'cache-jfk1021-JFK',
4300 silly registry.get     'x-cache': 'HIT',
4300 silly registry.get     'x-cache-hits': '1',
4300 silly registry.get     'x-timer': 'S1388777823.226918697,VS0,VE51',
4300 silly registry.get     vary: 'Accept',
4300 silly registry.get     'keep-alive': 'timeout=10, max=46',
4300 silly registry.get     connection: 'Keep-Alive' } ]
4301 silly lockFile 8242891e-ormat-dateformat-1-0-2-1-2-3-tgz https://registry.npmjs.org/dateformat/-/dateformat-1.0.2-1.2.3.tgz
4302 verbose lock https://registry.npmjs.org/dateformat/-/dateformat-1.0.2-1.2.3.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\8242891e-ormat-dateformat-1-0-2-1-2-3-tgz.lock
4303 verbose addRemoteTarball [ 'https://registry.npmjs.org/dateformat/-/dateformat-1.0.2-1.2.3.tgz',
4303 verbose addRemoteTarball   'b0220c02de98617433b72851cf47de3df2cdbee9' ]
4304 info retry fetch attempt 1 at 16:38:02
4305 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777882529-0.14780803676694632\tmp.tgz
4306 http GET https://registry.npmjs.org/dateformat/-/dateformat-1.0.2-1.2.3.tgz
4307 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777880910-0.3386205465067178\tmp.tgz
4308 silly lockFile 03ce492c-80910-0-3386205465067178-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777880910-0.3386205465067178\package
4309 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777880910-0.3386205465067178\package C:\Users\Gaston\AppData\Roaming\npm-cache\03ce492c-80910-0-3386205465067178-package.lock
4310 silly lockFile 49b3a4b4-80910-0-3386205465067178-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777880910-0.3386205465067178\tmp.tgz
4311 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777880910-0.3386205465067178\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\49b3a4b4-80910-0-3386205465067178-tmp-tgz.lock
4312 silly gunzTarPerm modes [ '755', '644' ]
4313 silly gunzTarPerm extractEntry package.json
4314 silly gunzTarPerm extractEntry README.md
4315 silly gunzTarPerm extractEntry LICENSE
4316 silly gunzTarPerm extractEntry index.js
4317 silly gunzTarPerm extractEntry History.md
4318 silly gunzTarPerm extractEntry bin/cleancss
4319 silly gunzTarPerm extractEntry lib/clean.js
4320 silly gunzTarPerm extractEntry lib/colors/hsl-to-hex.js
4321 silly gunzTarPerm extractEntry lib/colors/long-to-short-hex.js
4322 silly gunzTarPerm extractEntry lib/colors/rgb-to-hex.js
4323 silly gunzTarPerm extractEntry lib/colors/shortener.js
4324 silly gunzTarPerm extractEntry lib/images/url-rebase.js
4325 silly gunzTarPerm extractEntry lib/images/url-rewriter.js
4326 silly gunzTarPerm extractEntry lib/imports/inliner.js
4327 silly gunzTarPerm extractEntry lib/properties/optimizer.js
4328 silly gunzTarPerm extractEntry lib/properties/shorthand-notations.js
4329 silly gunzTarPerm extractEntry lib/selectors/empty-removal.js
4330 silly gunzTarPerm extractEntry lib/selectors/optimizer.js
4331 silly gunzTarPerm extractEntry lib/selectors/tokenizer.js
4332 silly gunzTarPerm extractEntry lib/text/comments.js
4333 silly gunzTarPerm extractEntry lib/text/escape-store.js
4334 silly gunzTarPerm extractEntry lib/text/expressions.js
4335 silly gunzTarPerm extractEntry lib/text/free.js
4336 silly gunzTarPerm extractEntry lib/text/urls.js
4337 http 200 https://registry.npmjs.org/connect/-/connect-2.7.11.tgz
4338 silly lockFile 03ce492c-80910-0-3386205465067178-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777880910-0.3386205465067178\package
4339 silly lockFile 03ce492c-80910-0-3386205465067178-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777880910-0.3386205465067178\package
4340 silly lockFile 49b3a4b4-80910-0-3386205465067178-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777880910-0.3386205465067178\tmp.tgz
4341 silly lockFile 49b3a4b4-80910-0-3386205465067178-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777880910-0.3386205465067178\tmp.tgz
4342 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\clean-css\\2.0.5\\package.tgz',
4342 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388777880910-0.3386205465067178\\package' ]
4343 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\clean-css\2.0.5\package.tgz
4344 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777880910-0.3386205465067178\package
4345 silly lockFile 03ce492c-80910-0-3386205465067178-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777880910-0.3386205465067178\package
4346 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777880910-0.3386205465067178\package C:\Users\Gaston\AppData\Roaming\npm-cache\03ce492c-80910-0-3386205465067178-package.lock
4347 silly lockFile 67c356a6-ache-clean-css-2-0-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\clean-css\2.0.5\package.tgz
4348 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\clean-css\2.0.5\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\67c356a6-ache-clean-css-2-0-5-package-tgz.lock
4349 silly lockFile 03ce492c-80910-0-3386205465067178-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777880910-0.3386205465067178\package
4350 silly lockFile 03ce492c-80910-0-3386205465067178-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777880910-0.3386205465067178\package
4351 silly lockFile 67c356a6-ache-clean-css-2-0-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\clean-css\2.0.5\package.tgz
4352 silly lockFile 67c356a6-ache-clean-css-2-0-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\clean-css\2.0.5\package.tgz
4353 silly lockFile 68a96b3c-pm-cache-clean-css-2-0-5-package C:\Users\Gaston\AppData\Roaming\npm-cache\clean-css\2.0.5\package
4354 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\clean-css\2.0.5\package C:\Users\Gaston\AppData\Roaming\npm-cache\68a96b3c-pm-cache-clean-css-2-0-5-package.lock
4355 silly lockFile 68a96b3c-pm-cache-clean-css-2-0-5-package C:\Users\Gaston\AppData\Roaming\npm-cache\clean-css\2.0.5\package
4356 silly lockFile 68a96b3c-pm-cache-clean-css-2-0-5-package C:\Users\Gaston\AppData\Roaming\npm-cache\clean-css\2.0.5\package
4357 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\clean-css\2.0.5\package.tgz
4358 silly lockFile 43542f9c-pm-cache-clean-css-2-0-5-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\clean-css\2.0.5\package
4359 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\clean-css\2.0.5\package C:\Users\Gaston\AppData\Roaming\npm-cache\43542f9c-pm-cache-clean-css-2-0-5-package.lock
4360 silly lockFile 67c356a6-ache-clean-css-2-0-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\clean-css\2.0.5\package.tgz
4361 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\clean-css\2.0.5\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\67c356a6-ache-clean-css-2-0-5-package-tgz.lock
4362 silly gunzTarPerm modes [ '755', '644' ]
4363 silly gunzTarPerm extractEntry package.json
4364 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
4365 http 200 https://registry.npmjs.org/colors/-/colors-0.6.2.tgz
4366 silly gunzTarPerm extractEntry README.md
4367 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
4368 silly gunzTarPerm extractEntry LICENSE
4369 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
4370 silly gunzTarPerm extractEntry index.js
4371 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
4372 silly gunzTarPerm extractEntry bin/cleancss
4373 silly gunzTarPerm modified mode [ 'bin/cleancss', 438, 420 ]
4374 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777882265-0.36647784523665905\tmp.tgz
4375 silly lockFile f3fcbd53-2265-0-36647784523665905-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777882265-0.36647784523665905\package
4376 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777882265-0.36647784523665905\package C:\Users\Gaston\AppData\Roaming\npm-cache\f3fcbd53-2265-0-36647784523665905-package.lock
4377 silly lockFile 3f75e3a2-2265-0-36647784523665905-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777882265-0.36647784523665905\tmp.tgz
4378 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777882265-0.36647784523665905\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\3f75e3a2-2265-0-36647784523665905-tmp-tgz.lock
4379 silly gunzTarPerm extractEntry History.md
4380 silly gunzTarPerm modified mode [ 'History.md', 438, 420 ]
4381 silly gunzTarPerm modes [ '755', '644' ]
4382 silly gunzTarPerm extractEntry package.json
4383 silly gunzTarPerm extractEntry lib/clean.js
4384 silly gunzTarPerm modified mode [ 'lib/clean.js', 438, 420 ]
4385 silly gunzTarPerm extractEntry lib/colors/hsl-to-hex.js
4386 silly gunzTarPerm modified mode [ 'lib/colors/hsl-to-hex.js', 438, 420 ]
4387 silly gunzTarPerm extractEntry colors.js
4388 silly gunzTarPerm extractEntry example.js
4389 silly gunzTarPerm extractEntry lib/colors/long-to-short-hex.js
4390 silly gunzTarPerm modified mode [ 'lib/colors/long-to-short-hex.js', 438, 420 ]
4391 silly gunzTarPerm extractEntry lib/colors/rgb-to-hex.js
4392 silly gunzTarPerm modified mode [ 'lib/colors/rgb-to-hex.js', 438, 420 ]
4393 silly gunzTarPerm extractEntry test.js
4394 silly gunzTarPerm extractEntry MIT-LICENSE.txt
4395 silly gunzTarPerm extractEntry ReadMe.md
4396 silly gunzTarPerm extractEntry example.html
4397 silly gunzTarPerm extractEntry themes/winston-dark.js
4398 silly gunzTarPerm extractEntry themes/winston-light.js
4399 silly gunzTarPerm extractEntry lib/colors/shortener.js
4400 silly gunzTarPerm modified mode [ 'lib/colors/shortener.js', 438, 420 ]
4401 silly gunzTarPerm extractEntry lib/images/url-rebase.js
4402 silly gunzTarPerm modified mode [ 'lib/images/url-rebase.js', 438, 420 ]
4403 silly gunzTarPerm extractEntry lib/images/url-rewriter.js
4404 silly gunzTarPerm modified mode [ 'lib/images/url-rewriter.js', 438, 420 ]
4405 silly gunzTarPerm extractEntry lib/imports/inliner.js
4406 silly gunzTarPerm modified mode [ 'lib/imports/inliner.js', 438, 420 ]
4407 silly gunzTarPerm extractEntry lib/properties/optimizer.js
4408 silly gunzTarPerm modified mode [ 'lib/properties/optimizer.js', 438, 420 ]
4409 silly gunzTarPerm extractEntry lib/properties/shorthand-notations.js
4410 silly gunzTarPerm modified mode [ 'lib/properties/shorthand-notations.js', 438, 420 ]
4411 silly gunzTarPerm extractEntry lib/selectors/empty-removal.js
4412 silly gunzTarPerm modified mode [ 'lib/selectors/empty-removal.js', 438, 420 ]
4413 silly gunzTarPerm extractEntry lib/selectors/optimizer.js
4414 silly gunzTarPerm modified mode [ 'lib/selectors/optimizer.js', 438, 420 ]
4415 silly gunzTarPerm extractEntry lib/selectors/tokenizer.js
4416 silly gunzTarPerm modified mode [ 'lib/selectors/tokenizer.js', 438, 420 ]
4417 silly gunzTarPerm extractEntry lib/text/comments.js
4418 silly gunzTarPerm modified mode [ 'lib/text/comments.js', 438, 420 ]
4419 silly gunzTarPerm extractEntry lib/text/escape-store.js
4420 silly gunzTarPerm modified mode [ 'lib/text/escape-store.js', 438, 420 ]
4421 silly gunzTarPerm extractEntry lib/text/expressions.js
4422 silly gunzTarPerm modified mode [ 'lib/text/expressions.js', 438, 420 ]
4423 silly lockFile f3fcbd53-2265-0-36647784523665905-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777882265-0.36647784523665905\package
4424 silly lockFile f3fcbd53-2265-0-36647784523665905-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777882265-0.36647784523665905\package
4425 silly lockFile 3f75e3a2-2265-0-36647784523665905-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777882265-0.36647784523665905\tmp.tgz
4426 silly lockFile 3f75e3a2-2265-0-36647784523665905-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777882265-0.36647784523665905\tmp.tgz
4427 silly gunzTarPerm extractEntry lib/text/free.js
4428 silly gunzTarPerm modified mode [ 'lib/text/free.js', 438, 420 ]
4429 silly gunzTarPerm extractEntry lib/text/urls.js
4430 silly gunzTarPerm modified mode [ 'lib/text/urls.js', 438, 420 ]
4431 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\colors\\0.6.2\\package.tgz',
4431 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388777882265-0.36647784523665905\\package' ]
4432 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\colors\0.6.2\package.tgz
4433 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777882265-0.36647784523665905\package
4434 silly lockFile f3fcbd53-2265-0-36647784523665905-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777882265-0.36647784523665905\package
4435 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777882265-0.36647784523665905\package C:\Users\Gaston\AppData\Roaming\npm-cache\f3fcbd53-2265-0-36647784523665905-package.lock
4436 silly lockFile 33d68532-m-cache-colors-0-6-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\colors\0.6.2\package.tgz
4437 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\colors\0.6.2\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\33d68532-m-cache-colors-0-6-2-package-tgz.lock
4438 silly lockFile f3fcbd53-2265-0-36647784523665905-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777882265-0.36647784523665905\package
4439 silly lockFile f3fcbd53-2265-0-36647784523665905-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777882265-0.36647784523665905\package
4440 silly lockFile 33d68532-m-cache-colors-0-6-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\colors\0.6.2\package.tgz
4441 silly lockFile 33d68532-m-cache-colors-0-6-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\colors\0.6.2\package.tgz
4442 silly lockFile 04e39ba1-g-npm-cache-colors-0-6-2-package C:\Users\Gaston\AppData\Roaming\npm-cache\colors\0.6.2\package
4443 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\colors\0.6.2\package C:\Users\Gaston\AppData\Roaming\npm-cache\04e39ba1-g-npm-cache-colors-0-6-2-package.lock
4444 silly lockFile 04e39ba1-g-npm-cache-colors-0-6-2-package C:\Users\Gaston\AppData\Roaming\npm-cache\colors\0.6.2\package
4445 silly lockFile 04e39ba1-g-npm-cache-colors-0-6-2-package C:\Users\Gaston\AppData\Roaming\npm-cache\colors\0.6.2\package
4446 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\colors\0.6.2\package.tgz
4447 silly lockFile c9003493-g-npm-cache-colors-0-6-2-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\colors\0.6.2\package
4448 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\colors\0.6.2\package C:\Users\Gaston\AppData\Roaming\npm-cache\c9003493-g-npm-cache-colors-0-6-2-package.lock
4449 silly lockFile 33d68532-m-cache-colors-0-6-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\colors\0.6.2\package.tgz
4450 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\colors\0.6.2\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\33d68532-m-cache-colors-0-6-2-package-tgz.lock
4451 silly gunzTarPerm modes [ '755', '644' ]
4452 silly gunzTarPerm extractEntry package.json
4453 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
4454 silly gunzTarPerm extractEntry colors.js
4455 silly gunzTarPerm modified mode [ 'colors.js', 438, 420 ]
4456 silly gunzTarPerm extractEntry example.js
4457 silly gunzTarPerm modified mode [ 'example.js', 438, 420 ]
4458 silly gunzTarPerm extractEntry test.js
4459 silly gunzTarPerm modified mode [ 'test.js', 438, 420 ]
4460 silly gunzTarPerm extractEntry example.html
4461 silly gunzTarPerm modified mode [ 'example.html', 438, 420 ]
4462 silly gunzTarPerm extractEntry MIT-LICENSE.txt
4463 silly gunzTarPerm modified mode [ 'MIT-LICENSE.txt', 438, 420 ]
4464 silly gunzTarPerm extractEntry ReadMe.md
4465 silly gunzTarPerm modified mode [ 'ReadMe.md', 438, 420 ]
4466 silly gunzTarPerm extractEntry themes/winston-dark.js
4467 silly gunzTarPerm modified mode [ 'themes/winston-dark.js', 438, 420 ]
4468 silly gunzTarPerm extractEntry themes/winston-light.js
4469 silly gunzTarPerm modified mode [ 'themes/winston-light.js', 438, 420 ]
4470 silly lockFile c9003493-g-npm-cache-colors-0-6-2-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\colors\0.6.2\package
4471 silly lockFile c9003493-g-npm-cache-colors-0-6-2-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\colors\0.6.2\package
4472 silly lockFile 33d68532-m-cache-colors-0-6-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\colors\0.6.2\package.tgz
4473 silly lockFile 33d68532-m-cache-colors-0-6-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\colors\0.6.2\package.tgz
4474 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\colors\0.6.2\package.tgz 644
4475 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\colors\0.6.2\package.tgz
4476 silly lockFile ab5efc36-pmjs-org-colors-colors-0-6-2-tgz https://registry.npmjs.org/colors/-/colors-0.6.2.tgz
4477 silly lockFile ab5efc36-pmjs-org-colors-colors-0-6-2-tgz https://registry.npmjs.org/colors/-/colors-0.6.2.tgz
4478 silly lockFile 1ce149d5-colors-0-6-2 colors@0.6.2
4479 silly lockFile 1ce149d5-colors-0-6-2 colors@0.6.2
4480 silly lockFile f2380b4d-colors-0-6-2 colors@~0.6.2
4481 silly lockFile f2380b4d-colors-0-6-2 colors@~0.6.2
4482 silly lockFile 43542f9c-pm-cache-clean-css-2-0-5-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\clean-css\2.0.5\package
4483 silly lockFile 43542f9c-pm-cache-clean-css-2-0-5-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\clean-css\2.0.5\package
4484 silly lockFile 67c356a6-ache-clean-css-2-0-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\clean-css\2.0.5\package.tgz
4485 silly lockFile 67c356a6-ache-clean-css-2-0-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\clean-css\2.0.5\package.tgz
4486 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\clean-css\2.0.5\package.tgz 644
4487 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\clean-css\2.0.5\package.tgz
4488 silly lockFile 2fa28513-rg-clean-css-clean-css-2-0-5-tgz https://registry.npmjs.org/clean-css/-/clean-css-2.0.5.tgz
4489 silly lockFile 2fa28513-rg-clean-css-clean-css-2-0-5-tgz https://registry.npmjs.org/clean-css/-/clean-css-2.0.5.tgz
4490 silly lockFile 2b9f2229-clean-css-2-0-5 clean-css@2.0.5
4491 silly lockFile 2b9f2229-clean-css-2-0-5 clean-css@2.0.5
4492 silly lockFile 434cf0e0-clean-css-2-0-0 clean-css@~2.0.0
4493 silly lockFile 434cf0e0-clean-css-2-0-0 clean-css@~2.0.0
4494 silly resolved [ { name: 'grunt-lib-contrib',
4494 silly resolved     description: 'Common functionality shared across grunt-contrib tasks.',
4494 silly resolved     version: '0.6.1',
4494 silly resolved     homepage: 'http://github.com/gruntjs/grunt-lib-contrib',
4494 silly resolved     author: { name: 'Grunt Team', url: 'http://gruntjs.com/' },
4494 silly resolved     repository:
4494 silly resolved      { type: 'git',
4494 silly resolved        url: 'git://github.com/gruntjs/grunt-lib-contrib.git' },
4494 silly resolved     bugs: { url: 'https://github.com/gruntjs/grunt-lib-contrib/issues' },
4494 silly resolved     licenses: [ [Object] ],
4494 silly resolved     engines: { node: '>= 0.8.0' },
4494 silly resolved     scripts: { test: 'grunt test' },
4494 silly resolved     devDependencies:
4494 silly resolved      { 'grunt-contrib-jshint': '~0.1.1',
4494 silly resolved        'grunt-contrib-nodeunit': '~0.1.2',
4494 silly resolved        grunt: '~0.4.0' },
4494 silly resolved     main: 'lib/contrib',
4494 silly resolved     dependencies: { 'zlib-browserify': '0.0.1' },
4494 silly resolved     contributors: [ [Object], [Object], [Object], [Object] ],
4494 silly resolved     readme: '# grunt-lib-contrib [![Build Status](https://secure.travis-ci.org/gruntjs/grunt-lib-contrib.png?branch=master)](http://travis-ci.org/gruntjs/grunt-lib-contrib)\n\n> Common functionality shared across grunt-contrib tasks.\n\nThe purpose of grunt-lib-contrib is to explore solutions to common problems task writers encounter, and to ease the upgrade path for contrib tasks.\n\n**These APIs should be considered highly unstable. Depend on them at your own risk!**\n\n_Over time, some of the functionality provided here may be incorporated directly into grunt for mainstream use. Until then, you may require `grunt-lib-contrib` as a dependency in your projects, but be very careful to specify an exact version number instead of a range, as backwards-incompatible changes are likely to be introduced._\n\n### Helper Functions\n\n#### getNamespaceDeclaration(ns)\n\nThis helper is used to build JS namespace declarations.\n\n#### optsToArgs(options)\n\nConvert an object to an array of CLI arguments, which can be used with `child_process.spawn()`.\n\n```js\n// Example\n{\n  fooBar: \'a\',        // [\'--foo-bar\', \'a\']\n  fooBar: 1,          // [\'--foo-bar\', \'1\']\n  fooBar: true,       // [\'--foo-bar\']\n  fooBar: false,      //\n  fooBar: [\'a\', \'b\']  // [\'--foo-bar\', \'a\', \'--foo-bar\', \'b\']\n}\n```\n\n#### stripPath(pth, strip)\n\nStrip a path from a path. normalize both paths for best results.\n\n#### minMaxInfo(min, max, report)\n\nHelper for logging compressed, uncompressed and gzipped sizes of strings.\n\n#### report\nChoices: `false`, `\'min\'`, `\'gzip\'`\nDefault: `false`\n\nEither do not report anything, report only minification result, or report minification and gzip results.\n\n**Important** Including `\'gzip\'` results can make this task 5-10x slower depending on the size of the file.\n\n\n```js\nvar max = grunt.file.read(\'max.js\');\nvar min = minify(max);\nminMaxInfo(min, max, \'gzip\');\n```\n\nWould print:\n\n```\nOriginal: 495 bytes.\nMinified: 396 bytes.\nGzipped: 36 bytes.\n```\n\n--\n\n*Lib submitted by [Tyler Kellen](https://goingslowly.com/).*',
4494 silly resolved     readmeFilename: 'README.md',
4494 silly resolved     _id: 'grunt-lib-contrib@0.6.1',
4494 silly resolved     dist: { shasum: '1b9b445dd14c2f70f6dc593e42449c06afe66472' },
4494 silly resolved     _from: 'grunt-lib-contrib@~0.6.0',
4494 silly resolved     _resolved: 'https://registry.npmjs.org/grunt-lib-contrib/-/grunt-lib-contrib-0.6.1.tgz' },
4494 silly resolved   { name: 'clean-css',
4494 silly resolved     version: '2.0.5',
4494 silly resolved     author:
4494 silly resolved      { name: 'Jakub Pawlowicz',
4494 silly resolved        email: 'jakub@goalsmashers.com',
4494 silly resolved        url: 'http://twitter.com/GoalSmashers' },
4494 silly resolved     description: 'A well-tested CSS minifier',
4494 silly resolved     license: 'MIT',
4494 silly resolved     keywords: [ 'css', 'minifier' ],
4494 silly resolved     homepage: 'https://github.com/GoalSmashers/clean-css',
4494 silly resolved     repository:
4494 silly resolved      { type: 'git',
4494 silly resolved        url: 'https://github.com/GoalSmashers/clean-css.git' },
4494 silly resolved     bugs: { url: 'https://github.com/GoalSmashers/clean-css/issues' },
4494 silly resolved     bin: { cleancss: './bin/cleancss' },
4494 silly resolved     main: 'index.js',
4494 silly resolved     files: [ 'bin', 'lib', 'History.md', 'index.js', 'LICENSE' ],
4494 silly resolved     scripts:
4494 silly resolved      { bench: 'node ./test/bench.js',
4494 silly resolved        check: 'jshint .',
4494 silly resolved        prepublish: 'jshint .',
4494 silly resolved        test: 'vows' },
4494 silly resolved     dependencies: { commander: '2.0.x' },
4494 silly resolved     devDependencies: { jshint: '2.3.x', vows: '0.7.x' },
4494 silly resolved     jshintConfig:
4494 silly resolved      { browser: false,
4494 silly resolved        camelcase: true,
4494 silly resolved        curly: false,
4494 silly resolved        eqeqeq: false,
4494 silly resolved        eqnull: true,
4494 silly resolved        immed: true,
4494 silly resolved        latedef: true,
4494 silly resolved        multistr: true,
4494 silly resolved        noarg: true,
4494 silly resolved        node: true,
4494 silly resolved        plusplus: false,
4494 silly resolved        quotmark: 'single',
4494 silly resolved        strict: false,
4494 silly resolved        trailing: true,
4494 silly resolved        undef: true,
4494 silly resolved        unused: true },
4494 silly resolved     engines: { node: '>=0.8.0' },
4494 silly resolved     readme: '[![NPM version](https://badge.fury.io/js/clean-css.png)](https://badge.fury.io/js/clean-css)\n[![Build Status](https://secure.travis-ci.org/GoalSmashers/clean-css.png)](https://travis-ci.org/GoalSmashers/clean-css)\n[![Dependency Status](https://david-dm.org/GoalSmashers/clean-css.png)](https://david-dm.org/GoalSmashers/clean-css)\n[![devDependency Status](https://david-dm.org/GoalSmashers/clean-css/dev-status.png)](https://david-dm.org/GoalSmashers/clean-css#info=devDependencies)\n\n## What is clean-css?\n\nClean-css is a fast and efficient [node.js](http://nodejs.org/) library for minifying CSS files.\n\nAccording to [tests](https://github.com/GoalSmashers/css-minification-benchmark) it is one of the best available.\n\n\n## Usage\n\n### What are the requirements?\n\n```\nnode.js 0.8.0+ (tested on CentOS, Ubuntu, OS X 10.6+, and Windows 7+)\n```\n\n### How to install clean-css?\n\n```\nnpm install clean-css\n```\n\n### How to upgrade clean-css from 1.x to 2.x?\n\n#### Command-line interface (CLI)\n\n```\nnpm update clean-css\n```\n\nor point `package.json` to version 2.x. That\'s it!\n\n#### Node.js module\n\nUpdate `clean-css` as for CLI above.\nThen change your JavaScript code from:\n\n```js\nvar minimized = CleanCSS.process(source, options);\n```\n\ninto\n\n```js\nvar minimized = new CleanCSS(options).minify(source);\n```\n\nAnd you are done.\n\n### How to use clean-css CLI?\n\nClean-css accepts the following command line arguments (please make sure\nyou use `<source-file>` as the very last argument to avoid potential issues):\n\n```\ncleancss [options] <source-file>\n\n-h, --help                      Output usage information\n-v, --version                   Output the version number\n-b, --keep-line-breaks          Keep line breaks\n--s0                            Remove all special comments, i.e. /*! comment */\n--s1                            Remove all special comments but the first one\n-r, --root [root-path]          A root path to which resolve absolute @import rules\n                                and rebase relative URLs\n-o, --output [output-file]      Use [output-file] as output instead of STDOUT\n-s, --skip-import               Disable @import processing\n--skip-rebase                   Disable URLs rebasing\n--skip-advanced                 Disable advanced optimizations - selector & property merging,\n                                reduction, etc.\n--selectors-merge-mode [ie8|*]  Use `ie8` for compatibility mode, `*` for merge all (default)\n-d, --debug                     Shows debug information (minification time & compression efficiency)\n```\n\n#### Examples:\n\nTo minify a **public.css** file into **public-min.css** do:\n\n```\ncleancss -o public-min.css public.css\n```\n\nTo minify the same **public.css** into the standard output skip the `-o` parameter:\n\n```\ncleancss public.css\n```\n\nMore likely you would like to concatenate a couple of files.\nIf you are on a Unix-like system:\n\n```bash\ncat one.css two.css three.css | cleancss -o merged-and-minified.css\n```\n\nOn Windows:\n\n```bat\ntype one.css two.css three.css | cleancss -o merged-and-minified.css\n```\n\nOr even gzip the result at once:\n\n```bash\ncat one.css two.css three.css | cleancss | gzip -9 -c > merged-minified-and-gzipped.css.gz\n```\n\n### How to use clean-css programmatically?\n\n```js\nvar CleanCSS = require(\'clean-css\');\nvar source = \'a{font-weight:bold;}\';\nvar minimized = new CleanCSS().minify(source);\n```\n\nCleanCSS constructor accepts a hash as a parameter, i.e.,\n`new CleanCSS(options).minify(source)` with the following options available:\n\n* `keepSpecialComments` - `*` for keeping all (default), `1` for keeping first one only, `0` for removing all\n* `keepBreaks` - whether to keep line breaks (default is false)\n* `benchmark` - turns on benchmarking mode measuring time spent on cleaning up\n  (run `npm run bench` to see example)\n* `root` - path to resolve absolute `@import` rules and rebase relative URLs\n* `relativeTo` - path with which to resolve relative `@import` rules and URLs\n* `processImport` - whether to process `@import` rules\n* `noRebase` - whether to skip URLs rebasing\n* `noAdvanced` - set to true to disable advanced optimizations - selector & property merging, reduction, etc.\n* `selectorsMergeMode` - `ie8` for IE8 compatibility mode, `*` for merging all (default)\n* `debug` - set to true to get minification statistics under `stats` property (see `test/custom-test.js` for examples)\n\n### What are the clean-css\' dev commands?\n\nFirst clone the source, then run:\n\n* `npm run bench` for clean-css benchmarks (see [test/bench.js](https://github.com/GoalSmashers/clean-css/blob/master/test/bench.js) for details)\n* `npm run check` to check JS sources with [JSHint](https://github.com/jshint/jshint/)\n* `npm test` for the test suite\n\n## Tips & Tricks\n\n### How to preserve a comment block?\n\nUse the `/*!` notation instead of the standard one `/*`:\n\n```css\n/*!\n  Important comments included in minified output.\n*/\n```\n\n### How to rebase relative image URLs\n\nClean-css will handle it automatically for you (since version 1.1) in the following cases:\n\n* When using the CLI:\n  1. Use an output path via `-o`/`--output` to rebase URLs as relative to the output file.\n  2. Use a root path via `-r`/`--root` to rebase URLs as absolute from the given root path.\n  3. If you specify both then `-r`/`--root` takes precendence.\n* When using clean-css as a library:\n  1. Use a combination of `relativeTo` and `target` options for relative rebase (same as 1 in CLI).\n  2. Use a combination of `relativeTo` and `root` options for absolute rebase (same as 2 in CLI).\n  3. `root` takes precendence over `target` as in CLI.\n\n## Acknowledgments\n\n* Vincent Voyer ([@vvo](https://github.com/vvo)) for a patch with better\n  empty element regex and for inspiring us to do many performance improvements\n  in 0.4 release.\n* Isaac ([@facelessuser](https://github.com/facelessuser)) for pointing out\n  a flaw in clean-css\' stateless mode.\n* Jan Michael Alonzo ([@jmalonzo](https://github.com/jmalonzo)) for a patch\n  removing node.js\' old `sys` package.\n* [@XhmikosR](https://github.com/XhmikosR) for suggesting new features\n  (option to remove special comments and strip out URLs quotation) and\n  pointing out numerous improvements (JSHint, media queries).\n* Anthony Barre ([@abarre](https://github.com/abarre)) for improvements to\n  `@import` processing, namely introducing the `--skip-import` /\n  `processImport` options.\n* Simon Altschuler ([@altschuler](https://github.com/altschuler)) for fixing\n  `@import` processing inside comments.\n\n## License\n\nClean-css is released under the [MIT License](https://github.com/GoalSmashers/clean-css/blob/master/LICENSE).\n',
4494 silly resolved     readmeFilename: 'README.md',
4494 silly resolved     _id: 'clean-css@2.0.5',
4494 silly resolved     dist: { shasum: 'c8dd2134b3732888219d43bd37dc394ea1fe18ff' },
4494 silly resolved     _from: 'clean-css@~2.0.0',
4494 silly resolved     _resolved: 'https://registry.npmjs.org/clean-css/-/clean-css-2.0.5.tgz' } ]
4495 info install grunt-lib-contrib@0.6.1 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-cssmin
4496 info install clean-css@2.0.5 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-cssmin
4497 info installOne grunt-lib-contrib@0.6.1
4498 info installOne clean-css@2.0.5
4499 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-cssmin\node_modules\grunt-lib-contrib unbuild
4500 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-cssmin\node_modules\clean-css unbuild
4501 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\grunt-lib-contrib\0.6.1\package.tgz
4502 silly lockFile 2759101a-n-node-modules-grunt-lib-contrib tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-cssmin\node_modules\grunt-lib-contrib
4503 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-cssmin\node_modules\grunt-lib-contrib C:\Users\Gaston\AppData\Roaming\npm-cache\2759101a-n-node-modules-grunt-lib-contrib.lock
4504 silly lockFile a27c0556-nt-lib-contrib-0-6-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\grunt-lib-contrib\0.6.1\package.tgz
4505 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\grunt-lib-contrib\0.6.1\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\a27c0556-nt-lib-contrib-0-6-1-package-tgz.lock
4506 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\clean-css\2.0.5\package.tgz
4507 silly lockFile dc8d9ac4-ib-cssmin-node-modules-clean-css tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-cssmin\node_modules\clean-css
4508 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-cssmin\node_modules\clean-css C:\Users\Gaston\AppData\Roaming\npm-cache\dc8d9ac4-ib-cssmin-node-modules-clean-css.lock
4509 silly lockFile 67c356a6-ache-clean-css-2-0-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\clean-css\2.0.5\package.tgz
4510 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\clean-css\2.0.5\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\67c356a6-ache-clean-css-2-0-5-package-tgz.lock
4511 silly gunzTarPerm modes [ '755', '644' ]
4512 silly gunzTarPerm modes [ '755', '644' ]
4513 silly gunzTarPerm extractEntry package.json
4514 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
4515 silly gunzTarPerm extractEntry package.json
4516 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
4517 silly gunzTarPerm extractEntry .npmignore
4518 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
4519 silly gunzTarPerm extractEntry README.md
4520 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
4521 silly gunzTarPerm extractEntry README.md
4522 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
4523 silly gunzTarPerm extractEntry LICENSE
4524 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
4525 silly gunzTarPerm extractEntry Gruntfile.js
4526 silly gunzTarPerm modified mode [ 'Gruntfile.js', 438, 420 ]
4527 silly gunzTarPerm extractEntry AUTHORS
4528 silly gunzTarPerm modified mode [ 'AUTHORS', 438, 420 ]
4529 silly gunzTarPerm extractEntry index.js
4530 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
4531 silly gunzTarPerm extractEntry bin/cleancss
4532 silly gunzTarPerm modified mode [ 'bin/cleancss', 438, 420 ]
4533 silly gunzTarPerm extractEntry CHANGELOG
4534 silly gunzTarPerm modified mode [ 'CHANGELOG', 438, 420 ]
4535 silly gunzTarPerm extractEntry .jshintrc
4536 silly gunzTarPerm modified mode [ '.jshintrc', 438, 420 ]
4537 silly gunzTarPerm extractEntry lib/contrib.js
4538 silly gunzTarPerm modified mode [ 'lib/contrib.js', 438, 420 ]
4539 silly gunzTarPerm extractEntry LICENSE-MIT
4540 silly gunzTarPerm modified mode [ 'LICENSE-MIT', 438, 420 ]
4541 silly gunzTarPerm extractEntry History.md
4542 silly gunzTarPerm modified mode [ 'History.md', 438, 420 ]
4543 silly gunzTarPerm extractEntry lib/clean.js
4544 silly gunzTarPerm modified mode [ 'lib/clean.js', 438, 420 ]
4545 silly gunzTarPerm extractEntry lib/colors/hsl-to-hex.js
4546 silly gunzTarPerm modified mode [ 'lib/colors/hsl-to-hex.js', 438, 420 ]
4547 silly gunzTarPerm extractEntry .gitattributes
4548 silly gunzTarPerm modified mode [ '.gitattributes', 438, 420 ]
4549 silly gunzTarPerm extractEntry .travis.yml
4550 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]
4551 silly gunzTarPerm extractEntry test/lib_test.js
4552 silly gunzTarPerm modified mode [ 'test/lib_test.js', 438, 420 ]
4553 silly gunzTarPerm extractEntry lib/colors/long-to-short-hex.js
4554 silly gunzTarPerm modified mode [ 'lib/colors/long-to-short-hex.js', 438, 420 ]
4555 silly gunzTarPerm extractEntry lib/colors/rgb-to-hex.js
4556 silly gunzTarPerm modified mode [ 'lib/colors/rgb-to-hex.js', 438, 420 ]
4557 silly gunzTarPerm extractEntry lib/colors/shortener.js
4558 silly gunzTarPerm modified mode [ 'lib/colors/shortener.js', 438, 420 ]
4559 silly gunzTarPerm extractEntry lib/images/url-rebase.js
4560 silly gunzTarPerm modified mode [ 'lib/images/url-rebase.js', 438, 420 ]
4561 silly gunzTarPerm extractEntry lib/images/url-rewriter.js
4562 silly gunzTarPerm modified mode [ 'lib/images/url-rewriter.js', 438, 420 ]
4563 silly gunzTarPerm extractEntry lib/imports/inliner.js
4564 silly gunzTarPerm modified mode [ 'lib/imports/inliner.js', 438, 420 ]
4565 silly lockFile 2759101a-n-node-modules-grunt-lib-contrib tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-cssmin\node_modules\grunt-lib-contrib
4566 silly lockFile 2759101a-n-node-modules-grunt-lib-contrib tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-cssmin\node_modules\grunt-lib-contrib
4567 silly gunzTarPerm extractEntry lib/properties/optimizer.js
4568 silly gunzTarPerm modified mode [ 'lib/properties/optimizer.js', 438, 420 ]
4569 silly gunzTarPerm extractEntry lib/properties/shorthand-notations.js
4570 silly gunzTarPerm modified mode [ 'lib/properties/shorthand-notations.js', 438, 420 ]
4571 silly lockFile a27c0556-nt-lib-contrib-0-6-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\grunt-lib-contrib\0.6.1\package.tgz
4572 silly lockFile a27c0556-nt-lib-contrib-0-6-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\grunt-lib-contrib\0.6.1\package.tgz
4573 info preinstall grunt-lib-contrib@0.6.1
4574 silly gunzTarPerm extractEntry lib/selectors/empty-removal.js
4575 silly gunzTarPerm modified mode [ 'lib/selectors/empty-removal.js', 438, 420 ]
4576 silly gunzTarPerm extractEntry lib/selectors/optimizer.js
4577 silly gunzTarPerm modified mode [ 'lib/selectors/optimizer.js', 438, 420 ]
4578 verbose readDependencies using package.json deps
4579 verbose readDependencies using package.json deps
4580 silly gunzTarPerm extractEntry lib/selectors/tokenizer.js
4581 silly gunzTarPerm modified mode [ 'lib/selectors/tokenizer.js', 438, 420 ]
4582 silly gunzTarPerm extractEntry lib/text/comments.js
4583 silly gunzTarPerm modified mode [ 'lib/text/comments.js', 438, 420 ]
4584 verbose cache add [ 'zlib-browserify@0.0.1', null ]
4585 verbose cache add name=undefined spec="zlib-browserify@0.0.1" args=["zlib-browserify@0.0.1",null]
4586 verbose parsed url { protocol: null,
4586 verbose parsed url   slashes: null,
4586 verbose parsed url   auth: null,
4586 verbose parsed url   host: null,
4586 verbose parsed url   port: null,
4586 verbose parsed url   hostname: null,
4586 verbose parsed url   hash: null,
4586 verbose parsed url   search: null,
4586 verbose parsed url   query: null,
4586 verbose parsed url   pathname: 'zlib-browserify@0.0.1',
4586 verbose parsed url   path: 'zlib-browserify@0.0.1',
4586 verbose parsed url   href: 'zlib-browserify@0.0.1' }
4587 verbose cache add name="zlib-browserify" spec="0.0.1" args=["zlib-browserify","0.0.1"]
4588 verbose parsed url { protocol: null,
4588 verbose parsed url   slashes: null,
4588 verbose parsed url   auth: null,
4588 verbose parsed url   host: null,
4588 verbose parsed url   port: null,
4588 verbose parsed url   hostname: null,
4588 verbose parsed url   hash: null,
4588 verbose parsed url   search: null,
4588 verbose parsed url   query: null,
4588 verbose parsed url   pathname: '0.0.1',
4588 verbose parsed url   path: '0.0.1',
4588 verbose parsed url   href: '0.0.1' }
4589 verbose addNamed [ 'zlib-browserify', '0.0.1' ]
4590 verbose addNamed [ '0.0.1', '0.0.1' ]
4591 silly lockFile 84e77944-zlib-browserify-0-0-1 zlib-browserify@0.0.1
4592 verbose lock zlib-browserify@0.0.1 C:\Users\Gaston\AppData\Roaming\npm-cache\84e77944-zlib-browserify-0-0-1.lock
4593 verbose url raw zlib-browserify/0.0.1
4594 verbose url resolving [ 'https://registry.npmjs.org/', './zlib-browserify/0.0.1' ]
4595 verbose url resolved https://registry.npmjs.org/zlib-browserify/0.0.1
4596 info trying registry request attempt 1 at 16:38:04
4597 http GET https://registry.npmjs.org/zlib-browserify/0.0.1
4598 silly gunzTarPerm extractEntry lib/text/escape-store.js
4599 silly gunzTarPerm modified mode [ 'lib/text/escape-store.js', 438, 420 ]
4600 silly gunzTarPerm extractEntry lib/text/expressions.js
4601 silly gunzTarPerm modified mode [ 'lib/text/expressions.js', 438, 420 ]
4602 silly gunzTarPerm extractEntry lib/text/free.js
4603 silly gunzTarPerm modified mode [ 'lib/text/free.js', 438, 420 ]
4604 silly gunzTarPerm extractEntry lib/text/urls.js
4605 silly gunzTarPerm modified mode [ 'lib/text/urls.js', 438, 420 ]
4606 silly lockFile dc8d9ac4-ib-cssmin-node-modules-clean-css tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-cssmin\node_modules\clean-css
4607 silly lockFile dc8d9ac4-ib-cssmin-node-modules-clean-css tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-cssmin\node_modules\clean-css
4608 silly lockFile 67c356a6-ache-clean-css-2-0-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\clean-css\2.0.5\package.tgz
4609 silly lockFile 67c356a6-ache-clean-css-2-0-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\clean-css\2.0.5\package.tgz
4610 info preinstall clean-css@2.0.5
4611 verbose readDependencies using package.json deps
4612 verbose readDependencies using package.json deps
4613 verbose cache add [ 'commander@2.0.x', null ]
4614 verbose cache add name=undefined spec="commander@2.0.x" args=["commander@2.0.x",null]
4615 verbose parsed url { protocol: null,
4615 verbose parsed url   slashes: null,
4615 verbose parsed url   auth: null,
4615 verbose parsed url   host: null,
4615 verbose parsed url   port: null,
4615 verbose parsed url   hostname: null,
4615 verbose parsed url   hash: null,
4615 verbose parsed url   search: null,
4615 verbose parsed url   query: null,
4615 verbose parsed url   pathname: 'commander@2.0.x',
4615 verbose parsed url   path: 'commander@2.0.x',
4615 verbose parsed url   href: 'commander@2.0.x' }
4616 verbose cache add name="commander" spec="2.0.x" args=["commander","2.0.x"]
4617 verbose parsed url { protocol: null,
4617 verbose parsed url   slashes: null,
4617 verbose parsed url   auth: null,
4617 verbose parsed url   host: null,
4617 verbose parsed url   port: null,
4617 verbose parsed url   hostname: null,
4617 verbose parsed url   hash: null,
4617 verbose parsed url   search: null,
4617 verbose parsed url   query: null,
4617 verbose parsed url   pathname: '2.0.x',
4617 verbose parsed url   path: '2.0.x',
4617 verbose parsed url   href: '2.0.x' }
4618 verbose addNamed [ 'commander', '2.0.x' ]
4619 verbose addNamed [ null, '>=2.0.0-0 <2.1.0-0' ]
4620 silly lockFile f7c90c0d-commander-2-0-x commander@2.0.x
4621 verbose lock commander@2.0.x C:\Users\Gaston\AppData\Roaming\npm-cache\f7c90c0d-commander-2-0-x.lock
4622 silly addNameRange { name: 'commander',
4622 silly addNameRange   range: '>=2.0.0-0 <2.1.0-0',
4622 silly addNameRange   hasData: false }
4623 verbose url raw commander
4624 verbose url resolving [ 'https://registry.npmjs.org/', './commander' ]
4625 verbose url resolved https://registry.npmjs.org/commander
4626 info trying registry request attempt 1 at 16:38:05
4627 http GET https://registry.npmjs.org/commander
4628 http 200 https://registry.npmjs.org/dateformat/-/dateformat-1.0.2-1.2.3.tgz
4629 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777882529-0.14780803676694632\tmp.tgz
4630 silly lockFile e176fb35-2529-0-14780803676694632-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777882529-0.14780803676694632\package
4631 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777882529-0.14780803676694632\package C:\Users\Gaston\AppData\Roaming\npm-cache\e176fb35-2529-0-14780803676694632-package.lock
4632 silly lockFile fe15c347-2529-0-14780803676694632-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777882529-0.14780803676694632\tmp.tgz
4633 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777882529-0.14780803676694632\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\fe15c347-2529-0-14780803676694632-tmp-tgz.lock
4634 silly gunzTarPerm modes [ '755', '644' ]
4635 silly gunzTarPerm extractEntry package.json
4636 silly gunzTarPerm extractEntry Readme.md
4637 silly gunzTarPerm extractEntry lib/dateformat.js
4638 silly gunzTarPerm extractEntry test/test_weekofyear.js
4639 silly gunzTarPerm extractEntry test/test_weekofyear.sh
4640 silly lockFile e176fb35-2529-0-14780803676694632-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777882529-0.14780803676694632\package
4641 silly lockFile e176fb35-2529-0-14780803676694632-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777882529-0.14780803676694632\package
4642 silly lockFile fe15c347-2529-0-14780803676694632-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777882529-0.14780803676694632\tmp.tgz
4643 silly lockFile fe15c347-2529-0-14780803676694632-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777882529-0.14780803676694632\tmp.tgz
4644 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\dateformat\\1.0.2-1.2.3\\package.tgz',
4644 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388777882529-0.14780803676694632\\package' ]
4645 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\dateformat\1.0.2-1.2.3\package.tgz
4646 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777882529-0.14780803676694632\package
4647 silly lockFile e176fb35-2529-0-14780803676694632-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777882529-0.14780803676694632\package
4648 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777882529-0.14780803676694632\package C:\Users\Gaston\AppData\Roaming\npm-cache\e176fb35-2529-0-14780803676694632-package.lock
4649 silly lockFile c532b709-teformat-1-0-2-1-2-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\dateformat\1.0.2-1.2.3\package.tgz
4650 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\dateformat\1.0.2-1.2.3\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\c532b709-teformat-1-0-2-1-2-3-package-tgz.lock
4651 silly lockFile e176fb35-2529-0-14780803676694632-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777882529-0.14780803676694632\package
4652 silly lockFile e176fb35-2529-0-14780803676694632-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777882529-0.14780803676694632\package
4653 silly lockFile c532b709-teformat-1-0-2-1-2-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\dateformat\1.0.2-1.2.3\package.tgz
4654 silly lockFile c532b709-teformat-1-0-2-1-2-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\dateformat\1.0.2-1.2.3\package.tgz
4655 silly lockFile d4122d1f-e-dateformat-1-0-2-1-2-3-package C:\Users\Gaston\AppData\Roaming\npm-cache\dateformat\1.0.2-1.2.3\package
4656 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\dateformat\1.0.2-1.2.3\package C:\Users\Gaston\AppData\Roaming\npm-cache\d4122d1f-e-dateformat-1-0-2-1-2-3-package.lock
4657 silly lockFile d4122d1f-e-dateformat-1-0-2-1-2-3-package C:\Users\Gaston\AppData\Roaming\npm-cache\dateformat\1.0.2-1.2.3\package
4658 silly lockFile d4122d1f-e-dateformat-1-0-2-1-2-3-package C:\Users\Gaston\AppData\Roaming\npm-cache\dateformat\1.0.2-1.2.3\package
4659 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\dateformat\1.0.2-1.2.3\package.tgz
4660 silly lockFile b2c14ac4-e-dateformat-1-0-2-1-2-3-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\dateformat\1.0.2-1.2.3\package
4661 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\dateformat\1.0.2-1.2.3\package C:\Users\Gaston\AppData\Roaming\npm-cache\b2c14ac4-e-dateformat-1-0-2-1-2-3-package.lock
4662 silly lockFile c532b709-teformat-1-0-2-1-2-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\dateformat\1.0.2-1.2.3\package.tgz
4663 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\dateformat\1.0.2-1.2.3\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\c532b709-teformat-1-0-2-1-2-3-package-tgz.lock
4664 silly gunzTarPerm modes [ '755', '644' ]
4665 silly gunzTarPerm extractEntry package.json
4666 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
4667 silly gunzTarPerm extractEntry lib/dateformat.js
4668 silly gunzTarPerm modified mode [ 'lib/dateformat.js', 438, 420 ]
4669 silly gunzTarPerm extractEntry Readme.md
4670 silly gunzTarPerm modified mode [ 'Readme.md', 438, 420 ]
4671 silly gunzTarPerm extractEntry test/test_weekofyear.js
4672 silly gunzTarPerm modified mode [ 'test/test_weekofyear.js', 438, 420 ]
4673 silly gunzTarPerm extractEntry test/test_weekofyear.sh
4674 silly gunzTarPerm modified mode [ 'test/test_weekofyear.sh', 438, 420 ]
4675 silly lockFile b2c14ac4-e-dateformat-1-0-2-1-2-3-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\dateformat\1.0.2-1.2.3\package
4676 silly lockFile b2c14ac4-e-dateformat-1-0-2-1-2-3-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\dateformat\1.0.2-1.2.3\package
4677 silly lockFile c532b709-teformat-1-0-2-1-2-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\dateformat\1.0.2-1.2.3\package.tgz
4678 silly lockFile c532b709-teformat-1-0-2-1-2-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\dateformat\1.0.2-1.2.3\package.tgz
4679 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\dateformat\1.0.2-1.2.3\package.tgz 644
4680 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\dateformat\1.0.2-1.2.3\package.tgz
4681 silly lockFile 8242891e-ormat-dateformat-1-0-2-1-2-3-tgz https://registry.npmjs.org/dateformat/-/dateformat-1.0.2-1.2.3.tgz
4682 silly lockFile 8242891e-ormat-dateformat-1-0-2-1-2-3-tgz https://registry.npmjs.org/dateformat/-/dateformat-1.0.2-1.2.3.tgz
4683 silly lockFile 644d6e27-dateformat-1-0-2-1-2-3 dateformat@1.0.2-1.2.3
4684 silly lockFile 644d6e27-dateformat-1-0-2-1-2-3 dateformat@1.0.2-1.2.3
4685 http 200 https://registry.npmjs.org/coffee-script
4686 silly registry.get cb [ 200,
4686 silly registry.get   { date: 'Fri, 03 Jan 2014 19:37:01 GMT',
4686 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
4686 silly registry.get     etag: '"EK5KKBRNV96W4IAIZ9WRDQGGZ"',
4686 silly registry.get     'content-type': 'application/json',
4686 silly registry.get     'content-length': '41458',
4686 silly registry.get     'accept-ranges': 'bytes',
4686 silly registry.get     via: '1.1 varnish',
4686 silly registry.get     age: '356',
4686 silly registry.get     'x-served-by': 'cache-jfk1033-JFK',
4686 silly registry.get     'x-cache': 'HIT',
4686 silly registry.get     'x-cache-hits': '1',
4686 silly registry.get     'x-timer': 'S1388777821.692507029,VS0,VE59',
4686 silly registry.get     vary: 'Accept',
4686 silly registry.get     'keep-alive': 'timeout=10, max=41',
4686 silly registry.get     connection: 'Keep-Alive' } ]
4687 silly addNameRange number 2 { name: 'coffee-script',
4687 silly addNameRange   range: '>=1.3.3-0 <1.4.0-0',
4687 silly addNameRange   hasData: true }
4688 silly addNameRange versions [ 'coffee-script',
4688 silly addNameRange   [ '0.7.0',
4688 silly addNameRange     '0.7.1',
4688 silly addNameRange     '0.7.2',
4688 silly addNameRange     '0.9.0',
4688 silly addNameRange     '0.9.1',
4688 silly addNameRange     '0.9.2',
4688 silly addNameRange     '0.9.3',
4688 silly addNameRange     '0.9.4',
4688 silly addNameRange     '0.9.5',
4688 silly addNameRange     '0.9.6',
4688 silly addNameRange     '1.0.0',
4688 silly addNameRange     '1.0.1',
4688 silly addNameRange     '1.1.0',
4688 silly addNameRange     '1.1.1',
4688 silly addNameRange     '1.1.2',
4688 silly addNameRange     '1.1.3',
4688 silly addNameRange     '1.2.0',
4688 silly addNameRange     '1.3.0',
4688 silly addNameRange     '1.3.1',
4688 silly addNameRange     '1.3.2',
4688 silly addNameRange     '1.3.3',
4688 silly addNameRange     '1.4.0',
4688 silly addNameRange     '1.5.0',
4688 silly addNameRange     '1.6.0',
4688 silly addNameRange     '1.6.1',
4688 silly addNameRange     '1.6.2',
4688 silly addNameRange     '1.6.3' ] ]
4689 verbose addNamed [ 'coffee-script', '1.3.3' ]
4690 verbose addNamed [ '1.3.3', '1.3.3' ]
4691 silly lockFile 022c8436-coffee-script-1-3-3 coffee-script@1.3.3
4692 verbose lock coffee-script@1.3.3 C:\Users\Gaston\AppData\Roaming\npm-cache\022c8436-coffee-script-1-3-3.lock
4693 silly lockFile 1b193f6e-e-script-coffee-script-1-3-3-tgz https://registry.npmjs.org/coffee-script/-/coffee-script-1.3.3.tgz
4694 verbose lock https://registry.npmjs.org/coffee-script/-/coffee-script-1.3.3.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\1b193f6e-e-script-coffee-script-1-3-3-tgz.lock
4695 verbose addRemoteTarball [ 'https://registry.npmjs.org/coffee-script/-/coffee-script-1.3.3.tgz',
4695 verbose addRemoteTarball   '150d6b4cb522894369efed6a2101c20bc7f4a4f4' ]
4696 info retry fetch attempt 1 at 16:38:09
4697 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777889216-0.8781011821702123\tmp.tgz
4698 http GET https://registry.npmjs.org/coffee-script/-/coffee-script-1.3.3.tgz
4699 http 200 https://registry.npmjs.org/coffee-script/-/coffee-script-1.3.3.tgz
4700 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777880292-0.5112150551285595\tmp.tgz
4701 silly lockFile f24b394b-80292-0-5112150551285595-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777880292-0.5112150551285595\package
4702 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777880292-0.5112150551285595\package C:\Users\Gaston\AppData\Roaming\npm-cache\f24b394b-80292-0-5112150551285595-package.lock
4703 silly lockFile aefedaf2-80292-0-5112150551285595-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777880292-0.5112150551285595\tmp.tgz
4704 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777880292-0.5112150551285595\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\aefedaf2-80292-0-5112150551285595-tmp-tgz.lock
4705 silly gunzTarPerm modes [ '755', '644' ]
4706 silly gunzTarPerm extractEntry package.json
4707 silly gunzTarPerm extractEntry .npmignore
4708 silly gunzTarPerm extractEntry LICENSE
4709 silly gunzTarPerm extractEntry index.js
4710 silly gunzTarPerm extractEntry test.js
4711 silly gunzTarPerm extractEntry .travis.yml
4712 silly gunzTarPerm extractEntry lib/cache.js
4713 http 200 https://registry.npmjs.org/eventemitter2
4714 silly registry.get cb [ 200,
4714 silly registry.get   { date: 'Fri, 03 Jan 2014 19:37:03 GMT',
4714 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
4714 silly registry.get     etag: '"CEHZ55ABWSLVUCRJ2CLKUSP3U"',
4714 silly registry.get     'content-type': 'application/json',
4714 silly registry.get     'content-length': '96095',
4714 silly registry.get     'accept-ranges': 'bytes',
4714 silly registry.get     via: '1.1 varnish',
4714 silly registry.get     age: '3907',
4714 silly registry.get     'x-served-by': 'cache-jfk1021-JFK',
4714 silly registry.get     'x-cache': 'HIT',
4714 silly registry.get     'x-cache-hits': '1',
4714 silly registry.get     'x-timer': 'S1388777823.512271881,VS0,VE50',
4714 silly registry.get     vary: 'Accept',
4714 silly registry.get     'keep-alive': 'timeout=10, max=45',
4714 silly registry.get     connection: 'Keep-Alive' } ]
4715 silly gunzTarPerm extractEntry lib/connect.js
4716 silly gunzTarPerm extractEntry lib/index.js
4717 silly gunzTarPerm extractEntry lib/patch.js
4718 silly gunzTarPerm extractEntry lib/proto.js
4719 silly gunzTarPerm extractEntry lib/utils.js
4720 silly gunzTarPerm extractEntry lib/middleware/basicAuth.js
4721 silly gunzTarPerm extractEntry lib/middleware/errorHandler.js
4722 silly gunzTarPerm extractEntry lib/middleware/favicon.js
4723 silly gunzTarPerm extractEntry lib/middleware/json.js
4724 silly gunzTarPerm extractEntry lib/middleware/limit.js
4725 silly gunzTarPerm extractEntry lib/middleware/directory.js
4726 silly gunzTarPerm extractEntry lib/middleware/methodOverride.js
4727 silly addNameRange number 2 { name: 'eventemitter2',
4727 silly addNameRange   range: '>=0.4.13-0 <0.5.0-0',
4727 silly addNameRange   hasData: true }
4728 silly addNameRange versions [ 'eventemitter2',
4728 silly addNameRange   [ '0.0.1',
4728 silly addNameRange     '0.1.0',
4728 silly addNameRange     '0.1.1',
4728 silly addNameRange     '0.1.3',
4728 silly addNameRange     '0.2.5',
4728 silly addNameRange     '0.2.6',
4728 silly addNameRange     '0.2.7',
4728 silly addNameRange     '0.3.5',
4728 silly addNameRange     '0.3.6',
4728 silly addNameRange     '0.3.7',
4728 silly addNameRange     '0.4.0',
4728 silly addNameRange     '0.4.1',
4728 silly addNameRange     '0.4.3',
4728 silly addNameRange     '0.4.6',
4728 silly addNameRange     '0.4.7',
4728 silly addNameRange     '0.4.8',
4728 silly addNameRange     '0.4.9',
4728 silly addNameRange     '0.4.10',
4728 silly addNameRange     '0.4.11',
4728 silly addNameRange     '0.4.12',
4728 silly addNameRange     '0.4.13' ] ]
4729 verbose addNamed [ 'eventemitter2', '0.4.13' ]
4730 verbose addNamed [ '0.4.13', '0.4.13' ]
4731 silly lockFile 2bed8da6-eventemitter2-0-4-13 eventemitter2@0.4.13
4732 verbose lock eventemitter2@0.4.13 C:\Users\Gaston\AppData\Roaming\npm-cache\2bed8da6-eventemitter2-0-4-13.lock
4733 silly lockFile 875a753f-mitter2-eventemitter2-0-4-13-tgz https://registry.npmjs.org/eventemitter2/-/eventemitter2-0.4.13.tgz
4734 verbose lock https://registry.npmjs.org/eventemitter2/-/eventemitter2-0.4.13.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\875a753f-mitter2-eventemitter2-0-4-13-tgz.lock
4735 verbose addRemoteTarball [ 'https://registry.npmjs.org/eventemitter2/-/eventemitter2-0.4.13.tgz',
4735 verbose addRemoteTarball   '0a8ab97f9c1b563361b8927f9e80606277509153' ]
4736 info retry fetch attempt 1 at 16:38:15
4737 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777895664-0.1858005546964705\tmp.tgz
4738 http GET https://registry.npmjs.org/eventemitter2/-/eventemitter2-0.4.13.tgz
4739 silly gunzTarPerm extractEntry lib/middleware/multipart.js
4740 silly gunzTarPerm extractEntry lib/middleware/query.js
4741 silly gunzTarPerm extractEntry lib/middleware/responseTime.js
4742 silly gunzTarPerm extractEntry lib/middleware/urlencoded.js
4743 silly gunzTarPerm extractEntry lib/middleware/csrf.js
4744 silly gunzTarPerm extractEntry lib/middleware/session.js
4745 silly gunzTarPerm extractEntry lib/middleware/cookieSession.js
4746 silly gunzTarPerm extractEntry lib/middleware/static.js
4747 silly gunzTarPerm extractEntry lib/middleware/cookieParser.js
4748 silly gunzTarPerm extractEntry lib/middleware/staticCache.js
4749 silly gunzTarPerm extractEntry lib/middleware/compress.js
4750 silly gunzTarPerm extractEntry lib/middleware/timeout.js
4751 silly gunzTarPerm extractEntry lib/middleware/bodyParser.js
4752 silly gunzTarPerm extractEntry lib/middleware/vhost.js
4753 silly gunzTarPerm extractEntry lib/middleware/logger.js
4754 silly gunzTarPerm extractEntry lib/middleware/session/cookie.js
4755 silly gunzTarPerm extractEntry lib/middleware/session/memory.js
4756 silly gunzTarPerm extractEntry lib/middleware/session/session.js
4757 silly gunzTarPerm extractEntry lib/middleware/session/store.js
4758 silly gunzTarPerm extractEntry lib/public/directory.html
4759 silly gunzTarPerm extractEntry lib/public/error.html
4760 silly gunzTarPerm extractEntry lib/public/favicon.ico
4761 silly gunzTarPerm extractEntry lib/public/icons/page_white_edit.png
4762 silly gunzTarPerm extractEntry lib/public/icons/page.png
4763 silly gunzTarPerm extractEntry lib/public/icons/page_attach.png
4764 silly gunzTarPerm extractEntry lib/public/icons/page_code.png
4765 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777889216-0.8781011821702123\tmp.tgz
4766 silly lockFile ce6d830a-89216-0-8781011821702123-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777889216-0.8781011821702123\package
4767 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777889216-0.8781011821702123\package C:\Users\Gaston\AppData\Roaming\npm-cache\ce6d830a-89216-0-8781011821702123-package.lock
4768 silly lockFile 607fc1dc-89216-0-8781011821702123-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777889216-0.8781011821702123\tmp.tgz
4769 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777889216-0.8781011821702123\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\607fc1dc-89216-0-8781011821702123-tmp-tgz.lock
4770 silly gunzTarPerm extractEntry lib/public/icons/page_copy.png
4771 silly gunzTarPerm extractEntry lib/public/icons/page_delete.png
4772 silly gunzTarPerm modes [ '755', '644' ]
4773 silly gunzTarPerm extractEntry package.json
4774 silly gunzTarPerm extractEntry lib/public/icons/page_edit.png
4775 silly gunzTarPerm extractEntry lib/public/icons/page_error.png
4776 silly gunzTarPerm extractEntry .npmignore
4777 silly gunzTarPerm extractEntry README
4778 silly gunzTarPerm extractEntry LICENSE
4779 silly gunzTarPerm extractEntry bin/cake
4780 silly gunzTarPerm extractEntry lib/public/icons/page_excel.png
4781 silly gunzTarPerm extractEntry lib/public/icons/page_find.png
4782 silly gunzTarPerm extractEntry bin/coffee
4783 silly gunzTarPerm extractEntry CNAME
4784 silly gunzTarPerm extractEntry extras/jsl.conf
4785 silly gunzTarPerm extractEntry lib/coffee-script/browser.js
4786 silly gunzTarPerm extractEntry lib/public/icons/page_gear.png
4787 silly gunzTarPerm extractEntry lib/public/icons/page_go.png
4788 silly gunzTarPerm extractEntry lib/public/icons/page_green.png
4789 silly gunzTarPerm extractEntry lib/public/icons/page_key.png
4790 silly gunzTarPerm extractEntry lib/public/icons/page_lightning.png
4791 silly gunzTarPerm extractEntry lib/public/icons/page_link.png
4792 silly gunzTarPerm extractEntry lib/coffee-script/command.js
4793 silly gunzTarPerm extractEntry lib/public/icons/page_paintbrush.png
4794 silly gunzTarPerm extractEntry lib/public/icons/page_paste.png
4795 silly gunzTarPerm extractEntry lib/coffee-script/grammar.js
4796 silly gunzTarPerm extractEntry lib/coffee-script/helpers.js
4797 silly gunzTarPerm extractEntry lib/coffee-script/index.js
4798 silly gunzTarPerm extractEntry lib/coffee-script/coffee-script.js
4799 silly gunzTarPerm extractEntry lib/public/icons/page_red.png
4800 silly gunzTarPerm extractEntry lib/public/icons/page_refresh.png
4801 silly gunzTarPerm extractEntry lib/coffee-script/nodes.js
4802 silly gunzTarPerm extractEntry lib/coffee-script/optparse.js
4803 silly gunzTarPerm extractEntry lib/coffee-script/parser.js
4804 silly gunzTarPerm extractEntry lib/coffee-script/repl.js
4805 silly gunzTarPerm extractEntry lib/public/icons/page_save.png
4806 silly gunzTarPerm extractEntry lib/public/icons/page_white.png
4807 silly gunzTarPerm extractEntry lib/public/icons/page_white_acrobat.png
4808 silly gunzTarPerm extractEntry lib/public/icons/page_white_actionscript.png
4809 silly gunzTarPerm extractEntry lib/coffee-script/rewriter.js
4810 silly gunzTarPerm extractEntry lib/coffee-script/cake.js
4811 silly gunzTarPerm extractEntry lib/public/icons/page_white_add.png
4812 silly gunzTarPerm extractEntry lib/public/icons/page_white_c.png
4813 silly gunzTarPerm extractEntry lib/public/icons/page_white_camera.png
4814 silly gunzTarPerm extractEntry lib/public/icons/page_white_cd.png
4815 silly gunzTarPerm extractEntry lib/public/icons/page_white_code.png
4816 silly gunzTarPerm extractEntry lib/public/icons/page_white_code_red.png
4817 silly gunzTarPerm extractEntry lib/coffee-script/scope.js
4818 silly gunzTarPerm extractEntry lib/coffee-script/lexer.js
4819 silly gunzTarPerm extractEntry lib/public/icons/page_white_coldfusion.png
4820 silly gunzTarPerm extractEntry lib/public/icons/page_white_compressed.png
4821 silly gunzTarPerm extractEntry lib/public/icons/page_white_copy.png
4822 silly gunzTarPerm extractEntry lib/public/icons/page_white_cplusplus.png
4823 silly gunzTarPerm extractEntry Rakefile
4824 silly gunzTarPerm extractEntry lib/public/icons/page_white_csharp.png
4825 silly gunzTarPerm extractEntry lib/public/icons/page_white_cup.png
4826 silly gunzTarPerm extractEntry lib/public/icons/page_white_database.png
4827 silly gunzTarPerm extractEntry lib/public/icons/page_white_delete.png
4828 silly gunzTarPerm extractEntry lib/public/icons/page_white_dvd.png
4829 silly gunzTarPerm extractEntry lib/public/icons/page_add.png
4830 silly gunzTarPerm extractEntry lib/public/icons/page_white_error.png
4831 silly gunzTarPerm extractEntry lib/public/icons/page_white_excel.png
4832 silly gunzTarPerm extractEntry lib/public/icons/page_white_find.png
4833 silly gunzTarPerm extractEntry lib/public/icons/page_white_flash.png
4834 silly gunzTarPerm extractEntry lib/public/icons/page_white_freehand.png
4835 silly gunzTarPerm extractEntry lib/public/icons/page_white_gear.png
4836 silly gunzTarPerm extractEntry lib/public/icons/page_white_get.png
4837 silly gunzTarPerm extractEntry lib/public/icons/page_white_go.png
4838 silly gunzTarPerm extractEntry lib/public/icons/page_white_h.png
4839 silly gunzTarPerm extractEntry lib/public/icons/page_white_horizontal.png
4840 silly gunzTarPerm extractEntry lib/public/icons/page_white_key.png
4841 silly gunzTarPerm extractEntry lib/public/icons/page_white_lightning.png
4842 silly gunzTarPerm extractEntry lib/public/icons/page_white_link.png
4843 silly gunzTarPerm extractEntry lib/public/icons/page_white_magnify.png
4844 silly gunzTarPerm extractEntry lib/public/icons/page_white_medal.png
4845 silly gunzTarPerm extractEntry lib/public/icons/page_white_office.png
4846 silly gunzTarPerm extractEntry lib/public/icons/page_white_paint.png
4847 silly gunzTarPerm extractEntry lib/public/icons/page_white_paintbrush.png
4848 silly gunzTarPerm extractEntry lib/public/icons/page_white_paste.png
4849 silly gunzTarPerm extractEntry lib/public/icons/page_white_php.png
4850 silly gunzTarPerm extractEntry lib/public/icons/page_white_picture.png
4851 silly gunzTarPerm extractEntry lib/public/icons/page_white_powerpoint.png
4852 silly gunzTarPerm extractEntry lib/public/icons/page_white_put.png
4853 silly gunzTarPerm extractEntry lib/public/icons/page_white_ruby.png
4854 silly gunzTarPerm extractEntry lib/public/icons/page_white_stack.png
4855 silly gunzTarPerm extractEntry lib/public/icons/page_white_star.png
4856 silly gunzTarPerm extractEntry lib/public/icons/page_white_swoosh.png
4857 silly gunzTarPerm extractEntry lib/public/icons/page_white_text.png
4858 silly gunzTarPerm extractEntry lib/public/icons/page_white_text_width.png
4859 silly gunzTarPerm extractEntry lib/public/icons/page_white_tux.png
4860 silly gunzTarPerm extractEntry lib/public/icons/page_white_vector.png
4861 silly gunzTarPerm extractEntry lib/public/icons/page_white_visualstudio.png
4862 silly gunzTarPerm extractEntry lib/public/icons/page_white_width.png
4863 silly gunzTarPerm extractEntry lib/public/icons/page_white_word.png
4864 silly gunzTarPerm extractEntry lib/public/icons/page_white_world.png
4865 silly gunzTarPerm extractEntry lib/public/icons/page_white_wrench.png
4866 silly gunzTarPerm extractEntry lib/public/icons/page_white_zip.png
4867 silly gunzTarPerm extractEntry lib/public/icons/page_word.png
4868 silly gunzTarPerm extractEntry lib/public/icons/page_world.png
4869 silly gunzTarPerm extractEntry lib/public/style.css
4870 silly gunzTarPerm extractEntry Readme.md
4871 silly lockFile ce6d830a-89216-0-8781011821702123-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777889216-0.8781011821702123\package
4872 silly lockFile ce6d830a-89216-0-8781011821702123-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777889216-0.8781011821702123\package
4873 silly lockFile 607fc1dc-89216-0-8781011821702123-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777889216-0.8781011821702123\tmp.tgz
4874 silly lockFile 607fc1dc-89216-0-8781011821702123-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777889216-0.8781011821702123\tmp.tgz
4875 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\coffee-script\\1.3.3\\package.tgz',
4875 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388777889216-0.8781011821702123\\package' ]
4876 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\coffee-script\1.3.3\package.tgz
4877 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777889216-0.8781011821702123\package
4878 silly lockFile ce6d830a-89216-0-8781011821702123-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777889216-0.8781011821702123\package
4879 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777889216-0.8781011821702123\package C:\Users\Gaston\AppData\Roaming\npm-cache\ce6d830a-89216-0-8781011821702123-package.lock
4880 silly lockFile 1817ccab--coffee-script-1-3-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\coffee-script\1.3.3\package.tgz
4881 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\coffee-script\1.3.3\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\1817ccab--coffee-script-1-3-3-package-tgz.lock
4882 silly lockFile f24b394b-80292-0-5112150551285595-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777880292-0.5112150551285595\package
4883 silly lockFile f24b394b-80292-0-5112150551285595-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777880292-0.5112150551285595\package
4884 silly lockFile aefedaf2-80292-0-5112150551285595-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777880292-0.5112150551285595\tmp.tgz
4885 silly lockFile aefedaf2-80292-0-5112150551285595-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777880292-0.5112150551285595\tmp.tgz
4886 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\connect\\2.7.11\\package.tgz',
4886 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388777880292-0.5112150551285595\\package' ]
4887 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\connect\2.7.11\package.tgz
4888 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777880292-0.5112150551285595\package
4889 silly lockFile f24b394b-80292-0-5112150551285595-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777880292-0.5112150551285595\package
4890 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777880292-0.5112150551285595\package C:\Users\Gaston\AppData\Roaming\npm-cache\f24b394b-80292-0-5112150551285595-package.lock
4891 silly lockFile 4c35fa8b-cache-connect-2-7-11-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\connect\2.7.11\package.tgz
4892 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\connect\2.7.11\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\4c35fa8b-cache-connect-2-7-11-package-tgz.lock
4893 silly lockFile ce6d830a-89216-0-8781011821702123-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777889216-0.8781011821702123\package
4894 silly lockFile ce6d830a-89216-0-8781011821702123-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777889216-0.8781011821702123\package
4895 silly lockFile 1817ccab--coffee-script-1-3-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\coffee-script\1.3.3\package.tgz
4896 silly lockFile 1817ccab--coffee-script-1-3-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\coffee-script\1.3.3\package.tgz
4897 silly lockFile ed0d8825-ache-coffee-script-1-3-3-package C:\Users\Gaston\AppData\Roaming\npm-cache\coffee-script\1.3.3\package
4898 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\coffee-script\1.3.3\package C:\Users\Gaston\AppData\Roaming\npm-cache\ed0d8825-ache-coffee-script-1-3-3-package.lock
4899 silly lockFile ed0d8825-ache-coffee-script-1-3-3-package C:\Users\Gaston\AppData\Roaming\npm-cache\coffee-script\1.3.3\package
4900 silly lockFile ed0d8825-ache-coffee-script-1-3-3-package C:\Users\Gaston\AppData\Roaming\npm-cache\coffee-script\1.3.3\package
4901 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\coffee-script\1.3.3\package.tgz
4902 silly lockFile 9cbb55cf-ache-coffee-script-1-3-3-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\coffee-script\1.3.3\package
4903 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\coffee-script\1.3.3\package C:\Users\Gaston\AppData\Roaming\npm-cache\9cbb55cf-ache-coffee-script-1-3-3-package.lock
4904 silly lockFile 1817ccab--coffee-script-1-3-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\coffee-script\1.3.3\package.tgz
4905 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\coffee-script\1.3.3\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\1817ccab--coffee-script-1-3-3-package-tgz.lock
4906 silly gunzTarPerm modes [ '755', '644' ]
4907 silly gunzTarPerm extractEntry package.json
4908 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
4909 silly gunzTarPerm extractEntry .npmignore
4910 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
4911 silly gunzTarPerm extractEntry README
4912 silly gunzTarPerm modified mode [ 'README', 438, 420 ]
4913 silly gunzTarPerm extractEntry LICENSE
4914 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
4915 silly gunzTarPerm extractEntry bin/cake
4916 silly gunzTarPerm modified mode [ 'bin/cake', 438, 420 ]
4917 silly gunzTarPerm extractEntry bin/coffee
4918 silly gunzTarPerm modified mode [ 'bin/coffee', 438, 420 ]
4919 silly gunzTarPerm extractEntry CNAME
4920 silly gunzTarPerm modified mode [ 'CNAME', 438, 420 ]
4921 silly gunzTarPerm extractEntry extras/jsl.conf
4922 silly gunzTarPerm modified mode [ 'extras/jsl.conf', 438, 420 ]
4923 silly gunzTarPerm extractEntry lib/coffee-script/browser.js
4924 silly gunzTarPerm modified mode [ 'lib/coffee-script/browser.js', 438, 420 ]
4925 silly gunzTarPerm extractEntry lib/coffee-script/command.js
4926 silly gunzTarPerm modified mode [ 'lib/coffee-script/command.js', 438, 420 ]
4927 silly gunzTarPerm extractEntry lib/coffee-script/grammar.js
4928 silly gunzTarPerm modified mode [ 'lib/coffee-script/grammar.js', 438, 420 ]
4929 silly gunzTarPerm extractEntry lib/coffee-script/helpers.js
4930 silly gunzTarPerm modified mode [ 'lib/coffee-script/helpers.js', 438, 420 ]
4931 silly gunzTarPerm extractEntry lib/coffee-script/index.js
4932 silly gunzTarPerm modified mode [ 'lib/coffee-script/index.js', 438, 420 ]
4933 silly gunzTarPerm extractEntry lib/coffee-script/coffee-script.js
4934 silly gunzTarPerm modified mode [ 'lib/coffee-script/coffee-script.js', 438, 420 ]
4935 silly gunzTarPerm extractEntry lib/coffee-script/nodes.js
4936 silly gunzTarPerm modified mode [ 'lib/coffee-script/nodes.js', 438, 420 ]
4937 silly gunzTarPerm extractEntry lib/coffee-script/optparse.js
4938 silly gunzTarPerm modified mode [ 'lib/coffee-script/optparse.js', 438, 420 ]
4939 silly gunzTarPerm extractEntry lib/coffee-script/parser.js
4940 silly gunzTarPerm modified mode [ 'lib/coffee-script/parser.js', 438, 420 ]
4941 silly gunzTarPerm extractEntry lib/coffee-script/repl.js
4942 silly gunzTarPerm modified mode [ 'lib/coffee-script/repl.js', 438, 420 ]
4943 silly gunzTarPerm extractEntry lib/coffee-script/rewriter.js
4944 silly gunzTarPerm modified mode [ 'lib/coffee-script/rewriter.js', 438, 420 ]
4945 silly gunzTarPerm extractEntry lib/coffee-script/cake.js
4946 silly gunzTarPerm modified mode [ 'lib/coffee-script/cake.js', 438, 420 ]
4947 silly gunzTarPerm extractEntry lib/coffee-script/scope.js
4948 silly gunzTarPerm modified mode [ 'lib/coffee-script/scope.js', 438, 420 ]
4949 silly gunzTarPerm extractEntry lib/coffee-script/lexer.js
4950 silly gunzTarPerm modified mode [ 'lib/coffee-script/lexer.js', 438, 420 ]
4951 silly gunzTarPerm extractEntry Rakefile
4952 silly gunzTarPerm modified mode [ 'Rakefile', 438, 420 ]
4953 silly lockFile f24b394b-80292-0-5112150551285595-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777880292-0.5112150551285595\package
4954 silly lockFile f24b394b-80292-0-5112150551285595-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777880292-0.5112150551285595\package
4955 silly lockFile 4c35fa8b-cache-connect-2-7-11-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\connect\2.7.11\package.tgz
4956 silly lockFile 4c35fa8b-cache-connect-2-7-11-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\connect\2.7.11\package.tgz
4957 silly lockFile c87448ad-npm-cache-connect-2-7-11-package C:\Users\Gaston\AppData\Roaming\npm-cache\connect\2.7.11\package
4958 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\connect\2.7.11\package C:\Users\Gaston\AppData\Roaming\npm-cache\c87448ad-npm-cache-connect-2-7-11-package.lock
4959 silly lockFile c87448ad-npm-cache-connect-2-7-11-package C:\Users\Gaston\AppData\Roaming\npm-cache\connect\2.7.11\package
4960 silly lockFile c87448ad-npm-cache-connect-2-7-11-package C:\Users\Gaston\AppData\Roaming\npm-cache\connect\2.7.11\package
4961 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\connect\2.7.11\package.tgz
4962 silly lockFile cc1f8ce7-npm-cache-connect-2-7-11-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\connect\2.7.11\package
4963 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\connect\2.7.11\package C:\Users\Gaston\AppData\Roaming\npm-cache\cc1f8ce7-npm-cache-connect-2-7-11-package.lock
4964 silly lockFile 4c35fa8b-cache-connect-2-7-11-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\connect\2.7.11\package.tgz
4965 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\connect\2.7.11\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\4c35fa8b-cache-connect-2-7-11-package-tgz.lock
4966 silly gunzTarPerm modes [ '755', '644' ]
4967 silly gunzTarPerm extractEntry package.json
4968 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
4969 http 200 https://registry.npmjs.org/eventemitter2/-/eventemitter2-0.4.13.tgz
4970 silly gunzTarPerm extractEntry .npmignore
4971 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
4972 silly gunzTarPerm extractEntry LICENSE
4973 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
4974 silly gunzTarPerm extractEntry index.js
4975 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
4976 silly gunzTarPerm extractEntry test.js
4977 silly gunzTarPerm modified mode [ 'test.js', 438, 420 ]
4978 silly gunzTarPerm extractEntry .travis.yml
4979 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]
4980 silly gunzTarPerm extractEntry lib/cache.js
4981 silly gunzTarPerm modified mode [ 'lib/cache.js', 438, 420 ]
4982 silly gunzTarPerm extractEntry lib/connect.js
4983 silly gunzTarPerm modified mode [ 'lib/connect.js', 438, 420 ]
4984 silly gunzTarPerm extractEntry lib/index.js
4985 silly gunzTarPerm modified mode [ 'lib/index.js', 438, 420 ]
4986 silly gunzTarPerm extractEntry lib/patch.js
4987 silly gunzTarPerm modified mode [ 'lib/patch.js', 438, 420 ]
4988 silly gunzTarPerm extractEntry lib/proto.js
4989 silly gunzTarPerm modified mode [ 'lib/proto.js', 438, 420 ]
4990 silly gunzTarPerm extractEntry lib/utils.js
4991 silly gunzTarPerm modified mode [ 'lib/utils.js', 438, 420 ]
4992 silly gunzTarPerm extractEntry lib/middleware/basicAuth.js
4993 silly gunzTarPerm modified mode [ 'lib/middleware/basicAuth.js', 438, 420 ]
4994 silly gunzTarPerm extractEntry lib/middleware/errorHandler.js
4995 silly gunzTarPerm modified mode [ 'lib/middleware/errorHandler.js', 438, 420 ]
4996 silly gunzTarPerm extractEntry lib/middleware/favicon.js
4997 silly gunzTarPerm modified mode [ 'lib/middleware/favicon.js', 438, 420 ]
4998 silly gunzTarPerm extractEntry lib/middleware/json.js
4999 silly gunzTarPerm modified mode [ 'lib/middleware/json.js', 438, 420 ]
5000 silly gunzTarPerm extractEntry lib/middleware/limit.js
5001 silly gunzTarPerm modified mode [ 'lib/middleware/limit.js', 438, 420 ]
5002 silly gunzTarPerm extractEntry lib/middleware/directory.js
5003 silly gunzTarPerm modified mode [ 'lib/middleware/directory.js', 438, 420 ]
5004 silly gunzTarPerm extractEntry lib/middleware/methodOverride.js
5005 silly gunzTarPerm modified mode [ 'lib/middleware/methodOverride.js', 438, 420 ]
5006 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777895664-0.1858005546964705\tmp.tgz
5007 silly lockFile 69542925-95664-0-1858005546964705-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777895664-0.1858005546964705\package
5008 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777895664-0.1858005546964705\package C:\Users\Gaston\AppData\Roaming\npm-cache\69542925-95664-0-1858005546964705-package.lock
5009 silly lockFile 39578927-95664-0-1858005546964705-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777895664-0.1858005546964705\tmp.tgz
5010 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777895664-0.1858005546964705\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\39578927-95664-0-1858005546964705-tmp-tgz.lock
5011 silly gunzTarPerm modes [ '755', '644' ]
5012 silly gunzTarPerm extractEntry lib/middleware/multipart.js
5013 silly gunzTarPerm modified mode [ 'lib/middleware/multipart.js', 438, 420 ]
5014 silly gunzTarPerm extractEntry lib/middleware/query.js
5015 silly gunzTarPerm modified mode [ 'lib/middleware/query.js', 438, 420 ]
5016 silly gunzTarPerm extractEntry package.json
5017 silly gunzTarPerm extractEntry README.md
5018 silly gunzTarPerm extractEntry index.js
5019 silly gunzTarPerm extractEntry lib/middleware/responseTime.js
5020 silly gunzTarPerm modified mode [ 'lib/middleware/responseTime.js', 438, 420 ]
5021 silly gunzTarPerm extractEntry lib/middleware/urlencoded.js
5022 silly gunzTarPerm modified mode [ 'lib/middleware/urlencoded.js', 438, 420 ]
5023 silly gunzTarPerm extractEntry lib/eventemitter2.js
5024 silly gunzTarPerm extractEntry lib/middleware/csrf.js
5025 silly gunzTarPerm modified mode [ 'lib/middleware/csrf.js', 438, 420 ]
5026 silly gunzTarPerm extractEntry lib/middleware/session.js
5027 silly gunzTarPerm modified mode [ 'lib/middleware/session.js', 438, 420 ]
5028 silly gunzTarPerm extractEntry lib/middleware/cookieSession.js
5029 silly gunzTarPerm modified mode [ 'lib/middleware/cookieSession.js', 438, 420 ]
5030 silly gunzTarPerm extractEntry lib/middleware/static.js
5031 silly gunzTarPerm modified mode [ 'lib/middleware/static.js', 438, 420 ]
5032 silly gunzTarPerm extractEntry lib/middleware/cookieParser.js
5033 silly gunzTarPerm modified mode [ 'lib/middleware/cookieParser.js', 438, 420 ]
5034 silly gunzTarPerm extractEntry lib/middleware/staticCache.js
5035 silly gunzTarPerm modified mode [ 'lib/middleware/staticCache.js', 438, 420 ]
5036 silly lockFile 69542925-95664-0-1858005546964705-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777895664-0.1858005546964705\package
5037 silly lockFile 69542925-95664-0-1858005546964705-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777895664-0.1858005546964705\package
5038 silly lockFile 39578927-95664-0-1858005546964705-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777895664-0.1858005546964705\tmp.tgz
5039 silly lockFile 39578927-95664-0-1858005546964705-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777895664-0.1858005546964705\tmp.tgz
5040 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\eventemitter2\\0.4.13\\package.tgz',
5040 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388777895664-0.1858005546964705\\package' ]
5041 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\eventemitter2\0.4.13\package.tgz
5042 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777895664-0.1858005546964705\package
5043 silly lockFile 69542925-95664-0-1858005546964705-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777895664-0.1858005546964705\package
5044 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777895664-0.1858005546964705\package C:\Users\Gaston\AppData\Roaming\npm-cache\69542925-95664-0-1858005546964705-package.lock
5045 silly lockFile 7f94c6d1-eventemitter2-0-4-13-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\eventemitter2\0.4.13\package.tgz
5046 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\eventemitter2\0.4.13\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\7f94c6d1-eventemitter2-0-4-13-package-tgz.lock
5047 silly gunzTarPerm extractEntry lib/middleware/compress.js
5048 silly gunzTarPerm modified mode [ 'lib/middleware/compress.js', 438, 420 ]
5049 silly gunzTarPerm extractEntry lib/middleware/timeout.js
5050 silly gunzTarPerm modified mode [ 'lib/middleware/timeout.js', 438, 420 ]
5051 silly gunzTarPerm extractEntry lib/middleware/bodyParser.js
5052 silly gunzTarPerm modified mode [ 'lib/middleware/bodyParser.js', 438, 420 ]
5053 silly gunzTarPerm extractEntry lib/middleware/vhost.js
5054 silly gunzTarPerm modified mode [ 'lib/middleware/vhost.js', 438, 420 ]
5055 silly gunzTarPerm extractEntry lib/middleware/logger.js
5056 silly gunzTarPerm modified mode [ 'lib/middleware/logger.js', 438, 420 ]
5057 silly gunzTarPerm extractEntry lib/middleware/session/cookie.js
5058 silly gunzTarPerm modified mode [ 'lib/middleware/session/cookie.js', 438, 420 ]
5059 silly lockFile 69542925-95664-0-1858005546964705-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777895664-0.1858005546964705\package
5060 silly lockFile 69542925-95664-0-1858005546964705-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777895664-0.1858005546964705\package
5061 silly lockFile 7f94c6d1-eventemitter2-0-4-13-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\eventemitter2\0.4.13\package.tgz
5062 silly lockFile 7f94c6d1-eventemitter2-0-4-13-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\eventemitter2\0.4.13\package.tgz
5063 silly gunzTarPerm extractEntry lib/middleware/session/memory.js
5064 silly gunzTarPerm modified mode [ 'lib/middleware/session/memory.js', 438, 420 ]
5065 silly gunzTarPerm extractEntry lib/middleware/session/session.js
5066 silly gunzTarPerm modified mode [ 'lib/middleware/session/session.js', 438, 420 ]
5067 silly lockFile 36273efa-che-eventemitter2-0-4-13-package C:\Users\Gaston\AppData\Roaming\npm-cache\eventemitter2\0.4.13\package
5068 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\eventemitter2\0.4.13\package C:\Users\Gaston\AppData\Roaming\npm-cache\36273efa-che-eventemitter2-0-4-13-package.lock
5069 silly lockFile 36273efa-che-eventemitter2-0-4-13-package C:\Users\Gaston\AppData\Roaming\npm-cache\eventemitter2\0.4.13\package
5070 silly lockFile 36273efa-che-eventemitter2-0-4-13-package C:\Users\Gaston\AppData\Roaming\npm-cache\eventemitter2\0.4.13\package
5071 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\eventemitter2\0.4.13\package.tgz
5072 silly lockFile e9e0ee30-che-eventemitter2-0-4-13-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\eventemitter2\0.4.13\package
5073 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\eventemitter2\0.4.13\package C:\Users\Gaston\AppData\Roaming\npm-cache\e9e0ee30-che-eventemitter2-0-4-13-package.lock
5074 silly lockFile 7f94c6d1-eventemitter2-0-4-13-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\eventemitter2\0.4.13\package.tgz
5075 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\eventemitter2\0.4.13\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\7f94c6d1-eventemitter2-0-4-13-package-tgz.lock
5076 silly gunzTarPerm modes [ '755', '644' ]
5077 silly gunzTarPerm extractEntry package.json
5078 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
5079 silly gunzTarPerm extractEntry lib/middleware/session/store.js
5080 silly gunzTarPerm modified mode [ 'lib/middleware/session/store.js', 438, 420 ]
5081 silly gunzTarPerm extractEntry lib/public/directory.html
5082 silly gunzTarPerm modified mode [ 'lib/public/directory.html', 438, 420 ]
5083 silly gunzTarPerm extractEntry README.md
5084 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
5085 silly gunzTarPerm extractEntry index.js
5086 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
5087 silly gunzTarPerm extractEntry lib/public/error.html
5088 silly gunzTarPerm modified mode [ 'lib/public/error.html', 438, 420 ]
5089 silly gunzTarPerm extractEntry lib/public/favicon.ico
5090 silly gunzTarPerm modified mode [ 'lib/public/favicon.ico', 438, 420 ]
5091 silly gunzTarPerm extractEntry lib/eventemitter2.js
5092 silly gunzTarPerm modified mode [ 'lib/eventemitter2.js', 438, 420 ]
5093 silly lockFile 9cbb55cf-ache-coffee-script-1-3-3-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\coffee-script\1.3.3\package
5094 silly lockFile 9cbb55cf-ache-coffee-script-1-3-3-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\coffee-script\1.3.3\package
5095 silly lockFile 1817ccab--coffee-script-1-3-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\coffee-script\1.3.3\package.tgz
5096 silly lockFile 1817ccab--coffee-script-1-3-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\coffee-script\1.3.3\package.tgz
5097 silly gunzTarPerm extractEntry lib/public/icons/page_white_edit.png
5098 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_edit.png', 438, 420 ]
5099 silly gunzTarPerm extractEntry lib/public/icons/page.png
5100 silly gunzTarPerm modified mode [ 'lib/public/icons/page.png', 438, 420 ]
5101 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\coffee-script\1.3.3\package.tgz 644
5102 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\coffee-script\1.3.3\package.tgz
5103 silly lockFile 1b193f6e-e-script-coffee-script-1-3-3-tgz https://registry.npmjs.org/coffee-script/-/coffee-script-1.3.3.tgz
5104 silly lockFile 1b193f6e-e-script-coffee-script-1-3-3-tgz https://registry.npmjs.org/coffee-script/-/coffee-script-1.3.3.tgz
5105 silly lockFile 022c8436-coffee-script-1-3-3 coffee-script@1.3.3
5106 silly lockFile 022c8436-coffee-script-1-3-3 coffee-script@1.3.3
5107 silly lockFile f72bb580-coffee-script-1-3-3 coffee-script@~1.3.3
5108 silly lockFile f72bb580-coffee-script-1-3-3 coffee-script@~1.3.3
5109 silly gunzTarPerm extractEntry lib/public/icons/page_attach.png
5110 silly gunzTarPerm modified mode [ 'lib/public/icons/page_attach.png', 438, 420 ]
5111 silly gunzTarPerm extractEntry lib/public/icons/page_code.png
5112 silly gunzTarPerm modified mode [ 'lib/public/icons/page_code.png', 438, 420 ]
5113 silly gunzTarPerm extractEntry lib/public/icons/page_copy.png
5114 silly gunzTarPerm modified mode [ 'lib/public/icons/page_copy.png', 438, 420 ]
5115 silly gunzTarPerm extractEntry lib/public/icons/page_delete.png
5116 silly gunzTarPerm modified mode [ 'lib/public/icons/page_delete.png', 438, 420 ]
5117 silly gunzTarPerm extractEntry lib/public/icons/page_edit.png
5118 silly gunzTarPerm modified mode [ 'lib/public/icons/page_edit.png', 438, 420 ]
5119 silly gunzTarPerm extractEntry lib/public/icons/page_error.png
5120 silly gunzTarPerm modified mode [ 'lib/public/icons/page_error.png', 438, 420 ]
5121 silly gunzTarPerm extractEntry lib/public/icons/page_excel.png
5122 silly gunzTarPerm modified mode [ 'lib/public/icons/page_excel.png', 438, 420 ]
5123 silly gunzTarPerm extractEntry lib/public/icons/page_find.png
5124 silly gunzTarPerm modified mode [ 'lib/public/icons/page_find.png', 438, 420 ]
5125 silly lockFile e9e0ee30-che-eventemitter2-0-4-13-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\eventemitter2\0.4.13\package
5126 silly lockFile e9e0ee30-che-eventemitter2-0-4-13-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\eventemitter2\0.4.13\package
5127 silly lockFile 7f94c6d1-eventemitter2-0-4-13-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\eventemitter2\0.4.13\package.tgz
5128 silly lockFile 7f94c6d1-eventemitter2-0-4-13-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\eventemitter2\0.4.13\package.tgz
5129 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\eventemitter2\0.4.13\package.tgz 644
5130 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\eventemitter2\0.4.13\package.tgz
5131 silly lockFile 875a753f-mitter2-eventemitter2-0-4-13-tgz https://registry.npmjs.org/eventemitter2/-/eventemitter2-0.4.13.tgz
5132 silly lockFile 875a753f-mitter2-eventemitter2-0-4-13-tgz https://registry.npmjs.org/eventemitter2/-/eventemitter2-0.4.13.tgz
5133 silly lockFile 2bed8da6-eventemitter2-0-4-13 eventemitter2@0.4.13
5134 silly lockFile 2bed8da6-eventemitter2-0-4-13 eventemitter2@0.4.13
5135 silly lockFile adbd1d63-eventemitter2-0-4-13 eventemitter2@~0.4.13
5136 silly lockFile adbd1d63-eventemitter2-0-4-13 eventemitter2@~0.4.13
5137 silly gunzTarPerm extractEntry lib/public/icons/page_gear.png
5138 silly gunzTarPerm modified mode [ 'lib/public/icons/page_gear.png', 438, 420 ]
5139 silly gunzTarPerm extractEntry lib/public/icons/page_go.png
5140 silly gunzTarPerm modified mode [ 'lib/public/icons/page_go.png', 438, 420 ]
5141 silly gunzTarPerm extractEntry lib/public/icons/page_green.png
5142 silly gunzTarPerm modified mode [ 'lib/public/icons/page_green.png', 438, 420 ]
5143 silly gunzTarPerm extractEntry lib/public/icons/page_key.png
5144 silly gunzTarPerm modified mode [ 'lib/public/icons/page_key.png', 438, 420 ]
5145 silly gunzTarPerm extractEntry lib/public/icons/page_lightning.png
5146 silly gunzTarPerm modified mode [ 'lib/public/icons/page_lightning.png', 438, 420 ]
5147 silly gunzTarPerm extractEntry lib/public/icons/page_link.png
5148 silly gunzTarPerm modified mode [ 'lib/public/icons/page_link.png', 438, 420 ]
5149 silly gunzTarPerm extractEntry lib/public/icons/page_paintbrush.png
5150 silly gunzTarPerm modified mode [ 'lib/public/icons/page_paintbrush.png', 438, 420 ]
5151 silly gunzTarPerm extractEntry lib/public/icons/page_paste.png
5152 silly gunzTarPerm modified mode [ 'lib/public/icons/page_paste.png', 438, 420 ]
5153 silly gunzTarPerm extractEntry lib/public/icons/page_red.png
5154 silly gunzTarPerm modified mode [ 'lib/public/icons/page_red.png', 438, 420 ]
5155 silly gunzTarPerm extractEntry lib/public/icons/page_refresh.png
5156 silly gunzTarPerm modified mode [ 'lib/public/icons/page_refresh.png', 438, 420 ]
5157 silly gunzTarPerm extractEntry lib/public/icons/page_save.png
5158 silly gunzTarPerm modified mode [ 'lib/public/icons/page_save.png', 438, 420 ]
5159 silly gunzTarPerm extractEntry lib/public/icons/page_white.png
5160 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white.png', 438, 420 ]
5161 silly gunzTarPerm extractEntry lib/public/icons/page_white_acrobat.png
5162 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_acrobat.png', 438, 420 ]
5163 silly gunzTarPerm extractEntry lib/public/icons/page_white_actionscript.png
5164 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_actionscript.png', 438, 420 ]
5165 silly gunzTarPerm extractEntry lib/public/icons/page_white_add.png
5166 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_add.png', 438, 420 ]
5167 silly gunzTarPerm extractEntry lib/public/icons/page_white_c.png
5168 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_c.png', 438, 420 ]
5169 silly gunzTarPerm extractEntry lib/public/icons/page_white_camera.png
5170 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_camera.png', 438, 420 ]
5171 silly gunzTarPerm extractEntry lib/public/icons/page_white_cd.png
5172 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_cd.png', 438, 420 ]
5173 silly gunzTarPerm extractEntry lib/public/icons/page_white_code.png
5174 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_code.png', 438, 420 ]
5175 silly gunzTarPerm extractEntry lib/public/icons/page_white_code_red.png
5176 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_code_red.png', 438, 420 ]
5177 silly gunzTarPerm extractEntry lib/public/icons/page_white_coldfusion.png
5178 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_coldfusion.png', 438, 420 ]
5179 silly gunzTarPerm extractEntry lib/public/icons/page_white_compressed.png
5180 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_compressed.png', 438, 420 ]
5181 silly gunzTarPerm extractEntry lib/public/icons/page_white_copy.png
5182 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_copy.png', 438, 420 ]
5183 silly gunzTarPerm extractEntry lib/public/icons/page_white_cplusplus.png
5184 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_cplusplus.png', 438, 420 ]
5185 silly gunzTarPerm extractEntry lib/public/icons/page_white_csharp.png
5186 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_csharp.png', 438, 420 ]
5187 silly gunzTarPerm extractEntry lib/public/icons/page_white_cup.png
5188 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_cup.png', 438, 420 ]
5189 silly gunzTarPerm extractEntry lib/public/icons/page_white_database.png
5190 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_database.png', 438, 420 ]
5191 silly gunzTarPerm extractEntry lib/public/icons/page_white_delete.png
5192 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_delete.png', 438, 420 ]
5193 silly gunzTarPerm extractEntry lib/public/icons/page_white_dvd.png
5194 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_dvd.png', 438, 420 ]
5195 silly gunzTarPerm extractEntry lib/public/icons/page_add.png
5196 silly gunzTarPerm modified mode [ 'lib/public/icons/page_add.png', 438, 420 ]
5197 silly gunzTarPerm extractEntry lib/public/icons/page_white_error.png
5198 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_error.png', 438, 420 ]
5199 silly gunzTarPerm extractEntry lib/public/icons/page_white_excel.png
5200 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_excel.png', 438, 420 ]
5201 silly gunzTarPerm extractEntry lib/public/icons/page_white_find.png
5202 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_find.png', 438, 420 ]
5203 silly gunzTarPerm extractEntry lib/public/icons/page_white_flash.png
5204 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_flash.png', 438, 420 ]
5205 silly gunzTarPerm extractEntry lib/public/icons/page_white_freehand.png
5206 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_freehand.png', 438, 420 ]
5207 silly gunzTarPerm extractEntry lib/public/icons/page_white_gear.png
5208 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_gear.png', 438, 420 ]
5209 silly gunzTarPerm extractEntry lib/public/icons/page_white_get.png
5210 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_get.png', 438, 420 ]
5211 silly gunzTarPerm extractEntry lib/public/icons/page_white_go.png
5212 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_go.png', 438, 420 ]
5213 silly gunzTarPerm extractEntry lib/public/icons/page_white_h.png
5214 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_h.png', 438, 420 ]
5215 silly gunzTarPerm extractEntry lib/public/icons/page_white_horizontal.png
5216 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_horizontal.png', 438, 420 ]
5217 silly gunzTarPerm extractEntry lib/public/icons/page_white_key.png
5218 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_key.png', 438, 420 ]
5219 silly gunzTarPerm extractEntry lib/public/icons/page_white_lightning.png
5220 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_lightning.png', 438, 420 ]
5221 silly gunzTarPerm extractEntry lib/public/icons/page_white_link.png
5222 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_link.png', 438, 420 ]
5223 silly gunzTarPerm extractEntry lib/public/icons/page_white_magnify.png
5224 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_magnify.png', 438, 420 ]
5225 silly gunzTarPerm extractEntry lib/public/icons/page_white_medal.png
5226 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_medal.png', 438, 420 ]
5227 silly gunzTarPerm extractEntry lib/public/icons/page_white_office.png
5228 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_office.png', 438, 420 ]
5229 silly gunzTarPerm extractEntry lib/public/icons/page_white_paint.png
5230 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_paint.png', 438, 420 ]
5231 silly gunzTarPerm extractEntry lib/public/icons/page_white_paintbrush.png
5232 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_paintbrush.png', 438, 420 ]
5233 silly gunzTarPerm extractEntry lib/public/icons/page_white_paste.png
5234 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_paste.png', 438, 420 ]
5235 silly gunzTarPerm extractEntry lib/public/icons/page_white_php.png
5236 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_php.png', 438, 420 ]
5237 silly gunzTarPerm extractEntry lib/public/icons/page_white_picture.png
5238 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_picture.png', 438, 420 ]
5239 silly gunzTarPerm extractEntry lib/public/icons/page_white_powerpoint.png
5240 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_powerpoint.png', 438, 420 ]
5241 silly gunzTarPerm extractEntry lib/public/icons/page_white_put.png
5242 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_put.png', 438, 420 ]
5243 silly gunzTarPerm extractEntry lib/public/icons/page_white_ruby.png
5244 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_ruby.png', 438, 420 ]
5245 silly gunzTarPerm extractEntry lib/public/icons/page_white_stack.png
5246 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_stack.png', 438, 420 ]
5247 silly gunzTarPerm extractEntry lib/public/icons/page_white_star.png
5248 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_star.png', 438, 420 ]
5249 silly gunzTarPerm extractEntry lib/public/icons/page_white_swoosh.png
5250 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_swoosh.png', 438, 420 ]
5251 silly gunzTarPerm extractEntry lib/public/icons/page_white_text.png
5252 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_text.png', 438, 420 ]
5253 silly gunzTarPerm extractEntry lib/public/icons/page_white_text_width.png
5254 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_text_width.png', 438, 420 ]
5255 silly gunzTarPerm extractEntry lib/public/icons/page_white_tux.png
5256 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_tux.png', 438, 420 ]
5257 silly gunzTarPerm extractEntry lib/public/icons/page_white_vector.png
5258 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_vector.png', 438, 420 ]
5259 silly gunzTarPerm extractEntry lib/public/icons/page_white_visualstudio.png
5260 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_visualstudio.png', 438, 420 ]
5261 silly gunzTarPerm extractEntry lib/public/icons/page_white_width.png
5262 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_width.png', 438, 420 ]
5263 silly gunzTarPerm extractEntry lib/public/icons/page_white_word.png
5264 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_word.png', 438, 420 ]
5265 silly gunzTarPerm extractEntry lib/public/icons/page_white_world.png
5266 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_world.png', 438, 420 ]
5267 silly gunzTarPerm extractEntry lib/public/icons/page_white_wrench.png
5268 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_wrench.png', 438, 420 ]
5269 silly gunzTarPerm extractEntry lib/public/icons/page_white_zip.png
5270 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_zip.png', 438, 420 ]
5271 silly gunzTarPerm extractEntry lib/public/icons/page_word.png
5272 silly gunzTarPerm modified mode [ 'lib/public/icons/page_word.png', 438, 420 ]
5273 silly gunzTarPerm extractEntry lib/public/icons/page_world.png
5274 silly gunzTarPerm modified mode [ 'lib/public/icons/page_world.png', 438, 420 ]
5275 silly gunzTarPerm extractEntry lib/public/style.css
5276 silly gunzTarPerm modified mode [ 'lib/public/style.css', 438, 420 ]
5277 silly gunzTarPerm extractEntry Readme.md
5278 silly gunzTarPerm modified mode [ 'Readme.md', 438, 420 ]
5279 silly lockFile cc1f8ce7-npm-cache-connect-2-7-11-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\connect\2.7.11\package
5280 silly lockFile cc1f8ce7-npm-cache-connect-2-7-11-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\connect\2.7.11\package
5281 silly lockFile 4c35fa8b-cache-connect-2-7-11-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\connect\2.7.11\package.tgz
5282 silly lockFile 4c35fa8b-cache-connect-2-7-11-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\connect\2.7.11\package.tgz
5283 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\connect\2.7.11\package.tgz 644
5284 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\connect\2.7.11\package.tgz
5285 silly lockFile 3f1d2529-s-org-connect-connect-2-7-11-tgz https://registry.npmjs.org/connect/-/connect-2.7.11.tgz
5286 silly lockFile 3f1d2529-s-org-connect-connect-2-7-11-tgz https://registry.npmjs.org/connect/-/connect-2.7.11.tgz
5287 silly lockFile 4ba73353-connect-2-7-11 connect@2.7.11
5288 silly lockFile 4ba73353-connect-2-7-11 connect@2.7.11
5289 silly lockFile 1729cbdb-connect-2-7-11 connect@~2.7.11
5290 silly lockFile 1729cbdb-connect-2-7-11 connect@~2.7.11
5291 silly resolved [ { name: 'connect-livereload',
5291 silly resolved     description: 'connect middleware for adding the livereload script to the response',
5291 silly resolved     version: '0.2.0',
5291 silly resolved     author: { name: 'Andi Neck', email: 'andi.neck@intesso.com' },
5291 silly resolved     contributors: [ [Object] ],
5291 silly resolved     dependencies: {},
5291 silly resolved     devDependencies: { express: '~3.2.2', supertest: '~0.6.0', mocha: '~1.9.0' },
5291 silly resolved     keywords: [ 'connect', 'livereload', 'live-reload' ],
5291 silly resolved     repository:
5291 silly resolved      { type: 'git',
5291 silly resolved        url: 'git://github.com/intesso/connect-livereload' },
5291 silly resolved     main: 'index',
5291 silly resolved     engines: { node: '*' },
5291 silly resolved     readme: 'connect-livereload\n==================\nconnect middleware for adding the livereload script to the response.\nno browser plugin is needed.\nif you are happy with a browser plugin, then you don\'t need this middleware.\n\n[![Build Status](https://travis-ci.org/intesso/connect-livereload.png)](https://travis-ci.org/intesso/connect-livereload)\n\ninstall\n=======\n```bash\nnpm install connect-livereload --save-dev\n```\n\nuse\n===\nthis middleware can be used with a LiveReload server e.g. [grunt-reload](https://github.com/webxl/grunt-reload).\n\nIn your connect or express application add this after the static and before the dynamic routes:\n```javascript\n  var liveReloadPort = 35729;\n  var excludeList = [\'.woff\', \'.flv\'];\n  \n  app.use(require(\'connect-livereload\')({\n    port: liveReloadPort,\n    excludeList: excludeList\n  }));\n```\n\nplease see the [examples](https://github.com/intesso/connect-livereload/tree/master/examples) for the app and Grunt configuration.\n\n\t\n###note \nif you add this middleware before the static middleware, it will lead to problems. \nIf you can\'t avoid that for some reason, you have to add all of the static file extensions to the `excludeList: [\'.css\', \'.js\', \'.ico\', \'.png\', \'ect...\']`\n\nalternative\n===========\nAn alternative would be to install the [LiveReload browser plugin](https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei).\n\n\ncredits\n=======\n* The middleware code is mainly extracted from: [grunt-contrib-livereload/util.js](https://github.com/gruntjs/grunt-contrib-livereload/blob/master/lib/utils.js)\n* [LiveReload Creator](http://livereload.com/)\n\ntests\n=====\nrun the tests with \n```\nmocha\n```\n\nlicense\n=======\n[MIT License](https://github.com/intesso/connect-livereload/blob/master/LICENSE)\n',
5291 silly resolved     readmeFilename: 'README.md',
5291 silly resolved     bugs: { url: 'https://github.com/intesso/connect-livereload/issues' },
5291 silly resolved     homepage: 'https://github.com/intesso/connect-livereload',
5291 silly resolved     _id: 'connect-livereload@0.2.0',
5291 silly resolved     dist: { shasum: 'ff04c0645cbb6749b05994aef09ec1295c842a41' },
5291 silly resolved     _from: 'connect-livereload@~0.2.0',
5291 silly resolved     _resolved: 'https://registry.npmjs.org/connect-livereload/-/connect-livereload-0.2.0.tgz' },
5291 silly resolved   { name: 'open',
5291 silly resolved     version: '0.0.4',
5291 silly resolved     description: 'open a file or url in the user\'s preferred application',
5291 silly resolved     keywords: [ 'start', 'open', 'browser', 'editor', 'default' ],
5291 silly resolved     homepage: 'https://github.com/jjrdn/node-open',
5291 silly resolved     author: { name: 'J Jordan', email: 'jjrdn@styosis.com' },
5291 silly resolved     license: 'MIT',
5291 silly resolved     contributors: [ [Object] ],
5291 silly resolved     repository: { type: 'git', url: 'https://github.com/pwnall/node-open.git' },
5291 silly resolved     bugs: { url: 'https://github.com/pwnall/node-open/issues' },
5291 silly resolved     engines: { node: '>= 0.6.0' },
5291 silly resolved     dependencies: {},
5291 silly resolved     devDependencies: { mocha: '*' },
5291 silly resolved     optionalDependencies: {},
5291 silly resolved     main: 'lib/open.js',
5291 silly resolved     scripts: { test: 'node_modules/mocha/bin/mocha' },
5291 silly resolved     readme: '# open\n\nOpen a file or url in the user\'s preferred application.\n\n# Usage\n\n```javascript\nvar open = require("open");\nopen("http://www.google.com");\n```\n\n`open` taks an optional argument specifying the program to be used to open the\nfile or URL.\n\n```javascript\nopen("http://www.google.com", "firefox");\n```\n\n# Installation\n\n    npm install open\n\n# How it works\n\n- on `win32` uses `start`\n- on `darwin` uses `open`\n- otherwise uses the `xdg-open` script from [freedesktop.org](http://portland.freedesktop.org/xdg-utils-1.0/xdg-open.html)\n\n# Warning\n\nThe same care should be taken when calling open as if you were calling\n[child_process.exec](http://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback)\ndirectly. If it is an executable it will run in a new shell.\n',
5291 silly resolved     readmeFilename: 'README.md',
5291 silly resolved     _id: 'open@0.0.4',
5291 silly resolved     dist: { shasum: 'fecabfce097933e49b1716a43ce7d9d77ad5749f' },
5291 silly resolved     _from: 'open@0.0.4',
5291 silly resolved     _resolved: 'https://registry.npmjs.org/open/-/open-0.0.4.tgz' },
5291 silly resolved   { name: 'connect',
5291 silly resolved     version: '2.7.11',
5291 silly resolved     description: 'High performance middleware framework',
5291 silly resolved     keywords: [ 'framework', 'web', 'middleware', 'connect', 'rack' ],
5291 silly resolved     repository: { type: 'git', url: 'git://github.com/senchalabs/connect.git' },
5291 silly resolved     author:
5291 silly resolved      { name: 'TJ Holowaychuk',
5291 silly resolved        email: 'tj@vision-media.ca',
5291 silly resolved        url: 'http://tjholowaychuk.com' },
5291 silly resolved     dependencies:
5291 silly resolved      { qs: '0.6.5',
5291 silly resolved        formidable: '1.0.14',
5291 silly resolved        'cookie-signature': '1.0.1',
5291 silly resolved        'buffer-crc32': '0.2.1',
5291 silly resolved        cookie: '0.0.5',
5291 silly resolved        send: '0.1.1',
5291 silly resolved        bytes: '0.2.0',
5291 silly resolved        fresh: '0.1.0',
5291 silly resolved        pause: '0.0.1',
5291 silly resolved        debug: '*' },
5291 silly resolved     devDependencies: { should: '*', mocha: '*', jade: '*', dox: '*' },
5291 silly resolved     main: 'index',
5291 silly resolved     engines: { node: '>= 0.8.0' },
5291 silly resolved     scripts: { test: 'make' },
5291 silly resolved     readme: '[![build status](https://secure.travis-ci.org/senchalabs/connect.png)](http://travis-ci.org/senchalabs/connect)\n# Connect\n\n  Connect is an extensible HTTP server framework for [node](http://nodejs.org), providing high performance "plugins" known as _middleware_.\n\n Connect is bundled with over _20_ commonly used middleware, including\n a logger, session support, cookie parser, and [more](http://senchalabs.github.com/connect). Be sure to view the 2.x [documentation](http://senchalabs.github.com/connect/).\n\n```js\nvar connect = require(\'connect\')\n  , http = require(\'http\');\n\nvar app = connect()\n  .use(connect.favicon())\n  .use(connect.logger(\'dev\'))\n  .use(connect.static(\'public\'))\n  .use(connect.directory(\'public\'))\n  .use(connect.cookieParser())\n  .use(connect.session({ secret: \'my secret here\' }))\n  .use(function(req, res){\n    res.end(\'Hello from Connect!\\n\');\n  });\n\nhttp.createServer(app).listen(3000);\n```\n\n## Middleware\n\n  - [csrf](http://www.senchalabs.org/connect/csrf.html)\n  - [basicAuth](http://www.senchalabs.org/connect/basicAuth.html)\n  - [bodyParser](http://www.senchalabs.org/connect/bodyParser.html)\n  - [json](http://www.senchalabs.org/connect/json.html)\n  - [multipart](http://www.senchalabs.org/connect/multipart.html)\n  - [urlencoded](http://www.senchalabs.org/connect/urlencoded.html)\n  - [cookieParser](http://www.senchalabs.org/connect/cookieParser.html)\n  - [directory](http://www.senchalabs.org/connect/directory.html)\n  - [compress](http://www.senchalabs.org/connect/compress.html)\n  - [errorHandler](http://www.senchalabs.org/connect/errorHandler.html)\n  - [favicon](http://www.senchalabs.org/connect/favicon.html)\n  - [limit](http://www.senchalabs.org/connect/limit.html)\n  - [logger](http://www.senchalabs.org/connect/logger.html)\n  - [methodOverride](http://www.senchalabs.org/connect/methodOverride.html)\n  - [query](http://www.senchalabs.org/connect/query.html)\n  - [responseTime](http://www.senchalabs.org/connect/responseTime.html)\n  - [session](http://www.senchalabs.org/connect/session.html)\n  - [static](http://www.senchalabs.org/connect/static.html)\n  - [staticCache](http://www.senchalabs.org/connect/staticCache.html)\n  - [vhost](http://www.senchalabs.org/connect/vhost.html)\n  - [subdomains](http://www.senchalabs.org/connect/subdomains.html)\n  - [cookieSession](http://www.senchalabs.org/connect/cookieSession.html)\n\n## Running Tests\n\nfirst:\n\n    $ npm install -d\n\nthen:\n\n    $ make test\n\n## Authors\n\n Below is the output from [git-summary](http://github.com/visionmedia/git-extras).\n\n\n     project: connect\n     commits: 2033\n     active : 301 days\n     files  : 171\n     authors: \n      1414\tTj Holowaychuk          69.6%\n       298\tvisionmedia             14.7%\n       191\tTim Caswell             9.4%\n        51\tTJ Holowaychuk          2.5%\n        10\tRyan Olds               0.5%\n         8\tAstro                   0.4%\n         5\tNathan Rajlich          0.2%\n         5\tJakub Nešetřil          0.2%\n         3\tDaniel Dickison         0.1%\n         3\tDavid Rio Deiros        0.1%\n         3\tAlexander Simmerl       0.1%\n         3\tAndreas Lind Petersen   0.1%\n         2\tAaron Heckmann          0.1%\n         2\tJacques Crocker         0.1%\n         2\tFabian Jakobs           0.1%\n         2\tBrian J Brennan         0.1%\n         2\tAdam Malcontenti-Wilson 0.1%\n         2\tGlen Mailer             0.1%\n         2\tJames Campos            0.1%\n         1\tTrent Mick              0.0%\n         1\tTroy Kruthoff           0.0%\n         1\tWei Zhu                 0.0%\n         1\tcomerc                  0.0%\n         1\tdarobin                 0.0%\n         1\tnateps                  0.0%\n         1\tMarco Sanson            0.0%\n         1\tArthur Taylor           0.0%\n         1\tAseem Kishore           0.0%\n         1\tBart Teeuwisse          0.0%\n         1\tCameron Howey           0.0%\n         1\tChad Weider             0.0%\n         1\tCraig Barnes            0.0%\n         1\tEran Hammer-Lahav       0.0%\n         1\tGregory McWhirter       0.0%\n         1\tGuillermo Rauch         0.0%\n         1\tJae Kwon                0.0%\n         1\tJakub Nesetril          0.0%\n         1\tJoshua Peek             0.0%\n         1\tJxck                    0.0%\n         1\tAJ ONeal                0.0%\n         1\tMichael Hemesath        0.0%\n         1\tMorten Siebuhr          0.0%\n         1\tSamori Gorse            0.0%\n         1\tTom Jensen              0.0%\n\n## Node Compatibility\n\n  Connect `< 1.x` is compatible with node 0.2.x\n\n\n  Connect `1.x` is compatible with node 0.4.x\n\n\n  Connect (_master_) `2.x` is compatible with node 0.6.x\n\n## CLA\n\n [http://sencha.com/cla](http://sencha.com/cla)\n\n## License\n\nView the [LICENSE](https://github.com/senchalabs/connect/blob/master/LICENSE) file. The [Silk](http://www.famfamfam.com/lab/icons/silk/) icons used by the `directory` middleware created by/copyright of [FAMFAMFAM](http://www.famfamfam.com/).\n',
5291 silly resolved     readmeFilename: 'Readme.md',
5291 silly resolved     bugs: { url: 'https://github.com/senchalabs/connect/issues' },
5291 silly resolved     homepage: 'https://github.com/senchalabs/connect',
5291 silly resolved     _id: 'connect@2.7.11',
5291 silly resolved     dist: { shasum: 'ab5cb4955142560ef54ee57f06988d01d039d964' },
5291 silly resolved     _from: 'connect@~2.7.11',
5291 silly resolved     _resolved: 'https://registry.npmjs.org/connect/-/connect-2.7.11.tgz' } ]
5292 info install connect-livereload@0.2.0 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect
5293 info install open@0.0.4 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect
5294 info install connect@2.7.11 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect
5295 info installOne connect-livereload@0.2.0
5296 info installOne open@0.0.4
5297 info installOne connect@2.7.11
5298 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect-livereload unbuild
5299 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\open unbuild
5300 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect unbuild
5301 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\connect-livereload\0.2.0\package.tgz
5302 silly lockFile ec71fd85--node-modules-connect-livereload tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect-livereload
5303 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect-livereload C:\Users\Gaston\AppData\Roaming\npm-cache\ec71fd85--node-modules-connect-livereload.lock
5304 silly lockFile b4411aa0-ect-livereload-0-2-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\connect-livereload\0.2.0\package.tgz
5305 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\connect-livereload\0.2.0\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\b4411aa0-ect-livereload-0-2-0-package-tgz.lock
5306 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\open\0.0.4\package.tgz
5307 silly lockFile 617f739c-ontrib-connect-node-modules-open tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\open
5308 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\open C:\Users\Gaston\AppData\Roaming\npm-cache\617f739c-ontrib-connect-node-modules-open.lock
5309 silly lockFile d27c176d-npm-cache-open-0-0-4-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\open\0.0.4\package.tgz
5310 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\open\0.0.4\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\d27c176d-npm-cache-open-0-0-4-package-tgz.lock
5311 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\connect\2.7.11\package.tgz
5312 silly lockFile f00d553b-rib-connect-node-modules-connect tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect
5313 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect C:\Users\Gaston\AppData\Roaming\npm-cache\f00d553b-rib-connect-node-modules-connect.lock
5314 silly lockFile 4c35fa8b-cache-connect-2-7-11-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\connect\2.7.11\package.tgz
5315 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\connect\2.7.11\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\4c35fa8b-cache-connect-2-7-11-package-tgz.lock
5316 silly gunzTarPerm modes [ '755', '644' ]
5317 silly gunzTarPerm modes [ '755', '644' ]
5318 silly gunzTarPerm modes [ '755', '644' ]
5319 silly gunzTarPerm extractEntry package.json
5320 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
5321 silly gunzTarPerm extractEntry package.json
5322 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
5323 silly gunzTarPerm extractEntry package.json
5324 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
5325 silly gunzTarPerm extractEntry .npmignore
5326 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
5327 silly gunzTarPerm extractEntry README.md
5328 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
5329 silly gunzTarPerm extractEntry .npmignore
5330 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
5331 silly gunzTarPerm extractEntry README.md
5332 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
5333 silly gunzTarPerm extractEntry .npmignore
5334 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
5335 silly gunzTarPerm extractEntry LICENSE
5336 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
5337 silly gunzTarPerm extractEntry LICENSE
5338 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
5339 silly gunzTarPerm extractEntry .jshintignore
5340 silly gunzTarPerm modified mode [ '.jshintignore', 438, 420 ]
5341 silly gunzTarPerm extractEntry LICENSE
5342 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
5343 silly gunzTarPerm extractEntry index.js
5344 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
5345 silly gunzTarPerm extractEntry index.js
5346 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
5347 silly gunzTarPerm extractEntry test.js
5348 silly gunzTarPerm modified mode [ 'test.js', 438, 420 ]
5349 silly gunzTarPerm extractEntry .jshintrc
5350 silly gunzTarPerm modified mode [ '.jshintrc', 438, 420 ]
5351 silly gunzTarPerm extractEntry lib/open.js
5352 silly gunzTarPerm modified mode [ 'lib/open.js', 438, 420 ]
5353 silly gunzTarPerm extractEntry .travis.yml
5354 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]
5355 silly gunzTarPerm extractEntry .travis.yml
5356 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]
5357 silly gunzTarPerm extractEntry lib/cache.js
5358 silly gunzTarPerm modified mode [ 'lib/cache.js', 438, 420 ]
5359 silly gunzTarPerm extractEntry vendor/xdg-open
5360 silly gunzTarPerm modified mode [ 'vendor/xdg-open', 438, 420 ]
5361 silly gunzTarPerm extractEntry lib/connect.js
5362 silly gunzTarPerm modified mode [ 'lib/connect.js', 438, 420 ]
5363 silly gunzTarPerm extractEntry lib/index.js
5364 silly gunzTarPerm modified mode [ 'lib/index.js', 438, 420 ]
5365 silly gunzTarPerm extractEntry lib/patch.js
5366 silly gunzTarPerm modified mode [ 'lib/patch.js', 438, 420 ]
5367 silly gunzTarPerm extractEntry lib/proto.js
5368 silly gunzTarPerm modified mode [ 'lib/proto.js', 438, 420 ]
5369 silly gunzTarPerm extractEntry lib/utils.js
5370 silly gunzTarPerm modified mode [ 'lib/utils.js', 438, 420 ]
5371 silly gunzTarPerm extractEntry lib/middleware/basicAuth.js
5372 silly gunzTarPerm modified mode [ 'lib/middleware/basicAuth.js', 438, 420 ]
5373 silly gunzTarPerm extractEntry lib/middleware/errorHandler.js
5374 silly gunzTarPerm modified mode [ 'lib/middleware/errorHandler.js', 438, 420 ]
5375 silly gunzTarPerm extractEntry lib/middleware/favicon.js
5376 silly gunzTarPerm modified mode [ 'lib/middleware/favicon.js', 438, 420 ]
5377 silly lockFile ec71fd85--node-modules-connect-livereload tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect-livereload
5378 silly lockFile ec71fd85--node-modules-connect-livereload tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect-livereload
5379 silly gunzTarPerm extractEntry lib/middleware/json.js
5380 silly gunzTarPerm modified mode [ 'lib/middleware/json.js', 438, 420 ]
5381 silly gunzTarPerm extractEntry lib/middleware/limit.js
5382 silly gunzTarPerm modified mode [ 'lib/middleware/limit.js', 438, 420 ]
5383 silly lockFile b4411aa0-ect-livereload-0-2-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\connect-livereload\0.2.0\package.tgz
5384 silly lockFile b4411aa0-ect-livereload-0-2-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\connect-livereload\0.2.0\package.tgz
5385 info preinstall connect-livereload@0.2.0
5386 verbose readDependencies using package.json deps
5387 silly gunzTarPerm extractEntry lib/middleware/directory.js
5388 silly gunzTarPerm modified mode [ 'lib/middleware/directory.js', 438, 420 ]
5389 silly gunzTarPerm extractEntry lib/middleware/methodOverride.js
5390 silly gunzTarPerm modified mode [ 'lib/middleware/methodOverride.js', 438, 420 ]
5391 verbose readDependencies using package.json deps
5392 silly resolved []
5393 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect-livereload
5394 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect-livereload
5395 verbose linkStuff [ false,
5395 verbose linkStuff   false,
5395 verbose linkStuff   false,
5395 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-contrib-connect\\node_modules' ]
5396 info linkStuff connect-livereload@0.2.0
5397 verbose linkBins connect-livereload@0.2.0
5398 verbose linkMans connect-livereload@0.2.0
5399 verbose rebuildBundles connect-livereload@0.2.0
5400 info install connect-livereload@0.2.0
5401 info postinstall connect-livereload@0.2.0
5402 silly lockFile 617f739c-ontrib-connect-node-modules-open tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\open
5403 silly lockFile 617f739c-ontrib-connect-node-modules-open tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\open
5404 silly lockFile d27c176d-npm-cache-open-0-0-4-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\open\0.0.4\package.tgz
5405 silly lockFile d27c176d-npm-cache-open-0-0-4-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\open\0.0.4\package.tgz
5406 silly gunzTarPerm extractEntry lib/middleware/multipart.js
5407 silly gunzTarPerm modified mode [ 'lib/middleware/multipart.js', 438, 420 ]
5408 silly gunzTarPerm extractEntry lib/middleware/query.js
5409 silly gunzTarPerm modified mode [ 'lib/middleware/query.js', 438, 420 ]
5410 info preinstall open@0.0.4
5411 verbose readDependencies using package.json deps
5412 verbose readDependencies using package.json deps
5413 silly resolved []
5414 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\open
5415 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\open
5416 verbose linkStuff [ false,
5416 verbose linkStuff   false,
5416 verbose linkStuff   false,
5416 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-contrib-connect\\node_modules' ]
5417 info linkStuff open@0.0.4
5418 verbose linkBins open@0.0.4
5419 verbose linkMans open@0.0.4
5420 verbose rebuildBundles open@0.0.4
5421 info install open@0.0.4
5422 info postinstall open@0.0.4
5423 silly gunzTarPerm extractEntry lib/middleware/responseTime.js
5424 silly gunzTarPerm modified mode [ 'lib/middleware/responseTime.js', 438, 420 ]
5425 silly gunzTarPerm extractEntry lib/middleware/urlencoded.js
5426 silly gunzTarPerm modified mode [ 'lib/middleware/urlencoded.js', 438, 420 ]
5427 silly gunzTarPerm extractEntry lib/middleware/csrf.js
5428 silly gunzTarPerm modified mode [ 'lib/middleware/csrf.js', 438, 420 ]
5429 silly gunzTarPerm extractEntry lib/middleware/session.js
5430 silly gunzTarPerm modified mode [ 'lib/middleware/session.js', 438, 420 ]
5431 silly gunzTarPerm extractEntry lib/middleware/cookieSession.js
5432 silly gunzTarPerm modified mode [ 'lib/middleware/cookieSession.js', 438, 420 ]
5433 silly gunzTarPerm extractEntry lib/middleware/static.js
5434 silly gunzTarPerm modified mode [ 'lib/middleware/static.js', 438, 420 ]
5435 silly gunzTarPerm extractEntry lib/middleware/cookieParser.js
5436 silly gunzTarPerm modified mode [ 'lib/middleware/cookieParser.js', 438, 420 ]
5437 silly gunzTarPerm extractEntry lib/middleware/staticCache.js
5438 silly gunzTarPerm modified mode [ 'lib/middleware/staticCache.js', 438, 420 ]
5439 silly gunzTarPerm extractEntry lib/middleware/compress.js
5440 silly gunzTarPerm modified mode [ 'lib/middleware/compress.js', 438, 420 ]
5441 silly gunzTarPerm extractEntry lib/middleware/timeout.js
5442 silly gunzTarPerm modified mode [ 'lib/middleware/timeout.js', 438, 420 ]
5443 silly gunzTarPerm extractEntry lib/middleware/bodyParser.js
5444 silly gunzTarPerm modified mode [ 'lib/middleware/bodyParser.js', 438, 420 ]
5445 silly gunzTarPerm extractEntry lib/middleware/vhost.js
5446 silly gunzTarPerm modified mode [ 'lib/middleware/vhost.js', 438, 420 ]
5447 silly gunzTarPerm extractEntry lib/middleware/logger.js
5448 silly gunzTarPerm modified mode [ 'lib/middleware/logger.js', 438, 420 ]
5449 silly gunzTarPerm extractEntry lib/middleware/session/cookie.js
5450 silly gunzTarPerm modified mode [ 'lib/middleware/session/cookie.js', 438, 420 ]
5451 silly gunzTarPerm extractEntry lib/middleware/session/memory.js
5452 silly gunzTarPerm modified mode [ 'lib/middleware/session/memory.js', 438, 420 ]
5453 silly gunzTarPerm extractEntry lib/middleware/session/session.js
5454 silly gunzTarPerm modified mode [ 'lib/middleware/session/session.js', 438, 420 ]
5455 silly gunzTarPerm extractEntry lib/middleware/session/store.js
5456 silly gunzTarPerm modified mode [ 'lib/middleware/session/store.js', 438, 420 ]
5457 silly gunzTarPerm extractEntry lib/public/directory.html
5458 silly gunzTarPerm modified mode [ 'lib/public/directory.html', 438, 420 ]
5459 silly gunzTarPerm extractEntry lib/public/error.html
5460 silly gunzTarPerm modified mode [ 'lib/public/error.html', 438, 420 ]
5461 silly gunzTarPerm extractEntry lib/public/favicon.ico
5462 silly gunzTarPerm modified mode [ 'lib/public/favicon.ico', 438, 420 ]
5463 silly gunzTarPerm extractEntry lib/public/icons/page_white_edit.png
5464 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_edit.png', 438, 420 ]
5465 silly gunzTarPerm extractEntry lib/public/icons/page.png
5466 silly gunzTarPerm modified mode [ 'lib/public/icons/page.png', 438, 420 ]
5467 silly gunzTarPerm extractEntry lib/public/icons/page_attach.png
5468 silly gunzTarPerm modified mode [ 'lib/public/icons/page_attach.png', 438, 420 ]
5469 silly gunzTarPerm extractEntry lib/public/icons/page_code.png
5470 silly gunzTarPerm modified mode [ 'lib/public/icons/page_code.png', 438, 420 ]
5471 silly gunzTarPerm extractEntry lib/public/icons/page_copy.png
5472 silly gunzTarPerm modified mode [ 'lib/public/icons/page_copy.png', 438, 420 ]
5473 silly gunzTarPerm extractEntry lib/public/icons/page_delete.png
5474 silly gunzTarPerm modified mode [ 'lib/public/icons/page_delete.png', 438, 420 ]
5475 silly gunzTarPerm extractEntry lib/public/icons/page_edit.png
5476 silly gunzTarPerm modified mode [ 'lib/public/icons/page_edit.png', 438, 420 ]
5477 silly gunzTarPerm extractEntry lib/public/icons/page_error.png
5478 silly gunzTarPerm modified mode [ 'lib/public/icons/page_error.png', 438, 420 ]
5479 silly gunzTarPerm extractEntry lib/public/icons/page_excel.png
5480 silly gunzTarPerm modified mode [ 'lib/public/icons/page_excel.png', 438, 420 ]
5481 silly gunzTarPerm extractEntry lib/public/icons/page_find.png
5482 silly gunzTarPerm modified mode [ 'lib/public/icons/page_find.png', 438, 420 ]
5483 silly gunzTarPerm extractEntry lib/public/icons/page_gear.png
5484 silly gunzTarPerm modified mode [ 'lib/public/icons/page_gear.png', 438, 420 ]
5485 silly gunzTarPerm extractEntry lib/public/icons/page_go.png
5486 silly gunzTarPerm modified mode [ 'lib/public/icons/page_go.png', 438, 420 ]
5487 silly gunzTarPerm extractEntry lib/public/icons/page_green.png
5488 silly gunzTarPerm modified mode [ 'lib/public/icons/page_green.png', 438, 420 ]
5489 silly gunzTarPerm extractEntry lib/public/icons/page_key.png
5490 silly gunzTarPerm modified mode [ 'lib/public/icons/page_key.png', 438, 420 ]
5491 silly gunzTarPerm extractEntry lib/public/icons/page_lightning.png
5492 silly gunzTarPerm modified mode [ 'lib/public/icons/page_lightning.png', 438, 420 ]
5493 silly gunzTarPerm extractEntry lib/public/icons/page_link.png
5494 silly gunzTarPerm modified mode [ 'lib/public/icons/page_link.png', 438, 420 ]
5495 silly gunzTarPerm extractEntry lib/public/icons/page_paintbrush.png
5496 silly gunzTarPerm modified mode [ 'lib/public/icons/page_paintbrush.png', 438, 420 ]
5497 silly gunzTarPerm extractEntry lib/public/icons/page_paste.png
5498 silly gunzTarPerm modified mode [ 'lib/public/icons/page_paste.png', 438, 420 ]
5499 silly gunzTarPerm extractEntry lib/public/icons/page_red.png
5500 silly gunzTarPerm modified mode [ 'lib/public/icons/page_red.png', 438, 420 ]
5501 silly gunzTarPerm extractEntry lib/public/icons/page_refresh.png
5502 silly gunzTarPerm modified mode [ 'lib/public/icons/page_refresh.png', 438, 420 ]
5503 silly gunzTarPerm extractEntry lib/public/icons/page_save.png
5504 silly gunzTarPerm modified mode [ 'lib/public/icons/page_save.png', 438, 420 ]
5505 silly gunzTarPerm extractEntry lib/public/icons/page_white.png
5506 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white.png', 438, 420 ]
5507 silly gunzTarPerm extractEntry lib/public/icons/page_white_acrobat.png
5508 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_acrobat.png', 438, 420 ]
5509 silly gunzTarPerm extractEntry lib/public/icons/page_white_actionscript.png
5510 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_actionscript.png', 438, 420 ]
5511 silly gunzTarPerm extractEntry lib/public/icons/page_white_add.png
5512 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_add.png', 438, 420 ]
5513 silly gunzTarPerm extractEntry lib/public/icons/page_white_c.png
5514 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_c.png', 438, 420 ]
5515 silly gunzTarPerm extractEntry lib/public/icons/page_white_camera.png
5516 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_camera.png', 438, 420 ]
5517 silly gunzTarPerm extractEntry lib/public/icons/page_white_cd.png
5518 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_cd.png', 438, 420 ]
5519 silly gunzTarPerm extractEntry lib/public/icons/page_white_code.png
5520 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_code.png', 438, 420 ]
5521 silly gunzTarPerm extractEntry lib/public/icons/page_white_code_red.png
5522 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_code_red.png', 438, 420 ]
5523 silly gunzTarPerm extractEntry lib/public/icons/page_white_coldfusion.png
5524 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_coldfusion.png', 438, 420 ]
5525 silly gunzTarPerm extractEntry lib/public/icons/page_white_compressed.png
5526 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_compressed.png', 438, 420 ]
5527 silly gunzTarPerm extractEntry lib/public/icons/page_white_copy.png
5528 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_copy.png', 438, 420 ]
5529 silly gunzTarPerm extractEntry lib/public/icons/page_white_cplusplus.png
5530 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_cplusplus.png', 438, 420 ]
5531 silly gunzTarPerm extractEntry lib/public/icons/page_white_csharp.png
5532 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_csharp.png', 438, 420 ]
5533 silly gunzTarPerm extractEntry lib/public/icons/page_white_cup.png
5534 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_cup.png', 438, 420 ]
5535 silly gunzTarPerm extractEntry lib/public/icons/page_white_database.png
5536 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_database.png', 438, 420 ]
5537 silly gunzTarPerm extractEntry lib/public/icons/page_white_delete.png
5538 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_delete.png', 438, 420 ]
5539 silly gunzTarPerm extractEntry lib/public/icons/page_white_dvd.png
5540 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_dvd.png', 438, 420 ]
5541 silly gunzTarPerm extractEntry lib/public/icons/page_add.png
5542 silly gunzTarPerm modified mode [ 'lib/public/icons/page_add.png', 438, 420 ]
5543 silly gunzTarPerm extractEntry lib/public/icons/page_white_error.png
5544 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_error.png', 438, 420 ]
5545 silly gunzTarPerm extractEntry lib/public/icons/page_white_excel.png
5546 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_excel.png', 438, 420 ]
5547 silly gunzTarPerm extractEntry lib/public/icons/page_white_find.png
5548 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_find.png', 438, 420 ]
5549 silly gunzTarPerm extractEntry lib/public/icons/page_white_flash.png
5550 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_flash.png', 438, 420 ]
5551 silly gunzTarPerm extractEntry lib/public/icons/page_white_freehand.png
5552 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_freehand.png', 438, 420 ]
5553 silly gunzTarPerm extractEntry lib/public/icons/page_white_gear.png
5554 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_gear.png', 438, 420 ]
5555 silly gunzTarPerm extractEntry lib/public/icons/page_white_get.png
5556 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_get.png', 438, 420 ]
5557 silly gunzTarPerm extractEntry lib/public/icons/page_white_go.png
5558 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_go.png', 438, 420 ]
5559 silly gunzTarPerm extractEntry lib/public/icons/page_white_h.png
5560 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_h.png', 438, 420 ]
5561 silly gunzTarPerm extractEntry lib/public/icons/page_white_horizontal.png
5562 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_horizontal.png', 438, 420 ]
5563 silly gunzTarPerm extractEntry lib/public/icons/page_white_key.png
5564 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_key.png', 438, 420 ]
5565 silly gunzTarPerm extractEntry lib/public/icons/page_white_lightning.png
5566 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_lightning.png', 438, 420 ]
5567 silly gunzTarPerm extractEntry lib/public/icons/page_white_link.png
5568 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_link.png', 438, 420 ]
5569 silly gunzTarPerm extractEntry lib/public/icons/page_white_magnify.png
5570 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_magnify.png', 438, 420 ]
5571 silly gunzTarPerm extractEntry lib/public/icons/page_white_medal.png
5572 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_medal.png', 438, 420 ]
5573 silly gunzTarPerm extractEntry lib/public/icons/page_white_office.png
5574 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_office.png', 438, 420 ]
5575 silly gunzTarPerm extractEntry lib/public/icons/page_white_paint.png
5576 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_paint.png', 438, 420 ]
5577 silly gunzTarPerm extractEntry lib/public/icons/page_white_paintbrush.png
5578 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_paintbrush.png', 438, 420 ]
5579 silly gunzTarPerm extractEntry lib/public/icons/page_white_paste.png
5580 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_paste.png', 438, 420 ]
5581 silly gunzTarPerm extractEntry lib/public/icons/page_white_php.png
5582 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_php.png', 438, 420 ]
5583 silly gunzTarPerm extractEntry lib/public/icons/page_white_picture.png
5584 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_picture.png', 438, 420 ]
5585 silly gunzTarPerm extractEntry lib/public/icons/page_white_powerpoint.png
5586 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_powerpoint.png', 438, 420 ]
5587 silly gunzTarPerm extractEntry lib/public/icons/page_white_put.png
5588 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_put.png', 438, 420 ]
5589 silly gunzTarPerm extractEntry lib/public/icons/page_white_ruby.png
5590 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_ruby.png', 438, 420 ]
5591 silly gunzTarPerm extractEntry lib/public/icons/page_white_stack.png
5592 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_stack.png', 438, 420 ]
5593 silly gunzTarPerm extractEntry lib/public/icons/page_white_star.png
5594 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_star.png', 438, 420 ]
5595 silly gunzTarPerm extractEntry lib/public/icons/page_white_swoosh.png
5596 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_swoosh.png', 438, 420 ]
5597 silly gunzTarPerm extractEntry lib/public/icons/page_white_text.png
5598 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_text.png', 438, 420 ]
5599 silly gunzTarPerm extractEntry lib/public/icons/page_white_text_width.png
5600 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_text_width.png', 438, 420 ]
5601 silly gunzTarPerm extractEntry lib/public/icons/page_white_tux.png
5602 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_tux.png', 438, 420 ]
5603 silly gunzTarPerm extractEntry lib/public/icons/page_white_vector.png
5604 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_vector.png', 438, 420 ]
5605 silly gunzTarPerm extractEntry lib/public/icons/page_white_visualstudio.png
5606 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_visualstudio.png', 438, 420 ]
5607 silly gunzTarPerm extractEntry lib/public/icons/page_white_width.png
5608 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_width.png', 438, 420 ]
5609 silly gunzTarPerm extractEntry lib/public/icons/page_white_word.png
5610 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_word.png', 438, 420 ]
5611 silly gunzTarPerm extractEntry lib/public/icons/page_white_world.png
5612 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_world.png', 438, 420 ]
5613 silly gunzTarPerm extractEntry lib/public/icons/page_white_wrench.png
5614 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_wrench.png', 438, 420 ]
5615 silly gunzTarPerm extractEntry lib/public/icons/page_white_zip.png
5616 silly gunzTarPerm modified mode [ 'lib/public/icons/page_white_zip.png', 438, 420 ]
5617 silly gunzTarPerm extractEntry lib/public/icons/page_word.png
5618 silly gunzTarPerm modified mode [ 'lib/public/icons/page_word.png', 438, 420 ]
5619 silly gunzTarPerm extractEntry lib/public/icons/page_world.png
5620 silly gunzTarPerm modified mode [ 'lib/public/icons/page_world.png', 438, 420 ]
5621 silly gunzTarPerm extractEntry lib/public/style.css
5622 silly gunzTarPerm modified mode [ 'lib/public/style.css', 438, 420 ]
5623 silly gunzTarPerm extractEntry Readme.md
5624 silly gunzTarPerm modified mode [ 'Readme.md', 438, 420 ]
5625 silly lockFile f00d553b-rib-connect-node-modules-connect tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect
5626 silly lockFile f00d553b-rib-connect-node-modules-connect tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect
5627 silly lockFile 4c35fa8b-cache-connect-2-7-11-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\connect\2.7.11\package.tgz
5628 silly lockFile 4c35fa8b-cache-connect-2-7-11-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\connect\2.7.11\package.tgz
5629 info preinstall connect@2.7.11
5630 verbose readDependencies using package.json deps
5631 verbose readDependencies using package.json deps
5632 verbose cache add [ 'qs@0.6.5', null ]
5633 verbose cache add name=undefined spec="qs@0.6.5" args=["qs@0.6.5",null]
5634 verbose parsed url { protocol: null,
5634 verbose parsed url   slashes: null,
5634 verbose parsed url   auth: null,
5634 verbose parsed url   host: null,
5634 verbose parsed url   port: null,
5634 verbose parsed url   hostname: null,
5634 verbose parsed url   hash: null,
5634 verbose parsed url   search: null,
5634 verbose parsed url   query: null,
5634 verbose parsed url   pathname: 'qs@0.6.5',
5634 verbose parsed url   path: 'qs@0.6.5',
5634 verbose parsed url   href: 'qs@0.6.5' }
5635 verbose cache add name="qs" spec="0.6.5" args=["qs","0.6.5"]
5636 verbose parsed url { protocol: null,
5636 verbose parsed url   slashes: null,
5636 verbose parsed url   auth: null,
5636 verbose parsed url   host: null,
5636 verbose parsed url   port: null,
5636 verbose parsed url   hostname: null,
5636 verbose parsed url   hash: null,
5636 verbose parsed url   search: null,
5636 verbose parsed url   query: null,
5636 verbose parsed url   pathname: '0.6.5',
5636 verbose parsed url   path: '0.6.5',
5636 verbose parsed url   href: '0.6.5' }
5637 verbose addNamed [ 'qs', '0.6.5' ]
5638 verbose addNamed [ '0.6.5', '0.6.5' ]
5639 silly lockFile f5e5a40f-qs-0-6-5 qs@0.6.5
5640 verbose lock qs@0.6.5 C:\Users\Gaston\AppData\Roaming\npm-cache\f5e5a40f-qs-0-6-5.lock
5641 verbose cache add [ 'formidable@1.0.14', null ]
5642 verbose cache add name=undefined spec="formidable@1.0.14" args=["formidable@1.0.14",null]
5643 verbose parsed url { protocol: null,
5643 verbose parsed url   slashes: null,
5643 verbose parsed url   auth: null,
5643 verbose parsed url   host: null,
5643 verbose parsed url   port: null,
5643 verbose parsed url   hostname: null,
5643 verbose parsed url   hash: null,
5643 verbose parsed url   search: null,
5643 verbose parsed url   query: null,
5643 verbose parsed url   pathname: 'formidable@1.0.14',
5643 verbose parsed url   path: 'formidable@1.0.14',
5643 verbose parsed url   href: 'formidable@1.0.14' }
5644 verbose cache add name="formidable" spec="1.0.14" args=["formidable","1.0.14"]
5645 verbose parsed url { protocol: null,
5645 verbose parsed url   slashes: null,
5645 verbose parsed url   auth: null,
5645 verbose parsed url   host: null,
5645 verbose parsed url   port: null,
5645 verbose parsed url   hostname: null,
5645 verbose parsed url   hash: null,
5645 verbose parsed url   search: null,
5645 verbose parsed url   query: null,
5645 verbose parsed url   pathname: '1.0.14',
5645 verbose parsed url   path: '1.0.14',
5645 verbose parsed url   href: '1.0.14' }
5646 verbose addNamed [ 'formidable', '1.0.14' ]
5647 verbose addNamed [ '1.0.14', '1.0.14' ]
5648 silly lockFile 3f08b74a-formidable-1-0-14 formidable@1.0.14
5649 verbose lock formidable@1.0.14 C:\Users\Gaston\AppData\Roaming\npm-cache\3f08b74a-formidable-1-0-14.lock
5650 verbose cache add [ 'cookie-signature@1.0.1', null ]
5651 verbose cache add name=undefined spec="cookie-signature@1.0.1" args=["cookie-signature@1.0.1",null]
5652 verbose parsed url { protocol: null,
5652 verbose parsed url   slashes: null,
5652 verbose parsed url   auth: null,
5652 verbose parsed url   host: null,
5652 verbose parsed url   port: null,
5652 verbose parsed url   hostname: null,
5652 verbose parsed url   hash: null,
5652 verbose parsed url   search: null,
5652 verbose parsed url   query: null,
5652 verbose parsed url   pathname: 'cookie-signature@1.0.1',
5652 verbose parsed url   path: 'cookie-signature@1.0.1',
5652 verbose parsed url   href: 'cookie-signature@1.0.1' }
5653 verbose cache add name="cookie-signature" spec="1.0.1" args=["cookie-signature","1.0.1"]
5654 verbose parsed url { protocol: null,
5654 verbose parsed url   slashes: null,
5654 verbose parsed url   auth: null,
5654 verbose parsed url   host: null,
5654 verbose parsed url   port: null,
5654 verbose parsed url   hostname: null,
5654 verbose parsed url   hash: null,
5654 verbose parsed url   search: null,
5654 verbose parsed url   query: null,
5654 verbose parsed url   pathname: '1.0.1',
5654 verbose parsed url   path: '1.0.1',
5654 verbose parsed url   href: '1.0.1' }
5655 verbose addNamed [ 'cookie-signature', '1.0.1' ]
5656 verbose addNamed [ '1.0.1', '1.0.1' ]
5657 silly lockFile d4a1eba1-cookie-signature-1-0-1 cookie-signature@1.0.1
5658 verbose lock cookie-signature@1.0.1 C:\Users\Gaston\AppData\Roaming\npm-cache\d4a1eba1-cookie-signature-1-0-1.lock
5659 verbose cache add [ 'buffer-crc32@0.2.1', null ]
5660 verbose cache add name=undefined spec="buffer-crc32@0.2.1" args=["buffer-crc32@0.2.1",null]
5661 verbose parsed url { protocol: null,
5661 verbose parsed url   slashes: null,
5661 verbose parsed url   auth: null,
5661 verbose parsed url   host: null,
5661 verbose parsed url   port: null,
5661 verbose parsed url   hostname: null,
5661 verbose parsed url   hash: null,
5661 verbose parsed url   search: null,
5661 verbose parsed url   query: null,
5661 verbose parsed url   pathname: 'buffer-crc32@0.2.1',
5661 verbose parsed url   path: 'buffer-crc32@0.2.1',
5661 verbose parsed url   href: 'buffer-crc32@0.2.1' }
5662 verbose cache add name="buffer-crc32" spec="0.2.1" args=["buffer-crc32","0.2.1"]
5663 verbose parsed url { protocol: null,
5663 verbose parsed url   slashes: null,
5663 verbose parsed url   auth: null,
5663 verbose parsed url   host: null,
5663 verbose parsed url   port: null,
5663 verbose parsed url   hostname: null,
5663 verbose parsed url   hash: null,
5663 verbose parsed url   search: null,
5663 verbose parsed url   query: null,
5663 verbose parsed url   pathname: '0.2.1',
5663 verbose parsed url   path: '0.2.1',
5663 verbose parsed url   href: '0.2.1' }
5664 verbose addNamed [ 'buffer-crc32', '0.2.1' ]
5665 verbose addNamed [ '0.2.1', '0.2.1' ]
5666 silly lockFile 057d0d26-buffer-crc32-0-2-1 buffer-crc32@0.2.1
5667 verbose lock buffer-crc32@0.2.1 C:\Users\Gaston\AppData\Roaming\npm-cache\057d0d26-buffer-crc32-0-2-1.lock
5668 verbose cache add [ 'cookie@0.0.5', null ]
5669 verbose cache add name=undefined spec="cookie@0.0.5" args=["cookie@0.0.5",null]
5670 verbose parsed url { protocol: null,
5670 verbose parsed url   slashes: null,
5670 verbose parsed url   auth: null,
5670 verbose parsed url   host: null,
5670 verbose parsed url   port: null,
5670 verbose parsed url   hostname: null,
5670 verbose parsed url   hash: null,
5670 verbose parsed url   search: null,
5670 verbose parsed url   query: null,
5670 verbose parsed url   pathname: 'cookie@0.0.5',
5670 verbose parsed url   path: 'cookie@0.0.5',
5670 verbose parsed url   href: 'cookie@0.0.5' }
5671 verbose cache add name="cookie" spec="0.0.5" args=["cookie","0.0.5"]
5672 verbose parsed url { protocol: null,
5672 verbose parsed url   slashes: null,
5672 verbose parsed url   auth: null,
5672 verbose parsed url   host: null,
5672 verbose parsed url   port: null,
5672 verbose parsed url   hostname: null,
5672 verbose parsed url   hash: null,
5672 verbose parsed url   search: null,
5672 verbose parsed url   query: null,
5672 verbose parsed url   pathname: '0.0.5',
5672 verbose parsed url   path: '0.0.5',
5672 verbose parsed url   href: '0.0.5' }
5673 verbose addNamed [ 'cookie', '0.0.5' ]
5674 verbose addNamed [ '0.0.5', '0.0.5' ]
5675 silly lockFile fe08ced7-cookie-0-0-5 cookie@0.0.5
5676 verbose lock cookie@0.0.5 C:\Users\Gaston\AppData\Roaming\npm-cache\fe08ced7-cookie-0-0-5.lock
5677 verbose cache add [ 'send@0.1.1', null ]
5678 verbose cache add name=undefined spec="send@0.1.1" args=["send@0.1.1",null]
5679 verbose parsed url { protocol: null,
5679 verbose parsed url   slashes: null,
5679 verbose parsed url   auth: null,
5679 verbose parsed url   host: null,
5679 verbose parsed url   port: null,
5679 verbose parsed url   hostname: null,
5679 verbose parsed url   hash: null,
5679 verbose parsed url   search: null,
5679 verbose parsed url   query: null,
5679 verbose parsed url   pathname: 'send@0.1.1',
5679 verbose parsed url   path: 'send@0.1.1',
5679 verbose parsed url   href: 'send@0.1.1' }
5680 verbose cache add name="send" spec="0.1.1" args=["send","0.1.1"]
5681 verbose parsed url { protocol: null,
5681 verbose parsed url   slashes: null,
5681 verbose parsed url   auth: null,
5681 verbose parsed url   host: null,
5681 verbose parsed url   port: null,
5681 verbose parsed url   hostname: null,
5681 verbose parsed url   hash: null,
5681 verbose parsed url   search: null,
5681 verbose parsed url   query: null,
5681 verbose parsed url   pathname: '0.1.1',
5681 verbose parsed url   path: '0.1.1',
5681 verbose parsed url   href: '0.1.1' }
5682 verbose addNamed [ 'send', '0.1.1' ]
5683 verbose addNamed [ '0.1.1', '0.1.1' ]
5684 silly lockFile aa25b10a-send-0-1-1 send@0.1.1
5685 verbose lock send@0.1.1 C:\Users\Gaston\AppData\Roaming\npm-cache\aa25b10a-send-0-1-1.lock
5686 verbose cache add [ 'bytes@0.2.0', null ]
5687 verbose cache add name=undefined spec="bytes@0.2.0" args=["bytes@0.2.0",null]
5688 verbose parsed url { protocol: null,
5688 verbose parsed url   slashes: null,
5688 verbose parsed url   auth: null,
5688 verbose parsed url   host: null,
5688 verbose parsed url   port: null,
5688 verbose parsed url   hostname: null,
5688 verbose parsed url   hash: null,
5688 verbose parsed url   search: null,
5688 verbose parsed url   query: null,
5688 verbose parsed url   pathname: 'bytes@0.2.0',
5688 verbose parsed url   path: 'bytes@0.2.0',
5688 verbose parsed url   href: 'bytes@0.2.0' }
5689 verbose cache add name="bytes" spec="0.2.0" args=["bytes","0.2.0"]
5690 verbose parsed url { protocol: null,
5690 verbose parsed url   slashes: null,
5690 verbose parsed url   auth: null,
5690 verbose parsed url   host: null,
5690 verbose parsed url   port: null,
5690 verbose parsed url   hostname: null,
5690 verbose parsed url   hash: null,
5690 verbose parsed url   search: null,
5690 verbose parsed url   query: null,
5690 verbose parsed url   pathname: '0.2.0',
5690 verbose parsed url   path: '0.2.0',
5690 verbose parsed url   href: '0.2.0' }
5691 verbose addNamed [ 'bytes', '0.2.0' ]
5692 verbose addNamed [ '0.2.0', '0.2.0' ]
5693 silly lockFile e351aee0-bytes-0-2-0 bytes@0.2.0
5694 verbose lock bytes@0.2.0 C:\Users\Gaston\AppData\Roaming\npm-cache\e351aee0-bytes-0-2-0.lock
5695 verbose cache add [ 'fresh@0.1.0', null ]
5696 verbose cache add name=undefined spec="fresh@0.1.0" args=["fresh@0.1.0",null]
5697 verbose parsed url { protocol: null,
5697 verbose parsed url   slashes: null,
5697 verbose parsed url   auth: null,
5697 verbose parsed url   host: null,
5697 verbose parsed url   port: null,
5697 verbose parsed url   hostname: null,
5697 verbose parsed url   hash: null,
5697 verbose parsed url   search: null,
5697 verbose parsed url   query: null,
5697 verbose parsed url   pathname: 'fresh@0.1.0',
5697 verbose parsed url   path: 'fresh@0.1.0',
5697 verbose parsed url   href: 'fresh@0.1.0' }
5698 verbose cache add name="fresh" spec="0.1.0" args=["fresh","0.1.0"]
5699 verbose parsed url { protocol: null,
5699 verbose parsed url   slashes: null,
5699 verbose parsed url   auth: null,
5699 verbose parsed url   host: null,
5699 verbose parsed url   port: null,
5699 verbose parsed url   hostname: null,
5699 verbose parsed url   hash: null,
5699 verbose parsed url   search: null,
5699 verbose parsed url   query: null,
5699 verbose parsed url   pathname: '0.1.0',
5699 verbose parsed url   path: '0.1.0',
5699 verbose parsed url   href: '0.1.0' }
5700 verbose addNamed [ 'fresh', '0.1.0' ]
5701 verbose addNamed [ '0.1.0', '0.1.0' ]
5702 silly lockFile 3dea7da8-fresh-0-1-0 fresh@0.1.0
5703 verbose lock fresh@0.1.0 C:\Users\Gaston\AppData\Roaming\npm-cache\3dea7da8-fresh-0-1-0.lock
5704 verbose cache add [ 'pause@0.0.1', null ]
5705 verbose cache add name=undefined spec="pause@0.0.1" args=["pause@0.0.1",null]
5706 verbose parsed url { protocol: null,
5706 verbose parsed url   slashes: null,
5706 verbose parsed url   auth: null,
5706 verbose parsed url   host: null,
5706 verbose parsed url   port: null,
5706 verbose parsed url   hostname: null,
5706 verbose parsed url   hash: null,
5706 verbose parsed url   search: null,
5706 verbose parsed url   query: null,
5706 verbose parsed url   pathname: 'pause@0.0.1',
5706 verbose parsed url   path: 'pause@0.0.1',
5706 verbose parsed url   href: 'pause@0.0.1' }
5707 verbose cache add name="pause" spec="0.0.1" args=["pause","0.0.1"]
5708 verbose parsed url { protocol: null,
5708 verbose parsed url   slashes: null,
5708 verbose parsed url   auth: null,
5708 verbose parsed url   host: null,
5708 verbose parsed url   port: null,
5708 verbose parsed url   hostname: null,
5708 verbose parsed url   hash: null,
5708 verbose parsed url   search: null,
5708 verbose parsed url   query: null,
5708 verbose parsed url   pathname: '0.0.1',
5708 verbose parsed url   path: '0.0.1',
5708 verbose parsed url   href: '0.0.1' }
5709 verbose addNamed [ 'pause', '0.0.1' ]
5710 verbose addNamed [ '0.0.1', '0.0.1' ]
5711 silly lockFile c62fc432-pause-0-0-1 pause@0.0.1
5712 verbose lock pause@0.0.1 C:\Users\Gaston\AppData\Roaming\npm-cache\c62fc432-pause-0-0-1.lock
5713 verbose cache add [ 'debug@*', null ]
5714 verbose cache add name=undefined spec="debug@*" args=["debug@*",null]
5715 verbose parsed url { protocol: null,
5715 verbose parsed url   slashes: null,
5715 verbose parsed url   auth: null,
5715 verbose parsed url   host: null,
5715 verbose parsed url   port: null,
5715 verbose parsed url   hostname: null,
5715 verbose parsed url   hash: null,
5715 verbose parsed url   search: null,
5715 verbose parsed url   query: null,
5715 verbose parsed url   pathname: 'debug@*',
5715 verbose parsed url   path: 'debug@*',
5715 verbose parsed url   href: 'debug@*' }
5716 verbose cache add name="debug" spec="*" args=["debug","*"]
5717 verbose parsed url { protocol: null,
5717 verbose parsed url   slashes: null,
5717 verbose parsed url   auth: null,
5717 verbose parsed url   host: null,
5717 verbose parsed url   port: null,
5717 verbose parsed url   hostname: null,
5717 verbose parsed url   hash: null,
5717 verbose parsed url   search: null,
5717 verbose parsed url   query: null,
5717 verbose parsed url   pathname: '*',
5717 verbose parsed url   path: '*',
5717 verbose parsed url   href: '*' }
5718 verbose addNamed [ 'debug', '*' ]
5719 verbose addNamed [ null, '*' ]
5720 silly lockFile 3ac45eff-debug debug@*
5721 verbose lock debug@* C:\Users\Gaston\AppData\Roaming\npm-cache\3ac45eff-debug.lock
5722 verbose url raw formidable/1.0.14
5723 verbose url resolving [ 'https://registry.npmjs.org/', './formidable/1.0.14' ]
5724 verbose url resolved https://registry.npmjs.org/formidable/1.0.14
5725 info trying registry request attempt 1 at 16:38:20
5726 http GET https://registry.npmjs.org/formidable/1.0.14
5727 verbose url raw cookie-signature/1.0.1
5728 verbose url resolving [ 'https://registry.npmjs.org/', './cookie-signature/1.0.1' ]
5729 verbose url resolved https://registry.npmjs.org/cookie-signature/1.0.1
5730 info trying registry request attempt 1 at 16:38:20
5731 http GET https://registry.npmjs.org/cookie-signature/1.0.1
5732 verbose url raw qs/0.6.5
5733 verbose url resolving [ 'https://registry.npmjs.org/', './qs/0.6.5' ]
5734 verbose url resolved https://registry.npmjs.org/qs/0.6.5
5735 info trying registry request attempt 1 at 16:38:20
5736 http GET https://registry.npmjs.org/qs/0.6.5
5737 verbose url raw buffer-crc32/0.2.1
5738 verbose url resolving [ 'https://registry.npmjs.org/', './buffer-crc32/0.2.1' ]
5739 verbose url resolved https://registry.npmjs.org/buffer-crc32/0.2.1
5740 info trying registry request attempt 1 at 16:38:20
5741 http GET https://registry.npmjs.org/buffer-crc32/0.2.1
5742 verbose url raw send/0.1.1
5743 verbose url resolving [ 'https://registry.npmjs.org/', './send/0.1.1' ]
5744 verbose url resolved https://registry.npmjs.org/send/0.1.1
5745 info trying registry request attempt 1 at 16:38:20
5746 http GET https://registry.npmjs.org/send/0.1.1
5747 verbose url raw cookie/0.0.5
5748 verbose url resolving [ 'https://registry.npmjs.org/', './cookie/0.0.5' ]
5749 verbose url resolved https://registry.npmjs.org/cookie/0.0.5
5750 info trying registry request attempt 1 at 16:38:20
5751 http GET https://registry.npmjs.org/cookie/0.0.5
5752 verbose url raw fresh/0.1.0
5753 verbose url resolving [ 'https://registry.npmjs.org/', './fresh/0.1.0' ]
5754 verbose url resolved https://registry.npmjs.org/fresh/0.1.0
5755 info trying registry request attempt 1 at 16:38:20
5756 http GET https://registry.npmjs.org/fresh/0.1.0
5757 verbose url raw pause/0.0.1
5758 verbose url resolving [ 'https://registry.npmjs.org/', './pause/0.0.1' ]
5759 verbose url resolved https://registry.npmjs.org/pause/0.0.1
5760 info trying registry request attempt 1 at 16:38:20
5761 http GET https://registry.npmjs.org/pause/0.0.1
5762 verbose url raw bytes/0.2.0
5763 verbose url resolving [ 'https://registry.npmjs.org/', './bytes/0.2.0' ]
5764 verbose url resolved https://registry.npmjs.org/bytes/0.2.0
5765 info trying registry request attempt 1 at 16:38:20
5766 http GET https://registry.npmjs.org/bytes/0.2.0
5767 silly addNameRange { name: 'debug', range: '*', hasData: false }
5768 verbose url raw debug
5769 verbose url resolving [ 'https://registry.npmjs.org/', './debug' ]
5770 verbose url resolved https://registry.npmjs.org/debug
5771 info trying registry request attempt 1 at 16:38:20
5772 verbose etag "D3KJHAZTCKQ35NYLNYQDEN7JN"
5773 http GET https://registry.npmjs.org/debug
5774 http 200 https://registry.npmjs.org/underscore.string
5775 silly registry.get cb [ 200,
5775 silly registry.get   { date: 'Fri, 03 Jan 2014 19:37:10 GMT',
5775 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
5775 silly registry.get     etag: '"90SFK34STTU6959L95KWPSXK3"',
5775 silly registry.get     'content-type': 'application/json',
5775 silly registry.get     'content-length': '131735',
5775 silly registry.get     'accept-ranges': 'bytes',
5775 silly registry.get     via: '1.1 varnish',
5775 silly registry.get     age: '115',
5775 silly registry.get     'x-served-by': 'cache-jfk1033-JFK',
5775 silly registry.get     'x-cache': 'HIT',
5775 silly registry.get     'x-cache-hits': '1',
5775 silly registry.get     'x-timer': 'S1388777830.097155333,VS0,VE53',
5775 silly registry.get     vary: 'Accept',
5775 silly registry.get     'keep-alive': 'timeout=10, max=40',
5775 silly registry.get     connection: 'Keep-Alive' } ]
5776 silly addNameRange number 2 { name: 'underscore.string',
5776 silly addNameRange   range: '>=2.2.1-0 <2.3.0-0',
5776 silly addNameRange   hasData: true }
5777 silly addNameRange versions [ 'underscore.string',
5777 silly addNameRange   [ '0.9.2',
5777 silly addNameRange     '1.0.0',
5777 silly addNameRange     '1.1.3',
5777 silly addNameRange     '1.1.4',
5777 silly addNameRange     '1.1.5',
5777 silly addNameRange     '1.1.6',
5777 silly addNameRange     '2.0.0',
5777 silly addNameRange     '2.1.0',
5777 silly addNameRange     '2.1.1',
5777 silly addNameRange     '2.3.0',
5777 silly addNameRange     '2.3.1',
5777 silly addNameRange     '2.3.2',
5777 silly addNameRange     '2.2.1',
5777 silly addNameRange     '2.2.0-rc',
5777 silly addNameRange     '2.3.3' ] ]
5778 verbose addNamed [ 'underscore.string', '2.2.1' ]
5779 verbose addNamed [ '2.2.1', '2.2.1' ]
5780 silly lockFile 5c083954-underscore-string-2-2-1 underscore.string@2.2.1
5781 verbose lock underscore.string@2.2.1 C:\Users\Gaston\AppData\Roaming\npm-cache\5c083954-underscore-string-2-2-1.lock
5782 silly lockFile c23c3112-ring-underscore-string-2-2-1-tgz https://registry.npmjs.org/underscore.string/-/underscore.string-2.2.1.tgz
5783 verbose lock https://registry.npmjs.org/underscore.string/-/underscore.string-2.2.1.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\c23c3112-ring-underscore-string-2-2-1-tgz.lock
5784 verbose addRemoteTarball [ 'https://registry.npmjs.org/underscore.string/-/underscore.string-2.2.1.tgz',
5784 verbose addRemoteTarball   'd7c0fa2af5d5a1a67f4253daee98132e733f0f19' ]
5785 info retry fetch attempt 1 at 16:38:26
5786 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777906080-0.15973132639192045\tmp.tgz
5787 http GET https://registry.npmjs.org/underscore.string/-/underscore.string-2.2.1.tgz
5788 http 200 https://registry.npmjs.org/iconv-lite
5789 silly registry.get cb [ 200,
5789 silly registry.get   { date: 'Fri, 03 Jan 2014 19:37:16 GMT',
5789 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
5789 silly registry.get     etag: '"3FVYFQY8WKOSWHZ6IUTSWL5RQ"',
5789 silly registry.get     'content-type': 'application/json',
5789 silly registry.get     'content-length': '46675',
5789 silly registry.get     'accept-ranges': 'bytes',
5789 silly registry.get     via: '1.1 varnish',
5789 silly registry.get     age: '3753',
5789 silly registry.get     'x-served-by': 'cache-jfk1021-JFK',
5789 silly registry.get     'x-cache': 'HIT',
5789 silly registry.get     'x-cache-hits': '1',
5789 silly registry.get     'x-timer': 'S1388777836.527737856,VS0,VE52',
5789 silly registry.get     vary: 'Accept',
5789 silly registry.get     'keep-alive': 'timeout=10, max=44',
5789 silly registry.get     connection: 'Keep-Alive' } ]
5790 silly addNameRange number 2 { name: 'iconv-lite',
5790 silly addNameRange   range: '>=0.2.11-0 <0.3.0-0',
5790 silly addNameRange   hasData: true }
5791 silly addNameRange versions [ 'iconv-lite',
5791 silly addNameRange   [ '0.1.0',
5791 silly addNameRange     '0.1.1',
5791 silly addNameRange     '0.1.2',
5791 silly addNameRange     '0.1.3',
5791 silly addNameRange     '0.1.4',
5791 silly addNameRange     '0.2.0',
5791 silly addNameRange     '0.2.1',
5791 silly addNameRange     '0.2.3',
5791 silly addNameRange     '0.2.4',
5791 silly addNameRange     '0.2.5',
5791 silly addNameRange     '0.2.6',
5791 silly addNameRange     '0.2.7',
5791 silly addNameRange     '0.2.8',
5791 silly addNameRange     '0.2.9',
5791 silly addNameRange     '0.2.10',
5791 silly addNameRange     '0.2.11' ] ]
5792 verbose addNamed [ 'iconv-lite', '0.2.11' ]
5793 verbose addNamed [ '0.2.11', '0.2.11' ]
5794 silly lockFile 5d877021-iconv-lite-0-2-11 iconv-lite@0.2.11
5795 verbose lock iconv-lite@0.2.11 C:\Users\Gaston\AppData\Roaming\npm-cache\5d877021-iconv-lite-0-2-11.lock
5796 silly lockFile 2e095f8b-iconv-lite-iconv-lite-0-2-11-tgz https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.2.11.tgz
5797 verbose lock https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.2.11.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\2e095f8b-iconv-lite-iconv-lite-0-2-11-tgz.lock
5798 verbose addRemoteTarball [ 'https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.2.11.tgz',
5798 verbose addRemoteTarball   '1ce60a3a57864a292d1321ff4609ca4bb965adc8' ]
5799 info retry fetch attempt 1 at 16:38:27
5800 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777907248-0.718480174196884\tmp.tgz
5801 http GET https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.2.11.tgz
5802 http 200 https://registry.npmjs.org/which
5803 silly registry.get cb [ 200,
5803 silly registry.get   { date: 'Fri, 03 Jan 2014 19:37:28 GMT',
5803 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
5803 silly registry.get     etag: '"F3W7USNA68E6BBOWK34HAXQV1"',
5803 silly registry.get     'content-type': 'application/json',
5803 silly registry.get     'content-length': '5953',
5803 silly registry.get     'accept-ranges': 'bytes',
5803 silly registry.get     via: '1.1 varnish',
5803 silly registry.get     age: '562',
5803 silly registry.get     'x-served-by': 'cache-jfk1021-JFK',
5803 silly registry.get     'x-cache': 'HIT',
5803 silly registry.get     'x-cache-hits': '1',
5803 silly registry.get     'x-timer': 'S1388777848.140208721,VS0,VE53',
5803 silly registry.get     vary: 'Accept',
5803 silly registry.get     'keep-alive': 'timeout=10, max=43',
5803 silly registry.get     connection: 'Keep-Alive' } ]
5804 silly addNameRange number 2 { name: 'which', range: '>=1.0.5-0 <1.1.0-0', hasData: true }
5805 silly addNameRange versions [ 'which', [ '1.0.0', '1.0.1', '1.0.2', '1.0.3', '1.0.5' ] ]
5806 verbose addNamed [ 'which', '1.0.5' ]
5807 verbose addNamed [ '1.0.5', '1.0.5' ]
5808 silly lockFile 4aed4494-which-1-0-5 which@1.0.5
5809 verbose lock which@1.0.5 C:\Users\Gaston\AppData\Roaming\npm-cache\4aed4494-which-1-0-5.lock
5810 silly lockFile 9c4bb536--npmjs-org-which-which-1-0-5-tgz https://registry.npmjs.org/which/-/which-1.0.5.tgz
5811 verbose lock https://registry.npmjs.org/which/-/which-1.0.5.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\9c4bb536--npmjs-org-which-which-1-0-5-tgz.lock
5812 verbose addRemoteTarball [ 'https://registry.npmjs.org/which/-/which-1.0.5.tgz',
5812 verbose addRemoteTarball   '5630d6819dda692f1464462e7956cb42c0842739' ]
5813 info retry fetch attempt 1 at 16:38:28
5814 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777908245-0.8959605023264885\tmp.tgz
5815 http GET https://registry.npmjs.org/which/-/which-1.0.5.tgz
5816 http 200 https://registry.npmjs.org/underscore.string/-/underscore.string-2.2.1.tgz
5817 http 200 https://registry.npmjs.org/which/-/which-1.0.5.tgz
5818 http 200 https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.2.11.tgz
5819 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777908245-0.8959605023264885\tmp.tgz
5820 silly lockFile 0dcc79ce-08245-0-8959605023264885-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777908245-0.8959605023264885\package
5821 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777908245-0.8959605023264885\package C:\Users\Gaston\AppData\Roaming\npm-cache\0dcc79ce-08245-0-8959605023264885-package.lock
5822 silly lockFile 7a838396-08245-0-8959605023264885-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777908245-0.8959605023264885\tmp.tgz
5823 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777908245-0.8959605023264885\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\7a838396-08245-0-8959605023264885-tmp-tgz.lock
5824 silly gunzTarPerm modes [ '755', '644' ]
5825 silly gunzTarPerm extractEntry bin/
5826 silly gunzTarPerm extractEntry bin/which
5827 silly gunzTarPerm extractEntry LICENSE
5828 silly gunzTarPerm extractEntry package.json
5829 silly gunzTarPerm extractEntry README.md
5830 silly gunzTarPerm extractEntry which.js
5831 silly lockFile 0dcc79ce-08245-0-8959605023264885-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777908245-0.8959605023264885\package
5832 silly lockFile 0dcc79ce-08245-0-8959605023264885-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777908245-0.8959605023264885\package
5833 silly lockFile 7a838396-08245-0-8959605023264885-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777908245-0.8959605023264885\tmp.tgz
5834 silly lockFile 7a838396-08245-0-8959605023264885-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777908245-0.8959605023264885\tmp.tgz
5835 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\which\\1.0.5\\package.tgz',
5835 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388777908245-0.8959605023264885\\package' ]
5836 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\which\1.0.5\package.tgz
5837 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777908245-0.8959605023264885\package
5838 silly lockFile 0dcc79ce-08245-0-8959605023264885-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777908245-0.8959605023264885\package
5839 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777908245-0.8959605023264885\package C:\Users\Gaston\AppData\Roaming\npm-cache\0dcc79ce-08245-0-8959605023264885-package.lock
5840 silly lockFile 68a01605-pm-cache-which-1-0-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\which\1.0.5\package.tgz
5841 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\which\1.0.5\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\68a01605-pm-cache-which-1-0-5-package-tgz.lock
5842 silly lockFile 0dcc79ce-08245-0-8959605023264885-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777908245-0.8959605023264885\package
5843 silly lockFile 0dcc79ce-08245-0-8959605023264885-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777908245-0.8959605023264885\package
5844 silly lockFile 68a01605-pm-cache-which-1-0-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\which\1.0.5\package.tgz
5845 silly lockFile 68a01605-pm-cache-which-1-0-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\which\1.0.5\package.tgz
5846 silly lockFile 133c8edc-ng-npm-cache-which-1-0-5-package C:\Users\Gaston\AppData\Roaming\npm-cache\which\1.0.5\package
5847 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\which\1.0.5\package C:\Users\Gaston\AppData\Roaming\npm-cache\133c8edc-ng-npm-cache-which-1-0-5-package.lock
5848 silly lockFile 133c8edc-ng-npm-cache-which-1-0-5-package C:\Users\Gaston\AppData\Roaming\npm-cache\which\1.0.5\package
5849 silly lockFile 133c8edc-ng-npm-cache-which-1-0-5-package C:\Users\Gaston\AppData\Roaming\npm-cache\which\1.0.5\package
5850 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\which\1.0.5\package.tgz
5851 silly lockFile 45eb8a9a-ng-npm-cache-which-1-0-5-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\which\1.0.5\package
5852 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\which\1.0.5\package C:\Users\Gaston\AppData\Roaming\npm-cache\45eb8a9a-ng-npm-cache-which-1-0-5-package.lock
5853 silly lockFile 68a01605-pm-cache-which-1-0-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\which\1.0.5\package.tgz
5854 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\which\1.0.5\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\68a01605-pm-cache-which-1-0-5-package-tgz.lock
5855 silly gunzTarPerm modes [ '755', '644' ]
5856 silly gunzTarPerm extractEntry package.json
5857 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
5858 silly gunzTarPerm extractEntry README.md
5859 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
5860 silly gunzTarPerm extractEntry LICENSE
5861 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
5862 silly gunzTarPerm extractEntry which.js
5863 silly gunzTarPerm modified mode [ 'which.js', 438, 420 ]
5864 silly gunzTarPerm extractEntry bin/which
5865 silly gunzTarPerm modified mode [ 'bin/which', 438, 420 ]
5866 silly lockFile 45eb8a9a-ng-npm-cache-which-1-0-5-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\which\1.0.5\package
5867 silly lockFile 45eb8a9a-ng-npm-cache-which-1-0-5-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\which\1.0.5\package
5868 silly lockFile 68a01605-pm-cache-which-1-0-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\which\1.0.5\package.tgz
5869 silly lockFile 68a01605-pm-cache-which-1-0-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\which\1.0.5\package.tgz
5870 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\which\1.0.5\package.tgz 644
5871 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\which\1.0.5\package.tgz
5872 silly lockFile 9c4bb536--npmjs-org-which-which-1-0-5-tgz https://registry.npmjs.org/which/-/which-1.0.5.tgz
5873 silly lockFile 9c4bb536--npmjs-org-which-which-1-0-5-tgz https://registry.npmjs.org/which/-/which-1.0.5.tgz
5874 silly lockFile 4aed4494-which-1-0-5 which@1.0.5
5875 silly lockFile 4aed4494-which-1-0-5 which@1.0.5
5876 silly lockFile d158d65e-which-1-0-5 which@~1.0.5
5877 silly lockFile d158d65e-which-1-0-5 which@~1.0.5
5878 http 200 https://registry.npmjs.org/async
5879 silly registry.get cb [ 200,
5879 silly registry.get   { date: 'Fri, 03 Jan 2014 19:35:57 GMT',
5879 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
5879 silly registry.get     etag: '"1I9ZGRGBDL3K6MN9A9JI71HM6"',
5879 silly registry.get     'content-type': 'application/json',
5879 silly registry.get     'content-length': '676833',
5879 silly registry.get     'accept-ranges': 'bytes',
5879 silly registry.get     via: '1.1 varnish',
5879 silly registry.get     age: '347',
5879 silly registry.get     'x-served-by': 'cache-jfk1024-JFK',
5879 silly registry.get     'x-cache': 'HIT',
5879 silly registry.get     'x-cache-hits': '1',
5879 silly registry.get     'x-timer': 'S1388777757.441499472,VS0,VE3',
5879 silly registry.get     vary: 'Accept',
5879 silly registry.get     'keep-alive': 'timeout=10, max=47',
5879 silly registry.get     connection: 'Keep-Alive' } ]
5880 silly addNameRange number 2 { name: 'async', range: '>=0.2.0-0 <0.3.0-0', hasData: true }
5881 silly addNameRange versions [ 'async',
5881 silly addNameRange   [ '0.1.0',
5881 silly addNameRange     '0.1.1',
5881 silly addNameRange     '0.1.2',
5881 silly addNameRange     '0.1.3',
5881 silly addNameRange     '0.1.4',
5881 silly addNameRange     '0.1.5',
5881 silly addNameRange     '0.1.6',
5881 silly addNameRange     '0.1.7',
5881 silly addNameRange     '0.1.8',
5881 silly addNameRange     '0.1.9',
5881 silly addNameRange     '0.1.10',
5881 silly addNameRange     '0.1.11',
5881 silly addNameRange     '0.1.12',
5881 silly addNameRange     '0.1.13',
5881 silly addNameRange     '0.1.14',
5881 silly addNameRange     '0.1.15',
5881 silly addNameRange     '0.1.16',
5881 silly addNameRange     '0.1.17',
5881 silly addNameRange     '0.1.18',
5881 silly addNameRange     '0.1.19',
5881 silly addNameRange     '0.1.20',
5881 silly addNameRange     '0.1.21',
5881 silly addNameRange     '0.1.22',
5881 silly addNameRange     '0.2.0',
5881 silly addNameRange     '0.2.1',
5881 silly addNameRange     '0.2.2',
5881 silly addNameRange     '0.2.3',
5881 silly addNameRange     '0.2.4',
5881 silly addNameRange     '0.2.5',
5881 silly addNameRange     '0.2.6',
5881 silly addNameRange     '0.2.7',
5881 silly addNameRange     '0.2.8',
5881 silly addNameRange     '0.2.9' ] ]
5882 verbose addNamed [ 'async', '0.2.9' ]
5883 http 200 https://registry.npmjs.org/exit
5884 silly registry.get cb [ 200,
5884 silly registry.get   { date: 'Fri, 03 Jan 2014 19:37:36 GMT',
5884 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
5884 silly registry.get     etag: '"BJRSXY67OY4ZGGS06GL2BKR4U"',
5884 silly registry.get     'content-type': 'application/json',
5884 silly registry.get     'content-length': '14080',
5884 silly registry.get     'accept-ranges': 'bytes',
5884 silly registry.get     via: '1.1 varnish',
5884 silly registry.get     age: '9414',
5884 silly registry.get     'x-served-by': 'cache-jfk1024-JFK',
5884 silly registry.get     'x-cache': 'HIT',
5884 silly registry.get     'x-cache-hits': '1',
5884 silly registry.get     'x-timer': 'S1388777855.969011545,VS0,VE51',
5884 silly registry.get     vary: 'Accept',
5884 silly registry.get     'keep-alive': 'timeout=10, max=46',
5884 silly registry.get     connection: 'Keep-Alive' } ]
5885 silly addNameRange number 2 { name: 'exit', range: '>=0.1.1-0 <0.2.0-0', hasData: true }
5886 silly addNameRange versions [ 'exit', [ '0.1.0', '0.1.1', '0.1.2' ] ]
5887 verbose addNamed [ 'exit', '0.1.2' ]
5888 verbose addNamed [ '0.1.2', '0.1.2' ]
5889 silly lockFile 7dd65db3-exit-0-1-2 exit@0.1.2
5890 verbose lock exit@0.1.2 C:\Users\Gaston\AppData\Roaming\npm-cache\7dd65db3-exit-0-1-2.lock
5891 silly lockFile 26c4995b-ry-npmjs-org-exit-exit-0-1-2-tgz https://registry.npmjs.org/exit/-/exit-0.1.2.tgz
5892 verbose lock https://registry.npmjs.org/exit/-/exit-0.1.2.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\26c4995b-ry-npmjs-org-exit-exit-0-1-2-tgz.lock
5893 verbose addRemoteTarball [ 'https://registry.npmjs.org/exit/-/exit-0.1.2.tgz',
5893 verbose addRemoteTarball   '0632638f8d877cc82107d30a0fff1a17cba1cd0c' ]
5894 info retry fetch attempt 1 at 16:38:37
5895 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777917063-0.4588683806359768\tmp.tgz
5896 http GET https://registry.npmjs.org/exit/-/exit-0.1.2.tgz
5897 http 200 https://registry.npmjs.org/getobject
5898 silly registry.get cb [ 200,
5898 silly registry.get   { date: 'Fri, 03 Jan 2014 19:37:37 GMT',
5898 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
5898 silly registry.get     etag: '"EY45J3K25DNZQEDOLS0IH0CSG"',
5898 silly registry.get     'content-type': 'application/json',
5898 silly registry.get     'content-length': '3109',
5898 silly registry.get     'accept-ranges': 'bytes',
5898 silly registry.get     via: '1.1 varnish',
5898 silly registry.get     age: '3525',
5898 silly registry.get     'x-served-by': 'cache-jfk1024-JFK',
5898 silly registry.get     'x-cache': 'HIT',
5898 silly registry.get     'x-cache-hits': '1',
5898 silly registry.get     'x-timer': 'S1388777857.346916437,VS0,VE53',
5898 silly registry.get     vary: 'Accept',
5898 silly registry.get     'keep-alive': 'timeout=10, max=45',
5898 silly registry.get     connection: 'Keep-Alive' } ]
5899 silly addNameRange number 2 { name: 'getobject', range: '>=0.1.0-0 <0.2.0-0', hasData: true }
5900 silly addNameRange versions [ 'getobject', [ '0.1.0' ] ]
5901 verbose addNamed [ 'getobject', '0.1.0' ]
5902 verbose addNamed [ '0.1.0', '0.1.0' ]
5903 silly lockFile c44ec3ff-getobject-0-1-0 getobject@0.1.0
5904 verbose lock getobject@0.1.0 C:\Users\Gaston\AppData\Roaming\npm-cache\c44ec3ff-getobject-0-1-0.lock
5905 silly lockFile ffaebdea-rg-getobject-getobject-0-1-0-tgz https://registry.npmjs.org/getobject/-/getobject-0.1.0.tgz
5906 verbose lock https://registry.npmjs.org/getobject/-/getobject-0.1.0.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\ffaebdea-rg-getobject-getobject-0-1-0-tgz.lock
5907 verbose addRemoteTarball [ 'https://registry.npmjs.org/getobject/-/getobject-0.1.0.tgz',
5907 verbose addRemoteTarball   '047a449789fa160d018f5486ed91320b6ec7885c' ]
5908 info retry fetch attempt 1 at 16:38:37
5909 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777917851-0.8502982757054269\tmp.tgz
5910 http GET https://registry.npmjs.org/getobject/-/getobject-0.1.0.tgz
5911 http 304 https://registry.npmjs.org/nopt
5912 silly registry.get cb [ 304,
5912 silly registry.get   { date: 'Fri, 03 Jan 2014 19:37:38 GMT',
5912 silly registry.get     server: 'Apache',
5912 silly registry.get     connection: 'Keep-Alive',
5912 silly registry.get     'keep-alive': 'timeout=10, max=44',
5912 silly registry.get     etag: '"DJRBEL3WAPM7JVR89XHXNNQ95"',
5912 silly registry.get     vary: 'Accept' } ]
5913 verbose etag nopt from cache
5914 silly addNameRange number 2 { name: 'nopt', range: '>=1.0.10-0 <1.1.0-0', hasData: true }
5915 silly addNameRange versions [ 'nopt',
5915 silly addNameRange   [ '1.0.0',
5915 silly addNameRange     '1.0.1',
5915 silly addNameRange     '1.0.2',
5915 silly addNameRange     '1.0.3',
5915 silly addNameRange     '1.0.4',
5915 silly addNameRange     '1.0.5',
5915 silly addNameRange     '1.0.6',
5915 silly addNameRange     '1.0.7',
5915 silly addNameRange     '1.0.8',
5915 silly addNameRange     '1.0.9',
5915 silly addNameRange     '1.0.10',
5915 silly addNameRange     '2.0.0',
5915 silly addNameRange     '2.1.0',
5915 silly addNameRange     '2.1.1',
5915 silly addNameRange     '2.1.2' ] ]
5916 verbose addNamed [ 'nopt', '1.0.10' ]
5917 verbose addNamed [ '1.0.10', '1.0.10' ]
5918 silly lockFile 1be903a1-nopt-1-0-10 nopt@1.0.10
5919 verbose lock nopt@1.0.10 C:\Users\Gaston\AppData\Roaming\npm-cache\1be903a1-nopt-1-0-10.lock
5920 silly lockFile 1be903a1-nopt-1-0-10 nopt@1.0.10
5921 silly lockFile 1be903a1-nopt-1-0-10 nopt@1.0.10
5922 silly lockFile 79f78dba-nopt-1-0-10 nopt@~1.0.10
5923 silly lockFile 79f78dba-nopt-1-0-10 nopt@~1.0.10
5924 http 304 https://registry.npmjs.org/lodash
5925 silly registry.get cb [ 304,
5925 silly registry.get   { date: 'Fri, 03 Jan 2014 19:37:39 GMT',
5925 silly registry.get     server: 'Apache',
5925 silly registry.get     connection: 'Keep-Alive',
5925 silly registry.get     'keep-alive': 'timeout=10, max=43',
5925 silly registry.get     etag: '"48RYE9MT28KTYXAU02IDQRC7Q"',
5925 silly registry.get     vary: 'Accept' } ]
5926 verbose etag lodash from cache
5927 http 200 https://registry.npmjs.org/getobject/-/getobject-0.1.0.tgz
5928 http 200 https://registry.npmjs.org/exit/-/exit-0.1.2.tgz
5929 silly addNameRange number 2 { name: 'lodash', range: '>=0.9.2-0 <0.10.0-0', hasData: true }
5930 silly addNameRange versions [ 'lodash',
5930 silly addNameRange   [ '0.1.0',
5930 silly addNameRange     '0.2.0',
5930 silly addNameRange     '0.2.1',
5930 silly addNameRange     '0.2.2',
5930 silly addNameRange     '0.3.0',
5930 silly addNameRange     '0.3.1',
5930 silly addNameRange     '0.3.2',
5930 silly addNameRange     '0.4.0',
5930 silly addNameRange     '0.4.1',
5930 silly addNameRange     '0.4.2',
5930 silly addNameRange     '0.5.0-rc.1',
5930 silly addNameRange     '0.5.0',
5930 silly addNameRange     '0.5.1',
5930 silly addNameRange     '0.5.2',
5930 silly addNameRange     '0.6.0',
5930 silly addNameRange     '0.6.1',
5930 silly addNameRange     '0.7.0',
5930 silly addNameRange     '0.8.0',
5930 silly addNameRange     '0.8.1',
5930 silly addNameRange     '0.8.2',
5930 silly addNameRange     '0.9.0',
5930 silly addNameRange     '0.9.1',
5930 silly addNameRange     '0.9.2',
5930 silly addNameRange     '0.10.0',
5930 silly addNameRange     '1.0.0-rc.1',
5930 silly addNameRange     '1.0.0-rc.2',
5930 silly addNameRange     '1.0.0-rc.3',
5930 silly addNameRange     '1.0.0',
5930 silly addNameRange     '1.0.1',
5930 silly addNameRange     '1.1.0',
5930 silly addNameRange     '1.1.1',
5930 silly addNameRange     '1.2.0',
5930 silly addNameRange     '1.2.1',
5930 silly addNameRange     '1.3.0',
5930 silly addNameRange     '1.3.1',
5930 silly addNameRange     '2.0.0',
5930 silly addNameRange     '2.1.0',
5930 silly addNameRange     '2.2.0',
5930 silly addNameRange     '2.2.1',
5930 silly addNameRange     '2.3.0',
5930 silly addNameRange     '2.4.0',
5930 silly addNameRange     '2.4.1' ] ]
5931 verbose addNamed [ 'lodash', '0.9.2' ]
5932 verbose addNamed [ '0.9.2', '0.9.2' ]
5933 silly lockFile 9802d919-lodash-0-9-2 lodash@0.9.2
5934 verbose lock lodash@0.9.2 C:\Users\Gaston\AppData\Roaming\npm-cache\9802d919-lodash-0-9-2.lock
5935 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777917851-0.8502982757054269\tmp.tgz
5936 silly lockFile 3a705123-17851-0-8502982757054269-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777917851-0.8502982757054269\package
5937 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777917851-0.8502982757054269\package C:\Users\Gaston\AppData\Roaming\npm-cache\3a705123-17851-0-8502982757054269-package.lock
5938 silly lockFile 153a4068-17851-0-8502982757054269-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777917851-0.8502982757054269\tmp.tgz
5939 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777917851-0.8502982757054269\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\153a4068-17851-0-8502982757054269-tmp-tgz.lock
5940 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777917063-0.4588683806359768\tmp.tgz
5941 silly lockFile 7faa1ae1-17063-0-4588683806359768-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777917063-0.4588683806359768\package
5942 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777917063-0.4588683806359768\package C:\Users\Gaston\AppData\Roaming\npm-cache\7faa1ae1-17063-0-4588683806359768-package.lock
5943 silly lockFile a1120f3f-17063-0-4588683806359768-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777917063-0.4588683806359768\tmp.tgz
5944 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777917063-0.4588683806359768\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\a1120f3f-17063-0-4588683806359768-tmp-tgz.lock
5945 silly lockFile 26543735-pmjs-org-lodash-lodash-0-9-2-tgz https://registry.npmjs.org/lodash/-/lodash-0.9.2.tgz
5946 verbose lock https://registry.npmjs.org/lodash/-/lodash-0.9.2.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\26543735-pmjs-org-lodash-lodash-0-9-2-tgz.lock
5947 silly gunzTarPerm modes [ '755', '644' ]
5948 verbose addRemoteTarball [ 'https://registry.npmjs.org/lodash/-/lodash-0.9.2.tgz',
5948 verbose addRemoteTarball   '8f3499c5245d346d682e5b0d3b40767e09f1a92c' ]
5949 silly gunzTarPerm modes [ '755', '644' ]
5950 info retry fetch attempt 1 at 16:38:39
5951 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777919866-0.41891708853654563\tmp.tgz
5952 http GET https://registry.npmjs.org/lodash/-/lodash-0.9.2.tgz
5953 http 304 https://registry.npmjs.org/minimatch
5954 silly registry.get cb [ 304,
5954 silly registry.get   { date: 'Fri, 03 Jan 2014 19:37:39 GMT',
5954 silly registry.get     server: 'Apache',
5954 silly registry.get     connection: 'Keep-Alive',
5954 silly registry.get     'keep-alive': 'timeout=10, max=42',
5954 silly registry.get     etag: '"ENY6937TKFXIJARH44KNW9ZPF"',
5954 silly registry.get     vary: 'Accept' } ]
5955 verbose etag minimatch from cache
5956 silly gunzTarPerm extractEntry package.json
5957 silly gunzTarPerm extractEntry package.json
5958 silly gunzTarPerm extractEntry .npmignore
5959 silly gunzTarPerm extractEntry README.md
5960 silly gunzTarPerm extractEntry .npmignore
5961 silly gunzTarPerm extractEntry README.md
5962 silly gunzTarPerm extractEntry Gruntfile.js
5963 silly gunzTarPerm extractEntry .jshintrc
5964 silly gunzTarPerm extractEntry Gruntfile.js
5965 silly gunzTarPerm extractEntry .jshintrc
5966 http 304 https://registry.npmjs.org/glob
5967 silly registry.get cb [ 304,
5967 silly registry.get   { date: 'Fri, 03 Jan 2014 19:37:41 GMT',
5967 silly registry.get     server: 'Apache',
5967 silly registry.get     connection: 'Keep-Alive',
5967 silly registry.get     'keep-alive': 'timeout=10, max=41',
5967 silly registry.get     etag: '"3PHU6ZLK0XRBOWDW0GE8Z2RX4"',
5967 silly registry.get     vary: 'Accept' } ]
5968 verbose etag glob from cache
5969 silly addNameRange number 2 { name: 'minimatch',
5969 silly addNameRange   range: '>=0.2.12-0 <0.3.0-0',
5969 silly addNameRange   hasData: true }
5970 silly addNameRange versions [ 'minimatch',
5970 silly addNameRange   [ '0.0.1',
5970 silly addNameRange     '0.0.2',
5970 silly addNameRange     '0.0.4',
5970 silly addNameRange     '0.0.5',
5970 silly addNameRange     '0.1.1',
5970 silly addNameRange     '0.1.2',
5970 silly addNameRange     '0.1.3',
5970 silly addNameRange     '0.1.4',
5970 silly addNameRange     '0.1.5',
5970 silly addNameRange     '0.2.0',
5970 silly addNameRange     '0.2.2',
5970 silly addNameRange     '0.2.3',
5970 silly addNameRange     '0.2.4',
5970 silly addNameRange     '0.2.5',
5970 silly addNameRange     '0.2.6',
5970 silly addNameRange     '0.2.7',
5970 silly addNameRange     '0.2.8',
5970 silly addNameRange     '0.2.9',
5970 silly addNameRange     '0.2.10',
5970 silly addNameRange     '0.2.11',
5970 silly addNameRange     '0.2.12',
5970 silly addNameRange     '0.2.13',
5970 silly addNameRange     '0.2.14' ] ]
5971 verbose addNamed [ 'minimatch', '0.2.14' ]
5972 verbose addNamed [ '0.2.14', '0.2.14' ]
5973 silly lockFile a72880d0-minimatch-0-2-14 minimatch@0.2.14
5974 verbose lock minimatch@0.2.14 C:\Users\Gaston\AppData\Roaming\npm-cache\a72880d0-minimatch-0-2-14.lock
5975 silly gunzTarPerm extractEntry .travis.yml
5976 silly gunzTarPerm extractEntry LICENSE-MIT
5977 silly gunzTarPerm extractEntry .travis.yml
5978 silly gunzTarPerm extractEntry LICENSE-MIT
5979 silly gunzTarPerm extractEntry lib/getobject.js
5980 silly gunzTarPerm extractEntry test/namespace_test.js
5981 silly gunzTarPerm extractEntry lib/exit.js
5982 silly gunzTarPerm extractEntry test/exit_test.js
5983 http 200 https://registry.npmjs.org/lodash/-/lodash-0.9.2.tgz
5984 http 200 https://registry.npmjs.org/rimraf
5985 silly registry.get cb [ 200,
5985 silly registry.get   { date: 'Fri, 03 Jan 2014 19:37:26 GMT',
5985 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
5985 silly registry.get     etag: '"A9IB7CO27T8QICS45GYZX0R85"',
5985 silly registry.get     'content-type': 'application/json',
5985 silly registry.get     'content-length': '41705',
5985 silly registry.get     'accept-ranges': 'bytes',
5985 silly registry.get     via: '1.1 varnish',
5985 silly registry.get     age: '416',
5985 silly registry.get     'x-served-by': 'cache-jfk1033-JFK',
5985 silly registry.get     'x-cache': 'HIT',
5985 silly registry.get     'x-cache-hits': '1',
5985 silly registry.get     'x-timer': 'S1388777846.837166071,VS0,VE52',
5985 silly registry.get     vary: 'Accept',
5985 silly registry.get     'keep-alive': 'timeout=10, max=39',
5985 silly registry.get     connection: 'Keep-Alive' } ]
5986 info retry will retry, error on last attempt: Error: socket hang up
5987 silly lockFile a72880d0-minimatch-0-2-14 minimatch@0.2.14
5988 silly lockFile a72880d0-minimatch-0-2-14 minimatch@0.2.14
5989 silly addNameRange number 2 { name: 'glob', range: '>=3.1.21-0 <3.2.0-0', hasData: true }
5990 silly addNameRange versions [ 'glob',
5990 silly addNameRange   [ '1.1.0',
5990 silly addNameRange     '2.0.9',
5990 silly addNameRange     '2.0.8',
5990 silly addNameRange     '2.0.7',
5990 silly addNameRange     '2.1.0',
5990 silly addNameRange     '3.0.0',
5990 silly addNameRange     '3.0.1',
5990 silly addNameRange     '3.1.0',
5990 silly addNameRange     '3.1.1',
5990 silly addNameRange     '3.1.2',
5990 silly addNameRange     '3.1.3',
5990 silly addNameRange     '3.1.4',
5990 silly addNameRange     '3.1.5',
5990 silly addNameRange     '3.1.6',
5990 silly addNameRange     '3.1.7',
5990 silly addNameRange     '3.1.9',
5990 silly addNameRange     '3.1.10',
5990 silly addNameRange     '3.1.11',
5990 silly addNameRange     '3.1.12',
5990 silly addNameRange     '3.1.13',
5990 silly addNameRange     '3.1.14',
5990 silly addNameRange     '3.1.15',
5990 silly addNameRange     '3.1.16',
5990 silly addNameRange     '3.1.17',
5990 silly addNameRange     '3.1.18',
5990 silly addNameRange     '3.1.19',
5990 silly addNameRange     '3.1.20',
5990 silly addNameRange     '3.1.21',
5990 silly addNameRange     '3.2.0',
5990 silly addNameRange     '3.2.1',
5990 silly addNameRange     '3.2.3',
5990 silly addNameRange     '3.2.4',
5990 silly addNameRange     '3.2.5',
5990 silly addNameRange     '3.2.6',
5990 silly addNameRange     '3.2.7' ] ]
5991 verbose addNamed [ 'glob', '3.1.21' ]
5992 verbose addNamed [ '3.1.21', '3.1.21' ]
5993 silly lockFile ab465912-glob-3-1-21 glob@3.1.21
5994 verbose lock glob@3.1.21 C:\Users\Gaston\AppData\Roaming\npm-cache\ab465912-glob-3-1-21.lock
5995 silly lockFile 89ce5cca-minimatch-0-2-12 minimatch@~0.2.12
5996 silly lockFile 89ce5cca-minimatch-0-2-12 minimatch@~0.2.12
5997 silly gunzTarPerm extractEntry test/fixtures/log.js
5998 silly addNameRange number 2 { name: 'rimraf', range: '>=2.0.3-0 <2.1.0-0', hasData: true }
5999 silly addNameRange versions [ 'rimraf',
5999 silly addNameRange   [ '1.0.0',
5999 silly addNameRange     '1.0.1',
5999 silly addNameRange     '1.0.2',
5999 silly addNameRange     '1.0.4',
5999 silly addNameRange     '1.0.5',
5999 silly addNameRange     '1.0.6',
5999 silly addNameRange     '1.0.7',
5999 silly addNameRange     '1.0.8',
5999 silly addNameRange     '1.0.9',
5999 silly addNameRange     '2.0.0',
5999 silly addNameRange     '2.0.1',
5999 silly addNameRange     '2.0.2',
5999 silly addNameRange     '2.0.3',
5999 silly addNameRange     '2.1.0',
5999 silly addNameRange     '2.1.1',
5999 silly addNameRange     '2.1.2',
5999 silly addNameRange     '2.1.3',
5999 silly addNameRange     '2.1.4',
5999 silly addNameRange     '2.2.0',
5999 silly addNameRange     '2.2.1',
5999 silly addNameRange     '2.2.2',
5999 silly addNameRange     '2.2.3',
5999 silly addNameRange     '2.2.4',
5999 silly addNameRange     '2.2.5' ] ]
6000 verbose addNamed [ 'rimraf', '2.0.3' ]
6001 verbose addNamed [ '2.0.3', '2.0.3' ]
6002 silly lockFile 166fc4dd-rimraf-2-0-3 rimraf@2.0.3
6003 verbose lock rimraf@2.0.3 C:\Users\Gaston\AppData\Roaming\npm-cache\166fc4dd-rimraf-2-0-3.lock
6004 silly lockFile bcfae994-pmjs-org-rimraf-rimraf-2-0-3-tgz https://registry.npmjs.org/rimraf/-/rimraf-2.0.3.tgz
6005 verbose lock https://registry.npmjs.org/rimraf/-/rimraf-2.0.3.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\bcfae994-pmjs-org-rimraf-rimraf-2-0-3-tgz.lock
6006 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777919866-0.41891708853654563\tmp.tgz
6007 silly lockFile bdefddb6-9866-0-41891708853654563-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777919866-0.41891708853654563\package
6008 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777919866-0.41891708853654563\package C:\Users\Gaston\AppData\Roaming\npm-cache\bdefddb6-9866-0-41891708853654563-package.lock
6009 silly lockFile 788ddf60-9866-0-41891708853654563-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777919866-0.41891708853654563\tmp.tgz
6010 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777919866-0.41891708853654563\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\788ddf60-9866-0-41891708853654563-tmp-tgz.lock
6011 silly gunzTarPerm modes [ '755', '644' ]
6012 silly gunzTarPerm extractEntry test/fixtures/log-broken.js
6013 silly gunzTarPerm extractEntry test/fixtures/10-stdout.txt
6014 verbose addRemoteTarball [ 'https://registry.npmjs.org/rimraf/-/rimraf-2.0.3.tgz',
6014 verbose addRemoteTarball   'f50a2965e7144e9afd998982f15df706730f56a9' ]
6015 silly lockFile ab465912-glob-3-1-21 glob@3.1.21
6016 silly lockFile ab465912-glob-3-1-21 glob@3.1.21
6017 silly lockFile b5074ddc-glob-3-1-21 glob@~3.1.21
6018 silly lockFile b5074ddc-glob-3-1-21 glob@~3.1.21
6019 info retry fetch attempt 1 at 16:38:44
6020 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777924092-0.9109717544633895\tmp.tgz
6021 silly resolved [ { name: 'lodash',
6021 silly resolved     version: '1.0.1',
6021 silly resolved     description: 'A utility library delivering consistency, customization, performance, and extras.',
6021 silly resolved     homepage: 'http://lodash.com/',
6021 silly resolved     license: 'MIT',
6021 silly resolved     main: './dist/lodash.js',
6021 silly resolved     keywords:
6021 silly resolved      [ 'browser',
6021 silly resolved        'client',
6021 silly resolved        'functional',
6021 silly resolved        'performance',
6021 silly resolved        'server',
6021 silly resolved        'speed',
6021 silly resolved        'util' ],
6021 silly resolved     author:
6021 silly resolved      { name: 'John-David Dalton',
6021 silly resolved        email: 'john.david.dalton@gmail.com',
6021 silly resolved        url: 'http://allyoucanleet.com/' },
6021 silly resolved     contributors: [ [Object], [Object], [Object], [Object] ],
6021 silly resolved     bugs: { url: 'https://github.com/lodash/lodash/issues' },
6021 silly resolved     repository: { type: 'git', url: 'https://github.com/lodash/lodash.git' },
6021 silly resolved     engines: [ 'node', 'rhino' ],
6021 silly resolved     jam: { main: './dist/lodash.compat.js' },
6021 silly resolved     readme: '# Lo-Dash v1.0.1\n\nA utility library delivering consistency, [customization](http://lodash.com/custom-builds), [performance](http://lodash.com/benchmarks), & [extras](http://lodash.com/#features).\n\n## Download\n\n* Lo-Dash builds (for modern environments):<br>\n[Development](https://raw.github.com/lodash/lodash/v1.0.1/dist/lodash.js) and\n[Production](https://raw.github.com/lodash/lodash/v1.0.1/dist/lodash.min.js)\n\n* Lo-Dash compatibility builds (for legacy and modern environments):<br>\n[Development](https://raw.github.com/lodash/lodash/v1.0.1/dist/lodash.compat.js) and\n[Production](https://raw.github.com/lodash/lodash/v1.0.1/dist/lodash.compat.min.js)\n\n* Underscore compatibility builds:<br>\n[Development](https://raw.github.com/lodash/lodash/v1.0.1/dist/lodash.underscore.js) and\n[Production](https://raw.github.com/lodash/lodash/v1.0.1/dist/lodash.underscore.min.js)\n\n* CDN copies of ≤ v1.0.1’s builds are available on [cdnjs](http://cdnjs.com/) thanks to [CloudFlare](http://www.cloudflare.com/):<br>\n[Lo-Dash dev](http://cdnjs.cloudflare.com/ajax/libs/lodash.js/1.0.1/lodash.js),\n[Lo-Dash prod](http://cdnjs.cloudflare.com/ajax/libs/lodash.js/1.0.1/lodash.min.js),<br>\n[Lo-Dash compat-dev](http://cdnjs.cloudflare.com/ajax/libs/lodash.js/1.0.1/lodash.compat.js),\n[Lo-Dash compat-prod](http://cdnjs.cloudflare.com/ajax/libs/lodash.js/1.0.1/lodash.compat.min.js),<br>\n[Underscore compat-dev](http://cdnjs.cloudflare.com/ajax/libs/lodash.js/1.0.1/lodash.underscore.js), and\n[Underscore compat-prod](http://cdnjs.cloudflare.com/ajax/libs/lodash.js/1.0.1/lodash.underscore.min.js)\n\n* For optimal file size, [create a custom build](http://lodash.com/custom-builds) with only the features you need\n\n## Dive in\n\nWe’ve got [API docs](http://lodash.com/docs), [benchmarks](http://lodash.com/benchmarks), and [unit tests](http://lodash.com/tests).\n\nFor a list of upcoming features, check out our [roadmap](https://github.com/lodash/lodash/wiki/Roadmap).\n\n## Resources\n\nFor more information check out these articles, screencasts, and other videos over Lo-Dash:\n\n * Posts\n  - [Say “Hello” to Lo-Dash](http://kitcambridge.be/blog/say-hello-to-lo-dash/)\n\n * Videos\n  - [Introducing Lo-Dash](https://vimeo.com/44154599)\n  - [Lo-Dash optimizations and custom builds](https://vimeo.com/44154601)\n  - [Lo-Dash’s origin and why it’s a better utility belt](https://vimeo.com/44154600)\n  - [Unit testing in Lo-Dash](https://vimeo.com/45865290)\n  - [Lo-Dash’s approach to native method use](https://vimeo.com/48576012)\n  - [CascadiaJS: Lo-Dash for a better utility belt](http://www.youtube.com/watch?v=dpPy4f_SeEk)\n\n## Features\n\n * AMD loader support ([RequireJS](http://requirejs.org/), [curl.js](https://github.com/cujojs/curl), etc.)\n * [_(…)](http://lodash.com/docs#_) supports intuitive chaining\n * [_.at](http://lodash.com/docs#at) for cherry-picking collection values\n * [_.bindKey](http://lodash.com/docs#bindKey) for binding [*“lazy”* defined](http://michaux.ca/articles/lazy-function-definition-pattern) methods\n * [_.cloneDeep](http://lodash.com/docs#cloneDeep) for deep cloning arrays and objects\n * [_.contains](http://lodash.com/docs#contains) accepts a `fromIndex` argument\n * [_.forEach](http://lodash.com/docs#forEach) is chainable and supports exiting iteration early\n * [_.forIn](http://lodash.com/docs#forIn) for iterating over an object’s own and inherited properties\n * [_.forOwn](http://lodash.com/docs#forOwn) for iterating over an object’s own properties\n * [_.isPlainObject](http://lodash.com/docs#isPlainObject) checks if values are created by the `Object` constructor\n * [_.merge](http://lodash.com/docs#merge) for a deep [_.extend](http://lodash.com/docs#extend)\n * [_.partial](http://lodash.com/docs#partial) and [_.partialRight](http://lodash.com/docs#partialRight) for partial application without `this` binding\n * [_.template](http://lodash.com/docs#template) supports [*“imports”* options](http://lodash.com/docs#templateSettings_imports), [ES6 template delimiters](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-7.8.6), and [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\n * [_.where](http://lodash.com/docs#where) supports deep object comparisons\n * [_.clone](http://lodash.com/docs#clone), [_.omit](http://lodash.com/docs#omit), [_.pick](http://lodash.com/docs#pick),\n   [and more…](http://lodash.com/docs "_.assign, _.cloneDeep, _.first, _.initial, _.isEqual, _.last, _.merge, _.rest") accept `callback` and `thisArg` arguments\n * [_.contains](http://lodash.com/docs#contains), [_.size](http://lodash.com/docs#size), [_.toArray](http://lodash.com/docs#toArray),\n   [and more…](http://lodash.com/docs "_.at, _.countBy, _.every, _.filter, _.find, _.forEach, _.groupBy, _.invoke, _.map, _.max, _.min, _.pluck, _.reduce, _.reduceRight, _.reject, _.shuffle, _.some, _.sortBy, _.where") accept strings\n * [_.filter](http://lodash.com/docs#filter), [_.find](http://lodash.com/docs#find), [_.map](http://lodash.com/docs#map),\n   [and more…](http://lodash.com/docs "_.countBy, _.every, _.first, _.groupBy, _.initial, _.last, _.max, _.min, _.reject, _.rest, _.some, _.sortBy, _.sortedIndex, _.uniq") support *“_.pluck”* and *“_.where”* `callback` shorthands\n\n## Support\n\nLo-Dash has been tested in at least Chrome 5~24, Firefox 1~18, IE 6-10, Opera 9.25-12, Safari 3-6, Node.js 0.4.8-0.8.20, Narwhal 0.3.2, PhantomJS 1.8.1, RingoJS 0.9, and Rhino 1.7RC5.\n\n## Installation and usage\n\nIn browsers:\n\n```html\n<script src="lodash.js"></script>\n```\n\nUsing [`npm`](http://npmjs.org/):\n\n```bash\nnpm install lodash\n\nnpm install -g lodash\nnpm link lodash\n```\n\nTo avoid potential issues, update `npm` before installing Lo-Dash:\n\n```bash\nnpm install npm -g\n```\n\nIn [Node.js](http://nodejs.org/) and [RingoJS v0.8.0+](http://ringojs.org/):\n\n```js\nvar _ = require(\'lodash\');\n\n// or as a drop-in replacement for Underscore\nvar _ = require(\'lodash/lodash.underscore\');\n```\n\n**Note:** If Lo-Dash is installed globally, run [`npm link lodash`](http://blog.nodejs.org/2011/03/23/npm-1-0-global-vs-local-installation/) in your project’s root directory before requiring it.\n\nIn [RingoJS v0.7.0-](http://ringojs.org/):\n\n```js\nvar _ = require(\'lodash\')._;\n```\n\nIn [Rhino](http://www.mozilla.org/rhino/):\n\n```js\nload(\'lodash.js\');\n```\n\nIn an AMD loader like [RequireJS](http://requirejs.org/):\n\n```js\nrequire({\n  \'paths\': {\n    \'underscore\': \'path/to/lodash\'\n  }\n},\n[\'underscore\'], function(_) {\n  console.log(_.VERSION);\n});\n```\n\n## Release Notes\n\n### <sup>v1.0.1</sup>\n\n * Add support for specifying source map URLs in `-p`/`--source-map` build options\n * Ensured the second argument passed to `_.assign` is not treated as a `callback`\n * Ensured `-p`/`--source-map` build options correctly set the `sourceMappingURL`\n * Made `-p`/`--source-map` build options set source map *“sources”* keys based on the builds performed\n * Made `_.defer` use `setImmediate`, in Node.js, when available\n * Made `_.where` search arrays for values regardless of their index position\n * Removed dead code from `_.template`\n\nThe full changelog is available [here](https://github.com/lodash/lodash/wiki/Changelog).\n\n## BestieJS\n\nLo-Dash is part of the [BestieJS](https://github.com/bestiejs) *“Best in Class”* module collection. This means we promote solid browser/environment support, ES5 precedents, unit testing, and plenty of documentation.\n\n## Author\n\n| [![twitter/jdalton](http://gravatar.com/avatar/299a3d891ff1920b69c364d061007043?s=70)](http://twitter.com/jdalton "Follow @jdalton on Twitter") |\n|---|\n| [John-David Dalton](http://allyoucanleet.com/) |\n\n## Contributors\n\n| [![twitter/blainebublitz](http://gravatar.com/avatar/ac1c67fd906c9fecd823ce302283b4c1?s=70)](http://twitter.com/blainebublitz "Follow @BlaineBublitz on Twitter") | [![twitter/kitcambridge](http://gravatar.com/avatar/6662a1d02f351b5ef2f8b4d815804661?s=70)](https://twitter.com/kitcambridge "Follow @kitcambridge on Twitter") | [![twitter/mathias](http://gravatar.com/avatar/24e08a9ea84deb17ae121074d0f17125?s=70)](http://twitter.com/mathias "Follow @mathias on Twitter") |\n|---|---|---|\n| [Blaine Bublitz](http://iceddev.com/) | [Kit Cambridge](http://kitcambridge.github.io/) | [Mathias Bynens](http://mathiasbynens.be/) |\n',
6021 silly resolved     readmeFilename: 'README.md',
6021 silly resolved     _id: 'lodash@1.0.1',
6021 silly resolved     _from: 'lodash@~1.0.1',
6021 silly resolved     scripts: {} },
6021 silly resolved   { author:
6021 silly resolved      { name: 'Isaac Z. Schlueter',
6021 silly resolved        email: 'i@izs.me',
6021 silly resolved        url: 'http://blog.izs.me/' },
6021 silly resolved     name: 'glob',
6021 silly resolved     description: 'a little globber',
6021 silly resolved     version: '3.1.21',
6021 silly resolved     repository: { type: 'git', url: 'git://github.com/isaacs/node-glob.git' },
6021 silly resolved     main: 'glob.js',
6021 silly resolved     engines: { node: '*' },
6021 silly resolved     dependencies: { minimatch: '~0.2.11', 'graceful-fs': '~1.2.0', inherits: '1' },
6021 silly resolved     devDependencies: { tap: '~0.4.0', mkdirp: '0', rimraf: '1' },
6021 silly resolved     scripts: { test: 'tap test/*.js' },
6021 silly resolved     license: 'BSD',
6021 silly resolved     readme: '# Glob\n\nThis is a glob implementation in JavaScript.  It uses the `minimatch`\nlibrary to do its matching.\n\n## Attention: node-glob users!\n\nThe API has changed dramatically between 2.x and 3.x. This library is\nnow 100% JavaScript, and the integer flags have been replaced with an\noptions object.\n\nAlso, there\'s an event emitter class, proper tests, and all the other\nthings you\'ve come to expect from node modules.\n\nAnd best of all, no compilation!\n\n## Usage\n\n```javascript\nvar glob = require("glob")\n\n// options is optional\nglob("**/*.js", options, function (er, files) {\n  // files is an array of filenames.\n  // If the `nonull` option is set, and nothing\n  // was found, then files is ["**/*.js"]\n  // er is an error object or null.\n})\n```\n\n## Features\n\nPlease see the [minimatch\ndocumentation](https://github.com/isaacs/minimatch) for more details.\n\nSupports these glob features:\n\n* Brace Expansion\n* Extended glob matching\n* "Globstar" `**` matching\n\nSee:\n\n* `man sh`\n* `man bash`\n* `man 3 fnmatch`\n* `man 5 gitignore`\n* [minimatch documentation](https://github.com/isaacs/minimatch)\n\n## glob(pattern, [options], cb)\n\n* `pattern` {String} Pattern to be matched\n* `options` {Object}\n* `cb` {Function}\n  * `err` {Error | null}\n  * `matches` {Array<String>} filenames found matching the pattern\n\nPerform an asynchronous glob search.\n\n## glob.sync(pattern, [options]\n\n* `pattern` {String} Pattern to be matched\n* `options` {Object}\n* return: {Array<String>} filenames found matching the pattern\n\nPerform a synchronous glob search.\n\n## Class: glob.Glob\n\nCreate a Glob object by instanting the `glob.Glob` class.\n\n```javascript\nvar Glob = require("glob").Glob\nvar mg = new Glob(pattern, options, cb)\n```\n\nIt\'s an EventEmitter, and starts walking the filesystem to find matches\nimmediately.\n\n### new glob.Glob(pattern, [options], [cb])\n\n* `pattern` {String} pattern to search for\n* `options` {Object}\n* `cb` {Function} Called when an error occurs, or matches are found\n  * `err` {Error | null}\n  * `matches` {Array<String>} filenames found matching the pattern\n\nNote that if the `sync` flag is set in the options, then matches will\nbe immediately available on the `g.found` member.\n\n### Properties\n\n* `minimatch` The minimatch object that the glob uses.\n* `options` The options object passed in.\n* `error` The error encountered.  When an error is encountered, the\n  glob object is in an undefined state, and should be discarded.\n* `aborted` Boolean which is set to true when calling `abort()`.  There\n  is no way at this time to continue a glob search after aborting, but\n  you can re-use the statCache to avoid having to duplicate syscalls.\n\n### Events\n\n* `end` When the matching is finished, this is emitted with all the\n  matches found.  If the `nonull` option is set, and no match was found,\n  then the `matches` list contains the original pattern.  The matches\n  are sorted, unless the `nosort` flag is set.\n* `match` Every time a match is found, this is emitted with the matched.\n* `error` Emitted when an unexpected error is encountered, or whenever\n  any fs error occurs if `options.strict` is set.\n* `abort` When `abort()` is called, this event is raised.\n\n### Methods\n\n* `abort` Stop the search.\n\n### Options\n\nAll the options that can be passed to Minimatch can also be passed to\nGlob to change pattern matching behavior.  Also, some have been added,\nor have glob-specific ramifications.\n\nAll options are false by default, unless otherwise noted.\n\nAll options are added to the glob object, as well.\n\n* `cwd` The current working directory in which to search.  Defaults\n  to `process.cwd()`.\n* `root` The place where patterns starting with `/` will be mounted\n  onto.  Defaults to `path.resolve(options.cwd, "/")` (`/` on Unix\n  systems, and `C:\\` or some such on Windows.)\n* `nomount` By default, a pattern starting with a forward-slash will be\n  "mounted" onto the root setting, so that a valid filesystem path is\n  returned.  Set this flag to disable that behavior.\n* `mark` Add a `/` character to directory matches.  Note that this\n  requires additional stat calls.\n* `nosort` Don\'t sort the results.\n* `stat` Set to true to stat *all* results.  This reduces performance\n  somewhat, and is completely unnecessary, unless `readdir` is presumed\n  to be an untrustworthy indicator of file existence.  It will cause\n  ELOOP to be triggered one level sooner in the case of cyclical\n  symbolic links.\n* `silent` When an unusual error is encountered\n  when attempting to read a directory, a warning will be printed to\n  stderr.  Set the `silent` option to true to suppress these warnings.\n* `strict` When an unusual error is encountered\n  when attempting to read a directory, the process will just continue on\n  in search of other matches.  Set the `strict` option to raise an error\n  in these cases.\n* `statCache` A cache of results of filesystem information, to prevent\n  unnecessary stat calls.  While it should not normally be necessary to\n  set this, you may pass the statCache from one glob() call to the\n  options object of another, if you know that the filesystem will not\n  change between calls.  (See "Race Conditions" below.)\n* `sync` Perform a synchronous glob search.\n* `nounique` In some cases, brace-expanded patterns can result in the\n  same file showing up multiple times in the result set.  By default,\n  this implementation prevents duplicates in the result set.\n  Set this flag to disable that behavior.\n* `nonull` Set to never return an empty set, instead returning a set\n  containing the pattern itself.  This is the default in glob(3).\n* `nocase` Perform a case-insensitive match.  Note that case-insensitive\n  filesystems will sometimes result in glob returning results that are\n  case-insensitively matched anyway, since readdir and stat will not\n  raise an error.\n* `debug` Set to enable debug logging in minimatch and glob.\n* `globDebug` Set to enable debug logging in glob, but not minimatch.\n\n## Comparisons to other fnmatch/glob implementations\n\nWhile strict compliance with the existing standards is a worthwhile\ngoal, some discrepancies exist between node-glob and other\nimplementations, and are intentional.\n\nIf the pattern starts with a `!` character, then it is negated.  Set the\n`nonegate` flag to suppress this behavior, and treat leading `!`\ncharacters normally.  This is perhaps relevant if you wish to start the\npattern with a negative extglob pattern like `!(a|B)`.  Multiple `!`\ncharacters at the start of a pattern will negate the pattern multiple\ntimes.\n\nIf a pattern starts with `#`, then it is treated as a comment, and\nwill not match anything.  Use `\\#` to match a literal `#` at the\nstart of a line, or set the `nocomment` flag to suppress this behavior.\n\nThe double-star character `**` is supported by default, unless the\n`noglobstar` flag is set.  This is supported in the manner of bsdglob\nand bash 4.1, where `**` only has special significance if it is the only\nthing in a path part.  That is, `a/**/b` will match `a/x/y/b`, but\n`a/**b` will not.  **Note that this is different from the way that `**` is\nhandled by ruby\'s `Dir` class.**\n\nIf an escaped pattern has no matches, and the `nonull` flag is set,\nthen glob returns the pattern as-provided, rather than\ninterpreting the character escapes.  For example,\n`glob.match([], "\\\\*a\\\\?")` will return `"\\\\*a\\\\?"` rather than\n`"*a?"`.  This is akin to setting the `nullglob` option in bash, except\nthat it does not resolve escaped pattern characters.\n\nIf brace expansion is not disabled, then it is performed before any\nother interpretation of the glob pattern.  Thus, a pattern like\n`+(a|{b),c)}`, which would not be valid in bash or zsh, is expanded\n**first** into the set of `+(a|b)` and `+(a|c)`, and those patterns are\nchecked for validity.  Since those two are valid, matching proceeds.\n\n## Windows\n\n**Please only use forward-slashes in glob expressions.**\n\nThough windows uses either `/` or `\\` as its path separator, only `/`\ncharacters are used by this glob implementation.  You must use\nforward-slashes **only** in glob expressions.  Back-slashes will always\nbe interpreted as escape characters, not path separators.\n\nResults from absolute patterns such as `/foo/*` are mounted onto the\nroot setting using `path.join`.  On windows, this will by default result\nin `/foo/*` matching `C:\\foo\\bar.txt`.\n\n## Race Conditions\n\nGlob searching, by its very nature, is susceptible to race conditions,\nsince it relies on directory walking and such.\n\nAs a result, it is possible that a file that exists when glob looks for\nit may have been deleted or modified by the time it returns the result.\n\nAs part of its internal implementation, this program caches all stat\nand readdir calls that it makes, in order to cut down on system\noverhead.  However, this also makes it even more susceptible to races,\nespecially if the statCache object is reused between glob calls.\n\nUsers are thus advised not to use a glob result as a\nguarantee of filesystem state in the face of rapid changes.\nFor the vast majority of operations, this is never a problem.\n',
6021 silly resolved     readmeFilename: 'README.md',
6021 silly resolved     bugs: { url: 'https://github.com/isaacs/node-glob/issues' },
6021 silly resolved     homepage: 'https://github.com/isaacs/node-glob',
6021 silly resolved     _id: 'glob@3.1.21',
6021 silly resolved     _from: 'glob@~3.1.21' } ]
6022 info install lodash@1.0.1 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync
6023 info install glob@3.1.21 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync
6024 info installOne lodash@1.0.1
6025 info installOne glob@3.1.21
6026 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\lodash unbuild
6027 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob unbuild
6028 http GET https://registry.npmjs.org/rimraf/-/rimraf-2.0.3.tgz
6029 silly gunzTarPerm extractEntry package.json
6030 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\lodash\1.0.1\package.tgz
6031 silly lockFile 7daa705e--findup-sync-node-modules-lodash tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\lodash
6032 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\lodash C:\Users\Gaston\AppData\Roaming\npm-cache\7daa705e--findup-sync-node-modules-lodash.lock
6033 silly lockFile f5ae224a-m-cache-lodash-1-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\lodash\1.0.1\package.tgz
6034 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\lodash\1.0.1\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\f5ae224a-m-cache-lodash-1-0-1-package-tgz.lock
6035 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\glob\3.1.21\package.tgz
6036 silly lockFile 10bc5f38-es-findup-sync-node-modules-glob tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob
6037 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob C:\Users\Gaston\AppData\Roaming\npm-cache\10bc5f38-es-findup-sync-node-modules-glob.lock
6038 silly lockFile e5ccf26d-pm-cache-glob-3-1-21-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\glob\3.1.21\package.tgz
6039 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\glob\3.1.21\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\e5ccf26d-pm-cache-glob-3-1-21-package-tgz.lock
6040 silly gunzTarPerm extractEntry test/fixtures/100-stderr.txt
6041 silly gunzTarPerm extractEntry test/fixtures/100-stdout-stderr.txt
6042 silly gunzTarPerm modes [ '755', '644' ]
6043 silly gunzTarPerm extractEntry README.md
6044 silly gunzTarPerm extractEntry lodash.js
6045 silly gunzTarPerm modes [ '755', '644' ]
6046 silly gunzTarPerm extractEntry package.json
6047 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
6048 silly gunzTarPerm extractEntry README.md
6049 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
6050 silly gunzTarPerm extractEntry dist/lodash.compat.js
6051 silly gunzTarPerm modified mode [ 'dist/lodash.compat.js', 438, 420 ]
6052 silly gunzTarPerm extractEntry package.json
6053 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
6054 silly gunzTarPerm extractEntry test/fixtures/100-stdout.txt
6055 silly gunzTarPerm extractEntry test/fixtures/10-stdout-stderr.txt
6056 silly gunzTarPerm extractEntry .npmignore
6057 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
6058 silly gunzTarPerm extractEntry README.md
6059 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
6060 silly gunzTarPerm extractEntry lodash.min.js
6061 silly gunzTarPerm extractEntry dist/lodash.compat.min.js
6062 silly gunzTarPerm modified mode [ 'dist/lodash.compat.min.js', 438, 420 ]
6063 silly gunzTarPerm extractEntry test/fixtures/1000-stdout-stderr.txt
6064 silly gunzTarPerm extractEntry test/fixtures/1000-stdout.txt
6065 silly gunzTarPerm extractEntry LICENSE
6066 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
6067 silly gunzTarPerm extractEntry glob.js
6068 silly gunzTarPerm modified mode [ 'glob.js', 438, 420 ]
6069 silly gunzTarPerm extractEntry lodash.underscore.js
6070 silly gunzTarPerm extractEntry lodash.underscore.min.js
6071 silly gunzTarPerm extractEntry .travis.yml
6072 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]
6073 silly gunzTarPerm extractEntry test/fixtures/create-files.sh
6074 silly gunzTarPerm extractEntry test/fixtures/10-stderr.txt
6075 silly lockFile 3a705123-17851-0-8502982757054269-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777917851-0.8502982757054269\package
6076 silly lockFile 3a705123-17851-0-8502982757054269-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777917851-0.8502982757054269\package
6077 silly lockFile 153a4068-17851-0-8502982757054269-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777917851-0.8502982757054269\tmp.tgz
6078 silly lockFile 153a4068-17851-0-8502982757054269-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777917851-0.8502982757054269\tmp.tgz
6079 silly gunzTarPerm extractEntry dist/lodash.js
6080 silly gunzTarPerm modified mode [ 'dist/lodash.js', 438, 420 ]
6081 silly gunzTarPerm extractEntry dist/lodash.min.js
6082 silly gunzTarPerm modified mode [ 'dist/lodash.min.js', 438, 420 ]
6083 silly gunzTarPerm extractEntry dist/lodash.underscore.js
6084 silly gunzTarPerm modified mode [ 'dist/lodash.underscore.js', 438, 420 ]
6085 silly gunzTarPerm extractEntry dist/lodash.underscore.min.js
6086 silly gunzTarPerm modified mode [ 'dist/lodash.underscore.min.js', 438, 420 ]
6087 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\getobject\\0.1.0\\package.tgz',
6087 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388777917851-0.8502982757054269\\package' ]
6088 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\getobject\0.1.0\package.tgz
6089 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777917851-0.8502982757054269\package
6090 silly lockFile 3a705123-17851-0-8502982757054269-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777917851-0.8502982757054269\package
6091 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777917851-0.8502982757054269\package C:\Users\Gaston\AppData\Roaming\npm-cache\3a705123-17851-0-8502982757054269-package.lock
6092 silly lockFile 3f56f74d-ache-getobject-0-1-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\getobject\0.1.0\package.tgz
6093 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\getobject\0.1.0\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\3f56f74d-ache-getobject-0-1-0-package-tgz.lock
6094 silly gunzTarPerm extractEntry test/fixtures/1000-stderr.txt
6095 silly gunzTarPerm extractEntry examples/g.js
6096 silly gunzTarPerm modified mode [ 'examples/g.js', 438, 420 ]
6097 silly gunzTarPerm extractEntry examples/usr-local.js
6098 silly gunzTarPerm modified mode [ 'examples/usr-local.js', 438, 420 ]
6099 silly gunzTarPerm extractEntry test/00-setup.js
6100 silly gunzTarPerm modified mode [ 'test/00-setup.js', 438, 420 ]
6101 silly gunzTarPerm extractEntry test/bash-comparison.js
6102 silly gunzTarPerm modified mode [ 'test/bash-comparison.js', 438, 420 ]
6103 silly lockFile 3a705123-17851-0-8502982757054269-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777917851-0.8502982757054269\package
6104 silly lockFile 3a705123-17851-0-8502982757054269-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777917851-0.8502982757054269\package
6105 silly lockFile 3f56f74d-ache-getobject-0-1-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\getobject\0.1.0\package.tgz
6106 silly lockFile 3f56f74d-ache-getobject-0-1-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\getobject\0.1.0\package.tgz
6107 http 200 https://registry.npmjs.org/async
6108 silly registry.get cb [ 200,
6108 silly registry.get   { date: 'Fri, 03 Jan 2014 19:35:57 GMT',
6108 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
6108 silly registry.get     etag: '"1I9ZGRGBDL3K6MN9A9JI71HM6"',
6108 silly registry.get     'content-type': 'application/json',
6108 silly registry.get     'content-length': '676833',
6108 silly registry.get     'accept-ranges': 'bytes',
6108 silly registry.get     via: '1.1 varnish',
6108 silly registry.get     age: '346',
6108 silly registry.get     'x-served-by': 'cache-jfk1023-JFK',
6108 silly registry.get     'x-cache': 'HIT',
6108 silly registry.get     'x-cache-hits': '1',
6108 silly registry.get     'x-timer': 'S1388777757.047260523,VS0,VE57',
6108 silly registry.get     vary: 'Accept',
6108 silly registry.get     'keep-alive': 'timeout=10, max=49',
6108 silly registry.get     connection: 'Keep-Alive' } ]
6109 silly lockFile 21868904-pm-cache-getobject-0-1-0-package C:\Users\Gaston\AppData\Roaming\npm-cache\getobject\0.1.0\package
6110 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\getobject\0.1.0\package C:\Users\Gaston\AppData\Roaming\npm-cache\21868904-pm-cache-getobject-0-1-0-package.lock
6111 silly lockFile 21868904-pm-cache-getobject-0-1-0-package C:\Users\Gaston\AppData\Roaming\npm-cache\getobject\0.1.0\package
6112 silly lockFile 21868904-pm-cache-getobject-0-1-0-package C:\Users\Gaston\AppData\Roaming\npm-cache\getobject\0.1.0\package
6113 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\getobject\0.1.0\package.tgz
6114 silly lockFile ab0b29ba-pm-cache-getobject-0-1-0-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\getobject\0.1.0\package
6115 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\getobject\0.1.0\package C:\Users\Gaston\AppData\Roaming\npm-cache\ab0b29ba-pm-cache-getobject-0-1-0-package.lock
6116 silly lockFile 3f56f74d-ache-getobject-0-1-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\getobject\0.1.0\package.tgz
6117 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\getobject\0.1.0\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\3f56f74d-ache-getobject-0-1-0-package-tgz.lock
6118 silly gunzTarPerm modes [ '755', '644' ]
6119 silly gunzTarPerm extractEntry package.json
6120 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
6121 silly gunzTarPerm extractEntry .npmignore
6122 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
6123 silly gunzTarPerm extractEntry README.md
6124 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
6125 silly lockFile 7faa1ae1-17063-0-4588683806359768-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777917063-0.4588683806359768\package
6126 silly lockFile 7faa1ae1-17063-0-4588683806359768-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777917063-0.4588683806359768\package
6127 silly lockFile a1120f3f-17063-0-4588683806359768-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777917063-0.4588683806359768\tmp.tgz
6128 silly lockFile a1120f3f-17063-0-4588683806359768-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777917063-0.4588683806359768\tmp.tgz
6129 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\exit\\0.1.2\\package.tgz',
6129 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388777917063-0.4588683806359768\\package' ]
6130 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\exit\0.1.2\package.tgz
6131 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777917063-0.4588683806359768\package
6132 silly lockFile 7faa1ae1-17063-0-4588683806359768-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777917063-0.4588683806359768\package
6133 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777917063-0.4588683806359768\package C:\Users\Gaston\AppData\Roaming\npm-cache\7faa1ae1-17063-0-4588683806359768-package.lock
6134 silly lockFile 3744d9cd-npm-cache-exit-0-1-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\exit\0.1.2\package.tgz
6135 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\exit\0.1.2\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\3744d9cd-npm-cache-exit-0-1-2-package-tgz.lock
6136 silly gunzTarPerm extractEntry Gruntfile.js
6137 silly gunzTarPerm modified mode [ 'Gruntfile.js', 438, 420 ]
6138 silly gunzTarPerm extractEntry .jshintrc
6139 silly gunzTarPerm modified mode [ '.jshintrc', 438, 420 ]
6140 silly gunzTarPerm extractEntry .travis.yml
6141 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]
6142 silly gunzTarPerm extractEntry lib/getobject.js
6143 silly gunzTarPerm modified mode [ 'lib/getobject.js', 438, 420 ]
6144 silly gunzTarPerm extractEntry LICENSE-MIT
6145 silly gunzTarPerm modified mode [ 'LICENSE-MIT', 438, 420 ]
6146 silly gunzTarPerm extractEntry test/namespace_test.js
6147 silly gunzTarPerm modified mode [ 'test/namespace_test.js', 438, 420 ]
6148 silly addNameRange number 2 { name: 'async', range: '>=0.2.9-0 <0.3.0-0', hasData: true }
6149 silly addNameRange versions [ 'async',
6149 silly addNameRange   [ '0.1.0',
6149 silly addNameRange     '0.1.1',
6149 silly addNameRange     '0.1.2',
6149 silly addNameRange     '0.1.3',
6149 silly addNameRange     '0.1.4',
6149 silly addNameRange     '0.1.5',
6149 silly addNameRange     '0.1.6',
6149 silly addNameRange     '0.1.7',
6149 silly addNameRange     '0.1.8',
6149 silly addNameRange     '0.1.9',
6149 silly addNameRange     '0.1.10',
6149 silly addNameRange     '0.1.11',
6149 silly addNameRange     '0.1.12',
6149 silly addNameRange     '0.1.13',
6149 silly addNameRange     '0.1.14',
6149 silly addNameRange     '0.1.15',
6149 silly addNameRange     '0.1.16',
6149 silly addNameRange     '0.1.17',
6149 silly addNameRange     '0.1.18',
6149 silly addNameRange     '0.1.19',
6149 silly addNameRange     '0.1.20',
6149 silly addNameRange     '0.1.21',
6149 silly addNameRange     '0.1.22',
6149 silly addNameRange     '0.2.0',
6149 silly addNameRange     '0.2.1',
6149 silly addNameRange     '0.2.2',
6149 silly addNameRange     '0.2.3',
6149 silly addNameRange     '0.2.4',
6149 silly addNameRange     '0.2.5',
6149 silly addNameRange     '0.2.6',
6149 silly addNameRange     '0.2.7',
6149 silly addNameRange     '0.2.8',
6149 silly addNameRange     '0.2.9' ] ]
6150 verbose addNamed [ 'async', '0.2.9' ]
6151 silly gunzTarPerm extractEntry test/cwd-test.js
6152 silly gunzTarPerm modified mode [ 'test/cwd-test.js', 438, 420 ]
6153 silly gunzTarPerm extractEntry test/mark.js
6154 silly gunzTarPerm modified mode [ 'test/mark.js', 438, 420 ]
6155 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777906080-0.15973132639192045\tmp.tgz
6156 silly lockFile f5159ee4-6080-0-15973132639192045-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777906080-0.15973132639192045\package
6157 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777906080-0.15973132639192045\package C:\Users\Gaston\AppData\Roaming\npm-cache\f5159ee4-6080-0-15973132639192045-package.lock
6158 silly lockFile 5f2584c2-6080-0-15973132639192045-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777906080-0.15973132639192045\tmp.tgz
6159 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777906080-0.15973132639192045\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\5f2584c2-6080-0-15973132639192045-tmp-tgz.lock
6160 silly gunzTarPerm extractEntry test/nocase-nomagic.js
6161 silly gunzTarPerm modified mode [ 'test/nocase-nomagic.js', 438, 420 ]
6162 silly gunzTarPerm extractEntry test/pause-resume.js
6163 silly gunzTarPerm modified mode [ 'test/pause-resume.js', 438, 420 ]
6164 silly gunzTarPerm modes [ '755', '644' ]
6165 silly gunzTarPerm extractEntry package.json
6166 silly gunzTarPerm extractEntry test/root-nomount.js
6167 silly gunzTarPerm modified mode [ 'test/root-nomount.js', 438, 420 ]
6168 silly gunzTarPerm extractEntry test/root.js
6169 silly gunzTarPerm modified mode [ 'test/root.js', 438, 420 ]
6170 silly gunzTarPerm extractEntry .travis.yml
6171 silly gunzTarPerm extractEntry Gemfile
6172 silly gunzTarPerm extractEntry test/zz-cleanup.js
6173 silly gunzTarPerm modified mode [ 'test/zz-cleanup.js', 438, 420 ]
6174 silly gunzTarPerm extractEntry test/bash-results.json
6175 silly gunzTarPerm modified mode [ 'test/bash-results.json', 438, 420 ]
6176 silly gunzTarPerm extractEntry Gemfile.lock
6177 silly gunzTarPerm extractEntry README.markdown
6178 silly gunzTarPerm extractEntry Rakefile
6179 silly lockFile ab0b29ba-pm-cache-getobject-0-1-0-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\getobject\0.1.0\package
6180 silly lockFile ab0b29ba-pm-cache-getobject-0-1-0-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\getobject\0.1.0\package
6181 silly lockFile 3f56f74d-ache-getobject-0-1-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\getobject\0.1.0\package.tgz
6182 silly lockFile 3f56f74d-ache-getobject-0-1-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\getobject\0.1.0\package.tgz
6183 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\getobject\0.1.0\package.tgz 644
6184 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\getobject\0.1.0\package.tgz
6185 silly lockFile ffaebdea-rg-getobject-getobject-0-1-0-tgz https://registry.npmjs.org/getobject/-/getobject-0.1.0.tgz
6186 silly lockFile ffaebdea-rg-getobject-getobject-0-1-0-tgz https://registry.npmjs.org/getobject/-/getobject-0.1.0.tgz
6187 silly lockFile c44ec3ff-getobject-0-1-0 getobject@0.1.0
6188 silly lockFile c44ec3ff-getobject-0-1-0 getobject@0.1.0
6189 silly lockFile 6f3e7f10-getobject-0-1-0 getobject@~0.1.0
6190 silly lockFile 6f3e7f10-getobject-0-1-0 getobject@~0.1.0
6191 silly gunzTarPerm extractEntry dist/underscore.string.min.js
6192 silly gunzTarPerm extractEntry lib/underscore.string.js
6193 silly gunzTarPerm extractEntry test/run-qunit.js
6194 silly gunzTarPerm extractEntry test/speed.js
6195 silly gunzTarPerm extractEntry test/strings.js
6196 silly gunzTarPerm extractEntry test/strings_standalone.js
6197 silly gunzTarPerm extractEntry test/underscore.js
6198 silly gunzTarPerm extractEntry test/test.html
6199 silly lockFile 7faa1ae1-17063-0-4588683806359768-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777917063-0.4588683806359768\package
6200 silly lockFile 7faa1ae1-17063-0-4588683806359768-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777917063-0.4588683806359768\package
6201 silly lockFile 3744d9cd-npm-cache-exit-0-1-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\exit\0.1.2\package.tgz
6202 silly lockFile 3744d9cd-npm-cache-exit-0-1-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\exit\0.1.2\package.tgz
6203 silly gunzTarPerm extractEntry test/test_standalone.html
6204 silly gunzTarPerm extractEntry test/test_underscore/arrays.js
6205 silly lockFile 29a5661f-ing-npm-cache-exit-0-1-2-package C:\Users\Gaston\AppData\Roaming\npm-cache\exit\0.1.2\package
6206 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\exit\0.1.2\package C:\Users\Gaston\AppData\Roaming\npm-cache\29a5661f-ing-npm-cache-exit-0-1-2-package.lock
6207 silly lockFile 29a5661f-ing-npm-cache-exit-0-1-2-package C:\Users\Gaston\AppData\Roaming\npm-cache\exit\0.1.2\package
6208 silly lockFile 29a5661f-ing-npm-cache-exit-0-1-2-package C:\Users\Gaston\AppData\Roaming\npm-cache\exit\0.1.2\package
6209 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\exit\0.1.2\package.tgz
6210 silly lockFile 58f97cf4-ing-npm-cache-exit-0-1-2-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\exit\0.1.2\package
6211 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\exit\0.1.2\package C:\Users\Gaston\AppData\Roaming\npm-cache\58f97cf4-ing-npm-cache-exit-0-1-2-package.lock
6212 silly lockFile 3744d9cd-npm-cache-exit-0-1-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\exit\0.1.2\package.tgz
6213 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\exit\0.1.2\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\3744d9cd-npm-cache-exit-0-1-2-package-tgz.lock
6214 silly gunzTarPerm modes [ '755', '644' ]
6215 silly gunzTarPerm extractEntry package.json
6216 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
6217 silly gunzTarPerm extractEntry .npmignore
6218 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
6219 silly gunzTarPerm extractEntry README.md
6220 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
6221 silly gunzTarPerm extractEntry Gruntfile.js
6222 silly gunzTarPerm modified mode [ 'Gruntfile.js', 438, 420 ]
6223 silly gunzTarPerm extractEntry .jshintrc
6224 silly gunzTarPerm modified mode [ '.jshintrc', 438, 420 ]
6225 silly gunzTarPerm extractEntry .travis.yml
6226 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]
6227 silly gunzTarPerm extractEntry lib/exit.js
6228 silly gunzTarPerm modified mode [ 'lib/exit.js', 438, 420 ]
6229 silly gunzTarPerm extractEntry test/test_underscore/collections.js
6230 silly gunzTarPerm extractEntry test/test_underscore/functions.js
6231 silly gunzTarPerm extractEntry LICENSE-MIT
6232 silly gunzTarPerm modified mode [ 'LICENSE-MIT', 438, 420 ]
6233 silly gunzTarPerm extractEntry test/exit_test.js
6234 silly gunzTarPerm modified mode [ 'test/exit_test.js', 438, 420 ]
6235 silly gunzTarPerm extractEntry test/test_underscore/objects.js
6236 silly gunzTarPerm extractEntry test/test_underscore/chaining.js
6237 silly gunzTarPerm extractEntry test/fixtures/log.js
6238 silly gunzTarPerm modified mode [ 'test/fixtures/log.js', 438, 420 ]
6239 silly gunzTarPerm extractEntry test/fixtures/log-broken.js
6240 silly gunzTarPerm modified mode [ 'test/fixtures/log-broken.js', 438, 420 ]
6241 silly gunzTarPerm extractEntry test/fixtures/10-stdout.txt
6242 silly gunzTarPerm modified mode [ 'test/fixtures/10-stdout.txt', 438, 420 ]
6243 silly gunzTarPerm extractEntry test/test_underscore/temp.js
6244 silly gunzTarPerm extractEntry test/test_underscore/utility.js
6245 silly gunzTarPerm extractEntry test/fixtures/100-stderr.txt
6246 silly gunzTarPerm modified mode [ 'test/fixtures/100-stderr.txt', 438, 420 ]
6247 silly gunzTarPerm extractEntry test/fixtures/100-stdout-stderr.txt
6248 silly gunzTarPerm modified mode [ 'test/fixtures/100-stdout-stderr.txt', 438, 420 ]
6249 silly lockFile 10bc5f38-es-findup-sync-node-modules-glob tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob
6250 silly lockFile 10bc5f38-es-findup-sync-node-modules-glob tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob
6251 silly lockFile e5ccf26d-pm-cache-glob-3-1-21-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\glob\3.1.21\package.tgz
6252 silly lockFile e5ccf26d-pm-cache-glob-3-1-21-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\glob\3.1.21\package.tgz
6253 silly gunzTarPerm extractEntry test/fixtures/100-stdout.txt
6254 silly gunzTarPerm modified mode [ 'test/fixtures/100-stdout.txt', 438, 420 ]
6255 silly gunzTarPerm extractEntry test/fixtures/10-stdout-stderr.txt
6256 silly gunzTarPerm modified mode [ 'test/fixtures/10-stdout-stderr.txt', 438, 420 ]
6257 silly gunzTarPerm extractEntry test/fixtures/1000-stdout-stderr.txt
6258 silly gunzTarPerm modified mode [ 'test/fixtures/1000-stdout-stderr.txt', 438, 420 ]
6259 silly gunzTarPerm extractEntry test/fixtures/1000-stdout.txt
6260 silly gunzTarPerm modified mode [ 'test/fixtures/1000-stdout.txt', 438, 420 ]
6261 info preinstall glob@3.1.21
6262 verbose readDependencies using package.json deps
6263 verbose readDependencies using package.json deps
6264 http 200 https://registry.npmjs.org/rimraf/-/rimraf-2.0.3.tgz
6265 verbose cache add [ 'minimatch@~0.2.11', null ]
6266 verbose cache add name=undefined spec="minimatch@~0.2.11" args=["minimatch@~0.2.11",null]
6267 verbose parsed url { protocol: null,
6267 verbose parsed url   slashes: null,
6267 verbose parsed url   auth: null,
6267 verbose parsed url   host: null,
6267 verbose parsed url   port: null,
6267 verbose parsed url   hostname: null,
6267 verbose parsed url   hash: null,
6267 verbose parsed url   search: null,
6267 verbose parsed url   query: null,
6267 verbose parsed url   pathname: 'minimatch@~0.2.11',
6267 verbose parsed url   path: 'minimatch@~0.2.11',
6267 verbose parsed url   href: 'minimatch@~0.2.11' }
6268 verbose cache add name="minimatch" spec="~0.2.11" args=["minimatch","~0.2.11"]
6269 verbose parsed url { protocol: null,
6269 verbose parsed url   slashes: null,
6269 verbose parsed url   auth: null,
6269 verbose parsed url   host: null,
6269 verbose parsed url   port: null,
6269 verbose parsed url   hostname: null,
6269 verbose parsed url   hash: null,
6269 verbose parsed url   search: null,
6269 verbose parsed url   query: null,
6269 verbose parsed url   pathname: '~0.2.11',
6269 verbose parsed url   path: '~0.2.11',
6269 verbose parsed url   href: '~0.2.11' }
6270 verbose addNamed [ 'minimatch', '~0.2.11' ]
6271 verbose cache add [ 'graceful-fs@~1.2.0', null ]
6272 verbose cache add name=undefined spec="graceful-fs@~1.2.0" args=["graceful-fs@~1.2.0",null]
6273 verbose parsed url { protocol: null,
6273 verbose parsed url   slashes: null,
6273 verbose parsed url   auth: null,
6273 verbose parsed url   host: null,
6273 verbose parsed url   port: null,
6273 verbose parsed url   hostname: null,
6273 verbose parsed url   hash: null,
6273 verbose parsed url   search: null,
6273 verbose parsed url   query: null,
6273 verbose parsed url   pathname: 'graceful-fs@~1.2.0',
6273 verbose parsed url   path: 'graceful-fs@~1.2.0',
6273 verbose parsed url   href: 'graceful-fs@~1.2.0' }
6274 verbose cache add name="graceful-fs" spec="~1.2.0" args=["graceful-fs","~1.2.0"]
6275 verbose parsed url { protocol: null,
6275 verbose parsed url   slashes: null,
6275 verbose parsed url   auth: null,
6275 verbose parsed url   host: null,
6275 verbose parsed url   port: null,
6275 verbose parsed url   hostname: null,
6275 verbose parsed url   hash: null,
6275 verbose parsed url   search: null,
6275 verbose parsed url   query: null,
6275 verbose parsed url   pathname: '~1.2.0',
6275 verbose parsed url   path: '~1.2.0',
6275 verbose parsed url   href: '~1.2.0' }
6276 verbose addNamed [ 'graceful-fs', '~1.2.0' ]
6277 verbose addNamed [ null, '>=1.2.0-0 <1.3.0-0' ]
6278 silly lockFile 9c0bb906-graceful-fs-1-2-0 graceful-fs@~1.2.0
6279 verbose lock graceful-fs@~1.2.0 C:\Users\Gaston\AppData\Roaming\npm-cache\9c0bb906-graceful-fs-1-2-0.lock
6280 verbose cache add [ 'inherits@1', null ]
6281 verbose cache add name=undefined spec="inherits@1" args=["inherits@1",null]
6282 verbose parsed url { protocol: null,
6282 verbose parsed url   slashes: null,
6282 verbose parsed url   auth: null,
6282 verbose parsed url   host: null,
6282 verbose parsed url   port: null,
6282 verbose parsed url   hostname: null,
6282 verbose parsed url   hash: null,
6282 verbose parsed url   search: null,
6282 verbose parsed url   query: null,
6282 verbose parsed url   pathname: 'inherits@1',
6282 verbose parsed url   path: 'inherits@1',
6282 verbose parsed url   href: 'inherits@1' }
6283 verbose cache add name="inherits" spec="1" args=["inherits","1"]
6284 verbose parsed url { protocol: null,
6284 verbose parsed url   slashes: null,
6284 verbose parsed url   auth: null,
6284 verbose parsed url   host: null,
6284 verbose parsed url   port: null,
6284 verbose parsed url   hostname: null,
6284 verbose parsed url   hash: null,
6284 verbose parsed url   search: null,
6284 verbose parsed url   query: null,
6284 verbose parsed url   pathname: '1',
6284 verbose parsed url   path: '1',
6284 verbose parsed url   href: '1' }
6285 verbose addNamed [ 'inherits', '1' ]
6286 verbose addNamed [ null, '>=1.0.0-0 <2.0.0-0' ]
6287 silly lockFile 4bca46d0-inherits-1 inherits@1
6288 verbose lock inherits@1 C:\Users\Gaston\AppData\Roaming\npm-cache\4bca46d0-inherits-1.lock
6289 silly addNameRange { name: 'graceful-fs',
6289 silly addNameRange   range: '>=1.2.0-0 <1.3.0-0',
6289 silly addNameRange   hasData: false }
6290 silly addNameRange { name: 'inherits', range: '>=1.0.0-0 <2.0.0-0', hasData: false }
6291 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777924092-0.9109717544633895\tmp.tgz
6292 silly lockFile 449de4ca-24092-0-9109717544633895-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777924092-0.9109717544633895\package
6293 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777924092-0.9109717544633895\package C:\Users\Gaston\AppData\Roaming\npm-cache\449de4ca-24092-0-9109717544633895-package.lock
6294 silly lockFile ab62ebc2-24092-0-9109717544633895-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777924092-0.9109717544633895\tmp.tgz
6295 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777924092-0.9109717544633895\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\ab62ebc2-24092-0-9109717544633895-tmp-tgz.lock
6296 silly gunzTarPerm extractEntry test/fixtures/create-files.sh
6297 silly gunzTarPerm modified mode [ 'test/fixtures/create-files.sh', 438, 420 ]
6298 silly gunzTarPerm extractEntry test/fixtures/10-stderr.txt
6299 silly gunzTarPerm modified mode [ 'test/fixtures/10-stderr.txt', 438, 420 ]
6300 silly gunzTarPerm extractEntry test/test_underscore/speed.js
6301 silly gunzTarPerm extractEntry test/test_underscore/test.html
6302 silly gunzTarPerm modes [ '755', '644' ]
6303 silly gunzTarPerm extractEntry package.json
6304 verbose url raw graceful-fs
6305 verbose url resolving [ 'https://registry.npmjs.org/', './graceful-fs' ]
6306 verbose url resolved https://registry.npmjs.org/graceful-fs
6307 info trying registry request attempt 1 at 16:38:46
6308 verbose etag "CD9PAXA6045JPCERIXC2VPOQH"
6309 http GET https://registry.npmjs.org/graceful-fs
6310 verbose url raw inherits
6311 verbose url resolving [ 'https://registry.npmjs.org/', './inherits' ]
6312 verbose url resolved https://registry.npmjs.org/inherits
6313 info trying registry request attempt 1 at 16:38:46
6314 verbose etag "6GND9JGNFJBVB470HZYXMNR4P"
6315 http GET https://registry.npmjs.org/inherits
6316 silly gunzTarPerm extractEntry README.md
6317 silly gunzTarPerm extractEntry LICENSE
6318 silly gunzTarPerm extractEntry test/test_underscore/temp_tests.html
6319 silly gunzTarPerm extractEntry test/test_underscore/vendor/jquery.js
6320 silly gunzTarPerm extractEntry test/fixtures/1000-stderr.txt
6321 silly gunzTarPerm modified mode [ 'test/fixtures/1000-stderr.txt', 438, 420 ]
6322 silly lockFile bdefddb6-9866-0-41891708853654563-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777919866-0.41891708853654563\package
6323 silly lockFile bdefddb6-9866-0-41891708853654563-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777919866-0.41891708853654563\package
6324 silly lockFile 788ddf60-9866-0-41891708853654563-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777919866-0.41891708853654563\tmp.tgz
6325 silly lockFile 788ddf60-9866-0-41891708853654563-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777919866-0.41891708853654563\tmp.tgz
6326 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\lodash\\0.9.2\\package.tgz',
6326 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388777919866-0.41891708853654563\\package' ]
6327 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\lodash\0.9.2\package.tgz
6328 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777919866-0.41891708853654563\package
6329 silly lockFile bdefddb6-9866-0-41891708853654563-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777919866-0.41891708853654563\package
6330 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777919866-0.41891708853654563\package C:\Users\Gaston\AppData\Roaming\npm-cache\bdefddb6-9866-0-41891708853654563-package.lock
6331 silly lockFile b934f0b1-m-cache-lodash-0-9-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\lodash\0.9.2\package.tgz
6332 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\lodash\0.9.2\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\b934f0b1-m-cache-lodash-0-9-2-package-tgz.lock
6333 silly gunzTarPerm extractEntry rimraf.js
6334 silly gunzTarPerm extractEntry AUTHORS
6335 silly gunzTarPerm extractEntry test/test_underscore/vendor/jslitmus.js
6336 silly gunzTarPerm extractEntry test/test_underscore/vendor/qunit.js
6337 silly gunzTarPerm extractEntry test/test_underscore/vendor/qunit.css
6338 silly gunzTarPerm extractEntry test/test-async.js
6339 silly gunzTarPerm extractEntry test/test-fiber.js
6340 silly gunzTarPerm extractEntry test/test-sync.js
6341 silly gunzTarPerm extractEntry test/run.sh
6342 silly gunzTarPerm extractEntry test/setup.sh
6343 silly lockFile 449de4ca-24092-0-9109717544633895-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777924092-0.9109717544633895\package
6344 silly lockFile 449de4ca-24092-0-9109717544633895-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777924092-0.9109717544633895\package
6345 silly lockFile ab62ebc2-24092-0-9109717544633895-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777924092-0.9109717544633895\tmp.tgz
6346 silly lockFile ab62ebc2-24092-0-9109717544633895-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777924092-0.9109717544633895\tmp.tgz
6347 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\rimraf\\2.0.3\\package.tgz',
6347 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388777924092-0.9109717544633895\\package' ]
6348 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\rimraf\2.0.3\package.tgz
6349 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777924092-0.9109717544633895\package
6350 silly lockFile 449de4ca-24092-0-9109717544633895-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777924092-0.9109717544633895\package
6351 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777924092-0.9109717544633895\package C:\Users\Gaston\AppData\Roaming\npm-cache\449de4ca-24092-0-9109717544633895-package.lock
6352 silly lockFile b571a5c8-m-cache-rimraf-2-0-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\rimraf\2.0.3\package.tgz
6353 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\rimraf\2.0.3\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\b571a5c8-m-cache-rimraf-2-0-3-package-tgz.lock
6354 silly lockFile 58f97cf4-ing-npm-cache-exit-0-1-2-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\exit\0.1.2\package
6355 silly lockFile 58f97cf4-ing-npm-cache-exit-0-1-2-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\exit\0.1.2\package
6356 silly lockFile 3744d9cd-npm-cache-exit-0-1-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\exit\0.1.2\package.tgz
6357 silly lockFile 3744d9cd-npm-cache-exit-0-1-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\exit\0.1.2\package.tgz
6358 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\exit\0.1.2\package.tgz 644
6359 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\exit\0.1.2\package.tgz
6360 silly lockFile 26c4995b-ry-npmjs-org-exit-exit-0-1-2-tgz https://registry.npmjs.org/exit/-/exit-0.1.2.tgz
6361 silly lockFile 26c4995b-ry-npmjs-org-exit-exit-0-1-2-tgz https://registry.npmjs.org/exit/-/exit-0.1.2.tgz
6362 silly lockFile 7dd65db3-exit-0-1-2 exit@0.1.2
6363 silly lockFile 7dd65db3-exit-0-1-2 exit@0.1.2
6364 silly lockFile 36e7f3d8-exit-0-1-1 exit@~0.1.1
6365 silly lockFile 36e7f3d8-exit-0-1-1 exit@~0.1.1
6366 silly lockFile 449de4ca-24092-0-9109717544633895-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777924092-0.9109717544633895\package
6367 silly lockFile 449de4ca-24092-0-9109717544633895-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777924092-0.9109717544633895\package
6368 silly lockFile b571a5c8-m-cache-rimraf-2-0-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\rimraf\2.0.3\package.tgz
6369 silly lockFile b571a5c8-m-cache-rimraf-2-0-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\rimraf\2.0.3\package.tgz
6370 silly lockFile 655530d2-g-npm-cache-rimraf-2-0-3-package C:\Users\Gaston\AppData\Roaming\npm-cache\rimraf\2.0.3\package
6371 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\rimraf\2.0.3\package C:\Users\Gaston\AppData\Roaming\npm-cache\655530d2-g-npm-cache-rimraf-2-0-3-package.lock
6372 silly lockFile 655530d2-g-npm-cache-rimraf-2-0-3-package C:\Users\Gaston\AppData\Roaming\npm-cache\rimraf\2.0.3\package
6373 silly lockFile 655530d2-g-npm-cache-rimraf-2-0-3-package C:\Users\Gaston\AppData\Roaming\npm-cache\rimraf\2.0.3\package
6374 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\rimraf\2.0.3\package.tgz
6375 silly lockFile 8a3d811d-g-npm-cache-rimraf-2-0-3-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\rimraf\2.0.3\package
6376 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\rimraf\2.0.3\package C:\Users\Gaston\AppData\Roaming\npm-cache\8a3d811d-g-npm-cache-rimraf-2-0-3-package.lock
6377 silly lockFile b571a5c8-m-cache-rimraf-2-0-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\rimraf\2.0.3\package.tgz
6378 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\rimraf\2.0.3\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\b571a5c8-m-cache-rimraf-2-0-3-package-tgz.lock
6379 silly gunzTarPerm modes [ '755', '644' ]
6380 silly gunzTarPerm extractEntry package.json
6381 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
6382 silly gunzTarPerm extractEntry README.md
6383 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
6384 silly gunzTarPerm extractEntry LICENSE
6385 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
6386 silly gunzTarPerm extractEntry rimraf.js
6387 silly gunzTarPerm modified mode [ 'rimraf.js', 438, 420 ]
6388 silly gunzTarPerm extractEntry AUTHORS
6389 silly gunzTarPerm modified mode [ 'AUTHORS', 438, 420 ]
6390 silly gunzTarPerm extractEntry test/test-async.js
6391 silly gunzTarPerm modified mode [ 'test/test-async.js', 438, 420 ]
6392 silly gunzTarPerm extractEntry test/test-fiber.js
6393 silly gunzTarPerm modified mode [ 'test/test-fiber.js', 438, 420 ]
6394 silly gunzTarPerm extractEntry test/test-sync.js
6395 silly gunzTarPerm modified mode [ 'test/test-sync.js', 438, 420 ]
6396 silly gunzTarPerm extractEntry test/run.sh
6397 silly gunzTarPerm modified mode [ 'test/run.sh', 438, 420 ]
6398 silly gunzTarPerm extractEntry test/setup.sh
6399 silly gunzTarPerm modified mode [ 'test/setup.sh', 438, 420 ]
6400 silly lockFile 8a3d811d-g-npm-cache-rimraf-2-0-3-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\rimraf\2.0.3\package
6401 silly lockFile 8a3d811d-g-npm-cache-rimraf-2-0-3-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\rimraf\2.0.3\package
6402 silly lockFile b571a5c8-m-cache-rimraf-2-0-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\rimraf\2.0.3\package.tgz
6403 silly lockFile b571a5c8-m-cache-rimraf-2-0-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\rimraf\2.0.3\package.tgz
6404 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\rimraf\2.0.3\package.tgz 644
6405 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\rimraf\2.0.3\package.tgz
6406 silly lockFile bcfae994-pmjs-org-rimraf-rimraf-2-0-3-tgz https://registry.npmjs.org/rimraf/-/rimraf-2.0.3.tgz
6407 silly lockFile bcfae994-pmjs-org-rimraf-rimraf-2-0-3-tgz https://registry.npmjs.org/rimraf/-/rimraf-2.0.3.tgz
6408 silly lockFile 166fc4dd-rimraf-2-0-3 rimraf@2.0.3
6409 silly lockFile 166fc4dd-rimraf-2-0-3 rimraf@2.0.3
6410 silly lockFile 530919ca-rimraf-2-0-3 rimraf@~2.0.3
6411 silly lockFile 530919ca-rimraf-2-0-3 rimraf@~2.0.3
6412 silly lockFile bdefddb6-9866-0-41891708853654563-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777919866-0.41891708853654563\package
6413 silly lockFile bdefddb6-9866-0-41891708853654563-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777919866-0.41891708853654563\package
6414 silly lockFile b934f0b1-m-cache-lodash-0-9-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\lodash\0.9.2\package.tgz
6415 silly lockFile b934f0b1-m-cache-lodash-0-9-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\lodash\0.9.2\package.tgz
6416 silly lockFile 343786ac-g-npm-cache-lodash-0-9-2-package C:\Users\Gaston\AppData\Roaming\npm-cache\lodash\0.9.2\package
6417 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\lodash\0.9.2\package C:\Users\Gaston\AppData\Roaming\npm-cache\343786ac-g-npm-cache-lodash-0-9-2-package.lock
6418 silly lockFile 343786ac-g-npm-cache-lodash-0-9-2-package C:\Users\Gaston\AppData\Roaming\npm-cache\lodash\0.9.2\package
6419 silly lockFile 343786ac-g-npm-cache-lodash-0-9-2-package C:\Users\Gaston\AppData\Roaming\npm-cache\lodash\0.9.2\package
6420 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\lodash\0.9.2\package.tgz
6421 silly lockFile 12563044-g-npm-cache-lodash-0-9-2-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\lodash\0.9.2\package
6422 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\lodash\0.9.2\package C:\Users\Gaston\AppData\Roaming\npm-cache\12563044-g-npm-cache-lodash-0-9-2-package.lock
6423 silly lockFile b934f0b1-m-cache-lodash-0-9-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\lodash\0.9.2\package.tgz
6424 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\lodash\0.9.2\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\b934f0b1-m-cache-lodash-0-9-2-package-tgz.lock
6425 silly gunzTarPerm modes [ '755', '644' ]
6426 silly gunzTarPerm extractEntry package.json
6427 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
6428 silly gunzTarPerm extractEntry README.md
6429 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
6430 silly gunzTarPerm extractEntry lodash.js
6431 silly gunzTarPerm modified mode [ 'lodash.js', 438, 420 ]
6432 silly gunzTarPerm extractEntry lodash.min.js
6433 silly gunzTarPerm modified mode [ 'lodash.min.js', 438, 420 ]
6434 silly gunzTarPerm extractEntry lodash.underscore.js
6435 silly gunzTarPerm modified mode [ 'lodash.underscore.js', 438, 420 ]
6436 silly gunzTarPerm extractEntry lodash.underscore.min.js
6437 silly gunzTarPerm modified mode [ 'lodash.underscore.min.js', 438, 420 ]
6438 silly lockFile 7daa705e--findup-sync-node-modules-lodash tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\lodash
6439 silly lockFile 7daa705e--findup-sync-node-modules-lodash tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\lodash
6440 silly lockFile f5ae224a-m-cache-lodash-1-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\lodash\1.0.1\package.tgz
6441 silly lockFile f5ae224a-m-cache-lodash-1-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\lodash\1.0.1\package.tgz
6442 info preinstall lodash@1.0.1
6443 verbose readDependencies using package.json deps
6444 verbose readDependencies using package.json deps
6445 silly resolved []
6446 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\lodash
6447 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\lodash
6448 verbose linkStuff [ false,
6448 verbose linkStuff   false,
6448 verbose linkStuff   false,
6448 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\load-grunt-tasks\\node_modules\\findup-sync\\node_modules' ]
6449 info linkStuff lodash@1.0.1
6450 verbose linkBins lodash@1.0.1
6451 verbose linkMans lodash@1.0.1
6452 verbose rebuildBundles lodash@1.0.1
6453 info install lodash@1.0.1
6454 info postinstall lodash@1.0.1
6455 silly lockFile f5159ee4-6080-0-15973132639192045-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777906080-0.15973132639192045\package
6456 silly lockFile f5159ee4-6080-0-15973132639192045-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777906080-0.15973132639192045\package
6457 silly lockFile 5f2584c2-6080-0-15973132639192045-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777906080-0.15973132639192045\tmp.tgz
6458 silly lockFile 5f2584c2-6080-0-15973132639192045-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777906080-0.15973132639192045\tmp.tgz
6459 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\underscore.string\\2.2.1\\package.tgz',
6459 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388777906080-0.15973132639192045\\package' ]
6460 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\underscore.string\2.2.1\package.tgz
6461 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777906080-0.15973132639192045\package
6462 silly lockFile f5159ee4-6080-0-15973132639192045-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777906080-0.15973132639192045\package
6463 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777906080-0.15973132639192045\package C:\Users\Gaston\AppData\Roaming\npm-cache\f5159ee4-6080-0-15973132639192045-package.lock
6464 silly lockFile 8d49ecdd-erscore-string-2-2-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\underscore.string\2.2.1\package.tgz
6465 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\underscore.string\2.2.1\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\8d49ecdd-erscore-string-2-2-1-package-tgz.lock
6466 silly lockFile 12563044-g-npm-cache-lodash-0-9-2-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\lodash\0.9.2\package
6467 silly lockFile 12563044-g-npm-cache-lodash-0-9-2-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\lodash\0.9.2\package
6468 silly lockFile b934f0b1-m-cache-lodash-0-9-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\lodash\0.9.2\package.tgz
6469 silly lockFile b934f0b1-m-cache-lodash-0-9-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\lodash\0.9.2\package.tgz
6470 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\lodash\0.9.2\package.tgz 644
6471 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\lodash\0.9.2\package.tgz
6472 silly lockFile 26543735-pmjs-org-lodash-lodash-0-9-2-tgz https://registry.npmjs.org/lodash/-/lodash-0.9.2.tgz
6473 silly lockFile 26543735-pmjs-org-lodash-lodash-0-9-2-tgz https://registry.npmjs.org/lodash/-/lodash-0.9.2.tgz
6474 silly lockFile 9802d919-lodash-0-9-2 lodash@0.9.2
6475 silly lockFile 9802d919-lodash-0-9-2 lodash@0.9.2
6476 silly lockFile 1fff9bf4-lodash-0-9-2 lodash@~0.9.2
6477 silly lockFile 1fff9bf4-lodash-0-9-2 lodash@~0.9.2
6478 silly lockFile f5159ee4-6080-0-15973132639192045-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777906080-0.15973132639192045\package
6479 silly lockFile f5159ee4-6080-0-15973132639192045-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777906080-0.15973132639192045\package
6480 silly lockFile 8d49ecdd-erscore-string-2-2-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\underscore.string\2.2.1\package.tgz
6481 silly lockFile 8d49ecdd-erscore-string-2-2-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\underscore.string\2.2.1\package.tgz
6482 silly lockFile e4dc2bab--underscore-string-2-2-1-package C:\Users\Gaston\AppData\Roaming\npm-cache\underscore.string\2.2.1\package
6483 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\underscore.string\2.2.1\package C:\Users\Gaston\AppData\Roaming\npm-cache\e4dc2bab--underscore-string-2-2-1-package.lock
6484 silly lockFile e4dc2bab--underscore-string-2-2-1-package C:\Users\Gaston\AppData\Roaming\npm-cache\underscore.string\2.2.1\package
6485 silly lockFile e4dc2bab--underscore-string-2-2-1-package C:\Users\Gaston\AppData\Roaming\npm-cache\underscore.string\2.2.1\package
6486 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\underscore.string\2.2.1\package.tgz
6487 silly lockFile b4ed64c3--underscore-string-2-2-1-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\underscore.string\2.2.1\package
6488 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\underscore.string\2.2.1\package C:\Users\Gaston\AppData\Roaming\npm-cache\b4ed64c3--underscore-string-2-2-1-package.lock
6489 silly lockFile 8d49ecdd-erscore-string-2-2-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\underscore.string\2.2.1\package.tgz
6490 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\underscore.string\2.2.1\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\8d49ecdd-erscore-string-2-2-1-package-tgz.lock
6491 silly gunzTarPerm modes [ '755', '644' ]
6492 silly gunzTarPerm extractEntry package.json
6493 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
6494 silly gunzTarPerm extractEntry .travis.yml
6495 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]
6496 silly gunzTarPerm extractEntry dist/underscore.string.min.js
6497 silly gunzTarPerm modified mode [ 'dist/underscore.string.min.js', 438, 420 ]
6498 silly gunzTarPerm extractEntry Gemfile
6499 silly gunzTarPerm modified mode [ 'Gemfile', 438, 420 ]
6500 silly gunzTarPerm extractEntry Gemfile.lock
6501 silly gunzTarPerm modified mode [ 'Gemfile.lock', 438, 420 ]
6502 silly gunzTarPerm extractEntry lib/underscore.string.js
6503 silly gunzTarPerm modified mode [ 'lib/underscore.string.js', 438, 420 ]
6504 silly gunzTarPerm extractEntry Rakefile
6505 silly gunzTarPerm modified mode [ 'Rakefile', 438, 420 ]
6506 silly gunzTarPerm extractEntry README.markdown
6507 silly gunzTarPerm modified mode [ 'README.markdown', 438, 420 ]
6508 silly gunzTarPerm extractEntry test/run-qunit.js
6509 silly gunzTarPerm modified mode [ 'test/run-qunit.js', 438, 420 ]
6510 silly gunzTarPerm extractEntry test/speed.js
6511 silly gunzTarPerm modified mode [ 'test/speed.js', 438, 420 ]
6512 silly gunzTarPerm extractEntry test/strings.js
6513 silly gunzTarPerm modified mode [ 'test/strings.js', 438, 420 ]
6514 silly gunzTarPerm extractEntry test/strings_standalone.js
6515 silly gunzTarPerm modified mode [ 'test/strings_standalone.js', 438, 420 ]
6516 silly gunzTarPerm extractEntry test/underscore.js
6517 silly gunzTarPerm modified mode [ 'test/underscore.js', 438, 420 ]
6518 silly gunzTarPerm extractEntry test/test.html
6519 silly gunzTarPerm modified mode [ 'test/test.html', 438, 420 ]
6520 silly gunzTarPerm extractEntry test/test_standalone.html
6521 silly gunzTarPerm modified mode [ 'test/test_standalone.html', 438, 420 ]
6522 silly gunzTarPerm extractEntry test/test_underscore/arrays.js
6523 silly gunzTarPerm modified mode [ 'test/test_underscore/arrays.js', 438, 420 ]
6524 silly gunzTarPerm extractEntry test/test_underscore/collections.js
6525 silly gunzTarPerm modified mode [ 'test/test_underscore/collections.js', 438, 420 ]
6526 silly gunzTarPerm extractEntry test/test_underscore/functions.js
6527 silly gunzTarPerm modified mode [ 'test/test_underscore/functions.js', 438, 420 ]
6528 silly gunzTarPerm extractEntry test/test_underscore/objects.js
6529 silly gunzTarPerm modified mode [ 'test/test_underscore/objects.js', 438, 420 ]
6530 silly gunzTarPerm extractEntry test/test_underscore/chaining.js
6531 silly gunzTarPerm modified mode [ 'test/test_underscore/chaining.js', 438, 420 ]
6532 silly gunzTarPerm extractEntry test/test_underscore/temp.js
6533 silly gunzTarPerm modified mode [ 'test/test_underscore/temp.js', 438, 420 ]
6534 silly gunzTarPerm extractEntry test/test_underscore/utility.js
6535 silly gunzTarPerm modified mode [ 'test/test_underscore/utility.js', 438, 420 ]
6536 silly gunzTarPerm extractEntry test/test_underscore/speed.js
6537 silly gunzTarPerm modified mode [ 'test/test_underscore/speed.js', 438, 420 ]
6538 silly gunzTarPerm extractEntry test/test_underscore/test.html
6539 silly gunzTarPerm modified mode [ 'test/test_underscore/test.html', 438, 420 ]
6540 silly gunzTarPerm extractEntry test/test_underscore/temp_tests.html
6541 silly gunzTarPerm modified mode [ 'test/test_underscore/temp_tests.html', 438, 420 ]
6542 silly gunzTarPerm extractEntry test/test_underscore/vendor/jquery.js
6543 silly gunzTarPerm modified mode [ 'test/test_underscore/vendor/jquery.js', 438, 420 ]
6544 silly gunzTarPerm extractEntry test/test_underscore/vendor/jslitmus.js
6545 silly gunzTarPerm modified mode [ 'test/test_underscore/vendor/jslitmus.js', 438, 420 ]
6546 silly gunzTarPerm extractEntry test/test_underscore/vendor/qunit.js
6547 silly gunzTarPerm modified mode [ 'test/test_underscore/vendor/qunit.js', 438, 420 ]
6548 silly gunzTarPerm extractEntry test/test_underscore/vendor/qunit.css
6549 silly gunzTarPerm modified mode [ 'test/test_underscore/vendor/qunit.css', 438, 420 ]
6550 silly lockFile b4ed64c3--underscore-string-2-2-1-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\underscore.string\2.2.1\package
6551 silly lockFile b4ed64c3--underscore-string-2-2-1-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\underscore.string\2.2.1\package
6552 silly lockFile 8d49ecdd-erscore-string-2-2-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\underscore.string\2.2.1\package.tgz
6553 silly lockFile 8d49ecdd-erscore-string-2-2-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\underscore.string\2.2.1\package.tgz
6554 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\underscore.string\2.2.1\package.tgz 644
6555 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\underscore.string\2.2.1\package.tgz
6556 silly lockFile c23c3112-ring-underscore-string-2-2-1-tgz https://registry.npmjs.org/underscore.string/-/underscore.string-2.2.1.tgz
6557 silly lockFile c23c3112-ring-underscore-string-2-2-1-tgz https://registry.npmjs.org/underscore.string/-/underscore.string-2.2.1.tgz
6558 silly lockFile 5c083954-underscore-string-2-2-1 underscore.string@2.2.1
6559 silly lockFile 5c083954-underscore-string-2-2-1 underscore.string@2.2.1
6560 silly lockFile 57acec0b-underscore-string-2-2-1 underscore.string@~2.2.1
6561 silly lockFile 57acec0b-underscore-string-2-2-1 underscore.string@~2.2.1
6562 info trying registry request attempt 2 at 16:38:53
6563 http GET https://registry.npmjs.org/grunt-lib-contrib
6564 http 200 https://registry.npmjs.org/js-yaml
6565 silly registry.get cb [ 200,
6565 silly registry.get   { date: 'Fri, 03 Jan 2014 19:37:29 GMT',
6565 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
6565 silly registry.get     etag: '"EEJL87LMT51Y3WANWA47YSU69"',
6565 silly registry.get     'content-type': 'application/json',
6565 silly registry.get     'content-length': '161590',
6565 silly registry.get     'accept-ranges': 'bytes',
6565 silly registry.get     via: '1.1 varnish',
6565 silly registry.get     age: '536',
6565 silly registry.get     'x-served-by': 'cache-jfk1021-JFK',
6565 silly registry.get     'x-cache': 'HIT',
6565 silly registry.get     'x-cache-hits': '1',
6565 silly registry.get     'x-timer': 'S1388777849.161411762,VS0,VE51',
6565 silly registry.get     vary: 'Accept',
6565 silly registry.get     'keep-alive': 'timeout=10, max=42',
6565 silly registry.get     connection: 'Keep-Alive' } ]
6566 silly addNameRange number 2 { name: 'js-yaml', range: '>=2.0.5-0 <2.1.0-0', hasData: true }
6567 silly addNameRange versions [ 'js-yaml',
6567 silly addNameRange   [ '0.2.0',
6567 silly addNameRange     '0.2.1',
6567 silly addNameRange     '0.2.2',
6567 silly addNameRange     '0.3.0',
6567 silly addNameRange     '0.3.1',
6567 silly addNameRange     '0.3.2',
6567 silly addNameRange     '0.3.3',
6567 silly addNameRange     '0.3.4',
6567 silly addNameRange     '0.3.5',
6567 silly addNameRange     '0.3.6',
6567 silly addNameRange     '0.3.7',
6567 silly addNameRange     '1.0.0',
6567 silly addNameRange     '1.0.1',
6567 silly addNameRange     '1.0.2',
6567 silly addNameRange     '1.0.3',
6567 silly addNameRange     '2.0.0',
6567 silly addNameRange     '2.0.1',
6567 silly addNameRange     '2.0.2',
6567 silly addNameRange     '2.0.3',
6567 silly addNameRange     '2.0.4',
6567 silly addNameRange     '2.0.5',
6567 silly addNameRange     '2.1.0',
6567 silly addNameRange     '2.1.1',
6567 silly addNameRange     '2.1.2',
6567 silly addNameRange     '2.1.3',
6567 silly addNameRange     '3.0.0',
6567 silly addNameRange     '3.0.1' ] ]
6568 verbose addNamed [ 'js-yaml', '2.0.5' ]
6569 verbose addNamed [ '2.0.5', '2.0.5' ]
6570 silly lockFile 0aecb717-js-yaml-2-0-5 js-yaml@2.0.5
6571 verbose lock js-yaml@2.0.5 C:\Users\Gaston\AppData\Roaming\npm-cache\0aecb717-js-yaml-2-0-5.lock
6572 silly lockFile eadff921-js-org-js-yaml-js-yaml-2-0-5-tgz https://registry.npmjs.org/js-yaml/-/js-yaml-2.0.5.tgz
6573 verbose lock https://registry.npmjs.org/js-yaml/-/js-yaml-2.0.5.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\eadff921-js-org-js-yaml-js-yaml-2-0-5-tgz.lock
6574 verbose addRemoteTarball [ 'https://registry.npmjs.org/js-yaml/-/js-yaml-2.0.5.tgz',
6574 verbose addRemoteTarball   'a25ae6509999e97df278c6719da11bd0687743a8' ]
6575 info retry fetch attempt 1 at 16:38:54
6576 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777934778-0.7069363200571388\tmp.tgz
6577 http GET https://registry.npmjs.org/js-yaml/-/js-yaml-2.0.5.tgz
6578 http 200 https://registry.npmjs.org/async/0.2.9
6579 silly registry.get cb [ 200,
6579 silly registry.get   { date: 'Fri, 03 Jan 2014 19:37:46 GMT',
6579 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
6579 silly registry.get     etag: '"1I9ZGRGBDL3K6MN9A9JI71HM6"',
6579 silly registry.get     'content-type': 'application/json',
6579 silly registry.get     'content-length': '45207',
6579 silly registry.get     'accept-ranges': 'bytes',
6579 silly registry.get     via: '1.1 varnish',
6579 silly registry.get     age: '15021',
6579 silly registry.get     'x-served-by': 'cache-at50-ATL',
6579 silly registry.get     'x-cache': 'HIT',
6579 silly registry.get     'x-cache-hits': '1',
6579 silly registry.get     'x-timer': 'S1388777866.476020098,VS0,VE45',
6579 silly registry.get     vary: 'Accept',
6579 silly registry.get     'keep-alive': 'timeout=10, max=50',
6579 silly registry.get     connection: 'Keep-Alive' } ]
6580 info retry will retry, error on last attempt: Error: socket hang up
6581 silly lockFile c060db57--npmjs-org-async-async-0-2-9-tgz https://registry.npmjs.org/async/-/async-0.2.9.tgz
6582 verbose lock https://registry.npmjs.org/async/-/async-0.2.9.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\c060db57--npmjs-org-async-async-0-2-9-tgz.lock
6583 verbose addRemoteTarball [ 'https://registry.npmjs.org/async/-/async-0.2.9.tgz',
6583 verbose addRemoteTarball   'df63060fbf3d33286a76aaf6d55a2986d9ff8619' ]
6584 info retry fetch attempt 1 at 16:39:04
6585 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777944582-0.11388398800045252\tmp.tgz
6586 http GET https://registry.npmjs.org/async/-/async-0.2.9.tgz
6587 error fetch failed https://registry.npmjs.org/js-yaml/-/js-yaml-2.0.5.tgz
6588 info retry will retry, error on last attempt: Error: getaddrinfo ENOTFOUND
6589 info retry will retry, error on last attempt: Error: socket hang up
6590 info trying registry request attempt 2 at 16:39:14
6591 verbose etag "ENY6937TKFXIJARH44KNW9ZPF"
6592 http GET https://registry.npmjs.org/minimatch
6593 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777907248-0.718480174196884\tmp.tgz
6594 silly lockFile 9fe6ad24-907248-0-718480174196884-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777907248-0.718480174196884\package
6595 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777907248-0.718480174196884\package C:\Users\Gaston\AppData\Roaming\npm-cache\9fe6ad24-907248-0-718480174196884-package.lock
6596 silly lockFile b3a35c41-907248-0-718480174196884-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777907248-0.718480174196884\tmp.tgz
6597 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777907248-0.718480174196884\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\b3a35c41-907248-0-718480174196884-tmp-tgz.lock
6598 silly gunzTarPerm modes [ '755', '644' ]
6599 silly gunzTarPerm extractEntry package.json
6600 silly gunzTarPerm extractEntry .npmignore
6601 silly gunzTarPerm extractEntry README.md
6602 silly gunzTarPerm extractEntry LICENSE
6603 silly gunzTarPerm extractEntry index.js
6604 silly gunzTarPerm extractEntry .travis.yml
6605 silly gunzTarPerm extractEntry README.md~
6606 silly gunzTarPerm extractEntry encodings/big5.js
6607 silly gunzTarPerm extractEntry encodings/gbk.js
6608 silly gunzTarPerm extractEntry encodings/singlebyte.js
6609 silly gunzTarPerm extractEntry encodings/table/big5.js
6610 silly gunzTarPerm extractEntry encodings/table/gbk.js
6611 silly gunzTarPerm extractEntry generation/generate-big5-table.js
6612 silly gunzTarPerm extractEntry generation/generate-singlebyte.js
6613 silly gunzTarPerm extractEntry test/big5-test.js
6614 silly gunzTarPerm extractEntry test/cyrillic-test.js
6615 silly gunzTarPerm extractEntry test/gbk-test.js
6616 silly gunzTarPerm extractEntry test/greek-test.js
6617 silly gunzTarPerm extractEntry test/main-test.js
6618 silly gunzTarPerm extractEntry test/performance.js
6619 silly gunzTarPerm extractEntry test/turkish-test.js
6620 silly gunzTarPerm extractEntry test/big5File.txt
6621 silly gunzTarPerm extractEntry test/gbkFile.txt
6622 info retry will retry, error on last attempt: Error: getaddrinfo ENOTFOUND
6623 error fetch failed https://registry.npmjs.org/async/-/async-0.2.9.tgz
6624 info retry will retry, error on last attempt: Error: getaddrinfo ENOTFOUND
6625 silly lockFile 9fe6ad24-907248-0-718480174196884-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777907248-0.718480174196884\package
6626 silly lockFile 9fe6ad24-907248-0-718480174196884-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777907248-0.718480174196884\package
6627 silly lockFile b3a35c41-907248-0-718480174196884-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777907248-0.718480174196884\tmp.tgz
6628 silly lockFile b3a35c41-907248-0-718480174196884-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777907248-0.718480174196884\tmp.tgz
6629 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\iconv-lite\\0.2.11\\package.tgz',
6629 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388777907248-0.718480174196884\\package' ]
6630 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\iconv-lite\0.2.11\package.tgz
6631 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777907248-0.718480174196884\package
6632 silly lockFile 9fe6ad24-907248-0-718480174196884-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777907248-0.718480174196884\package
6633 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777907248-0.718480174196884\package C:\Users\Gaston\AppData\Roaming\npm-cache\9fe6ad24-907248-0-718480174196884-package.lock
6634 silly lockFile a5f4fc9f-he-iconv-lite-0-2-11-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\iconv-lite\0.2.11\package.tgz
6635 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\iconv-lite\0.2.11\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\a5f4fc9f-he-iconv-lite-0-2-11-package-tgz.lock
6636 info retry fetch attempt 2 at 16:39:16
6637 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777934778-0.7069363200571388\tmp.tgz
6638 http GET https://registry.npmjs.org/js-yaml/-/js-yaml-2.0.5.tgz
6639 silly lockFile 9fe6ad24-907248-0-718480174196884-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777907248-0.718480174196884\package
6640 silly lockFile 9fe6ad24-907248-0-718480174196884-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777907248-0.718480174196884\package
6641 silly lockFile a5f4fc9f-he-iconv-lite-0-2-11-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\iconv-lite\0.2.11\package.tgz
6642 silly lockFile a5f4fc9f-he-iconv-lite-0-2-11-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\iconv-lite\0.2.11\package.tgz
6643 silly lockFile 1a6491b3--cache-iconv-lite-0-2-11-package C:\Users\Gaston\AppData\Roaming\npm-cache\iconv-lite\0.2.11\package
6644 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\iconv-lite\0.2.11\package C:\Users\Gaston\AppData\Roaming\npm-cache\1a6491b3--cache-iconv-lite-0-2-11-package.lock
6645 silly lockFile 1a6491b3--cache-iconv-lite-0-2-11-package C:\Users\Gaston\AppData\Roaming\npm-cache\iconv-lite\0.2.11\package
6646 silly lockFile 1a6491b3--cache-iconv-lite-0-2-11-package C:\Users\Gaston\AppData\Roaming\npm-cache\iconv-lite\0.2.11\package
6647 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\iconv-lite\0.2.11\package.tgz
6648 silly lockFile 774d69a0--cache-iconv-lite-0-2-11-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\iconv-lite\0.2.11\package
6649 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\iconv-lite\0.2.11\package C:\Users\Gaston\AppData\Roaming\npm-cache\774d69a0--cache-iconv-lite-0-2-11-package.lock
6650 silly lockFile a5f4fc9f-he-iconv-lite-0-2-11-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\iconv-lite\0.2.11\package.tgz
6651 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\iconv-lite\0.2.11\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\a5f4fc9f-he-iconv-lite-0-2-11-package-tgz.lock
6652 silly gunzTarPerm modes [ '755', '644' ]
6653 silly gunzTarPerm extractEntry package.json
6654 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
6655 silly gunzTarPerm extractEntry .npmignore
6656 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
6657 silly gunzTarPerm extractEntry README.md
6658 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
6659 silly gunzTarPerm extractEntry LICENSE
6660 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
6661 silly gunzTarPerm extractEntry index.js
6662 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
6663 silly gunzTarPerm extractEntry .travis.yml
6664 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]
6665 silly gunzTarPerm extractEntry encodings/big5.js
6666 silly gunzTarPerm modified mode [ 'encodings/big5.js', 438, 420 ]
6667 silly gunzTarPerm extractEntry encodings/gbk.js
6668 silly gunzTarPerm modified mode [ 'encodings/gbk.js', 438, 420 ]
6669 silly gunzTarPerm extractEntry encodings/singlebyte.js
6670 silly gunzTarPerm modified mode [ 'encodings/singlebyte.js', 438, 420 ]
6671 silly gunzTarPerm extractEntry encodings/table/big5.js
6672 silly gunzTarPerm modified mode [ 'encodings/table/big5.js', 438, 420 ]
6673 silly gunzTarPerm extractEntry encodings/table/gbk.js
6674 silly gunzTarPerm modified mode [ 'encodings/table/gbk.js', 438, 420 ]
6675 silly gunzTarPerm extractEntry generation/generate-big5-table.js
6676 silly gunzTarPerm modified mode [ 'generation/generate-big5-table.js', 438, 420 ]
6677 silly gunzTarPerm extractEntry generation/generate-singlebyte.js
6678 silly gunzTarPerm modified mode [ 'generation/generate-singlebyte.js', 438, 420 ]
6679 silly gunzTarPerm extractEntry README.md~
6680 silly gunzTarPerm modified mode [ 'README.md~', 438, 420 ]
6681 silly gunzTarPerm extractEntry test/big5-test.js
6682 silly gunzTarPerm modified mode [ 'test/big5-test.js', 438, 420 ]
6683 silly gunzTarPerm extractEntry test/cyrillic-test.js
6684 silly gunzTarPerm modified mode [ 'test/cyrillic-test.js', 438, 420 ]
6685 silly gunzTarPerm extractEntry test/gbk-test.js
6686 silly gunzTarPerm modified mode [ 'test/gbk-test.js', 438, 420 ]
6687 silly gunzTarPerm extractEntry test/greek-test.js
6688 silly gunzTarPerm modified mode [ 'test/greek-test.js', 438, 420 ]
6689 silly gunzTarPerm extractEntry test/main-test.js
6690 silly gunzTarPerm modified mode [ 'test/main-test.js', 438, 420 ]
6691 silly gunzTarPerm extractEntry test/performance.js
6692 silly gunzTarPerm modified mode [ 'test/performance.js', 438, 420 ]
6693 silly gunzTarPerm extractEntry test/turkish-test.js
6694 silly gunzTarPerm modified mode [ 'test/turkish-test.js', 438, 420 ]
6695 silly gunzTarPerm extractEntry test/big5File.txt
6696 silly gunzTarPerm modified mode [ 'test/big5File.txt', 438, 420 ]
6697 silly gunzTarPerm extractEntry test/gbkFile.txt
6698 silly gunzTarPerm modified mode [ 'test/gbkFile.txt', 438, 420 ]
6699 silly lockFile 774d69a0--cache-iconv-lite-0-2-11-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\iconv-lite\0.2.11\package
6700 silly lockFile 774d69a0--cache-iconv-lite-0-2-11-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\iconv-lite\0.2.11\package
6701 silly lockFile a5f4fc9f-he-iconv-lite-0-2-11-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\iconv-lite\0.2.11\package.tgz
6702 silly lockFile a5f4fc9f-he-iconv-lite-0-2-11-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\iconv-lite\0.2.11\package.tgz
6703 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\iconv-lite\0.2.11\package.tgz 644
6704 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\iconv-lite\0.2.11\package.tgz
6705 silly lockFile 2e095f8b-iconv-lite-iconv-lite-0-2-11-tgz https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.2.11.tgz
6706 silly lockFile 2e095f8b-iconv-lite-iconv-lite-0-2-11-tgz https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.2.11.tgz
6707 silly lockFile 5d877021-iconv-lite-0-2-11 iconv-lite@0.2.11
6708 silly lockFile 5d877021-iconv-lite-0-2-11 iconv-lite@0.2.11
6709 silly lockFile 92090105-iconv-lite-0-2-11 iconv-lite@~0.2.11
6710 silly lockFile 92090105-iconv-lite-0-2-11 iconv-lite@~0.2.11
6711 info trying registry request attempt 2 at 16:39:21
6712 http GET https://registry.npmjs.org/tiny-lr/0.0.4
6713 info retry will retry, error on last attempt: Error: getaddrinfo ENOTFOUND
6714 http 200 https://registry.npmjs.org/gaze
6715 silly registry.get cb [ 200,
6715 silly registry.get   { date: 'Fri, 03 Jan 2014 19:37:46 GMT',
6715 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
6715 silly registry.get     etag: '"53YNEJBV4VXSYECB5IDRJK71M"',
6715 silly registry.get     'content-type': 'application/json',
6715 silly registry.get     'content-length': '133647',
6715 silly registry.get     'accept-ranges': 'bytes',
6715 silly registry.get     via: '1.1 varnish',
6715 silly registry.get     age: '9005',
6715 silly registry.get     'x-served-by': 'cache-jfk1023-JFK',
6715 silly registry.get     'x-cache': 'HIT',
6715 silly registry.get     'x-cache-hits': '1',
6715 silly registry.get     'x-timer': 'S1388777866.258890152,VS0,VE53',
6715 silly registry.get     vary: 'Accept',
6715 silly registry.get     'keep-alive': 'timeout=10, max=48',
6715 silly registry.get     connection: 'Keep-Alive' } ]
6716 silly addNameRange number 2 { name: 'gaze', range: '>=0.4.0-0 <0.5.0-0', hasData: true }
6717 silly addNameRange versions [ 'gaze',
6717 silly addNameRange   [ '0.1.0',
6717 silly addNameRange     '0.1.1',
6717 silly addNameRange     '0.1.2',
6717 silly addNameRange     '0.1.3',
6717 silly addNameRange     '0.1.4',
6717 silly addNameRange     '0.1.5',
6717 silly addNameRange     '0.1.6',
6717 silly addNameRange     '0.2.0',
6717 silly addNameRange     '0.2.1',
6717 silly addNameRange     '0.2.2',
6717 silly addNameRange     '0.3.0',
6717 silly addNameRange     '0.3.1',
6717 silly addNameRange     '0.3.2',
6717 silly addNameRange     '0.3.3',
6717 silly addNameRange     '0.3.4',
6717 silly addNameRange     '0.4.0',
6717 silly addNameRange     '0.4.1',
6717 silly addNameRange     '0.4.2',
6717 silly addNameRange     '0.4.3' ] ]
6718 verbose addNamed [ 'gaze', '0.4.3' ]
6719 verbose addNamed [ '0.4.3', '0.4.3' ]
6720 silly lockFile 6119999c-gaze-0-4-3 gaze@0.4.3
6721 verbose lock gaze@0.4.3 C:\Users\Gaston\AppData\Roaming\npm-cache\6119999c-gaze-0-4-3.lock
6722 silly lockFile 23200fc8-ry-npmjs-org-gaze-gaze-0-4-3-tgz https://registry.npmjs.org/gaze/-/gaze-0.4.3.tgz
6723 verbose lock https://registry.npmjs.org/gaze/-/gaze-0.4.3.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\23200fc8-ry-npmjs-org-gaze-gaze-0-4-3-tgz.lock
6724 verbose addRemoteTarball [ 'https://registry.npmjs.org/gaze/-/gaze-0.4.3.tgz',
6724 verbose addRemoteTarball   'e538f4ff5e4fe648f473a97e1ebb253d2de127b5' ]
6725 info retry fetch attempt 1 at 16:39:24
6726 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777964321-0.09715697355568409\tmp.tgz
6727 http GET https://registry.npmjs.org/gaze/-/gaze-0.4.3.tgz
6728 info trying registry request attempt 2 at 16:39:26
6729 http GET https://registry.npmjs.org/has-color
6730 info retry fetch attempt 2 at 16:39:26
6731 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777944582-0.11388398800045252\tmp.tgz
6732 http GET https://registry.npmjs.org/async/-/async-0.2.9.tgz
6733 http 200 https://registry.npmjs.org/minimist
6734 silly registry.get cb [ 200,
6734 silly registry.get   { date: 'Fri, 03 Jan 2014 19:38:25 GMT',
6734 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
6734 silly registry.get     etag: '"F5CERVM87O79B9B1CYKLEPZRZ"',
6734 silly registry.get     'content-type': 'application/json',
6734 silly registry.get     'content-length': '19858',
6734 silly registry.get     'accept-ranges': 'bytes',
6734 silly registry.get     via: '1.1 varnish',
6734 silly registry.get     age: '394',
6734 silly registry.get     'x-served-by': 'cache-jfk1023-JFK',
6734 silly registry.get     'x-cache': 'HIT',
6734 silly registry.get     'x-cache-hits': '1',
6734 silly registry.get     'x-timer': 'S1388777905.171269417,VS0,VE50',
6734 silly registry.get     vary: 'Accept',
6734 silly registry.get     'keep-alive': 'timeout=10, max=47',
6734 silly registry.get     connection: 'Keep-Alive' } ]
6735 silly addNameRange number 2 { name: 'minimist', range: '>=0.0.1-0 <0.1.0-0', hasData: true }
6736 silly addNameRange versions [ 'minimist',
6736 silly addNameRange   [ '0.0.0', '0.0.1', '0.0.2', '0.0.3', '0.0.4', '0.0.5' ] ]
6737 verbose addNamed [ 'minimist', '0.0.5' ]
6738 verbose addNamed [ '0.0.5', '0.0.5' ]
6739 silly lockFile 7b943d62-minimist-0-0-5 minimist@0.0.5
6740 verbose lock minimist@0.0.5 C:\Users\Gaston\AppData\Roaming\npm-cache\7b943d62-minimist-0-0-5.lock
6741 silly lockFile 17e7d0d6--org-minimist-minimist-0-0-5-tgz https://registry.npmjs.org/minimist/-/minimist-0.0.5.tgz
6742 verbose lock https://registry.npmjs.org/minimist/-/minimist-0.0.5.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\17e7d0d6--org-minimist-minimist-0-0-5-tgz.lock
6743 verbose addRemoteTarball [ 'https://registry.npmjs.org/minimist/-/minimist-0.0.5.tgz',
6743 verbose addRemoteTarball   'd7aa327bcecf518f9106ac6b8f003fa3bcea8566' ]
6744 info retry fetch attempt 1 at 16:39:27
6745 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777967473-0.7807188662700355\tmp.tgz
6746 http GET https://registry.npmjs.org/minimist/-/minimist-0.0.5.tgz
6747 info retry will retry, error on last attempt: Error: getaddrinfo ENOTFOUND
6748 error fetch failed https://registry.npmjs.org/js-yaml/-/js-yaml-2.0.5.tgz
6749 info retry will retry, error on last attempt: Error: getaddrinfo ENOTFOUND
6750 http 200 https://registry.npmjs.org/postcss
6751 silly registry.get cb [ 200,
6751 silly registry.get   { date: 'Fri, 03 Jan 2014 19:38:28 GMT',
6751 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
6751 silly registry.get     etag: '"78RZRW8G9953PAZ69P22IGAJ5"',
6751 silly registry.get     'content-type': 'application/json',
6751 silly registry.get     'content-length': '20973',
6751 silly registry.get     'accept-ranges': 'bytes',
6751 silly registry.get     via: '1.1 varnish',
6751 silly registry.get     age: '13370',
6751 silly registry.get     'x-served-by': 'cache-jfk1023-JFK',
6751 silly registry.get     'x-cache': 'MISS',
6751 silly registry.get     'x-cache-hits': '0',
6751 silly registry.get     'x-timer': 'S1388777908.427985907,VS0,VE53',
6751 silly registry.get     vary: 'Accept',
6751 silly registry.get     'keep-alive': 'timeout=10, max=46',
6751 silly registry.get     connection: 'Keep-Alive' } ]
6752 silly addNameRange number 2 { name: 'postcss', range: '>=0.2.0-0 <0.3.0-0', hasData: true }
6753 silly addNameRange versions [ 'postcss', [ '0.1.0', '0.2.0' ] ]
6754 verbose addNamed [ 'postcss', '0.2.0' ]
6755 verbose addNamed [ '0.2.0', '0.2.0' ]
6756 silly lockFile b0bf5474-postcss-0-2-0 postcss@0.2.0
6757 verbose lock postcss@0.2.0 C:\Users\Gaston\AppData\Roaming\npm-cache\b0bf5474-postcss-0-2-0.lock
6758 silly lockFile 35f4cf3a-js-org-postcss-postcss-0-2-0-tgz https://registry.npmjs.org/postcss/-/postcss-0.2.0.tgz
6759 verbose lock https://registry.npmjs.org/postcss/-/postcss-0.2.0.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\35f4cf3a-js-org-postcss-postcss-0-2-0-tgz.lock
6760 verbose addRemoteTarball [ 'https://registry.npmjs.org/postcss/-/postcss-0.2.0.tgz',
6760 verbose addRemoteTarball   '1615c6c5c5f9e19ca230022c4f93b5b1909e75c8' ]
6761 info retry fetch attempt 1 at 16:39:30
6762 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777970981-0.7418503221124411\tmp.tgz
6763 http GET https://registry.npmjs.org/postcss/-/postcss-0.2.0.tgz
6764 http 200 https://registry.npmjs.org/zlib-browserify/0.0.1
6765 silly registry.get cb [ 200,
6765 silly registry.get   { date: 'Fri, 03 Jan 2014 19:38:31 GMT',
6765 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
6765 silly registry.get     etag: '"ALMS128G5H5T8EXBCI8SD5OUT"',
6765 silly registry.get     'content-type': 'application/json',
6765 silly registry.get     'content-length': '904',
6765 silly registry.get     'accept-ranges': 'bytes',
6765 silly registry.get     via: '1.1 varnish',
6765 silly registry.get     age: '65853',
6765 silly registry.get     'x-served-by': 'cache-jfk1023-JFK',
6765 silly registry.get     'x-cache': 'HIT',
6765 silly registry.get     'x-cache-hits': '1',
6765 silly registry.get     'x-timer': 'S1388777911.935870886,VS0,VE54',
6765 silly registry.get     vary: 'Accept',
6765 silly registry.get     'keep-alive': 'timeout=10, max=45',
6765 silly registry.get     connection: 'Keep-Alive' } ]
6766 silly lockFile cb2295c0-serify-zlib-browserify-0-0-1-tgz https://registry.npmjs.org/zlib-browserify/-/zlib-browserify-0.0.1.tgz
6767 verbose lock https://registry.npmjs.org/zlib-browserify/-/zlib-browserify-0.0.1.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\cb2295c0-serify-zlib-browserify-0-0-1-tgz.lock
6768 verbose addRemoteTarball [ 'https://registry.npmjs.org/zlib-browserify/-/zlib-browserify-0.0.1.tgz',
6768 verbose addRemoteTarball   '4fa6a45d00dbc15f318a4afa1d9afc0258e176cc' ]
6769 info retry fetch attempt 1 at 16:39:31
6770 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777971979-0.29693439695984125\tmp.tgz
6771 http GET https://registry.npmjs.org/zlib-browserify/-/zlib-browserify-0.0.1.tgz
6772 info trying registry request attempt 2 at 16:39:33
6773 http GET https://registry.npmjs.org/ansi-styles
6774 http 200 https://registry.npmjs.org/gaze/-/gaze-0.4.3.tgz
6775 http 200 https://registry.npmjs.org/minimist/-/minimist-0.0.5.tgz
6776 http 200 https://registry.npmjs.org/wordwrap
6777 silly registry.get cb [ 200,
6777 silly registry.get   { date: 'Fri, 03 Jan 2014 19:38:37 GMT',
6777 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
6777 silly registry.get     etag: '"F43AAO4P0TLZW60D8L2DXV5PZ"',
6777 silly registry.get     'content-type': 'application/json',
6777 silly registry.get     'content-length': '2540',
6777 silly registry.get     'accept-ranges': 'bytes',
6777 silly registry.get     via: '1.1 varnish',
6777 silly registry.get     age: '2687',
6777 silly registry.get     'x-served-by': 'cache-d46-DAL',
6777 silly registry.get     'x-cache': 'HIT',
6777 silly registry.get     'x-cache-hits': '2',
6777 silly registry.get     'x-timer': 'S1388777917.781185865,VS0,VE0',
6777 silly registry.get     vary: 'Accept',
6777 silly registry.get     'keep-alive': 'timeout=10, max=50',
6777 silly registry.get     connection: 'Keep-Alive' } ]
6778 silly addNameRange number 2 { name: 'wordwrap', range: '>=0.0.2-0 <0.1.0-0', hasData: true }
6779 silly addNameRange versions [ 'wordwrap', [ '0.0.1', '0.0.2' ] ]
6780 verbose addNamed [ 'wordwrap', '0.0.2' ]
6781 verbose addNamed [ '0.0.2', '0.0.2' ]
6782 silly lockFile 24a694c8-wordwrap-0-0-2 wordwrap@0.0.2
6783 verbose lock wordwrap@0.0.2 C:\Users\Gaston\AppData\Roaming\npm-cache\24a694c8-wordwrap-0-0-2.lock
6784 silly lockFile 5fd8587b--org-wordwrap-wordwrap-0-0-2-tgz https://registry.npmjs.org/wordwrap/-/wordwrap-0.0.2.tgz
6785 verbose lock https://registry.npmjs.org/wordwrap/-/wordwrap-0.0.2.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\5fd8587b--org-wordwrap-wordwrap-0-0-2-tgz.lock
6786 verbose addRemoteTarball [ 'https://registry.npmjs.org/wordwrap/-/wordwrap-0.0.2.tgz',
6786 verbose addRemoteTarball   'b79669bb42ecb409f83d583cad52ca17eaa1643f' ]
6787 info retry fetch attempt 1 at 16:39:37
6788 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777977086-0.24168873974122107\tmp.tgz
6789 http GET https://registry.npmjs.org/wordwrap/-/wordwrap-0.0.2.tgz
6790 http 200 https://registry.npmjs.org/async/-/async-0.2.9.tgz
6791 http 200 https://registry.npmjs.org/zlib-browserify/-/zlib-browserify-0.0.1.tgz
6792 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777971979-0.29693439695984125\tmp.tgz
6793 silly lockFile 5d9a0a01-1979-0-29693439695984125-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777971979-0.29693439695984125\package
6794 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777971979-0.29693439695984125\package C:\Users\Gaston\AppData\Roaming\npm-cache\5d9a0a01-1979-0-29693439695984125-package.lock
6795 silly lockFile 1040addd-1979-0-29693439695984125-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777971979-0.29693439695984125\tmp.tgz
6796 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777971979-0.29693439695984125\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\1040addd-1979-0-29693439695984125-tmp-tgz.lock
6797 silly gunzTarPerm modes [ '755', '644' ]
6798 silly gunzTarPerm extractEntry package.json
6799 silly gunzTarPerm extractEntry .npmignore
6800 silly gunzTarPerm extractEntry index.js
6801 silly gunzTarPerm extractEntry zlib.js
6802 silly gunzTarPerm extractEntry readme.md
6803 silly gunzTarPerm extractEntry test/zlib.test.js
6804 silly lockFile 5d9a0a01-1979-0-29693439695984125-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777971979-0.29693439695984125\package
6805 silly lockFile 5d9a0a01-1979-0-29693439695984125-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777971979-0.29693439695984125\package
6806 silly lockFile 1040addd-1979-0-29693439695984125-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777971979-0.29693439695984125\tmp.tgz
6807 silly lockFile 1040addd-1979-0-29693439695984125-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777971979-0.29693439695984125\tmp.tgz
6808 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\zlib-browserify\\0.0.1\\package.tgz',
6808 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388777971979-0.29693439695984125\\package' ]
6809 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\zlib-browserify\0.0.1\package.tgz
6810 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777971979-0.29693439695984125\package
6811 silly lockFile 5d9a0a01-1979-0-29693439695984125-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777971979-0.29693439695984125\package
6812 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777971979-0.29693439695984125\package C:\Users\Gaston\AppData\Roaming\npm-cache\5d9a0a01-1979-0-29693439695984125-package.lock
6813 silly lockFile d0a3ffe6-lib-browserify-0-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\zlib-browserify\0.0.1\package.tgz
6814 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\zlib-browserify\0.0.1\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\d0a3ffe6-lib-browserify-0-0-1-package-tgz.lock
6815 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777964321-0.09715697355568409\tmp.tgz
6816 silly lockFile 7f8b7bdc-4321-0-09715697355568409-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777964321-0.09715697355568409\package
6817 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777964321-0.09715697355568409\package C:\Users\Gaston\AppData\Roaming\npm-cache\7f8b7bdc-4321-0-09715697355568409-package.lock
6818 silly lockFile c847d36b-4321-0-09715697355568409-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777964321-0.09715697355568409\tmp.tgz
6819 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777964321-0.09715697355568409\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\c847d36b-4321-0-09715697355568409-tmp-tgz.lock
6820 silly gunzTarPerm modes [ '755', '644' ]
6821 silly gunzTarPerm extractEntry package.json
6822 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777967473-0.7807188662700355\tmp.tgz
6823 silly lockFile b66c42f6-67473-0-7807188662700355-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777967473-0.7807188662700355\package
6824 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777967473-0.7807188662700355\package C:\Users\Gaston\AppData\Roaming\npm-cache\b66c42f6-67473-0-7807188662700355-package.lock
6825 silly lockFile 465c2573-67473-0-7807188662700355-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777967473-0.7807188662700355\tmp.tgz
6826 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777967473-0.7807188662700355\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\465c2573-67473-0-7807188662700355-tmp-tgz.lock
6827 silly gunzTarPerm extractEntry .npmignore
6828 silly gunzTarPerm extractEntry README.md
6829 silly gunzTarPerm modes [ '755', '644' ]
6830 silly gunzTarPerm extractEntry package.json
6831 silly gunzTarPerm extractEntry Gruntfile.js
6832 silly gunzTarPerm extractEntry LICENSE-MIT
6833 silly gunzTarPerm extractEntry LICENSE
6834 silly gunzTarPerm extractEntry index.js
6835 silly gunzTarPerm extractEntry .editorconfig
6836 silly gunzTarPerm extractEntry .jshintrc
6837 silly gunzTarPerm extractEntry .travis.yml
6838 silly gunzTarPerm extractEntry example/parse.js
6839 silly gunzTarPerm extractEntry .travis.yml
6840 silly gunzTarPerm extractEntry benchmarks/gaze100s.js
6841 silly gunzTarPerm extractEntry lib/gaze.js
6842 silly gunzTarPerm extractEntry lib/helper.js
6843 silly gunzTarPerm extractEntry AUTHORS
6844 silly gunzTarPerm extractEntry test/add_test.js
6845 silly gunzTarPerm extractEntry test/file_poller.js
6846 silly gunzTarPerm extractEntry test/watch_race_test.js
6847 silly gunzTarPerm extractEntry test/helper.js
6848 silly gunzTarPerm extractEntry test/matching_test.js
6849 silly gunzTarPerm extractEntry test/api_test.js
6850 silly gunzTarPerm extractEntry test/relative_test.js
6851 silly gunzTarPerm extractEntry test/rename_test.js
6852 silly gunzTarPerm extractEntry test/safewrite_test.js
6853 silly gunzTarPerm extractEntry test/watch_test.js
6854 silly gunzTarPerm extractEntry test/patterns_test.js
6855 silly gunzTarPerm extractEntry test/fixtures/one.js
6856 silly gunzTarPerm extractEntry test/fixtures/Project (LO)/one.js
6857 silly gunzTarPerm extractEntry test/fixtures/nested/one.js
6858 silly gunzTarPerm extractEntry test/fixtures/nested/three.js
6859 silly gunzTarPerm extractEntry test/fixtures/nested/sub/two.js
6860 silly gunzTarPerm extractEntry test/fixtures/nested/sub2/two.js
6861 silly gunzTarPerm extractEntry test/fixtures/sub/one.js
6862 silly gunzTarPerm extractEntry test/fixtures/sub/two.js
6863 silly gunzTarPerm extractEntry readme.markdown
6864 silly gunzTarPerm extractEntry test/dash.js
6865 silly lockFile 5d9a0a01-1979-0-29693439695984125-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777971979-0.29693439695984125\package
6866 silly lockFile 5d9a0a01-1979-0-29693439695984125-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777971979-0.29693439695984125\package
6867 silly lockFile d0a3ffe6-lib-browserify-0-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\zlib-browserify\0.0.1\package.tgz
6868 silly lockFile d0a3ffe6-lib-browserify-0-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\zlib-browserify\0.0.1\package.tgz
6869 silly lockFile 4691d7e3-he-zlib-browserify-0-0-1-package C:\Users\Gaston\AppData\Roaming\npm-cache\zlib-browserify\0.0.1\package
6870 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\zlib-browserify\0.0.1\package C:\Users\Gaston\AppData\Roaming\npm-cache\4691d7e3-he-zlib-browserify-0-0-1-package.lock
6871 silly lockFile 4691d7e3-he-zlib-browserify-0-0-1-package C:\Users\Gaston\AppData\Roaming\npm-cache\zlib-browserify\0.0.1\package
6872 silly lockFile 4691d7e3-he-zlib-browserify-0-0-1-package C:\Users\Gaston\AppData\Roaming\npm-cache\zlib-browserify\0.0.1\package
6873 silly gunzTarPerm extractEntry test/default_bool.js
6874 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\zlib-browserify\0.0.1\package.tgz
6875 silly lockFile 5aa357df-he-zlib-browserify-0-0-1-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\zlib-browserify\0.0.1\package
6876 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\zlib-browserify\0.0.1\package C:\Users\Gaston\AppData\Roaming\npm-cache\5aa357df-he-zlib-browserify-0-0-1-package.lock
6877 silly lockFile d0a3ffe6-lib-browserify-0-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\zlib-browserify\0.0.1\package.tgz
6878 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\zlib-browserify\0.0.1\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\d0a3ffe6-lib-browserify-0-0-1-package-tgz.lock
6879 silly gunzTarPerm modes [ '755', '644' ]
6880 http 200 https://registry.npmjs.org/postcss/-/postcss-0.2.0.tgz
6881 silly gunzTarPerm extractEntry test/dotted.js
6882 silly gunzTarPerm extractEntry test/long.js
6883 silly gunzTarPerm extractEntry package.json
6884 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
6885 silly gunzTarPerm extractEntry .npmignore
6886 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
6887 silly gunzTarPerm extractEntry index.js
6888 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
6889 silly gunzTarPerm extractEntry test/parse.js
6890 silly gunzTarPerm extractEntry test/parse_modified.js
6891 silly gunzTarPerm extractEntry zlib.js
6892 silly gunzTarPerm modified mode [ 'zlib.js', 438, 420 ]
6893 silly gunzTarPerm extractEntry readme.md
6894 silly gunzTarPerm modified mode [ 'readme.md', 438, 420 ]
6895 silly gunzTarPerm extractEntry test/zlib.test.js
6896 silly gunzTarPerm modified mode [ 'test/zlib.test.js', 438, 420 ]
6897 silly gunzTarPerm extractEntry test/short.js
6898 silly gunzTarPerm extractEntry test/whitespace.js
6899 http 200 https://registry.npmjs.org/formidable/1.0.14
6900 silly registry.get cb [ 200,
6900 silly registry.get   { date: 'Fri, 03 Jan 2014 19:38:38 GMT',
6900 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
6900 silly registry.get     etag: '"48MYZ9QW5PG97A1Y437Y1GCON"',
6900 silly registry.get     'content-type': 'application/json',
6900 silly registry.get     'content-length': '14687',
6900 silly registry.get     'accept-ranges': 'bytes',
6900 silly registry.get     via: '1.1 varnish',
6900 silly registry.get     age: '78347',
6900 silly registry.get     'x-served-by': 'cache-d46-DAL',
6900 silly registry.get     'x-cache': 'HIT',
6900 silly registry.get     'x-cache-hits': '1',
6900 silly registry.get     'x-timer': 'S1388777918.046748161,VS0,VE10',
6900 silly registry.get     vary: 'Accept',
6900 silly registry.get     'keep-alive': 'timeout=10, max=49',
6900 silly registry.get     connection: 'Keep-Alive' } ]
6901 http 200 https://registry.npmjs.org/wordwrap/-/wordwrap-0.0.2.tgz
6902 silly lockFile d5dd65bf-formidable-formidable-1-0-14-tgz https://registry.npmjs.org/formidable/-/formidable-1.0.14.tgz
6903 verbose lock https://registry.npmjs.org/formidable/-/formidable-1.0.14.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\d5dd65bf-formidable-formidable-1-0-14-tgz.lock
6904 verbose addRemoteTarball [ 'https://registry.npmjs.org/formidable/-/formidable-1.0.14.tgz',
6904 verbose addRemoteTarball   '2b3f4c411cbb5fdd695c44843e2a23514a43231a' ]
6905 info retry fetch attempt 1 at 16:39:37
6906 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777977953-0.29677222832106054\tmp.tgz
6907 http GET https://registry.npmjs.org/formidable/-/formidable-1.0.14.tgz
6908 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777977086-0.24168873974122107\tmp.tgz
6909 silly lockFile 17c5f6ae-7086-0-24168873974122107-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777977086-0.24168873974122107\package
6910 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777977086-0.24168873974122107\package C:\Users\Gaston\AppData\Roaming\npm-cache\17c5f6ae-7086-0-24168873974122107-package.lock
6911 silly lockFile f029cf55-7086-0-24168873974122107-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777977086-0.24168873974122107\tmp.tgz
6912 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777977086-0.24168873974122107\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\f029cf55-7086-0-24168873974122107-tmp-tgz.lock
6913 silly lockFile 5aa357df-he-zlib-browserify-0-0-1-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\zlib-browserify\0.0.1\package
6914 silly lockFile 5aa357df-he-zlib-browserify-0-0-1-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\zlib-browserify\0.0.1\package
6915 silly lockFile d0a3ffe6-lib-browserify-0-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\zlib-browserify\0.0.1\package.tgz
6916 silly lockFile d0a3ffe6-lib-browserify-0-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\zlib-browserify\0.0.1\package.tgz
6917 silly gunzTarPerm modes [ '755', '644' ]
6918 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\zlib-browserify\0.0.1\package.tgz 644
6919 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\zlib-browserify\0.0.1\package.tgz
6920 silly lockFile cb2295c0-serify-zlib-browserify-0-0-1-tgz https://registry.npmjs.org/zlib-browserify/-/zlib-browserify-0.0.1.tgz
6921 silly lockFile cb2295c0-serify-zlib-browserify-0-0-1-tgz https://registry.npmjs.org/zlib-browserify/-/zlib-browserify-0.0.1.tgz
6922 silly lockFile 84e77944-zlib-browserify-0-0-1 zlib-browserify@0.0.1
6923 silly lockFile 84e77944-zlib-browserify-0-0-1 zlib-browserify@0.0.1
6924 silly gunzTarPerm extractEntry index.js
6925 silly resolved [ { name: 'zlib-browserify',
6925 silly resolved     version: '0.0.1',
6925 silly resolved     description: 'Wrapper for zlib.js to allow for browserifyication',
6925 silly resolved     main: 'index.js',
6925 silly resolved     directories: { test: 'test' },
6925 silly resolved     dependencies: {},
6925 silly resolved     devDependencies: { tap: '~0.3.3' },
6925 silly resolved     scripts: { test: './node_modules/tap test/*.test.js' },
6925 silly resolved     repository:
6925 silly resolved      { type: 'git',
6925 silly resolved        url: 'git://github.com/brianloveswords/zlib-browserify.git' },
6925 silly resolved     keywords: [ 'zlib', 'browserify' ],
6925 silly resolved     author: { name: 'Brian J. Brennan' },
6925 silly resolved     license: 'MIT',
6925 silly resolved     gitHead: '4be9419f0e8e9dec9629c8a538b33a4efd7df17b',
6925 silly resolved     readmeFilename: 'readme.md',
6925 silly resolved     readme: 'Zlib in yo\' browser.\n',
6925 silly resolved     bugs: { url: 'https://github.com/brianloveswords/zlib-browserify/issues' },
6925 silly resolved     homepage: 'https://github.com/brianloveswords/zlib-browserify',
6925 silly resolved     _id: 'zlib-browserify@0.0.1',
6925 silly resolved     dist: { shasum: '1e602e866cf264fbc1aacf0d44b697c75c933e11' },
6925 silly resolved     _from: 'zlib-browserify@0.0.1',
6925 silly resolved     _resolved: 'https://registry.npmjs.org/zlib-browserify/-/zlib-browserify-0.0.1.tgz' } ]
6926 info install zlib-browserify@0.0.1 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-cssmin\node_modules\grunt-lib-contrib
6927 info installOne zlib-browserify@0.0.1
6928 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-cssmin\node_modules\grunt-lib-contrib\node_modules\zlib-browserify unbuild
6929 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\zlib-browserify\0.0.1\package.tgz
6930 silly lockFile a5663f74-rib-node-modules-zlib-browserify tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-cssmin\node_modules\grunt-lib-contrib\node_modules\zlib-browserify
6931 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-cssmin\node_modules\grunt-lib-contrib\node_modules\zlib-browserify C:\Users\Gaston\AppData\Roaming\npm-cache\a5663f74-rib-node-modules-zlib-browserify.lock
6932 silly lockFile d0a3ffe6-lib-browserify-0-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\zlib-browserify\0.0.1\package.tgz
6933 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\zlib-browserify\0.0.1\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\d0a3ffe6-lib-browserify-0-0-1-package-tgz.lock
6934 silly gunzTarPerm extractEntry .npmignore
6935 silly gunzTarPerm extractEntry package.json
6936 silly gunzTarPerm modes [ '755', '644' ]
6937 silly gunzTarPerm extractEntry package.json
6938 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
6939 silly gunzTarPerm extractEntry .npmignore
6940 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
6941 silly gunzTarPerm extractEntry index.js
6942 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
6943 silly gunzTarPerm extractEntry README.markdown
6944 silly gunzTarPerm extractEntry example/center.js
6945 silly gunzTarPerm extractEntry example/meat.js
6946 silly gunzTarPerm extractEntry test/wrap.js
6947 silly gunzTarPerm extractEntry zlib.js
6948 silly gunzTarPerm modified mode [ 'zlib.js', 438, 420 ]
6949 silly gunzTarPerm extractEntry readme.md
6950 silly gunzTarPerm modified mode [ 'readme.md', 438, 420 ]
6951 silly gunzTarPerm extractEntry test/zlib.test.js
6952 silly gunzTarPerm modified mode [ 'test/zlib.test.js', 438, 420 ]
6953 silly gunzTarPerm extractEntry test/break.js
6954 silly gunzTarPerm extractEntry test/idleness.txt
6955 silly lockFile b66c42f6-67473-0-7807188662700355-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777967473-0.7807188662700355\package
6956 silly lockFile b66c42f6-67473-0-7807188662700355-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777967473-0.7807188662700355\package
6957 silly lockFile 465c2573-67473-0-7807188662700355-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777967473-0.7807188662700355\tmp.tgz
6958 silly lockFile 465c2573-67473-0-7807188662700355-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777967473-0.7807188662700355\tmp.tgz
6959 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\minimist\\0.0.5\\package.tgz',
6959 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388777967473-0.7807188662700355\\package' ]
6960 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\minimist\0.0.5\package.tgz
6961 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777967473-0.7807188662700355\package
6962 silly lockFile b66c42f6-67473-0-7807188662700355-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777967473-0.7807188662700355\package
6963 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777967473-0.7807188662700355\package C:\Users\Gaston\AppData\Roaming\npm-cache\b66c42f6-67473-0-7807188662700355-package.lock
6964 silly lockFile b5128db8-cache-minimist-0-0-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\minimist\0.0.5\package.tgz
6965 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\minimist\0.0.5\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\b5128db8-cache-minimist-0-0-5-package-tgz.lock
6966 http 200 https://registry.npmjs.org/cookie-signature/1.0.1
6967 silly registry.get cb [ 200,
6967 silly registry.get   { date: 'Fri, 03 Jan 2014 19:38:38 GMT',
6967 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
6967 silly registry.get     etag: '"DS6KV47WCDBE61DF5M0YJERI9"',
6967 silly registry.get     'content-type': 'application/json',
6967 silly registry.get     'content-length': '2199',
6967 silly registry.get     'accept-ranges': 'bytes',
6967 silly registry.get     via: '1.1 varnish',
6967 silly registry.get     age: '196',
6967 silly registry.get     'x-served-by': 'cache-d46-DAL',
6967 silly registry.get     'x-cache': 'HIT',
6967 silly registry.get     'x-cache-hits': '1',
6967 silly registry.get     'x-timer': 'S1388777918.831710815,VS0,VE12',
6967 silly registry.get     vary: 'Accept',
6967 silly registry.get     'keep-alive': 'timeout=10, max=48',
6967 silly registry.get     connection: 'Keep-Alive' } ]
6968 silly lockFile 8b0b446f-ature-cookie-signature-1-0-1-tgz https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.1.tgz
6969 verbose lock https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.1.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\8b0b446f-ature-cookie-signature-1-0-1-tgz.lock
6970 verbose addRemoteTarball [ 'https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.1.tgz',
6970 verbose addRemoteTarball   '44e072148af01e6e8e24afbf12690d68ae698ecb' ]
6971 info retry fetch attempt 1 at 16:39:38
6972 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978176-0.674945306731388\tmp.tgz
6973 http GET https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.1.tgz
6974 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777970981-0.7418503221124411\tmp.tgz
6975 silly lockFile b00e6824-70981-0-7418503221124411-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777970981-0.7418503221124411\package
6976 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777970981-0.7418503221124411\package C:\Users\Gaston\AppData\Roaming\npm-cache\b00e6824-70981-0-7418503221124411-package.lock
6977 silly lockFile 818d5162-70981-0-7418503221124411-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777970981-0.7418503221124411\tmp.tgz
6978 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777970981-0.7418503221124411\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\818d5162-70981-0-7418503221124411-tmp-tgz.lock
6979 silly gunzTarPerm modes [ '755', '644' ]
6980 silly gunzTarPerm extractEntry package.json
6981 silly gunzTarPerm extractEntry README.md
6982 silly gunzTarPerm extractEntry LICENSE
6983 silly gunzTarPerm extractEntry ChangeLog.md
6984 silly gunzTarPerm extractEntry lib/at-rule.js
6985 silly gunzTarPerm extractEntry lib/generate-map.js
6986 silly gunzTarPerm extractEntry lib/list.js
6987 silly gunzTarPerm extractEntry lib/node.js
6988 silly gunzTarPerm extractEntry lib/parse.js
6989 silly gunzTarPerm extractEntry lib/declaration.js
6990 silly gunzTarPerm extractEntry lib/raw.js
6991 silly gunzTarPerm extractEntry lib/result.js
6992 silly gunzTarPerm extractEntry lib/root.js
6993 silly gunzTarPerm extractEntry lib/rule.js
6994 silly gunzTarPerm extractEntry lib/syntax-error.js
6995 silly gunzTarPerm extractEntry lib/container.js
6996 silly gunzTarPerm extractEntry lib/vendor.js
6997 silly gunzTarPerm extractEntry lib/postcss.js
6998 silly lockFile b66c42f6-67473-0-7807188662700355-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777967473-0.7807188662700355\package
6999 silly lockFile b66c42f6-67473-0-7807188662700355-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777967473-0.7807188662700355\package
7000 silly lockFile b5128db8-cache-minimist-0-0-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\minimist\0.0.5\package.tgz
7001 silly lockFile b5128db8-cache-minimist-0-0-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\minimist\0.0.5\package.tgz
7002 silly lockFile a5663f74-rib-node-modules-zlib-browserify tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-cssmin\node_modules\grunt-lib-contrib\node_modules\zlib-browserify
7003 silly lockFile a5663f74-rib-node-modules-zlib-browserify tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-cssmin\node_modules\grunt-lib-contrib\node_modules\zlib-browserify
7004 silly lockFile 17c5f6ae-7086-0-24168873974122107-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777977086-0.24168873974122107\package
7005 silly lockFile 17c5f6ae-7086-0-24168873974122107-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777977086-0.24168873974122107\package
7006 silly lockFile d0a3ffe6-lib-browserify-0-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\zlib-browserify\0.0.1\package.tgz
7007 silly lockFile d0a3ffe6-lib-browserify-0-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\zlib-browserify\0.0.1\package.tgz
7008 silly lockFile f029cf55-7086-0-24168873974122107-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777977086-0.24168873974122107\tmp.tgz
7009 silly lockFile f029cf55-7086-0-24168873974122107-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777977086-0.24168873974122107\tmp.tgz
7010 silly lockFile e017cd7a-npm-cache-minimist-0-0-5-package C:\Users\Gaston\AppData\Roaming\npm-cache\minimist\0.0.5\package
7011 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\minimist\0.0.5\package C:\Users\Gaston\AppData\Roaming\npm-cache\e017cd7a-npm-cache-minimist-0-0-5-package.lock
7012 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\wordwrap\\0.0.2\\package.tgz',
7012 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388777977086-0.24168873974122107\\package' ]
7013 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\wordwrap\0.0.2\package.tgz
7014 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777977086-0.24168873974122107\package
7015 silly lockFile 17c5f6ae-7086-0-24168873974122107-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777977086-0.24168873974122107\package
7016 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777977086-0.24168873974122107\package C:\Users\Gaston\AppData\Roaming\npm-cache\17c5f6ae-7086-0-24168873974122107-package.lock
7017 silly lockFile 1360ffb0-cache-wordwrap-0-0-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\wordwrap\0.0.2\package.tgz
7018 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\wordwrap\0.0.2\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\1360ffb0-cache-wordwrap-0-0-2-package-tgz.lock
7019 silly lockFile e017cd7a-npm-cache-minimist-0-0-5-package C:\Users\Gaston\AppData\Roaming\npm-cache\minimist\0.0.5\package
7020 silly lockFile e017cd7a-npm-cache-minimist-0-0-5-package C:\Users\Gaston\AppData\Roaming\npm-cache\minimist\0.0.5\package
7021 info preinstall zlib-browserify@0.0.1
7022 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\minimist\0.0.5\package.tgz
7023 silly lockFile c55b44ea-npm-cache-minimist-0-0-5-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\minimist\0.0.5\package
7024 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\minimist\0.0.5\package C:\Users\Gaston\AppData\Roaming\npm-cache\c55b44ea-npm-cache-minimist-0-0-5-package.lock
7025 silly lockFile b5128db8-cache-minimist-0-0-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\minimist\0.0.5\package.tgz
7026 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\minimist\0.0.5\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\b5128db8-cache-minimist-0-0-5-package-tgz.lock
7027 verbose readDependencies using package.json deps
7028 verbose readDependencies using package.json deps
7029 silly resolved []
7030 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-cssmin\node_modules\grunt-lib-contrib\node_modules\zlib-browserify
7031 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-cssmin\node_modules\grunt-lib-contrib\node_modules\zlib-browserify
7032 verbose linkStuff [ false,
7032 verbose linkStuff   false,
7032 verbose linkStuff   false,
7032 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-contrib-cssmin\\node_modules\\grunt-lib-contrib\\node_modules' ]
7033 info linkStuff zlib-browserify@0.0.1
7034 verbose linkBins zlib-browserify@0.0.1
7035 verbose linkMans zlib-browserify@0.0.1
7036 verbose rebuildBundles zlib-browserify@0.0.1
7037 silly gunzTarPerm modes [ '755', '644' ]
7038 info install zlib-browserify@0.0.1
7039 info postinstall zlib-browserify@0.0.1
7040 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-cssmin\node_modules\grunt-lib-contrib
7041 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-cssmin\node_modules\grunt-lib-contrib
7042 verbose linkStuff [ false,
7042 verbose linkStuff   false,
7042 verbose linkStuff   false,
7042 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-contrib-cssmin\\node_modules' ]
7043 info linkStuff grunt-lib-contrib@0.6.1
7044 verbose linkBins grunt-lib-contrib@0.6.1
7045 verbose linkMans grunt-lib-contrib@0.6.1
7046 verbose rebuildBundles grunt-lib-contrib@0.6.1
7047 verbose rebuildBundles [ 'zlib-browserify' ]
7048 info install grunt-lib-contrib@0.6.1
7049 silly gunzTarPerm extractEntry package.json
7050 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
7051 info postinstall grunt-lib-contrib@0.6.1
7052 silly gunzTarPerm extractEntry LICENSE
7053 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
7054 silly gunzTarPerm extractEntry index.js
7055 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
7056 http 200 https://registry.npmjs.org/qs/0.6.5
7057 silly registry.get cb [ 200,
7057 silly registry.get   { date: 'Fri, 03 Jan 2014 19:38:39 GMT',
7057 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
7057 silly registry.get     etag: '"8W5B994EWB3J3QL358YHNQJKP"',
7057 silly registry.get     'content-type': 'application/json',
7057 silly registry.get     'content-length': '2756',
7057 silly registry.get     'accept-ranges': 'bytes',
7057 silly registry.get     via: '1.1 varnish',
7057 silly registry.get     age: '9515',
7057 silly registry.get     'x-served-by': 'cache-d46-DAL',
7057 silly registry.get     'x-cache': 'HIT',
7057 silly registry.get     'x-cache-hits': '1',
7057 silly registry.get     'x-timer': 'S1388777919.121178865,VS0,VE13',
7057 silly registry.get     vary: 'Accept',
7057 silly registry.get     'keep-alive': 'timeout=10, max=47',
7057 silly registry.get     connection: 'Keep-Alive' } ]
7058 silly gunzTarPerm extractEntry .travis.yml
7059 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]
7060 silly gunzTarPerm extractEntry example/parse.js
7061 silly gunzTarPerm modified mode [ 'example/parse.js', 438, 420 ]
7062 silly lockFile 45ccff3d-gistry-npmjs-org-qs-qs-0-6-5-tgz https://registry.npmjs.org/qs/-/qs-0.6.5.tgz
7063 verbose lock https://registry.npmjs.org/qs/-/qs-0.6.5.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\45ccff3d-gistry-npmjs-org-qs-qs-0-6-5-tgz.lock
7064 verbose addRemoteTarball [ 'https://registry.npmjs.org/qs/-/qs-0.6.5.tgz',
7064 verbose addRemoteTarball   '294b268e4b0d4250f6dde19b3b8b34935dff14ef' ]
7065 info retry fetch attempt 1 at 16:39:38
7066 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978463-0.045157130574807525\tmp.tgz
7067 http GET https://registry.npmjs.org/qs/-/qs-0.6.5.tgz
7068 silly gunzTarPerm extractEntry readme.markdown
7069 silly gunzTarPerm modified mode [ 'readme.markdown', 438, 420 ]
7070 silly gunzTarPerm extractEntry test/dash.js
7071 silly gunzTarPerm modified mode [ 'test/dash.js', 438, 420 ]
7072 silly gunzTarPerm extractEntry test/default_bool.js
7073 silly gunzTarPerm modified mode [ 'test/default_bool.js', 438, 420 ]
7074 info trying registry request attempt 2 at 16:39:38
7075 http GET https://registry.npmjs.org/strip-ansi
7076 silly gunzTarPerm extractEntry test/dotted.js
7077 silly gunzTarPerm modified mode [ 'test/dotted.js', 438, 420 ]
7078 silly gunzTarPerm extractEntry test/long.js
7079 silly gunzTarPerm modified mode [ 'test/long.js', 438, 420 ]
7080 silly gunzTarPerm extractEntry test/parse.js
7081 silly gunzTarPerm modified mode [ 'test/parse.js', 438, 420 ]
7082 silly gunzTarPerm extractEntry test/parse_modified.js
7083 silly gunzTarPerm modified mode [ 'test/parse_modified.js', 438, 420 ]
7084 silly lockFile 7f8b7bdc-4321-0-09715697355568409-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777964321-0.09715697355568409\package
7085 silly lockFile 7f8b7bdc-4321-0-09715697355568409-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777964321-0.09715697355568409\package
7086 silly lockFile c847d36b-4321-0-09715697355568409-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777964321-0.09715697355568409\tmp.tgz
7087 silly lockFile c847d36b-4321-0-09715697355568409-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777964321-0.09715697355568409\tmp.tgz
7088 silly gunzTarPerm extractEntry test/short.js
7089 silly gunzTarPerm modified mode [ 'test/short.js', 438, 420 ]
7090 silly gunzTarPerm extractEntry test/whitespace.js
7091 silly gunzTarPerm modified mode [ 'test/whitespace.js', 438, 420 ]
7092 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\gaze\\0.4.3\\package.tgz',
7092 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388777964321-0.09715697355568409\\package' ]
7093 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\gaze\0.4.3\package.tgz
7094 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777964321-0.09715697355568409\package
7095 silly lockFile 7f8b7bdc-4321-0-09715697355568409-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777964321-0.09715697355568409\package
7096 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777964321-0.09715697355568409\package C:\Users\Gaston\AppData\Roaming\npm-cache\7f8b7bdc-4321-0-09715697355568409-package.lock
7097 silly lockFile 11fcaf92-npm-cache-gaze-0-4-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\gaze\0.4.3\package.tgz
7098 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\gaze\0.4.3\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\11fcaf92-npm-cache-gaze-0-4-3-package-tgz.lock
7099 silly lockFile 17c5f6ae-7086-0-24168873974122107-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777977086-0.24168873974122107\package
7100 silly lockFile 17c5f6ae-7086-0-24168873974122107-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777977086-0.24168873974122107\package
7101 silly lockFile 1360ffb0-cache-wordwrap-0-0-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\wordwrap\0.0.2\package.tgz
7102 silly lockFile 1360ffb0-cache-wordwrap-0-0-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\wordwrap\0.0.2\package.tgz
7103 silly lockFile 6c9ecec5-npm-cache-wordwrap-0-0-2-package C:\Users\Gaston\AppData\Roaming\npm-cache\wordwrap\0.0.2\package
7104 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\wordwrap\0.0.2\package C:\Users\Gaston\AppData\Roaming\npm-cache\6c9ecec5-npm-cache-wordwrap-0-0-2-package.lock
7105 silly lockFile 6c9ecec5-npm-cache-wordwrap-0-0-2-package C:\Users\Gaston\AppData\Roaming\npm-cache\wordwrap\0.0.2\package
7106 silly lockFile 6c9ecec5-npm-cache-wordwrap-0-0-2-package C:\Users\Gaston\AppData\Roaming\npm-cache\wordwrap\0.0.2\package
7107 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\wordwrap\0.0.2\package.tgz
7108 silly lockFile 8251c5da-npm-cache-wordwrap-0-0-2-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\wordwrap\0.0.2\package
7109 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\wordwrap\0.0.2\package C:\Users\Gaston\AppData\Roaming\npm-cache\8251c5da-npm-cache-wordwrap-0-0-2-package.lock
7110 silly lockFile 1360ffb0-cache-wordwrap-0-0-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\wordwrap\0.0.2\package.tgz
7111 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\wordwrap\0.0.2\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\1360ffb0-cache-wordwrap-0-0-2-package-tgz.lock
7112 silly gunzTarPerm modes [ '755', '644' ]
7113 silly gunzTarPerm extractEntry package.json
7114 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
7115 http 200 https://registry.npmjs.org/buffer-crc32/0.2.1
7116 silly registry.get cb [ 200,
7116 silly registry.get   { date: 'Fri, 03 Jan 2014 19:38:39 GMT',
7116 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
7116 silly registry.get     etag: '"7L615F1OYDV1Y8DXJ3DHJ2NVK"',
7116 silly registry.get     'content-type': 'application/json',
7116 silly registry.get     'content-length': '2483',
7116 silly registry.get     'accept-ranges': 'bytes',
7116 silly registry.get     via: '1.1 varnish',
7116 silly registry.get     age: '9544',
7116 silly registry.get     'x-served-by': 'cache-d46-DAL',
7116 silly registry.get     'x-cache': 'HIT',
7116 silly registry.get     'x-cache-hits': '1',
7116 silly registry.get     'x-timer': 'S1388777919.400696516,VS0,VE13',
7116 silly registry.get     vary: 'Accept',
7116 silly registry.get     'keep-alive': 'timeout=10, max=46',
7116 silly registry.get     connection: 'Keep-Alive' } ]
7117 silly gunzTarPerm extractEntry .npmignore
7118 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
7119 silly gunzTarPerm extractEntry index.js
7120 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
7121 silly lockFile bc249dfa-fer-crc32-buffer-crc32-0-2-1-tgz https://registry.npmjs.org/buffer-crc32/-/buffer-crc32-0.2.1.tgz
7122 verbose lock https://registry.npmjs.org/buffer-crc32/-/buffer-crc32-0.2.1.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\bc249dfa-fer-crc32-buffer-crc32-0-2-1-tgz.lock
7123 silly gunzTarPerm extractEntry example/center.js
7124 silly gunzTarPerm modified mode [ 'example/center.js', 438, 420 ]
7125 silly gunzTarPerm extractEntry example/meat.js
7126 silly gunzTarPerm modified mode [ 'example/meat.js', 438, 420 ]
7127 verbose addRemoteTarball [ 'https://registry.npmjs.org/buffer-crc32/-/buffer-crc32-0.2.1.tgz',
7127 verbose addRemoteTarball   'be3e5382fc02b6d6324956ac1af98aa98b08534c' ]
7128 info retry fetch attempt 1 at 16:39:38
7129 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978771-0.457123247673735\tmp.tgz
7130 http GET https://registry.npmjs.org/buffer-crc32/-/buffer-crc32-0.2.1.tgz
7131 silly gunzTarPerm extractEntry README.markdown
7132 silly gunzTarPerm modified mode [ 'README.markdown', 438, 420 ]
7133 silly gunzTarPerm extractEntry test/break.js
7134 silly gunzTarPerm modified mode [ 'test/break.js', 438, 420 ]
7135 silly gunzTarPerm extractEntry test/wrap.js
7136 silly gunzTarPerm modified mode [ 'test/wrap.js', 438, 420 ]
7137 silly gunzTarPerm extractEntry test/idleness.txt
7138 silly gunzTarPerm modified mode [ 'test/idleness.txt', 438, 420 ]
7139 silly lockFile c55b44ea-npm-cache-minimist-0-0-5-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\minimist\0.0.5\package
7140 silly lockFile c55b44ea-npm-cache-minimist-0-0-5-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\minimist\0.0.5\package
7141 silly lockFile b5128db8-cache-minimist-0-0-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\minimist\0.0.5\package.tgz
7142 silly lockFile b5128db8-cache-minimist-0-0-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\minimist\0.0.5\package.tgz
7143 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\minimist\0.0.5\package.tgz 644
7144 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\minimist\0.0.5\package.tgz
7145 silly lockFile 17e7d0d6--org-minimist-minimist-0-0-5-tgz https://registry.npmjs.org/minimist/-/minimist-0.0.5.tgz
7146 silly lockFile 17e7d0d6--org-minimist-minimist-0-0-5-tgz https://registry.npmjs.org/minimist/-/minimist-0.0.5.tgz
7147 silly lockFile 7b943d62-minimist-0-0-5 minimist@0.0.5
7148 silly lockFile 7b943d62-minimist-0-0-5 minimist@0.0.5
7149 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777944582-0.11388398800045252\tmp.tgz
7150 silly lockFile 6d968301-4582-0-11388398800045252-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777944582-0.11388398800045252\package
7151 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777944582-0.11388398800045252\package C:\Users\Gaston\AppData\Roaming\npm-cache\6d968301-4582-0-11388398800045252-package.lock
7152 silly lockFile 0a8cc3d4-4582-0-11388398800045252-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777944582-0.11388398800045252\tmp.tgz
7153 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777944582-0.11388398800045252\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\0a8cc3d4-4582-0-11388398800045252-tmp-tgz.lock
7154 silly lockFile 7a855a96-minimist-0-0-1 minimist@~0.0.1
7155 silly lockFile 7a855a96-minimist-0-0-1 minimist@~0.0.1
7156 silly gunzTarPerm modes [ '755', '644' ]
7157 silly gunzTarPerm extractEntry package.json
7158 silly gunzTarPerm extractEntry README.md
7159 silly gunzTarPerm extractEntry LICENSE
7160 silly gunzTarPerm extractEntry component.json
7161 silly gunzTarPerm extractEntry lib/async.js
7162 silly lockFile b00e6824-70981-0-7418503221124411-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777970981-0.7418503221124411\package
7163 silly lockFile b00e6824-70981-0-7418503221124411-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777970981-0.7418503221124411\package
7164 silly lockFile 818d5162-70981-0-7418503221124411-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777970981-0.7418503221124411\tmp.tgz
7165 silly lockFile 818d5162-70981-0-7418503221124411-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777970981-0.7418503221124411\tmp.tgz
7166 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\postcss\\0.2.0\\package.tgz',
7166 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388777970981-0.7418503221124411\\package' ]
7167 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\postcss\0.2.0\package.tgz
7168 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777970981-0.7418503221124411\package
7169 silly lockFile b00e6824-70981-0-7418503221124411-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777970981-0.7418503221124411\package
7170 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777970981-0.7418503221124411\package C:\Users\Gaston\AppData\Roaming\npm-cache\b00e6824-70981-0-7418503221124411-package.lock
7171 silly lockFile 5ebcce83--cache-postcss-0-2-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\postcss\0.2.0\package.tgz
7172 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\postcss\0.2.0\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\5ebcce83--cache-postcss-0-2-0-package-tgz.lock
7173 http 200 https://registry.npmjs.org/send/0.1.1
7174 silly registry.get cb [ 200,
7174 silly registry.get   { date: 'Fri, 03 Jan 2014 19:38:39 GMT',
7174 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
7174 silly registry.get     etag: '"1SQBS74B0GYW4SOQ7ZZ2MT46C"',
7174 silly registry.get     'content-type': 'application/json',
7174 silly registry.get     'content-length': '4697',
7174 silly registry.get     'accept-ranges': 'bytes',
7174 silly registry.get     via: '1.1 varnish',
7174 silly registry.get     age: '24573',
7174 silly registry.get     'x-served-by': 'cache-d46-DAL',
7174 silly registry.get     'x-cache': 'HIT',
7174 silly registry.get     'x-cache-hits': '1',
7174 silly registry.get     'x-timer': 'S1388777919.702620983,VS0,VE8',
7174 silly registry.get     vary: 'Accept',
7174 silly registry.get     'keep-alive': 'timeout=10, max=45',
7174 silly registry.get     connection: 'Keep-Alive' } ]
7175 silly lockFile f12c24a6-ry-npmjs-org-send-send-0-1-1-tgz https://registry.npmjs.org/send/-/send-0.1.1.tgz
7176 verbose lock https://registry.npmjs.org/send/-/send-0.1.1.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\f12c24a6-ry-npmjs-org-send-send-0-1-1-tgz.lock
7177 verbose addRemoteTarball [ 'https://registry.npmjs.org/send/-/send-0.1.1.tgz',
7177 verbose addRemoteTarball   '0bcfcbd03def6e2d8612e1abf8f4895b450c60c8' ]
7178 info retry fetch attempt 1 at 16:39:39
7179 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979115-0.7692725793458521\tmp.tgz
7180 http GET https://registry.npmjs.org/send/-/send-0.1.1.tgz
7181 silly lockFile 7f8b7bdc-4321-0-09715697355568409-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777964321-0.09715697355568409\package
7182 silly lockFile 7f8b7bdc-4321-0-09715697355568409-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777964321-0.09715697355568409\package
7183 silly lockFile 11fcaf92-npm-cache-gaze-0-4-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\gaze\0.4.3\package.tgz
7184 silly lockFile 11fcaf92-npm-cache-gaze-0-4-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\gaze\0.4.3\package.tgz
7185 silly lockFile 8251c5da-npm-cache-wordwrap-0-0-2-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\wordwrap\0.0.2\package
7186 silly lockFile 8251c5da-npm-cache-wordwrap-0-0-2-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\wordwrap\0.0.2\package
7187 silly lockFile 1360ffb0-cache-wordwrap-0-0-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\wordwrap\0.0.2\package.tgz
7188 silly lockFile 1360ffb0-cache-wordwrap-0-0-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\wordwrap\0.0.2\package.tgz
7189 silly lockFile 913fd36b-ing-npm-cache-gaze-0-4-3-package C:\Users\Gaston\AppData\Roaming\npm-cache\gaze\0.4.3\package
7190 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\gaze\0.4.3\package C:\Users\Gaston\AppData\Roaming\npm-cache\913fd36b-ing-npm-cache-gaze-0-4-3-package.lock
7191 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\wordwrap\0.0.2\package.tgz 644
7192 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\wordwrap\0.0.2\package.tgz
7193 silly lockFile 913fd36b-ing-npm-cache-gaze-0-4-3-package C:\Users\Gaston\AppData\Roaming\npm-cache\gaze\0.4.3\package
7194 silly lockFile 913fd36b-ing-npm-cache-gaze-0-4-3-package C:\Users\Gaston\AppData\Roaming\npm-cache\gaze\0.4.3\package
7195 silly lockFile 5fd8587b--org-wordwrap-wordwrap-0-0-2-tgz https://registry.npmjs.org/wordwrap/-/wordwrap-0.0.2.tgz
7196 silly lockFile 5fd8587b--org-wordwrap-wordwrap-0-0-2-tgz https://registry.npmjs.org/wordwrap/-/wordwrap-0.0.2.tgz
7197 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\gaze\0.4.3\package.tgz
7198 silly lockFile 9aa1ef7e-ing-npm-cache-gaze-0-4-3-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\gaze\0.4.3\package
7199 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\gaze\0.4.3\package C:\Users\Gaston\AppData\Roaming\npm-cache\9aa1ef7e-ing-npm-cache-gaze-0-4-3-package.lock
7200 silly lockFile 11fcaf92-npm-cache-gaze-0-4-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\gaze\0.4.3\package.tgz
7201 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\gaze\0.4.3\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\11fcaf92-npm-cache-gaze-0-4-3-package-tgz.lock
7202 silly lockFile 24a694c8-wordwrap-0-0-2 wordwrap@0.0.2
7203 silly lockFile 24a694c8-wordwrap-0-0-2 wordwrap@0.0.2
7204 silly lockFile 8bd42136-wordwrap-0-0-2 wordwrap@~0.0.2
7205 silly lockFile 8bd42136-wordwrap-0-0-2 wordwrap@~0.0.2
7206 silly gunzTarPerm modes [ '755', '644' ]
7207 silly resolved [ { name: 'minimist',
7207 silly resolved     version: '0.0.5',
7207 silly resolved     description: 'parse argument options',
7207 silly resolved     main: 'index.js',
7207 silly resolved     devDependencies: { tape: '~1.0.4', tap: '~0.4.0' },
7207 silly resolved     scripts: { test: 'tap test/*.js' },
7207 silly resolved     testling: { files: 'test/*.js', browsers: [Object] },
7207 silly resolved     repository: { type: 'git', url: 'git://github.com/substack/minimist.git' },
7207 silly resolved     homepage: 'https://github.com/substack/minimist',
7207 silly resolved     keywords: [ 'argv', 'getopt', 'parser', 'optimist' ],
7207 silly resolved     author:
7207 silly resolved      { name: 'James Halliday',
7207 silly resolved        email: 'mail@substack.net',
7207 silly resolved        url: 'http://substack.net' },
7207 silly resolved     license: 'MIT',
7207 silly resolved     readme: '# minimist\n\nparse argument options\n\nThis module is the guts of optimist\'s argument parser without all the\nfanciful decoration.\n\n[![browser support](https://ci.testling.com/substack/minimist.png)](http://ci.testling.com/substack/minimist)\n\n[![build status](https://secure.travis-ci.org/substack/minimist.png)](http://travis-ci.org/substack/minimist)\n\n# example\n\n``` js\nvar argv = require(\'minimist\')(process.argv.slice(2));\nconsole.dir(argv);\n```\n\n```\n$ node example/parse.js -a beep -b boop\n{ _: [], a: \'beep\', b: \'boop\' }\n```\n\n```\n$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz\n{ _: [ \'foo\', \'bar\', \'baz\' ],\n  x: 3,\n  y: 4,\n  n: 5,\n  a: true,\n  b: true,\n  c: true,\n  beep: \'boop\' }\n```\n\n# methods\n\n``` js\nvar parseArgs = require(\'minimist\')\n```\n\n## var argv = parseArgs(args, opts={})\n\nReturn an argument object `argv` populated with the array arguments from `args`.\n\n`argv._` contains all the arguments that didn\'t have an option associated with\nthem.\n\nNumeric-looking arguments will be returned as numbers unless `opts.string` or\n`opts.boolean` is set for that argument name.\n\nAny arguments after `\'--\'` will not be parsed and will end up in `argv._`.\n\noptions can be:\n\n* `opts.string` - a string or array of strings argument names to always treat as\nstrings\n* `opts.boolean` - a string or array of strings to always treat as booleans\n* `opts.alias` - an object mapping string names to strings or arrays of string\nargument names to use as aliases\n* `opts.default` - an object mapping string argument names to default values\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install minimist\n```\n\n# license\n\nMIT\n',
7207 silly resolved     readmeFilename: 'readme.markdown',
7207 silly resolved     bugs: { url: 'https://github.com/substack/minimist/issues' },
7207 silly resolved     _id: 'minimist@0.0.5',
7207 silly resolved     dist: { shasum: 'd1ce897206bbb994903d5ab7dff17f36c8243777' },
7207 silly resolved     _from: 'minimist@~0.0.1',
7207 silly resolved     _resolved: 'https://registry.npmjs.org/minimist/-/minimist-0.0.5.tgz' },
7207 silly resolved   { name: 'wordwrap',
7207 silly resolved     description: 'Wrap those words. Show them at what columns to start and stop.',
7207 silly resolved     version: '0.0.2',
7207 silly resolved     repository:
7207 silly resolved      { type: 'git',
7207 silly resolved        url: 'git://github.com/substack/node-wordwrap.git' },
7207 silly resolved     main: './index.js',
7207 silly resolved     keywords: [ 'word', 'wrap', 'rule', 'format', 'column' ],
7207 silly resolved     directories: { lib: '.', example: 'example', test: 'test' },
7207 silly resolved     scripts: { test: 'expresso' },
7207 silly resolved     devDependencies: { expresso: '=0.7.x' },
7207 silly resolved     engines: { node: '>=0.4.0' },
7207 silly resolved     license: 'MIT/X11',
7207 silly resolved     author:
7207 silly resolved      { name: 'James Halliday',
7207 silly resolved        email: 'mail@substack.net',
7207 silly resolved        url: 'http://substack.net' },
7207 silly resolved     readme: 'wordwrap\n========\n\nWrap your words.\n\nexample\n=======\n\nmade out of meat\n----------------\n\nmeat.js\n\n    var wrap = require(\'wordwrap\')(15);\n    console.log(wrap(\'You and your whole family are made out of meat.\'));\n\noutput:\n\n    You and your\n    whole family\n    are made out\n    of meat.\n\ncentered\n--------\n\ncenter.js\n\n    var wrap = require(\'wordwrap\')(20, 60);\n    console.log(wrap(\n        \'At long last the struggle and tumult was over.\'\n        + \' The machines had finally cast off their oppressors\'\n        + \' and were finally free to roam the cosmos.\'\n        + \'\\n\'\n        + \'Free of purpose, free of obligation.\'\n        + \' Just drifting through emptiness.\'\n        + \' The sun was just another point of light.\'\n    ));\n\noutput:\n\n                        At long last the struggle and tumult\n                        was over. The machines had finally cast\n                        off their oppressors and were finally\n                        free to roam the cosmos.\n                        Free of purpose, free of obligation.\n                        Just drifting through emptiness. The\n                        sun was just another point of light.\n\nmethods\n=======\n\nvar wrap = require(\'wordwrap\');\n\nwrap(stop), wrap(start, stop, params={mode:"soft"})\n---------------------------------------------------\n\nReturns a function that takes a string and returns a new string.\n\nPad out lines with spaces out to column `start` and then wrap until column\n`stop`. If a word is longer than `stop - start` characters it will overflow.\n\nIn "soft" mode, split chunks by `/(\\S+\\s+/` and don\'t break up chunks which are\nlonger than `stop - start`, in "hard" mode, split chunks with `/\\b/` and break\nup chunks longer than `stop - start`.\n\nwrap.hard(start, stop)\n----------------------\n\nLike `wrap()` but with `params.mode = "hard"`.\n',
7207 silly resolved     readmeFilename: 'README.markdown',
7207 silly resolved     bugs: { url: 'https://github.com/substack/node-wordwrap/issues' },
7207 silly resolved     homepage: 'https://github.com/substack/node-wordwrap',
7207 silly resolved     _id: 'wordwrap@0.0.2',
7207 silly resolved     dist: { shasum: '6b7443894f9745e1f5037e262d53d92dc09a8ec5' },
7207 silly resolved     _from: 'wordwrap@~0.0.2',
7207 silly resolved     _resolved: 'https://registry.npmjs.org/wordwrap/-/wordwrap-0.0.2.tgz' } ]
7208 info install minimist@0.0.5 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-karma\node_modules\optimist
7209 info install wordwrap@0.0.2 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-karma\node_modules\optimist
7210 info installOne minimist@0.0.5
7211 info installOne wordwrap@0.0.2
7212 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-karma\node_modules\optimist\node_modules\minimist unbuild
7213 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-karma\node_modules\optimist\node_modules\wordwrap unbuild
7214 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\minimist\0.0.5\package.tgz
7215 silly lockFile e842b660-s-optimist-node-modules-minimist tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-karma\node_modules\optimist\node_modules\minimist
7216 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-karma\node_modules\optimist\node_modules\minimist C:\Users\Gaston\AppData\Roaming\npm-cache\e842b660-s-optimist-node-modules-minimist.lock
7217 silly lockFile b5128db8-cache-minimist-0-0-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\minimist\0.0.5\package.tgz
7218 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\minimist\0.0.5\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\b5128db8-cache-minimist-0-0-5-package-tgz.lock
7219 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\wordwrap\0.0.2\package.tgz
7220 silly lockFile cd0cf561-s-optimist-node-modules-wordwrap tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-karma\node_modules\optimist\node_modules\wordwrap
7221 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-karma\node_modules\optimist\node_modules\wordwrap C:\Users\Gaston\AppData\Roaming\npm-cache\cd0cf561-s-optimist-node-modules-wordwrap.lock
7222 silly lockFile 1360ffb0-cache-wordwrap-0-0-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\wordwrap\0.0.2\package.tgz
7223 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\wordwrap\0.0.2\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\1360ffb0-cache-wordwrap-0-0-2-package-tgz.lock
7224 silly gunzTarPerm modes [ '755', '644' ]
7225 silly gunzTarPerm extractEntry package.json
7226 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
7227 silly gunzTarPerm modes [ '755', '644' ]
7228 silly gunzTarPerm extractEntry .npmignore
7229 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
7230 silly gunzTarPerm extractEntry README.md
7231 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
7232 silly gunzTarPerm extractEntry package.json
7233 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
7234 silly gunzTarPerm extractEntry package.json
7235 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
7236 silly gunzTarPerm extractEntry LICENSE
7237 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
7238 silly gunzTarPerm extractEntry index.js
7239 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
7240 silly gunzTarPerm extractEntry .npmignore
7241 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
7242 silly gunzTarPerm extractEntry index.js
7243 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
7244 silly gunzTarPerm extractEntry Gruntfile.js
7245 silly gunzTarPerm modified mode [ 'Gruntfile.js', 438, 420 ]
7246 silly gunzTarPerm extractEntry AUTHORS
7247 silly gunzTarPerm modified mode [ 'AUTHORS', 438, 420 ]
7248 silly gunzTarPerm extractEntry benchmarks/gaze100s.js
7249 silly gunzTarPerm modified mode [ 'benchmarks/gaze100s.js', 438, 420 ]
7250 silly gunzTarPerm extractEntry .jshintrc
7251 silly gunzTarPerm modified mode [ '.jshintrc', 438, 420 ]
7252 silly gunzTarPerm extractEntry .travis.yml
7253 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]
7254 silly gunzTarPerm extractEntry example/parse.js
7255 silly gunzTarPerm modified mode [ 'example/parse.js', 438, 420 ]
7256 silly gunzTarPerm extractEntry example/center.js
7257 silly gunzTarPerm modified mode [ 'example/center.js', 438, 420 ]
7258 silly gunzTarPerm extractEntry example/meat.js
7259 silly gunzTarPerm modified mode [ 'example/meat.js', 438, 420 ]
7260 silly gunzTarPerm extractEntry README.markdown
7261 silly gunzTarPerm modified mode [ 'README.markdown', 438, 420 ]
7262 silly gunzTarPerm extractEntry test/break.js
7263 silly gunzTarPerm modified mode [ 'test/break.js', 438, 420 ]
7264 silly gunzTarPerm extractEntry readme.markdown
7265 silly gunzTarPerm modified mode [ 'readme.markdown', 438, 420 ]
7266 silly gunzTarPerm extractEntry test/dash.js
7267 silly gunzTarPerm modified mode [ 'test/dash.js', 438, 420 ]
7268 silly gunzTarPerm extractEntry lib/gaze.js
7269 silly gunzTarPerm modified mode [ 'lib/gaze.js', 438, 420 ]
7270 silly gunzTarPerm extractEntry lib/helper.js
7271 silly gunzTarPerm modified mode [ 'lib/helper.js', 438, 420 ]
7272 silly gunzTarPerm extractEntry LICENSE-MIT
7273 silly gunzTarPerm modified mode [ 'LICENSE-MIT', 438, 420 ]
7274 silly gunzTarPerm extractEntry .editorconfig
7275 silly gunzTarPerm modified mode [ '.editorconfig', 438, 420 ]
7276 silly gunzTarPerm extractEntry .travis.yml
7277 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]
7278 silly gunzTarPerm extractEntry test/add_test.js
7279 silly gunzTarPerm modified mode [ 'test/add_test.js', 438, 420 ]
7280 silly gunzTarPerm extractEntry test/file_poller.js
7281 silly gunzTarPerm modified mode [ 'test/file_poller.js', 438, 420 ]
7282 silly gunzTarPerm extractEntry test/watch_race_test.js
7283 silly gunzTarPerm modified mode [ 'test/watch_race_test.js', 438, 420 ]
7284 silly gunzTarPerm extractEntry test/helper.js
7285 silly gunzTarPerm modified mode [ 'test/helper.js', 438, 420 ]
7286 silly gunzTarPerm extractEntry test/matching_test.js
7287 silly gunzTarPerm modified mode [ 'test/matching_test.js', 438, 420 ]
7288 silly gunzTarPerm extractEntry test/api_test.js
7289 silly gunzTarPerm modified mode [ 'test/api_test.js', 438, 420 ]
7290 silly gunzTarPerm extractEntry test/relative_test.js
7291 silly gunzTarPerm modified mode [ 'test/relative_test.js', 438, 420 ]
7292 silly gunzTarPerm extractEntry test/rename_test.js
7293 silly gunzTarPerm modified mode [ 'test/rename_test.js', 438, 420 ]
7294 silly gunzTarPerm extractEntry test/safewrite_test.js
7295 silly gunzTarPerm modified mode [ 'test/safewrite_test.js', 438, 420 ]
7296 silly gunzTarPerm extractEntry test/watch_test.js
7297 silly gunzTarPerm modified mode [ 'test/watch_test.js', 438, 420 ]
7298 silly gunzTarPerm extractEntry test/patterns_test.js
7299 silly gunzTarPerm modified mode [ 'test/patterns_test.js', 438, 420 ]
7300 silly gunzTarPerm extractEntry test/fixtures/one.js
7301 silly gunzTarPerm modified mode [ 'test/fixtures/one.js', 438, 420 ]
7302 silly gunzTarPerm extractEntry test/fixtures/nested/one.js
7303 silly gunzTarPerm modified mode [ 'test/fixtures/nested/one.js', 438, 420 ]
7304 silly gunzTarPerm extractEntry test/fixtures/nested/three.js
7305 silly gunzTarPerm modified mode [ 'test/fixtures/nested/three.js', 438, 420 ]
7306 silly gunzTarPerm extractEntry test/fixtures/nested/sub/two.js
7307 silly gunzTarPerm modified mode [ 'test/fixtures/nested/sub/two.js', 438, 420 ]
7308 silly gunzTarPerm extractEntry test/fixtures/nested/sub2/two.js
7309 silly gunzTarPerm modified mode [ 'test/fixtures/nested/sub2/two.js', 438, 420 ]
7310 silly gunzTarPerm extractEntry test/fixtures/Project (LO)/one.js
7311 silly gunzTarPerm modified mode [ 'test/fixtures/Project (LO)/one.js', 438, 420 ]
7312 silly gunzTarPerm extractEntry test/fixtures/sub/one.js
7313 silly gunzTarPerm modified mode [ 'test/fixtures/sub/one.js', 438, 420 ]
7314 silly gunzTarPerm extractEntry test/fixtures/sub/two.js
7315 silly gunzTarPerm modified mode [ 'test/fixtures/sub/two.js', 438, 420 ]
7316 silly gunzTarPerm extractEntry test/wrap.js
7317 silly gunzTarPerm modified mode [ 'test/wrap.js', 438, 420 ]
7318 silly gunzTarPerm extractEntry test/idleness.txt
7319 silly gunzTarPerm modified mode [ 'test/idleness.txt', 438, 420 ]
7320 silly gunzTarPerm extractEntry test/default_bool.js
7321 silly gunzTarPerm modified mode [ 'test/default_bool.js', 438, 420 ]
7322 http 200 https://registry.npmjs.org/cookie/0.0.5
7323 silly registry.get cb [ 200,
7323 silly registry.get   { date: 'Fri, 03 Jan 2014 19:38:40 GMT',
7323 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
7323 silly registry.get     etag: '"4QYQD52P5Y93BFB63LM3RSY8Z"',
7323 silly registry.get     'content-type': 'application/json',
7323 silly registry.get     'content-length': '1797',
7323 silly registry.get     'accept-ranges': 'bytes',
7323 silly registry.get     via: '1.1 varnish',
7323 silly registry.get     age: '27496',
7323 silly registry.get     'x-served-by': 'cache-d46-DAL',
7323 silly registry.get     'x-cache': 'HIT',
7323 silly registry.get     'x-cache-hits': '1',
7323 silly registry.get     'x-timer': 'S1388777920.040916920,VS0,VE12',
7323 silly registry.get     vary: 'Accept',
7323 silly registry.get     'keep-alive': 'timeout=10, max=44',
7323 silly registry.get     connection: 'Keep-Alive' } ]
7324 silly gunzTarPerm extractEntry test/dotted.js
7325 silly gunzTarPerm modified mode [ 'test/dotted.js', 438, 420 ]
7326 silly gunzTarPerm extractEntry test/long.js
7327 silly gunzTarPerm modified mode [ 'test/long.js', 438, 420 ]
7328 silly lockFile b00e6824-70981-0-7418503221124411-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777970981-0.7418503221124411\package
7329 silly lockFile b00e6824-70981-0-7418503221124411-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777970981-0.7418503221124411\package
7330 silly gunzTarPerm extractEntry test/parse.js
7331 silly gunzTarPerm modified mode [ 'test/parse.js', 438, 420 ]
7332 silly gunzTarPerm extractEntry test/parse_modified.js
7333 silly gunzTarPerm modified mode [ 'test/parse_modified.js', 438, 420 ]
7334 silly lockFile 5ebcce83--cache-postcss-0-2-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\postcss\0.2.0\package.tgz
7335 silly lockFile 5ebcce83--cache-postcss-0-2-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\postcss\0.2.0\package.tgz
7336 silly lockFile 65da37ca-pmjs-org-cookie-cookie-0-0-5-tgz https://registry.npmjs.org/cookie/-/cookie-0.0.5.tgz
7337 verbose lock https://registry.npmjs.org/cookie/-/cookie-0.0.5.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\65da37ca-pmjs-org-cookie-cookie-0-0-5-tgz.lock
7338 verbose addRemoteTarball [ 'https://registry.npmjs.org/cookie/-/cookie-0.0.5.tgz',
7338 verbose addRemoteTarball   'f9acf9db57eb7568c9fcc596256b7bb22e307c81' ]
7339 info retry fetch attempt 1 at 16:39:39
7340 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979393-0.25621652347035706\tmp.tgz
7341 silly lockFile 765665a9--npm-cache-postcss-0-2-0-package C:\Users\Gaston\AppData\Roaming\npm-cache\postcss\0.2.0\package
7342 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\postcss\0.2.0\package C:\Users\Gaston\AppData\Roaming\npm-cache\765665a9--npm-cache-postcss-0-2-0-package.lock
7343 http GET https://registry.npmjs.org/cookie/-/cookie-0.0.5.tgz
7344 silly gunzTarPerm extractEntry test/short.js
7345 silly gunzTarPerm modified mode [ 'test/short.js', 438, 420 ]
7346 silly gunzTarPerm extractEntry test/whitespace.js
7347 silly gunzTarPerm modified mode [ 'test/whitespace.js', 438, 420 ]
7348 silly lockFile 765665a9--npm-cache-postcss-0-2-0-package C:\Users\Gaston\AppData\Roaming\npm-cache\postcss\0.2.0\package
7349 silly lockFile 765665a9--npm-cache-postcss-0-2-0-package C:\Users\Gaston\AppData\Roaming\npm-cache\postcss\0.2.0\package
7350 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\postcss\0.2.0\package.tgz
7351 silly lockFile 0741d27c--npm-cache-postcss-0-2-0-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\postcss\0.2.0\package
7352 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\postcss\0.2.0\package C:\Users\Gaston\AppData\Roaming\npm-cache\0741d27c--npm-cache-postcss-0-2-0-package.lock
7353 silly lockFile 5ebcce83--cache-postcss-0-2-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\postcss\0.2.0\package.tgz
7354 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\postcss\0.2.0\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\5ebcce83--cache-postcss-0-2-0-package-tgz.lock
7355 silly gunzTarPerm modes [ '755', '644' ]
7356 silly gunzTarPerm extractEntry package.json
7357 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
7358 silly lockFile 6d968301-4582-0-11388398800045252-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777944582-0.11388398800045252\package
7359 silly lockFile 6d968301-4582-0-11388398800045252-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777944582-0.11388398800045252\package
7360 silly gunzTarPerm extractEntry README.md
7361 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
7362 silly gunzTarPerm extractEntry LICENSE
7363 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
7364 silly gunzTarPerm extractEntry ChangeLog.md
7365 silly gunzTarPerm modified mode [ 'ChangeLog.md', 438, 420 ]
7366 silly gunzTarPerm extractEntry lib/at-rule.js
7367 silly gunzTarPerm modified mode [ 'lib/at-rule.js', 438, 420 ]
7368 silly gunzTarPerm extractEntry lib/generate-map.js
7369 silly gunzTarPerm modified mode [ 'lib/generate-map.js', 438, 420 ]
7370 silly gunzTarPerm extractEntry lib/list.js
7371 silly gunzTarPerm modified mode [ 'lib/list.js', 438, 420 ]
7372 silly gunzTarPerm extractEntry lib/node.js
7373 silly gunzTarPerm modified mode [ 'lib/node.js', 438, 420 ]
7374 silly gunzTarPerm extractEntry lib/parse.js
7375 silly gunzTarPerm modified mode [ 'lib/parse.js', 438, 420 ]
7376 silly gunzTarPerm extractEntry lib/declaration.js
7377 silly gunzTarPerm modified mode [ 'lib/declaration.js', 438, 420 ]
7378 silly gunzTarPerm extractEntry lib/raw.js
7379 silly gunzTarPerm modified mode [ 'lib/raw.js', 438, 420 ]
7380 silly gunzTarPerm extractEntry lib/result.js
7381 silly gunzTarPerm modified mode [ 'lib/result.js', 438, 420 ]
7382 silly gunzTarPerm extractEntry lib/root.js
7383 silly gunzTarPerm modified mode [ 'lib/root.js', 438, 420 ]
7384 silly gunzTarPerm extractEntry lib/rule.js
7385 silly gunzTarPerm modified mode [ 'lib/rule.js', 438, 420 ]
7386 silly gunzTarPerm extractEntry lib/syntax-error.js
7387 silly gunzTarPerm modified mode [ 'lib/syntax-error.js', 438, 420 ]
7388 silly gunzTarPerm extractEntry lib/container.js
7389 silly gunzTarPerm modified mode [ 'lib/container.js', 438, 420 ]
7390 silly gunzTarPerm extractEntry lib/vendor.js
7391 silly gunzTarPerm modified mode [ 'lib/vendor.js', 438, 420 ]
7392 silly gunzTarPerm extractEntry lib/postcss.js
7393 silly gunzTarPerm modified mode [ 'lib/postcss.js', 438, 420 ]
7394 silly lockFile 0a8cc3d4-4582-0-11388398800045252-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777944582-0.11388398800045252\tmp.tgz
7395 silly lockFile 0a8cc3d4-4582-0-11388398800045252-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777944582-0.11388398800045252\tmp.tgz
7396 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\async\\0.2.9\\package.tgz',
7396 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388777944582-0.11388398800045252\\package' ]
7397 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\async\0.2.9\package.tgz
7398 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777944582-0.11388398800045252\package
7399 silly lockFile 6d968301-4582-0-11388398800045252-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777944582-0.11388398800045252\package
7400 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777944582-0.11388398800045252\package C:\Users\Gaston\AppData\Roaming\npm-cache\6d968301-4582-0-11388398800045252-package.lock
7401 silly lockFile f1e10200-pm-cache-async-0-2-9-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\async\0.2.9\package.tgz
7402 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\async\0.2.9\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\f1e10200-pm-cache-async-0-2-9-package-tgz.lock
7403 silly lockFile cd0cf561-s-optimist-node-modules-wordwrap tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-karma\node_modules\optimist\node_modules\wordwrap
7404 silly lockFile cd0cf561-s-optimist-node-modules-wordwrap tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-karma\node_modules\optimist\node_modules\wordwrap
7405 silly lockFile 1360ffb0-cache-wordwrap-0-0-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\wordwrap\0.0.2\package.tgz
7406 silly lockFile 1360ffb0-cache-wordwrap-0-0-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\wordwrap\0.0.2\package.tgz
7407 info preinstall wordwrap@0.0.2
7408 verbose readDependencies using package.json deps
7409 verbose readDependencies using package.json deps
7410 silly resolved []
7411 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-karma\node_modules\optimist\node_modules\wordwrap
7412 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-karma\node_modules\optimist\node_modules\wordwrap
7413 verbose linkStuff [ false,
7413 verbose linkStuff   false,
7413 verbose linkStuff   false,
7413 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-karma\\node_modules\\optimist\\node_modules' ]
7414 info linkStuff wordwrap@0.0.2
7415 verbose linkBins wordwrap@0.0.2
7416 verbose linkMans wordwrap@0.0.2
7417 verbose rebuildBundles wordwrap@0.0.2
7418 info install wordwrap@0.0.2
7419 info postinstall wordwrap@0.0.2
7420 silly lockFile e842b660-s-optimist-node-modules-minimist tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-karma\node_modules\optimist\node_modules\minimist
7421 silly lockFile e842b660-s-optimist-node-modules-minimist tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-karma\node_modules\optimist\node_modules\minimist
7422 silly lockFile b5128db8-cache-minimist-0-0-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\minimist\0.0.5\package.tgz
7423 silly lockFile b5128db8-cache-minimist-0-0-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\minimist\0.0.5\package.tgz
7424 info preinstall minimist@0.0.5
7425 verbose readDependencies using package.json deps
7426 verbose readDependencies using package.json deps
7427 silly resolved []
7428 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-karma\node_modules\optimist\node_modules\minimist
7429 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-karma\node_modules\optimist\node_modules\minimist
7430 verbose linkStuff [ false,
7430 verbose linkStuff   false,
7430 verbose linkStuff   false,
7430 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-karma\\node_modules\\optimist\\node_modules' ]
7431 info linkStuff minimist@0.0.5
7432 verbose linkBins minimist@0.0.5
7433 verbose linkMans minimist@0.0.5
7434 verbose rebuildBundles minimist@0.0.5
7435 info install minimist@0.0.5
7436 info postinstall minimist@0.0.5
7437 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-karma\node_modules\optimist
7438 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-karma\node_modules\optimist
7439 verbose linkStuff [ false,
7439 verbose linkStuff   false,
7439 verbose linkStuff   false,
7439 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-karma\\node_modules' ]
7440 info linkStuff optimist@0.6.0
7441 verbose linkBins optimist@0.6.0
7442 verbose linkMans optimist@0.6.0
7443 verbose rebuildBundles optimist@0.6.0
7444 http 200 https://registry.npmjs.org/fresh/0.1.0
7445 silly registry.get cb [ 200,
7445 silly registry.get   { date: 'Fri, 03 Jan 2014 19:38:40 GMT',
7445 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
7445 silly registry.get     etag: '"3QFASE0UJX6J2UYVGWB5D7HHS"',
7445 silly registry.get     'content-type': 'application/json',
7445 silly registry.get     'content-length': '699',
7445 silly registry.get     'accept-ranges': 'bytes',
7445 silly registry.get     via: '1.1 varnish',
7445 silly registry.get     age: '71988',
7445 silly registry.get     'x-served-by': 'cache-d46-DAL',
7445 silly registry.get     'x-cache': 'HIT',
7445 silly registry.get     'x-cache-hits': '1',
7445 silly registry.get     'x-timer': 'S1388777920.333363295,VS0,VE16',
7445 silly registry.get     vary: 'Accept',
7445 silly registry.get     'keep-alive': 'timeout=10, max=43',
7445 silly registry.get     connection: 'Keep-Alive' } ]
7446 verbose rebuildBundles [ 'minimist', 'wordwrap' ]
7447 info install optimist@0.6.0
7448 info postinstall optimist@0.6.0
7449 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-karma
7450 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-karma
7451 verbose linkStuff [ false,
7451 verbose linkStuff   false,
7451 verbose linkStuff   false,
7451 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules' ]
7452 info linkStuff grunt-karma@0.6.2
7453 verbose linkBins grunt-karma@0.6.2
7454 verbose linkMans grunt-karma@0.6.2
7455 verbose rebuildBundles grunt-karma@0.6.2
7456 verbose rebuildBundles [ 'optimist' ]
7457 info install grunt-karma@0.6.2
7458 info postinstall grunt-karma@0.6.2
7459 verbose readDependencies using package.json deps
7460 silly lockFile 0e5f2eb8--npmjs-org-fresh-fresh-0-1-0-tgz https://registry.npmjs.org/fresh/-/fresh-0.1.0.tgz
7461 verbose lock https://registry.npmjs.org/fresh/-/fresh-0.1.0.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\0e5f2eb8--npmjs-org-fresh-fresh-0-1-0-tgz.lock
7462 verbose addRemoteTarball [ 'https://registry.npmjs.org/fresh/-/fresh-0.1.0.tgz',
7462 verbose addRemoteTarball   '03e4b0178424e4c2d5d19a54d8814cdc97934850' ]
7463 info retry fetch attempt 1 at 16:39:39
7464 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979657-0.06051657837815583\tmp.tgz
7465 http GET https://registry.npmjs.org/fresh/-/fresh-0.1.0.tgz
7466 verbose cache add [ 'karma@~0.10.0', null ]
7467 verbose cache add name=undefined spec="karma@~0.10.0" args=["karma@~0.10.0",null]
7468 verbose parsed url { protocol: null,
7468 verbose parsed url   slashes: null,
7468 verbose parsed url   auth: null,
7468 verbose parsed url   host: null,
7468 verbose parsed url   port: null,
7468 verbose parsed url   hostname: null,
7468 verbose parsed url   hash: null,
7468 verbose parsed url   search: null,
7468 verbose parsed url   query: null,
7468 verbose parsed url   pathname: 'karma@~0.10.0',
7468 verbose parsed url   path: 'karma@~0.10.0',
7468 verbose parsed url   href: 'karma@~0.10.0' }
7469 verbose cache add name="karma" spec="~0.10.0" args=["karma","~0.10.0"]
7470 verbose parsed url { protocol: null,
7470 verbose parsed url   slashes: null,
7470 verbose parsed url   auth: null,
7470 verbose parsed url   host: null,
7470 verbose parsed url   port: null,
7470 verbose parsed url   hostname: null,
7470 verbose parsed url   hash: null,
7470 verbose parsed url   search: null,
7470 verbose parsed url   query: null,
7470 verbose parsed url   pathname: '~0.10.0',
7470 verbose parsed url   path: '~0.10.0',
7470 verbose parsed url   href: '~0.10.0' }
7471 verbose addNamed [ 'karma', '~0.10.0' ]
7472 verbose addNamed [ null, '>=0.10.0-0 <0.11.0-0' ]
7473 silly lockFile 49359b89-karma-0-10-0 karma@~0.10.0
7474 verbose lock karma@~0.10.0 C:\Users\Gaston\AppData\Roaming\npm-cache\49359b89-karma-0-10-0.lock
7475 silly lockFile 6d968301-4582-0-11388398800045252-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777944582-0.11388398800045252\package
7476 silly lockFile 6d968301-4582-0-11388398800045252-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777944582-0.11388398800045252\package
7477 silly addNameRange { name: 'karma', range: '>=0.10.0-0 <0.11.0-0', hasData: false }
7478 silly lockFile f1e10200-pm-cache-async-0-2-9-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\async\0.2.9\package.tgz
7479 silly lockFile f1e10200-pm-cache-async-0-2-9-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\async\0.2.9\package.tgz
7480 verbose url raw karma
7481 verbose url resolving [ 'https://registry.npmjs.org/', './karma' ]
7482 verbose url resolved https://registry.npmjs.org/karma
7483 info trying registry request attempt 1 at 16:39:39
7484 http GET https://registry.npmjs.org/karma
7485 silly lockFile 79918f87-ng-npm-cache-async-0-2-9-package C:\Users\Gaston\AppData\Roaming\npm-cache\async\0.2.9\package
7486 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\async\0.2.9\package C:\Users\Gaston\AppData\Roaming\npm-cache\79918f87-ng-npm-cache-async-0-2-9-package.lock
7487 silly lockFile 79918f87-ng-npm-cache-async-0-2-9-package C:\Users\Gaston\AppData\Roaming\npm-cache\async\0.2.9\package
7488 silly lockFile 79918f87-ng-npm-cache-async-0-2-9-package C:\Users\Gaston\AppData\Roaming\npm-cache\async\0.2.9\package
7489 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\async\0.2.9\package.tgz
7490 silly lockFile e7cd8778-ng-npm-cache-async-0-2-9-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\async\0.2.9\package
7491 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\async\0.2.9\package C:\Users\Gaston\AppData\Roaming\npm-cache\e7cd8778-ng-npm-cache-async-0-2-9-package.lock
7492 silly lockFile f1e10200-pm-cache-async-0-2-9-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\async\0.2.9\package.tgz
7493 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\async\0.2.9\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\f1e10200-pm-cache-async-0-2-9-package-tgz.lock
7494 silly gunzTarPerm modes [ '755', '644' ]
7495 silly gunzTarPerm extractEntry package.json
7496 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
7497 silly gunzTarPerm extractEntry README.md
7498 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
7499 silly gunzTarPerm extractEntry LICENSE
7500 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
7501 silly gunzTarPerm extractEntry component.json
7502 silly gunzTarPerm modified mode [ 'component.json', 438, 420 ]
7503 silly gunzTarPerm extractEntry lib/async.js
7504 silly gunzTarPerm modified mode [ 'lib/async.js', 438, 420 ]
7505 http 200 https://registry.npmjs.org/buffer-crc32/-/buffer-crc32-0.2.1.tgz
7506 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978771-0.457123247673735\tmp.tgz
7507 silly lockFile c7b774e6-978771-0-457123247673735-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978771-0.457123247673735\package
7508 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978771-0.457123247673735\package C:\Users\Gaston\AppData\Roaming\npm-cache\c7b774e6-978771-0-457123247673735-package.lock
7509 silly lockFile 6b67aba9-978771-0-457123247673735-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978771-0.457123247673735\tmp.tgz
7510 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978771-0.457123247673735\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\6b67aba9-978771-0-457123247673735-tmp-tgz.lock
7511 silly gunzTarPerm modes [ '755', '644' ]
7512 silly gunzTarPerm extractEntry package.json
7513 silly gunzTarPerm extractEntry .npmignore
7514 silly gunzTarPerm extractEntry README.md
7515 silly gunzTarPerm extractEntry index.js
7516 silly gunzTarPerm extractEntry .travis.yml
7517 silly gunzTarPerm extractEntry tests/crc.test.js
7518 silly lockFile 0741d27c--npm-cache-postcss-0-2-0-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\postcss\0.2.0\package
7519 silly lockFile 0741d27c--npm-cache-postcss-0-2-0-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\postcss\0.2.0\package
7520 silly lockFile 5ebcce83--cache-postcss-0-2-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\postcss\0.2.0\package.tgz
7521 silly lockFile 5ebcce83--cache-postcss-0-2-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\postcss\0.2.0\package.tgz
7522 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\postcss\0.2.0\package.tgz 644
7523 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\postcss\0.2.0\package.tgz
7524 http 200 https://registry.npmjs.org/pause/0.0.1
7525 silly registry.get cb [ 200,
7525 silly registry.get   { date: 'Fri, 03 Jan 2014 19:38:40 GMT',
7525 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
7525 silly registry.get     etag: '"E4KY1C9KYLGY35IZPN9LGAAU5"',
7525 silly registry.get     'content-type': 'application/json',
7525 silly registry.get     'content-length': '453',
7525 silly registry.get     'accept-ranges': 'bytes',
7525 silly registry.get     via: '1.1 varnish',
7525 silly registry.get     age: '6014',
7525 silly registry.get     'x-served-by': 'cache-d46-DAL',
7525 silly registry.get     'x-cache': 'HIT',
7525 silly registry.get     'x-cache-hits': '1',
7525 silly registry.get     'x-timer': 'S1388777920.606256485,VS0,VE16',
7525 silly registry.get     vary: 'Accept',
7525 silly registry.get     'keep-alive': 'timeout=10, max=42',
7525 silly registry.get     connection: 'Keep-Alive' } ]
7526 silly lockFile 35f4cf3a-js-org-postcss-postcss-0-2-0-tgz https://registry.npmjs.org/postcss/-/postcss-0.2.0.tgz
7527 silly lockFile 35f4cf3a-js-org-postcss-postcss-0-2-0-tgz https://registry.npmjs.org/postcss/-/postcss-0.2.0.tgz
7528 silly lockFile e7cd8778-ng-npm-cache-async-0-2-9-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\async\0.2.9\package
7529 silly lockFile e7cd8778-ng-npm-cache-async-0-2-9-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\async\0.2.9\package
7530 silly lockFile b0bf5474-postcss-0-2-0 postcss@0.2.0
7531 silly lockFile b0bf5474-postcss-0-2-0 postcss@0.2.0
7532 silly lockFile f1e10200-pm-cache-async-0-2-9-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\async\0.2.9\package.tgz
7533 silly lockFile f1e10200-pm-cache-async-0-2-9-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\async\0.2.9\package.tgz
7534 silly lockFile b7ee9c5c-postcss-0-2 postcss@~0.2
7535 silly lockFile b7ee9c5c-postcss-0-2 postcss@~0.2
7536 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\async\0.2.9\package.tgz 644
7537 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\async\0.2.9\package.tgz
7538 silly lockFile c060db57--npmjs-org-async-async-0-2-9-tgz https://registry.npmjs.org/async/-/async-0.2.9.tgz
7539 silly lockFile c060db57--npmjs-org-async-async-0-2-9-tgz https://registry.npmjs.org/async/-/async-0.2.9.tgz
7540 silly lockFile be62480b-async-0-2-9 async@0.2.9
7541 silly lockFile be62480b-async-0-2-9 async@0.2.9
7542 silly resolved [ { name: 'async',
7542 silly resolved     description: 'Higher-order functions and common patterns for asynchronous code',
7542 silly resolved     main: './lib/async',
7542 silly resolved     author: { name: 'Caolan McMahon' },
7542 silly resolved     version: '0.2.9',
7542 silly resolved     repository: { type: 'git', url: 'https://github.com/caolan/async.git' },
7542 silly resolved     bugs: { url: 'https://github.com/caolan/async/issues' },
7542 silly resolved     licenses: [ [Object] ],
7542 silly resolved     devDependencies: { nodeunit: '>0.0.0', 'uglify-js': '1.2.x', nodelint: '>0.0.0' },
7542 silly resolved     jam: { main: 'lib/async.js', include: [Object] },
7542 silly resolved     scripts: { test: 'nodeunit test/test-async.js' },
7542 silly resolved     readme: '# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser. Also supports [component](https://github.com/component/component).\n\nAsync provides around 20 functions that include the usual \'functional\'\nsuspects (map, reduce, filter, each…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n```javascript\nasync.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n\nasync.filter([\'file1\',\'file2\',\'file3\'], fs.exists, function(results){\n    // results now equals an array of the existing files\n});\n\nasync.parallel([\n    function(){ ... },\n    function(){ ... }\n], callback);\n\nasync.series([\n    function(){ ... },\n    function(){ ... }\n]);\n```\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n## Common Pitfalls\n\n### Binding a context to an iterator\n\nThis section is really about bind, not about async. If you are wondering how to\nmake async execute your iterators in a given context, or are confused as to why\na method of another library isn\'t working as an iterator, study this example:\n\n```js\n// Here is a simple object with an (unnecessarily roundabout) squaring method\nvar AsyncSquaringLibrary = {\n  squareExponent: 2,\n  square: function(number, callback){ \n    var result = Math.pow(number, this.squareExponent);\n    setTimeout(function(){\n      callback(null, result);\n    }, 200);\n  }\n};\n\nasync.map([1, 2, 3], AsyncSquaringLibrary.square, function(err, result){\n  // result is [NaN, NaN, NaN]\n  // This fails because the `this.squareExponent` expression in the square\n  // function is not evaluated in the context of AsyncSquaringLibrary, and is\n  // therefore undefined.\n});\n\nasync.map([1, 2, 3], AsyncSquaringLibrary.square.bind(AsyncSquaringLibrary), function(err, result){\n  // result is [1, 4, 9]\n  // With the help of bind we can attach a context to the iterator before\n  // passing it to async. Now the square function will be executed in its \n  // \'home\' AsyncSquaringLibrary context and the value of `this.squareExponent`\n  // will be as expected.\n});\n```\n\n## Download\n\nThe source is available for download from\n[GitHub](http://github.com/caolan/async).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 29.6kb Uncompressed\n\n## In the Browser\n\nSo far it\'s been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n```html\n<script type="text/javascript" src="async.js"></script>\n<script type="text/javascript">\n\n    async.map(data, asyncProcess, function(err, results){\n        alert(results);\n    });\n\n</script>\n```\n\n## Documentation\n\n### Collections\n\n* [each](#each)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [doWhilst](#doWhilst)\n* [until](#until)\n* [doUntil](#doUntil)\n* [forever](#forever)\n* [waterfall](#waterfall)\n* [compose](#compose)\n* [applyEach](#applyEach)\n* [queue](#queue)\n* [cargo](#cargo)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n* [times](#times)\n* [timesSeries](#timesSeries)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name="forEach" />\n<a name="each" />\n### each(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the each function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err) which must be called once it has \n  completed. If no error has occured, the callback should be run without \n  arguments or with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// assuming openFiles is an array of file names and saveFile is a function\n// to save the modified contents of that file:\n\nasync.each(openFiles, saveFile, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name="forEachSeries" />\n<a name="eachSeries" />\n### eachSeries(arr, iterator, callback)\n\nThe same as each only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name="forEachLimit" />\n<a name="eachLimit" />\n### eachLimit(arr, limit, iterator, callback)\n\nThe same as each only no more than "limit" iterators will be simultaneously \nrunning at any time.\n\nNote that the items are not processed in batches, so there is no guarantee that\n the first "limit" iterator functions will complete before any others are \nstarted.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - The maximum number of iterators to run at any time.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err) which must be called once it has \n  completed. If no error has occured, the callback should be run without \n  arguments or with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// Assume documents is an array of JSON objects and requestApi is a\n// function that interacts with a rate-limited REST api.\n\nasync.eachLimit(documents, 20, requestApi, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name="map" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, transformed) which must be called once \n  it has completed with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name="mapSeries" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name="mapLimit" />\n### mapLimit(arr, limit, iterator, callback)\n\nThe same as map only no more than "limit" iterators will be simultaneously \nrunning at any time.\n\nNote that the items are not processed in batches, so there is no guarantee that\n the first "limit" iterator functions will complete before any others are \nstarted.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - The maximum number of iterators to run at any time.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, transformed) which must be called once \n  it has completed with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map([\'file1\',\'file2\',\'file3\'], 1, fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name="filter" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like fs.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n```js\nasync.filter([\'file1\',\'file2\',\'file3\'], fs.exists, function(results){\n    // results now equals an array of the existing files\n});\n```\n\n---------------------------------------\n\n<a name="filterSeries" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name="reject" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name="rejectSeries" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as reject, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name="reduce" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then it\'s probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback(err, reduction) which accepts an optional error as its first \n  argument, and the state of the reduction as the second. If an error is \n  passed to the callback, the reduction is stopped and the main callback is \n  immediately called with the error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n```js\nasync.reduce([1,2,3], 0, function(memo, item, callback){\n    // pointless async:\n    process.nextTick(function(){\n        callback(null, memo + item)\n    });\n}, function(err, result){\n    // result is now equal to the last value of memo, which is 6\n});\n```\n\n---------------------------------------\n\n<a name="reduceRight" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name="detect" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n```js\nasync.detect([\'file1\',\'file2\',\'file3\'], fs.exists, function(result){\n    // result now equals the first file in the list that exists\n});\n```\n\n---------------------------------------\n\n<a name="detectSeries" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name="sortBy" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, sortValue) which must be called once it\n  has completed with an error (which can be null) and a value to use as the sort\n  criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n```js\nasync.sortBy([\'file1\',\'file2\',\'file3\'], function(file, callback){\n    fs.stat(file, function(err, stats){\n        callback(err, stats.mtime);\n    });\n}, function(err, results){\n    // results is now the original array of files sorted by\n    // modified date\n});\n```\n\n---------------------------------------\n\n<a name="some" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like fs.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n```js\nasync.some([\'file1\',\'file2\',\'file3\'], fs.exists, function(result){\n    // if result is true then at least one of the files exists\n});\n```\n\n---------------------------------------\n\n<a name="every" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like fs.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n```js\nasync.every([\'file1\',\'file2\',\'file3\'], fs.exists, function(result){\n    // if result is true then every file exists\n});\n```\n\n---------------------------------------\n\n<a name="concat" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, results) which must be called once it \n  has completed with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n```js\nasync.concat([\'dir1\',\'dir2\',\'dir3\'], fs.readdir, function(err, files){\n    // files is now a list of filenames that exist in the 3 directories\n});\n```\n\n---------------------------------------\n\n<a name="concatSeries" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name="series" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n__Example__\n\n```js\nasync.series([\n    function(callback){\n        // do some stuff ...\n        callback(null, \'one\');\n    },\n    function(callback){\n        // do some more stuff ...\n        callback(null, \'two\');\n    }\n],\n// optional callback\nfunction(err, results){\n    // results is now equal to [\'one\', \'two\']\n});\n\n\n// an example using an object instead of an array\nasync.series({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equal to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name="parallel" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed \n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n__Example__\n\n```js\nasync.parallel([\n    function(callback){\n        setTimeout(function(){\n            callback(null, \'one\');\n        }, 200);\n    },\n    function(callback){\n        setTimeout(function(){\n            callback(null, \'two\');\n        }, 100);\n    }\n],\n// optional callback\nfunction(err, results){\n    // the results array will equal [\'one\',\'two\'] even though\n    // the second function had a shorter timeout.\n});\n\n\n// an example using an object instead of an array\nasync.parallel({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equals to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name="parallel" />\n### parallelLimit(tasks, limit, [callback])\n\nThe same as parallel only the tasks are executed in parallel with a maximum of "limit" \ntasks executing at any time.\n\nNote that the tasks are not executed in batches, so there is no guarantee that \nthe first "limit" tasks will complete before any others are started.\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed \n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* limit - The maximum number of tasks to run at any time.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n---------------------------------------\n\n<a name="whilst" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback(err) which must be called once it has completed with an \n  optional error argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n```js\nvar count = 0;\n\nasync.whilst(\n    function () { return count < 5; },\n    function (callback) {\n        count++;\n        setTimeout(callback, 1000);\n    },\n    function (err) {\n        // 5 seconds have passed\n    }\n);\n```\n\n---------------------------------------\n\n<a name="doWhilst" />\n### doWhilst(fn, test, callback)\n\nThe post check version of whilst. To reflect the difference in the order of operations `test` and `fn` arguments are switched. `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n\n---------------------------------------\n\n<a name="until" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n---------------------------------------\n\n<a name="doUntil" />\n### doUntil(fn, test, callback)\n\nLike doWhilst except the test is inverted. Note the argument ordering differs from `until`.\n\n---------------------------------------\n\n<a name="forever" />\n### forever(fn, callback)\n\nCalls the asynchronous function \'fn\' repeatedly, in series, indefinitely.\nIf an error is passed to fn\'s callback then \'callback\' is called with the\nerror, otherwise it will never be called.\n\n---------------------------------------\n\n<a name="waterfall" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a \n  callback(err, result1, result2, ...) it must call on completion. The first\n  argument is an error (which can be null) and any further arguments will be \n  passed as arguments in order to the next task.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task\'s callback.\n\n\n\n__Example__\n\n```js\nasync.waterfall([\n    function(callback){\n        callback(null, \'one\', \'two\');\n    },\n    function(arg1, arg2, callback){\n        callback(null, \'three\');\n    },\n    function(arg1, callback){\n        // arg1 now equals \'three\'\n        callback(null, \'done\');\n    }\n], function (err, result) {\n   // result now equals \'done\'    \n});\n```\n\n---------------------------------------\n<a name="compose" />\n### compose(fn1, fn2...)\n\nCreates a function which is a composition of the passed asynchronous\nfunctions. Each function consumes the return value of the function that\nfollows. Composing functions f(), g() and h() would produce the result of\nf(g(h())), only this version uses callbacks to obtain the return values.\n\nEach function is executed with the `this` binding of the composed function.\n\n__Arguments__\n\n* functions... - the asynchronous functions to compose\n\n\n__Example__\n\n```js\nfunction add1(n, callback) {\n    setTimeout(function () {\n        callback(null, n + 1);\n    }, 10);\n}\n\nfunction mul3(n, callback) {\n    setTimeout(function () {\n        callback(null, n * 3);\n    }, 10);\n}\n\nvar add1mul3 = async.compose(mul3, add1);\n\nadd1mul3(4, function (err, result) {\n   // result now equals 15\n});\n```\n\n---------------------------------------\n<a name="applyEach" />\n### applyEach(fns, args..., callback)\n\nApplies the provided arguments to each function in the array, calling the\ncallback after all functions have completed. If you only provide the first\nargument then it will return a function which lets you pass in the\narguments as if it were a single function call.\n\n__Arguments__\n\n* fns - the asynchronous functions to all call with the same arguments\n* args... - any number of separate arguments to pass to the function\n* callback - the final argument should be the callback, called when all\n  functions have completed processing\n\n\n__Example__\n\n```js\nasync.applyEach([enableSearch, updateSchema], \'bucket\', callback);\n\n// partial application example:\nasync.each(\n    buckets,\n    async.applyEach([enableSearch, updateSchema]),\n    callback\n);\n```\n\n---------------------------------------\n\n<a name="applyEachSeries" />\n### applyEachSeries(arr, iterator, callback)\n\nThe same as applyEach only the functions are applied in series.\n\n---------------------------------------\n\n<a name="queue" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task\'s callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task, which must call its callback(err) argument when finished, with an \n  optional error as an argument.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* unshift(task, [callback]) - add a new task to the front of the queue.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a queue object with concurrency 2\n\nvar q = async.queue(function (task, callback) {\n    console.log(\'hello \' + task.name);\n    callback();\n}, 2);\n\n\n// assign a callback\nq.drain = function() {\n    console.log(\'all items have been processed\');\n}\n\n// add some items to the queue\n\nq.push({name: \'foo\'}, function (err) {\n    console.log(\'finished processing foo\');\n});\nq.push({name: \'bar\'}, function (err) {\n    console.log(\'finished processing bar\');\n});\n\n// add some items to the queue (batch-wise)\n\nq.push([{name: \'baz\'},{name: \'bay\'},{name: \'bax\'}], function (err) {\n    console.log(\'finished processing bar\');\n});\n\n// add some items to the front of the queue\n\nq.unshift({name: \'bar\'}, function (err) {\n    console.log(\'finished processing bar\');\n});\n```\n\n---------------------------------------\n\n<a name="cargo" />\n### cargo(worker, [payload])\n\nCreates a cargo object with the specified payload. Tasks added to the\ncargo will be processed altogether (up to the payload limit). If the\nworker is in progress, the task is queued until it is available. Once\nthe worker has completed some tasks, each callback of those tasks is called.\n\n__Arguments__\n\n* worker(tasks, callback) - An asynchronous function for processing an array of\n  queued tasks, which must call its callback(err) argument when finished, with \n  an optional error as an argument.\n* payload - An optional integer for determining how many tasks should be\n  processed per round; if omitted, the default is unlimited.\n\n__Cargo objects__\n\nThe cargo object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* payload - an integer for determining how many tasks should be\n  process per round. This property can be changed after a cargo is created to\n  alter the payload on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a cargo object with payload 2\n\nvar cargo = async.cargo(function (tasks, callback) {\n    for(var i=0; i<tasks.length; i++){\n      console.log(\'hello \' + tasks[i].name);\n    }\n    callback();\n}, 2);\n\n\n// add some items\n\ncargo.push({name: \'foo\'}, function (err) {\n    console.log(\'finished processing foo\');\n});\ncargo.push({name: \'bar\'}, function (err) {\n    console.log(\'finished processing bar\');\n});\ncargo.push({name: \'baz\'}, function (err) {\n    console.log(\'finished processing baz\');\n});\n```\n\n---------------------------------------\n\n<a name="auto" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\nNote, all functions are called with a results object as a second argument, \nso it is unsafe to pass functions in the tasks object which cannot handle the\nextra argument. For example, this snippet of code:\n\n```js\nasync.auto({\n  readData: async.apply(fs.readFile, \'data.txt\', \'utf-8\');\n}, callback);\n```\n\nwill have the effect of calling readFile with the results object as the last\nargument, which will fail:\n\n```js\nfs.readFile(\'data.txt\', \'utf-8\', cb, {});\n```\n\nInstead, wrap the call to readFile in a function which does not forward the \nresults object:\n\n```js\nasync.auto({\n  readData: function(cb, results){\n    fs.readFile(\'data.txt\', \'utf-8\', cb);\n  }\n}, callback);\n```\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The \n  function receives two arguments: (1) a callback(err, result) which must be \n  called when finished, passing an error (which can be null) and the result of \n  the function\'s execution, and (2) a results object, containing the results of\n  the previously executed functions.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. Results will always be passed\n\tbut if an error occurred, no other tasks will be performed, and the results\n\tobject will only contain partial results.\n  \n\n__Example__\n\n```js\nasync.auto({\n    get_data: function(callback){\n        // async code to get some data\n    },\n    make_folder: function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    },\n    write_file: [\'get_data\', \'make_folder\', function(callback){\n        // once there is some data and the directory exists,\n        // write the data to a file in the directory\n        callback(null, filename);\n    }],\n    email_link: [\'write_file\', function(callback, results){\n        // once the file is written let\'s email a link to it...\n        // results.write_file contains the filename returned by write_file.\n    }]\n});\n```\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n```js\nasync.parallel([\n    function(callback){\n        // async code to get some data\n    },\n    function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    }\n],\nfunction(err, results){\n    async.series([\n        function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n        },\n        function(callback){\n            // once the file is written let\'s email a link to it...\n        }\n    ]);\n});\n```\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name="iterator" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. It\'s also possible to\n\'peek\' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run.\n\n__Example__\n\n```js\nvar iterator = async.iterator([\n    function(){ sys.p(\'one\'); },\n    function(){ sys.p(\'two\'); },\n    function(){ sys.p(\'three\'); }\n]);\n\nnode> var iterator2 = iterator();\n\'one\'\nnode> var iterator3 = iterator2();\n\'two\'\nnode> iterator3();\n\'three\'\nnode> var nextfn = iterator2.next();\nnode> nextfn();\n\'three\'\n```\n\n---------------------------------------\n\n<a name="apply" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n```js\n// using apply\n\nasync.parallel([\n    async.apply(fs.writeFile, \'testfile1\', \'test1\'),\n    async.apply(fs.writeFile, \'testfile2\', \'test2\'),\n]);\n\n\n// the same process without using apply\n\nasync.parallel([\n    function(callback){\n        fs.writeFile(\'testfile1\', \'test1\', callback);\n    },\n    function(callback){\n        fs.writeFile(\'testfile2\', \'test2\', callback);\n    }\n]);\n```\n\nIt\'s possible to pass any number of additional arguments when calling the\ncontinuation:\n\n```js\nnode> var fn = async.apply(sys.puts, \'one\');\nnode> fn(\'two\', \'three\');\none\ntwo\nthree\n```\n\n---------------------------------------\n\n<a name="nextTick" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setImmediate(callback)\nif available, otherwise setTimeout(callback, 0), which means other higher priority\nevents may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n```js\nvar call_order = [];\nasync.nextTick(function(){\n    call_order.push(\'two\');\n    // call_order now equals [\'one\',\'two\']\n});\ncall_order.push(\'one\')\n```\n\n<a name="times" />\n### times(n, callback)\n\nCalls the callback n times and accumulates results in the same manner\nyou would use with async.map.\n\n__Arguments__\n\n* n - The number of times to run the function.\n* callback - The function to call n times.\n\n__Example__\n\n```js\n// Pretend this is some complicated async factory\nvar createUser = function(id, callback) {\n  callback(null, {\n    id: \'user\' + id\n  })\n}\n// generate 5 users\nasync.times(5, function(n, next){\n    createUser(n, function(err, user) {\n      next(err, user)\n    })\n}, function(err, users) {\n  // we should now have 5 users\n});\n```\n\n<a name="timesSeries" />\n### timesSeries(n, callback)\n\nThe same as times only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n## Utils\n\n<a name="memoize" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\nThe cache of results is exposed as the `memo` property of the function returned\nby `memoize`.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n```js\nvar slow_fn = function (name, callback) {\n    // do something\n    callback(null, result);\n};\nvar fn = async.memoize(slow_fn);\n\n// fn can now be used as if it were slow_fn\nfn(\'some name\', function () {\n    // callback\n});\n```\n\n<a name="unmemoize" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name="log" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, \'hello \' + name);\n    }, 1000);\n};\n```\n```js\nnode> async.log(hello, \'world\');\n\'hello world\'\n```\n\n---------------------------------------\n\n<a name="dir" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, {hello: name});\n    }, 1000);\n};\n```\n```js\nnode> async.dir(hello, \'world\');\n{hello: \'world\'}\n```\n\n---------------------------------------\n\n<a name="noConflict" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n',
7542 silly resolved     readmeFilename: 'README.md',
7542 silly resolved     homepage: 'https://github.com/caolan/async',
7542 silly resolved     _id: 'async@0.2.9',
7542 silly resolved     dist: { shasum: '6455af537fb64d92209589d5c8eb2e50fc71c035' },
7542 silly resolved     _from: 'async@0.2.9',
7542 silly resolved     _resolved: 'https://registry.npmjs.org/async/-/async-0.2.9.tgz' } ]
7543 info install async@0.2.9 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-newer
7544 info installOne async@0.2.9
7545 silly lockFile 43ce4d75-async-0-2-0 async@~0.2.0
7546 silly lockFile 43ce4d75-async-0-2-0 async@~0.2.0
7547 silly lockFile 5d51c871-async-0-2-9 async@~0.2.9
7548 silly lockFile 5d51c871-async-0-2-9 async@~0.2.9
7549 silly lockFile 51c6cd47--npmjs-org-pause-pause-0-0-1-tgz https://registry.npmjs.org/pause/-/pause-0.0.1.tgz
7550 verbose lock https://registry.npmjs.org/pause/-/pause-0.0.1.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\51c6cd47--npmjs-org-pause-pause-0-0-1-tgz.lock
7551 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-newer\node_modules\async unbuild
7552 silly resolved [ { name: 'tmp',
7552 silly resolved     version: '0.0.23',
7552 silly resolved     description: 'Temporary file and directory creator',
7552 silly resolved     author:
7552 silly resolved      { name: 'KARASZI István',
7552 silly resolved        email: 'github@spam.raszi.hu',
7552 silly resolved        url: 'http://raszi.hu/' },
7552 silly resolved     homepage: 'http://github.com/raszi/node-tmp',
7552 silly resolved     keywords:
7552 silly resolved      [ 'temporary',
7552 silly resolved        'tmp',
7552 silly resolved        'temp',
7552 silly resolved        'tempdir',
7552 silly resolved        'tempfile',
7552 silly resolved        'tmpdir',
7552 silly resolved        'tmpfile' ],
7552 silly resolved     licenses: [ [Object] ],
7552 silly resolved     repository: { type: 'git', url: 'git://github.com/raszi/node-tmp.git' },
7552 silly resolved     bugs: { url: 'http://github.com/raszi/node-tmp/issues' },
7552 silly resolved     main: 'lib/tmp.js',
7552 silly resolved     scripts: { test: 'vows test/*-test.js' },
7552 silly resolved     engines: { node: '>=0.4.0' },
7552 silly resolved     dependencies: {},
7552 silly resolved     devDependencies: { vows: '~0.7.0' },
7552 silly resolved     readme: '# Tmp\n\nA simple temporary file and directory creator for [node.js.][1]\n\n[![Build Status](https://secure.travis-ci.org/raszi/node-tmp.png?branch=master)](http://travis-ci.org/raszi/node-tmp)\n\n## About\n\nThe main difference between bruce\'s [node-temp][2] is that mine more\naggressively checks for the existence of the newly created temporary file and\ncreates the new file with `O_EXCL` instead of simple `O_CREAT | O_RDRW`, so it\nis safer.\n\nThe API is slightly different as well, Tmp does not yet provide synchronous\ncalls and all the parameters are optional.\n\nYou can set whether you want to remove the temporary file on process exit or\nnot, and the destination directory can also be set.\n\n## How to install\n\n```bash\nnpm install tmp\n```\n\n## Usage\n\n### File creation\n\nSimple temporary file creation, the file will be unlinked on process exit.\n\n```javascript\nvar tmp = require(\'tmp\');\n\ntmp.file(function _tempFileCreated(err, path, fd) {\n  if (err) throw err;\n\n  console.log("File: ", path);\n  console.log("Filedescriptor: ", fd);\n});\n```\n\n### Directory creation\n\nSimple temporary directory creation, it will be removed on process exit.\n\nIf the directory still contains items on process exit, then it won\'t be removed.\n\n```javascript\nvar tmp = require(\'tmp\');\n\ntmp.dir(function _tempDirCreated(err, path) {\n  if (err) throw err;\n\n  console.log("Dir: ", path);\n});\n```\n\nIf you want to cleanup the directory even when there are entries in it, then\nyou can pass the `unsafeCleanup` option when creating it.\n\n### Filename generation\n\nIt is possible with this library to generate a unique filename in the specified\ndirectory.\n\n```javascript\nvar tmp = require(\'tmp\');\n\ntmp.tmpName(function _tempNameGenerated(err, path) {\n    if (err) throw err;\n\n    console.log("Created temporary filename: ", path);\n});\n```\n\n## Advanced usage\n\n### File creation\n\nCreates a file with mode `0644`, prefix will be `prefix-` and postfix will be `.txt`.\n\n```javascript\nvar tmp = require(\'tmp\');\n\ntmp.file({ mode: 0644, prefix: \'prefix-\', postfix: \'.txt\' }, function _tempFileCreated(err, path, fd) {\n  if (err) throw err;\n\n  console.log("File: ", path);\n  console.log("Filedescriptor: ", fd);\n});\n```\n\n### Directory creation\n\nCreates a directory with mode `0755`, prefix will be `myTmpDir_`.\n\n```javascript\nvar tmp = require(\'tmp\');\n\ntmp.dir({ mode: 0750, prefix: \'myTmpDir_\' }, function _tempDirCreated(err, path) {\n  if (err) throw err;\n\n  console.log("Dir: ", path);\n});\n```\n\n### mkstemps like\n\nCreates a new temporary directory with mode `0700` and filename like `/tmp/tmp-nk2J1u`.\n\n```javascript\nvar tmp = require(\'tmp\');\n\ntmp.dir({ template: \'/tmp/tmp-XXXXXX\' }, function _tempDirCreated(err, path) {\n  if (err) throw err;\n\n  console.log("Dir: ", path);\n});\n```\n\n### Filename generation\n\nThe `tmpName()` function accepts the `prefix`, `postfix`, `dir`, etc. parameters also:\n\n```javascript\nvar tmp = require(\'tmp\');\n\ntmp.tmpName({ template: \'/tmp/tmp-XXXXXX\' }, function _tempNameGenerated(err, path) {\n    if (err) throw err;\n\n    console.log("Created temporary filename: ", path);\n});\n```\n\n## Graceful cleanup\n\nOne may want to cleanup the temporary files even when an uncaught exception\noccurs. To enforce this, you can call the `setGracefulCleanup()` method:\n\n```javascript\nvar tmp = require(\'tmp\');\n\ntmp.setGracefulCleanup();\n```\n\n## Options\n\nAll options are optional :)\n\n  * `mode`: the file mode to create with, it fallbacks to `0600` on file creation and `0700` on directory creation\n  * `prefix`: the optional prefix, fallbacks to `tmp-` if not provided\n  * `postfix`: the optional postfix, fallbacks to `.tmp` on file creation\n  * `template`: [`mkstemps`][3] like filename template, no default\n  * `dir`: the optional temporary directory, fallbacks to system default (guesses from environment)\n  * `tries`: how many times should the function try to get a unique filename before giving up, default `3`\n  * `keep`: signals that the temporary file or directory should not be deleted on exit, default is `false`, means delete\n  * `unsafeCleanup`: recursively removes the created temporary directory, even when it\'s not empty. default is `false`\n\n[1]: http://nodejs.org/\n[2]: https://github.com/bruce/node-temp\n[3]: http://www.kernel.org/doc/man-pages/online/pages/man3/mkstemp.3.html\n',
7552 silly resolved     readmeFilename: 'README.md',
7552 silly resolved     _id: 'tmp@0.0.23',
7552 silly resolved     dist: { shasum: '08dd51e4f2a2bc72949179441de972e58654549a' },
7552 silly resolved     _from: 'tmp@0.0.23',
7552 silly resolved     _resolved: 'https://registry.npmjs.org/tmp/-/tmp-0.0.23.tgz' },
7552 silly resolved   { name: 'dargs',
7552 silly resolved     version: '0.1.0',
7552 silly resolved     description: 'Converts an object of options into an array of command-line arguments. Useful when calling command-line tools.',
7552 silly resolved     keywords: [ 'options', 'arguments', 'args', 'flags', 'cli' ],
7552 silly resolved     homepage: 'https://github.com/sindresorhus/dargs',
7552 silly resolved     bugs: { url: 'https://github.com/sindresorhus/dargs/issues' },
7552 silly resolved     author:
7552 silly resolved      { name: 'Sindre Sorhus',
7552 silly resolved        email: 'sindresorhus@gmail.com',
7552 silly resolved        url: 'http://sindresorhus.com' },
7552 silly resolved     main: 'dargs.js',
7552 silly resolved     repository: { type: 'git', url: 'git://github.com/sindresorhus/dargs.git' },
7552 silly resolved     scripts: { test: 'mocha' },
7552 silly resolved     devDependencies: { mocha: '~1.9.0' },
7552 silly resolved     engines: { node: '>=0.8.0' },
7552 silly resolved     licenses: [ [Object] ],
7552 silly resolved     files: [ 'dargs.js' ],
7552 silly resolved     readme: '# dargs [![Build Status](https://secure.travis-ci.org/sindresorhus/dargs.png?branch=master)](http://travis-ci.org/sindresorhus/dargs)\n\n> Converts an object of options into an array of command-line arguments\n\n\n## Getting started\n\nInstall: `npm install --save dargs`\n\n\n#### Example\n\n```js\nvar dargs = require(\'dargs\');\n\nvar options = {\n\tfoo: \'bar\',\n\thello: true,                    // results in only the key being used\n\tcake: false,                    // ignored\n\tcamelCase: 5,                   // camelCase is slugged to `camel-case`\n\tmultiple: [\'value\', \'value2\'],  // converted to multiple arguments\n\tsad: \':(\'\n};\n\nvar excludes = [\'sad\'];\n\nconsole.log(dargs(options, excludes));\n\n/*\n[\n\t\'--foo\', \'bar\',\n\t\'--hello\',\n\t\'--camel-case\', \'5\',\n\t\'--multiple\', \'value\',\n\t\'--multiple\', \'value2\'\n]\n*/\n```\n\n\n## Documentation\n\n\n### options\n\nObject of options to convert to command-line arguments.\n\n\n### excludes\n\nArray of keys to exclude.\n\n\n\n## License\n\nMIT License • © [Sindre Sorhus](http://sindresorhus.com)\n',
7552 silly resolved     readmeFilename: 'readme.md',
7552 silly resolved     _id: 'dargs@0.1.0',
7552 silly resolved     dist: { shasum: '5659667675bd3790b94616cc1b980a3ba37651d4' },
7552 silly resolved     _from: 'dargs@~0.1.0',
7552 silly resolved     _resolved: 'https://registry.npmjs.org/dargs/-/dargs-0.1.0.tgz' },
7552 silly resolved   { name: 'async',
7552 silly resolved     description: 'Higher-order functions and common patterns for asynchronous code',
7552 silly resolved     main: './lib/async',
7552 silly resolved     author: { name: 'Caolan McMahon' },
7552 silly resolved     version: '0.2.9',
7552 silly resolved     repository: { type: 'git', url: 'https://github.com/caolan/async.git' },
7552 silly resolved     bugs: { url: 'https://github.com/caolan/async/issues' },
7552 silly resolved     licenses: [ [Object] ],
7552 silly resolved     devDependencies: { nodeunit: '>0.0.0', 'uglify-js': '1.2.x', nodelint: '>0.0.0' },
7552 silly resolved     jam: { main: 'lib/async.js', include: [Object] },
7552 silly resolved     scripts: { test: 'nodeunit test/test-async.js' },
7552 silly resolved     readme: '# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser. Also supports [component](https://github.com/component/component).\n\nAsync provides around 20 functions that include the usual \'functional\'\nsuspects (map, reduce, filter, each…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n```javascript\nasync.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n\nasync.filter([\'file1\',\'file2\',\'file3\'], fs.exists, function(results){\n    // results now equals an array of the existing files\n});\n\nasync.parallel([\n    function(){ ... },\n    function(){ ... }\n], callback);\n\nasync.series([\n    function(){ ... },\n    function(){ ... }\n]);\n```\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n## Common Pitfalls\n\n### Binding a context to an iterator\n\nThis section is really about bind, not about async. If you are wondering how to\nmake async execute your iterators in a given context, or are confused as to why\na method of another library isn\'t working as an iterator, study this example:\n\n```js\n// Here is a simple object with an (unnecessarily roundabout) squaring method\nvar AsyncSquaringLibrary = {\n  squareExponent: 2,\n  square: function(number, callback){ \n    var result = Math.pow(number, this.squareExponent);\n    setTimeout(function(){\n      callback(null, result);\n    }, 200);\n  }\n};\n\nasync.map([1, 2, 3], AsyncSquaringLibrary.square, function(err, result){\n  // result is [NaN, NaN, NaN]\n  // This fails because the `this.squareExponent` expression in the square\n  // function is not evaluated in the context of AsyncSquaringLibrary, and is\n  // therefore undefined.\n});\n\nasync.map([1, 2, 3], AsyncSquaringLibrary.square.bind(AsyncSquaringLibrary), function(err, result){\n  // result is [1, 4, 9]\n  // With the help of bind we can attach a context to the iterator before\n  // passing it to async. Now the square function will be executed in its \n  // \'home\' AsyncSquaringLibrary context and the value of `this.squareExponent`\n  // will be as expected.\n});\n```\n\n## Download\n\nThe source is available for download from\n[GitHub](http://github.com/caolan/async).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 29.6kb Uncompressed\n\n## In the Browser\n\nSo far it\'s been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n```html\n<script type="text/javascript" src="async.js"></script>\n<script type="text/javascript">\n\n    async.map(data, asyncProcess, function(err, results){\n        alert(results);\n    });\n\n</script>\n```\n\n## Documentation\n\n### Collections\n\n* [each](#each)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [doWhilst](#doWhilst)\n* [until](#until)\n* [doUntil](#doUntil)\n* [forever](#forever)\n* [waterfall](#waterfall)\n* [compose](#compose)\n* [applyEach](#applyEach)\n* [queue](#queue)\n* [cargo](#cargo)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n* [times](#times)\n* [timesSeries](#timesSeries)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name="forEach" />\n<a name="each" />\n### each(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the each function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err) which must be called once it has \n  completed. If no error has occured, the callback should be run without \n  arguments or with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// assuming openFiles is an array of file names and saveFile is a function\n// to save the modified contents of that file:\n\nasync.each(openFiles, saveFile, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name="forEachSeries" />\n<a name="eachSeries" />\n### eachSeries(arr, iterator, callback)\n\nThe same as each only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name="forEachLimit" />\n<a name="eachLimit" />\n### eachLimit(arr, limit, iterator, callback)\n\nThe same as each only no more than "limit" iterators will be simultaneously \nrunning at any time.\n\nNote that the items are not processed in batches, so there is no guarantee that\n the first "limit" iterator functions will complete before any others are \nstarted.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - The maximum number of iterators to run at any time.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err) which must be called once it has \n  completed. If no error has occured, the callback should be run without \n  arguments or with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// Assume documents is an array of JSON objects and requestApi is a\n// function that interacts with a rate-limited REST api.\n\nasync.eachLimit(documents, 20, requestApi, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name="map" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, transformed) which must be called once \n  it has completed with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name="mapSeries" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name="mapLimit" />\n### mapLimit(arr, limit, iterator, callback)\n\nThe same as map only no more than "limit" iterators will be simultaneously \nrunning at any time.\n\nNote that the items are not processed in batches, so there is no guarantee that\n the first "limit" iterator functions will complete before any others are \nstarted.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - The maximum number of iterators to run at any time.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, transformed) which must be called once \n  it has completed with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map([\'file1\',\'file2\',\'file3\'], 1, fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name="filter" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like fs.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n```js\nasync.filter([\'file1\',\'file2\',\'file3\'], fs.exists, function(results){\n    // results now equals an array of the existing files\n});\n```\n\n---------------------------------------\n\n<a name="filterSeries" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name="reject" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name="rejectSeries" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as reject, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name="reduce" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then it\'s probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback(err, reduction) which accepts an optional error as its first \n  argument, and the state of the reduction as the second. If an error is \n  passed to the callback, the reduction is stopped and the main callback is \n  immediately called with the error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n```js\nasync.reduce([1,2,3], 0, function(memo, item, callback){\n    // pointless async:\n    process.nextTick(function(){\n        callback(null, memo + item)\n    });\n}, function(err, result){\n    // result is now equal to the last value of memo, which is 6\n});\n```\n\n---------------------------------------\n\n<a name="reduceRight" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name="detect" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n```js\nasync.detect([\'file1\',\'file2\',\'file3\'], fs.exists, function(result){\n    // result now equals the first file in the list that exists\n});\n```\n\n---------------------------------------\n\n<a name="detectSeries" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name="sortBy" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, sortValue) which must be called once it\n  has completed with an error (which can be null) and a value to use as the sort\n  criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n```js\nasync.sortBy([\'file1\',\'file2\',\'file3\'], function(file, callback){\n    fs.stat(file, function(err, stats){\n        callback(err, stats.mtime);\n    });\n}, function(err, results){\n    // results is now the original array of files sorted by\n    // modified date\n});\n```\n\n---------------------------------------\n\n<a name="some" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like fs.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n```js\nasync.some([\'file1\',\'file2\',\'file3\'], fs.exists, function(result){\n    // if result is true then at least one of the files exists\n});\n```\n\n---------------------------------------\n\n<a name="every" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like fs.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n```js\nasync.every([\'file1\',\'file2\',\'file3\'], fs.exists, function(result){\n    // if result is true then every file exists\n});\n```\n\n---------------------------------------\n\n<a name="concat" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, results) which must be called once it \n  has completed with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n```js\nasync.concat([\'dir1\',\'dir2\',\'dir3\'], fs.readdir, function(err, files){\n    // files is now a list of filenames that exist in the 3 directories\n});\n```\n\n---------------------------------------\n\n<a name="concatSeries" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name="series" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n__Example__\n\n```js\nasync.series([\n    function(callback){\n        // do some stuff ...\n        callback(null, \'one\');\n    },\n    function(callback){\n        // do some more stuff ...\n        callback(null, \'two\');\n    }\n],\n// optional callback\nfunction(err, results){\n    // results is now equal to [\'one\', \'two\']\n});\n\n\n// an example using an object instead of an array\nasync.series({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equal to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name="parallel" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed \n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n__Example__\n\n```js\nasync.parallel([\n    function(callback){\n        setTimeout(function(){\n            callback(null, \'one\');\n        }, 200);\n    },\n    function(callback){\n        setTimeout(function(){\n            callback(null, \'two\');\n        }, 100);\n    }\n],\n// optional callback\nfunction(err, results){\n    // the results array will equal [\'one\',\'two\'] even though\n    // the second function had a shorter timeout.\n});\n\n\n// an example using an object instead of an array\nasync.parallel({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equals to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name="parallel" />\n### parallelLimit(tasks, limit, [callback])\n\nThe same as parallel only the tasks are executed in parallel with a maximum of "limit" \ntasks executing at any time.\n\nNote that the tasks are not executed in batches, so there is no guarantee that \nthe first "limit" tasks will complete before any others are started.\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed \n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* limit - The maximum number of tasks to run at any time.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n---------------------------------------\n\n<a name="whilst" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback(err) which must be called once it has completed with an \n  optional error argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n```js\nvar count = 0;\n\nasync.whilst(\n    function () { return count < 5; },\n    function (callback) {\n        count++;\n        setTimeout(callback, 1000);\n    },\n    function (err) {\n        // 5 seconds have passed\n    }\n);\n```\n\n---------------------------------------\n\n<a name="doWhilst" />\n### doWhilst(fn, test, callback)\n\nThe post check version of whilst. To reflect the difference in the order of operations `test` and `fn` arguments are switched. `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n\n---------------------------------------\n\n<a name="until" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n---------------------------------------\n\n<a name="doUntil" />\n### doUntil(fn, test, callback)\n\nLike doWhilst except the test is inverted. Note the argument ordering differs from `until`.\n\n---------------------------------------\n\n<a name="forever" />\n### forever(fn, callback)\n\nCalls the asynchronous function \'fn\' repeatedly, in series, indefinitely.\nIf an error is passed to fn\'s callback then \'callback\' is called with the\nerror, otherwise it will never be called.\n\n---------------------------------------\n\n<a name="waterfall" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a \n  callback(err, result1, result2, ...) it must call on completion. The first\n  argument is an error (which can be null) and any further arguments will be \n  passed as arguments in order to the next task.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task\'s callback.\n\n\n\n__Example__\n\n```js\nasync.waterfall([\n    function(callback){\n        callback(null, \'one\', \'two\');\n    },\n    function(arg1, arg2, callback){\n        callback(null, \'three\');\n    },\n    function(arg1, callback){\n        // arg1 now equals \'three\'\n        callback(null, \'done\');\n    }\n], function (err, result) {\n   // result now equals \'done\'    \n});\n```\n\n---------------------------------------\n<a name="compose" />\n### compose(fn1, fn2...)\n\nCreates a function which is a composition of the passed asynchronous\nfunctions. Each function consumes the return value of the function that\nfollows. Composing functions f(), g() and h() would produce the result of\nf(g(h())), only this version uses callbacks to obtain the return values.\n\nEach function is executed with the `this` binding of the composed function.\n\n__Arguments__\n\n* functions... - the asynchronous functions to compose\n\n\n__Example__\n\n```js\nfunction add1(n, callback) {\n    setTimeout(function () {\n        callback(null, n + 1);\n    }, 10);\n}\n\nfunction mul3(n, callback) {\n    setTimeout(function () {\n        callback(null, n * 3);\n    }, 10);\n}\n\nvar add1mul3 = async.compose(mul3, add1);\n\nadd1mul3(4, function (err, result) {\n   // result now equals 15\n});\n```\n\n---------------------------------------\n<a name="applyEach" />\n### applyEach(fns, args..., callback)\n\nApplies the provided arguments to each function in the array, calling the\ncallback after all functions have completed. If you only provide the first\nargument then it will return a function which lets you pass in the\narguments as if it were a single function call.\n\n__Arguments__\n\n* fns - the asynchronous functions to all call with the same arguments\n* args... - any number of separate arguments to pass to the function\n* callback - the final argument should be the callback, called when all\n  functions have completed processing\n\n\n__Example__\n\n```js\nasync.applyEach([enableSearch, updateSchema], \'bucket\', callback);\n\n// partial application example:\nasync.each(\n    buckets,\n    async.applyEach([enableSearch, updateSchema]),\n    callback\n);\n```\n\n---------------------------------------\n\n<a name="applyEachSeries" />\n### applyEachSeries(arr, iterator, callback)\n\nThe same as applyEach only the functions are applied in series.\n\n---------------------------------------\n\n<a name="queue" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task\'s callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task, which must call its callback(err) argument when finished, with an \n  optional error as an argument.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* unshift(task, [callback]) - add a new task to the front of the queue.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a queue object with concurrency 2\n\nvar q = async.queue(function (task, callback) {\n    console.log(\'hello \' + task.name);\n    callback();\n}, 2);\n\n\n// assign a callback\nq.drain = function() {\n    console.log(\'all items have been processed\');\n}\n\n// add some items to the queue\n\nq.push({name: \'foo\'}, function (err) {\n    console.log(\'finished processing foo\');\n});\nq.push({name: \'bar\'}, function (err) {\n    console.log(\'finished processing bar\');\n});\n\n// add some items to the queue (batch-wise)\n\nq.push([{name: \'baz\'},{name: \'bay\'},{name: \'bax\'}], function (err) {\n    console.log(\'finished processing bar\');\n});\n\n// add some items to the front of the queue\n\nq.unshift({name: \'bar\'}, function (err) {\n    console.log(\'finished processing bar\');\n});\n```\n\n---------------------------------------\n\n<a name="cargo" />\n### cargo(worker, [payload])\n\nCreates a cargo object with the specified payload. Tasks added to the\ncargo will be processed altogether (up to the payload limit). If the\nworker is in progress, the task is queued until it is available. Once\nthe worker has completed some tasks, each callback of those tasks is called.\n\n__Arguments__\n\n* worker(tasks, callback) - An asynchronous function for processing an array of\n  queued tasks, which must call its callback(err) argument when finished, with \n  an optional error as an argument.\n* payload - An optional integer for determining how many tasks should be\n  processed per round; if omitted, the default is unlimited.\n\n__Cargo objects__\n\nThe cargo object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* payload - an integer for determining how many tasks should be\n  process per round. This property can be changed after a cargo is created to\n  alter the payload on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a cargo object with payload 2\n\nvar cargo = async.cargo(function (tasks, callback) {\n    for(var i=0; i<tasks.length; i++){\n      console.log(\'hello \' + tasks[i].name);\n    }\n    callback();\n}, 2);\n\n\n// add some items\n\ncargo.push({name: \'foo\'}, function (err) {\n    console.log(\'finished processing foo\');\n});\ncargo.push({name: \'bar\'}, function (err) {\n    console.log(\'finished processing bar\');\n});\ncargo.push({name: \'baz\'}, function (err) {\n    console.log(\'finished processing baz\');\n});\n```\n\n---------------------------------------\n\n<a name="auto" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\nNote, all functions are called with a results object as a second argument, \nso it is unsafe to pass functions in the tasks object which cannot handle the\nextra argument. For example, this snippet of code:\n\n```js\nasync.auto({\n  readData: async.apply(fs.readFile, \'data.txt\', \'utf-8\');\n}, callback);\n```\n\nwill have the effect of calling readFile with the results object as the last\nargument, which will fail:\n\n```js\nfs.readFile(\'data.txt\', \'utf-8\', cb, {});\n```\n\nInstead, wrap the call to readFile in a function which does not forward the \nresults object:\n\n```js\nasync.auto({\n  readData: function(cb, results){\n    fs.readFile(\'data.txt\', \'utf-8\', cb);\n  }\n}, callback);\n```\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The \n  function receives two arguments: (1) a callback(err, result) which must be \n  called when finished, passing an error (which can be null) and the result of \n  the function\'s execution, and (2) a results object, containing the results of\n  the previously executed functions.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. Results will always be passed\n\tbut if an error occurred, no other tasks will be performed, and the results\n\tobject will only contain partial results.\n  \n\n__Example__\n\n```js\nasync.auto({\n    get_data: function(callback){\n        // async code to get some data\n    },\n    make_folder: function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    },\n    write_file: [\'get_data\', \'make_folder\', function(callback){\n        // once there is some data and the directory exists,\n        // write the data to a file in the directory\n        callback(null, filename);\n    }],\n    email_link: [\'write_file\', function(callback, results){\n        // once the file is written let\'s email a link to it...\n        // results.write_file contains the filename returned by write_file.\n    }]\n});\n```\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n```js\nasync.parallel([\n    function(callback){\n        // async code to get some data\n    },\n    function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    }\n],\nfunction(err, results){\n    async.series([\n        function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n        },\n        function(callback){\n            // once the file is written let\'s email a link to it...\n        }\n    ]);\n});\n```\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name="iterator" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. It\'s also possible to\n\'peek\' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run.\n\n__Example__\n\n```js\nvar iterator = async.iterator([\n    function(){ sys.p(\'one\'); },\n    function(){ sys.p(\'two\'); },\n    function(){ sys.p(\'three\'); }\n]);\n\nnode> var iterator2 = iterator();\n\'one\'\nnode> var iterator3 = iterator2();\n\'two\'\nnode> iterator3();\n\'three\'\nnode> var nextfn = iterator2.next();\nnode> nextfn();\n\'three\'\n```\n\n---------------------------------------\n\n<a name="apply" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n```js\n// using apply\n\nasync.parallel([\n    async.apply(fs.writeFile, \'testfile1\', \'test1\'),\n    async.apply(fs.writeFile, \'testfile2\', \'test2\'),\n]);\n\n\n// the same process without using apply\n\nasync.parallel([\n    function(callback){\n        fs.writeFile(\'testfile1\', \'test1\', callback);\n    },\n    function(callback){\n        fs.writeFile(\'testfile2\', \'test2\', callback);\n    }\n]);\n```\n\nIt\'s possible to pass any number of additional arguments when calling the\ncontinuation:\n\n```js\nnode> var fn = async.apply(sys.puts, \'one\');\nnode> fn(\'two\', \'three\');\none\ntwo\nthree\n```\n\n---------------------------------------\n\n<a name="nextTick" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setImmediate(callback)\nif available, otherwise setTimeout(callback, 0), which means other higher priority\nevents may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n```js\nvar call_order = [];\nasync.nextTick(function(){\n    call_order.push(\'two\');\n    // call_order now equals [\'one\',\'two\']\n});\ncall_order.push(\'one\')\n```\n\n<a name="times" />\n### times(n, callback)\n\nCalls the callback n times and accumulates results in the same manner\nyou would use with async.map.\n\n__Arguments__\n\n* n - The number of times to run the function.\n* callback - The function to call n times.\n\n__Example__\n\n```js\n// Pretend this is some complicated async factory\nvar createUser = function(id, callback) {\n  callback(null, {\n    id: \'user\' + id\n  })\n}\n// generate 5 users\nasync.times(5, function(n, next){\n    createUser(n, function(err, user) {\n      next(err, user)\n    })\n}, function(err, users) {\n  // we should now have 5 users\n});\n```\n\n<a name="timesSeries" />\n### timesSeries(n, callback)\n\nThe same as times only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n## Utils\n\n<a name="memoize" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\nThe cache of results is exposed as the `memo` property of the function returned\nby `memoize`.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n```js\nvar slow_fn = function (name, callback) {\n    // do something\n    callback(null, result);\n};\nvar fn = async.memoize(slow_fn);\n\n// fn can now be used as if it were slow_fn\nfn(\'some name\', function () {\n    // callback\n});\n```\n\n<a name="unmemoize" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name="log" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, \'hello \' + name);\n    }, 1000);\n};\n```\n```js\nnode> async.log(hello, \'world\');\n\'hello world\'\n```\n\n---------------------------------------\n\n<a name="dir" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, {hello: name});\n    }, 1000);\n};\n```\n```js\nnode> async.dir(hello, \'world\');\n{hello: \'world\'}\n```\n\n---------------------------------------\n\n<a name="noConflict" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n',
7552 silly resolved     readmeFilename: 'README.md',
7552 silly resolved     homepage: 'https://github.com/caolan/async',
7552 silly resolved     _id: 'async@0.2.9',
7552 silly resolved     dist: { shasum: '6455af537fb64d92209589d5c8eb2e50fc71c035' },
7552 silly resolved     _from: 'async@~0.2.9',
7552 silly resolved     _resolved: 'https://registry.npmjs.org/async/-/async-0.2.9.tgz' } ]
7553 info install tmp@0.0.23 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-compass
7554 info install dargs@0.1.0 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-compass
7555 info install async@0.2.9 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-compass
7556 info installOne tmp@0.0.23
7557 info installOne dargs@0.1.0
7558 info installOne async@0.2.9
7559 silly resolved [ { name: 'lpad',
7559 silly resolved     version: '0.1.0',
7559 silly resolved     description: 'Left pad each line in a string or stdout/stderr',
7559 silly resolved     keywords: [ 'pad', 'indent', 'cli', 'format', 'string' ],
7559 silly resolved     homepage: 'https://github.com/sindresorhus/lpad',
7559 silly resolved     bugs: { url: 'https://github.com/sindresorhus/lpad/issues' },
7559 silly resolved     author:
7559 silly resolved      { name: 'Sindre Sorhus',
7559 silly resolved        email: 'sindresorhus@gmail.com',
7559 silly resolved        url: 'http://sindresorhus.com' },
7559 silly resolved     main: 'lpad.js',
7559 silly resolved     repository: { type: 'git', url: 'git://github.com/sindresorhus/lpad.git' },
7559 silly resolved     scripts: { test: 'mocha test-*.js' },
7559 silly resolved     devDependencies: { mocha: '~1.8.2' },
7559 silly resolved     engines: { node: '>=0.8.0' },
7559 silly resolved     licenses: [ [Object] ],
7559 silly resolved     readme: '# lpad [![Build Status](https://secure.travis-ci.org/sindresorhus/lpad.png?branch=master)](http://travis-ci.org/sindresorhus/lpad)\n\nLeft pad each line in a string or stdout/stderr.\n\nThe stdout/stderr padding is especially useful in CLI tools when you don\'t directly control the output.\n\n\n![screenshot](screenshot.png)\n\n\n## Getting started\n\nInstall: `npm install lpad`\n\n\n## Documentation\n\n\n### lpad(string, pad)\n\nPads each line in a string with the supplied pad string.\n\n#### Example\n\n```js\nvar lpad = require(\'lpad\');\nvar str = \'foo\\nbar\';\n\nconsole.log(str);\n/*\nfoo\nbar\n*/\n\nconsole.log(lpad(str, \'    \'));\n/*\n    foo\n    bar\n*/\n```\n\n### lpad.stdout(pad)\n\nPads each line of `process.stdout` with the supplied pad string until the method is called again with no arguments.\n\n#### Example\n\n```js\nvar lpad = require(\'lpad\');\nvar str = \'foo\\nbar\';\n\nlpad.stdout(\'    \');  // start padding\n\nconsole.log(str);\n/*\n    foo\n    bar\n*/\n\nlpad.stdout();  // end padding\n\nconsole.log(str);\n/*\nfoo\nbar\n*/\n```\n\n### lpad.stderr(pad)\n\nPads each line of `process.stderr` with the supplied pad string until the method is called again with no arguments.\n\n\n## License\n\n[MIT License](http://en.wikipedia.org/wiki/MIT_License)\n(c) [Sindre Sorhus](http://sindresorhus.com)\n',
7559 silly resolved     readmeFilename: 'readme.md',
7559 silly resolved     _id: 'lpad@0.1.0',
7559 silly resolved     dist: { shasum: '4c051660ec3f28d9adf68119f4015d97d2a779fb' },
7559 silly resolved     _from: 'lpad@~0.1.0',
7559 silly resolved     _resolved: 'https://registry.npmjs.org/lpad/-/lpad-0.1.0.tgz' },
7559 silly resolved   { name: 'async',
7559 silly resolved     description: 'Higher-order functions and common patterns for asynchronous code',
7559 silly resolved     main: './lib/async',
7559 silly resolved     author: { name: 'Caolan McMahon' },
7559 silly resolved     version: '0.2.9',
7559 silly resolved     repository: { type: 'git', url: 'https://github.com/caolan/async.git' },
7559 silly resolved     bugs: { url: 'https://github.com/caolan/async/issues' },
7559 silly resolved     licenses: [ [Object] ],
7559 silly resolved     devDependencies: { nodeunit: '>0.0.0', 'uglify-js': '1.2.x', nodelint: '>0.0.0' },
7559 silly resolved     jam: { main: 'lib/async.js', include: [Object] },
7559 silly resolved     scripts: { test: 'nodeunit test/test-async.js' },
7559 silly resolved     readme: '# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser. Also supports [component](https://github.com/component/component).\n\nAsync provides around 20 functions that include the usual \'functional\'\nsuspects (map, reduce, filter, each…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n```javascript\nasync.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n\nasync.filter([\'file1\',\'file2\',\'file3\'], fs.exists, function(results){\n    // results now equals an array of the existing files\n});\n\nasync.parallel([\n    function(){ ... },\n    function(){ ... }\n], callback);\n\nasync.series([\n    function(){ ... },\n    function(){ ... }\n]);\n```\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n## Common Pitfalls\n\n### Binding a context to an iterator\n\nThis section is really about bind, not about async. If you are wondering how to\nmake async execute your iterators in a given context, or are confused as to why\na method of another library isn\'t working as an iterator, study this example:\n\n```js\n// Here is a simple object with an (unnecessarily roundabout) squaring method\nvar AsyncSquaringLibrary = {\n  squareExponent: 2,\n  square: function(number, callback){ \n    var result = Math.pow(number, this.squareExponent);\n    setTimeout(function(){\n      callback(null, result);\n    }, 200);\n  }\n};\n\nasync.map([1, 2, 3], AsyncSquaringLibrary.square, function(err, result){\n  // result is [NaN, NaN, NaN]\n  // This fails because the `this.squareExponent` expression in the square\n  // function is not evaluated in the context of AsyncSquaringLibrary, and is\n  // therefore undefined.\n});\n\nasync.map([1, 2, 3], AsyncSquaringLibrary.square.bind(AsyncSquaringLibrary), function(err, result){\n  // result is [1, 4, 9]\n  // With the help of bind we can attach a context to the iterator before\n  // passing it to async. Now the square function will be executed in its \n  // \'home\' AsyncSquaringLibrary context and the value of `this.squareExponent`\n  // will be as expected.\n});\n```\n\n## Download\n\nThe source is available for download from\n[GitHub](http://github.com/caolan/async).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 29.6kb Uncompressed\n\n## In the Browser\n\nSo far it\'s been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n```html\n<script type="text/javascript" src="async.js"></script>\n<script type="text/javascript">\n\n    async.map(data, asyncProcess, function(err, results){\n        alert(results);\n    });\n\n</script>\n```\n\n## Documentation\n\n### Collections\n\n* [each](#each)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [doWhilst](#doWhilst)\n* [until](#until)\n* [doUntil](#doUntil)\n* [forever](#forever)\n* [waterfall](#waterfall)\n* [compose](#compose)\n* [applyEach](#applyEach)\n* [queue](#queue)\n* [cargo](#cargo)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n* [times](#times)\n* [timesSeries](#timesSeries)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name="forEach" />\n<a name="each" />\n### each(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the each function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err) which must be called once it has \n  completed. If no error has occured, the callback should be run without \n  arguments or with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// assuming openFiles is an array of file names and saveFile is a function\n// to save the modified contents of that file:\n\nasync.each(openFiles, saveFile, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name="forEachSeries" />\n<a name="eachSeries" />\n### eachSeries(arr, iterator, callback)\n\nThe same as each only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name="forEachLimit" />\n<a name="eachLimit" />\n### eachLimit(arr, limit, iterator, callback)\n\nThe same as each only no more than "limit" iterators will be simultaneously \nrunning at any time.\n\nNote that the items are not processed in batches, so there is no guarantee that\n the first "limit" iterator functions will complete before any others are \nstarted.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - The maximum number of iterators to run at any time.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err) which must be called once it has \n  completed. If no error has occured, the callback should be run without \n  arguments or with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// Assume documents is an array of JSON objects and requestApi is a\n// function that interacts with a rate-limited REST api.\n\nasync.eachLimit(documents, 20, requestApi, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name="map" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, transformed) which must be called once \n  it has completed with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name="mapSeries" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name="mapLimit" />\n### mapLimit(arr, limit, iterator, callback)\n\nThe same as map only no more than "limit" iterators will be simultaneously \nrunning at any time.\n\nNote that the items are not processed in batches, so there is no guarantee that\n the first "limit" iterator functions will complete before any others are \nstarted.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - The maximum number of iterators to run at any time.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, transformed) which must be called once \n  it has completed with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map([\'file1\',\'file2\',\'file3\'], 1, fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name="filter" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like fs.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n```js\nasync.filter([\'file1\',\'file2\',\'file3\'], fs.exists, function(results){\n    // results now equals an array of the existing files\n});\n```\n\n---------------------------------------\n\n<a name="filterSeries" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name="reject" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name="rejectSeries" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as reject, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name="reduce" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then it\'s probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback(err, reduction) which accepts an optional error as its first \n  argument, and the state of the reduction as the second. If an error is \n  passed to the callback, the reduction is stopped and the main callback is \n  immediately called with the error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n```js\nasync.reduce([1,2,3], 0, function(memo, item, callback){\n    // pointless async:\n    process.nextTick(function(){\n        callback(null, memo + item)\n    });\n}, function(err, result){\n    // result is now equal to the last value of memo, which is 6\n});\n```\n\n---------------------------------------\n\n<a name="reduceRight" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name="detect" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n```js\nasync.detect([\'file1\',\'file2\',\'file3\'], fs.exists, function(result){\n    // result now equals the first file in the list that exists\n});\n```\n\n---------------------------------------\n\n<a name="detectSeries" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name="sortBy" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, sortValue) which must be called once it\n  has completed with an error (which can be null) and a value to use as the sort\n  criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n```js\nasync.sortBy([\'file1\',\'file2\',\'file3\'], function(file, callback){\n    fs.stat(file, function(err, stats){\n        callback(err, stats.mtime);\n    });\n}, function(err, results){\n    // results is now the original array of files sorted by\n    // modified date\n});\n```\n\n---------------------------------------\n\n<a name="some" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like fs.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n```js\nasync.some([\'file1\',\'file2\',\'file3\'], fs.exists, function(result){\n    // if result is true then at least one of the files exists\n});\n```\n\n---------------------------------------\n\n<a name="every" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like fs.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n```js\nasync.every([\'file1\',\'file2\',\'file3\'], fs.exists, function(result){\n    // if result is true then every file exists\n});\n```\n\n---------------------------------------\n\n<a name="concat" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, results) which must be called once it \n  has completed with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n```js\nasync.concat([\'dir1\',\'dir2\',\'dir3\'], fs.readdir, function(err, files){\n    // files is now a list of filenames that exist in the 3 directories\n});\n```\n\n---------------------------------------\n\n<a name="concatSeries" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name="series" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n__Example__\n\n```js\nasync.series([\n    function(callback){\n        // do some stuff ...\n        callback(null, \'one\');\n    },\n    function(callback){\n        // do some more stuff ...\n        callback(null, \'two\');\n    }\n],\n// optional callback\nfunction(err, results){\n    // results is now equal to [\'one\', \'two\']\n});\n\n\n// an example using an object instead of an array\nasync.series({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equal to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name="parallel" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed \n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n__Example__\n\n```js\nasync.parallel([\n    function(callback){\n        setTimeout(function(){\n            callback(null, \'one\');\n        }, 200);\n    },\n    function(callback){\n        setTimeout(function(){\n            callback(null, \'two\');\n        }, 100);\n    }\n],\n// optional callback\nfunction(err, results){\n    // the results array will equal [\'one\',\'two\'] even though\n    // the second function had a shorter timeout.\n});\n\n\n// an example using an object instead of an array\nasync.parallel({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equals to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name="parallel" />\n### parallelLimit(tasks, limit, [callback])\n\nThe same as parallel only the tasks are executed in parallel with a maximum of "limit" \ntasks executing at any time.\n\nNote that the tasks are not executed in batches, so there is no guarantee that \nthe first "limit" tasks will complete before any others are started.\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed \n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* limit - The maximum number of tasks to run at any time.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n---------------------------------------\n\n<a name="whilst" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback(err) which must be called once it has completed with an \n  optional error argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n```js\nvar count = 0;\n\nasync.whilst(\n    function () { return count < 5; },\n    function (callback) {\n        count++;\n        setTimeout(callback, 1000);\n    },\n    function (err) {\n        // 5 seconds have passed\n    }\n);\n```\n\n---------------------------------------\n\n<a name="doWhilst" />\n### doWhilst(fn, test, callback)\n\nThe post check version of whilst. To reflect the difference in the order of operations `test` and `fn` arguments are switched. `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n\n---------------------------------------\n\n<a name="until" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n---------------------------------------\n\n<a name="doUntil" />\n### doUntil(fn, test, callback)\n\nLike doWhilst except the test is inverted. Note the argument ordering differs from `until`.\n\n---------------------------------------\n\n<a name="forever" />\n### forever(fn, callback)\n\nCalls the asynchronous function \'fn\' repeatedly, in series, indefinitely.\nIf an error is passed to fn\'s callback then \'callback\' is called with the\nerror, otherwise it will never be called.\n\n---------------------------------------\n\n<a name="waterfall" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a \n  callback(err, result1, result2, ...) it must call on completion. The first\n  argument is an error (which can be null) and any further arguments will be \n  passed as arguments in order to the next task.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task\'s callback.\n\n\n\n__Example__\n\n```js\nasync.waterfall([\n    function(callback){\n        callback(null, \'one\', \'two\');\n    },\n    function(arg1, arg2, callback){\n        callback(null, \'three\');\n    },\n    function(arg1, callback){\n        // arg1 now equals \'three\'\n        callback(null, \'done\');\n    }\n], function (err, result) {\n   // result now equals \'done\'    \n});\n```\n\n---------------------------------------\n<a name="compose" />\n### compose(fn1, fn2...)\n\nCreates a function which is a composition of the passed asynchronous\nfunctions. Each function consumes the return value of the function that\nfollows. Composing functions f(), g() and h() would produce the result of\nf(g(h())), only this version uses callbacks to obtain the return values.\n\nEach function is executed with the `this` binding of the composed function.\n\n__Arguments__\n\n* functions... - the asynchronous functions to compose\n\n\n__Example__\n\n```js\nfunction add1(n, callback) {\n    setTimeout(function () {\n        callback(null, n + 1);\n    }, 10);\n}\n\nfunction mul3(n, callback) {\n    setTimeout(function () {\n        callback(null, n * 3);\n    }, 10);\n}\n\nvar add1mul3 = async.compose(mul3, add1);\n\nadd1mul3(4, function (err, result) {\n   // result now equals 15\n});\n```\n\n---------------------------------------\n<a name="applyEach" />\n### applyEach(fns, args..., callback)\n\nApplies the provided arguments to each function in the array, calling the\ncallback after all functions have completed. If you only provide the first\nargument then it will return a function which lets you pass in the\narguments as if it were a single function call.\n\n__Arguments__\n\n* fns - the asynchronous functions to all call with the same arguments\n* args... - any number of separate arguments to pass to the function\n* callback - the final argument should be the callback, called when all\n  functions have completed processing\n\n\n__Example__\n\n```js\nasync.applyEach([enableSearch, updateSchema], \'bucket\', callback);\n\n// partial application example:\nasync.each(\n    buckets,\n    async.applyEach([enableSearch, updateSchema]),\n    callback\n);\n```\n\n---------------------------------------\n\n<a name="applyEachSeries" />\n### applyEachSeries(arr, iterator, callback)\n\nThe same as applyEach only the functions are applied in series.\n\n---------------------------------------\n\n<a name="queue" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task\'s callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task, which must call its callback(err) argument when finished, with an \n  optional error as an argument.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* unshift(task, [callback]) - add a new task to the front of the queue.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a queue object with concurrency 2\n\nvar q = async.queue(function (task, callback) {\n    console.log(\'hello \' + task.name);\n    callback();\n}, 2);\n\n\n// assign a callback\nq.drain = function() {\n    console.log(\'all items have been processed\');\n}\n\n// add some items to the queue\n\nq.push({name: \'foo\'}, function (err) {\n    console.log(\'finished processing foo\');\n});\nq.push({name: \'bar\'}, function (err) {\n    console.log(\'finished processing bar\');\n});\n\n// add some items to the queue (batch-wise)\n\nq.push([{name: \'baz\'},{name: \'bay\'},{name: \'bax\'}], function (err) {\n    console.log(\'finished processing bar\');\n});\n\n// add some items to the front of the queue\n\nq.unshift({name: \'bar\'}, function (err) {\n    console.log(\'finished processing bar\');\n});\n```\n\n---------------------------------------\n\n<a name="cargo" />\n### cargo(worker, [payload])\n\nCreates a cargo object with the specified payload. Tasks added to the\ncargo will be processed altogether (up to the payload limit). If the\nworker is in progress, the task is queued until it is available. Once\nthe worker has completed some tasks, each callback of those tasks is called.\n\n__Arguments__\n\n* worker(tasks, callback) - An asynchronous function for processing an array of\n  queued tasks, which must call its callback(err) argument when finished, with \n  an optional error as an argument.\n* payload - An optional integer for determining how many tasks should be\n  processed per round; if omitted, the default is unlimited.\n\n__Cargo objects__\n\nThe cargo object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* payload - an integer for determining how many tasks should be\n  process per round. This property can be changed after a cargo is created to\n  alter the payload on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a cargo object with payload 2\n\nvar cargo = async.cargo(function (tasks, callback) {\n    for(var i=0; i<tasks.length; i++){\n      console.log(\'hello \' + tasks[i].name);\n    }\n    callback();\n}, 2);\n\n\n// add some items\n\ncargo.push({name: \'foo\'}, function (err) {\n    console.log(\'finished processing foo\');\n});\ncargo.push({name: \'bar\'}, function (err) {\n    console.log(\'finished processing bar\');\n});\ncargo.push({name: \'baz\'}, function (err) {\n    console.log(\'finished processing baz\');\n});\n```\n\n---------------------------------------\n\n<a name="auto" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\nNote, all functions are called with a results object as a second argument, \nso it is unsafe to pass functions in the tasks object which cannot handle the\nextra argument. For example, this snippet of code:\n\n```js\nasync.auto({\n  readData: async.apply(fs.readFile, \'data.txt\', \'utf-8\');\n}, callback);\n```\n\nwill have the effect of calling readFile with the results object as the last\nargument, which will fail:\n\n```js\nfs.readFile(\'data.txt\', \'utf-8\', cb, {});\n```\n\nInstead, wrap the call to readFile in a function which does not forward the \nresults object:\n\n```js\nasync.auto({\n  readData: function(cb, results){\n    fs.readFile(\'data.txt\', \'utf-8\', cb);\n  }\n}, callback);\n```\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The \n  function receives two arguments: (1) a callback(err, result) which must be \n  called when finished, passing an error (which can be null) and the result of \n  the function\'s execution, and (2) a results object, containing the results of\n  the previously executed functions.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. Results will always be passed\n\tbut if an error occurred, no other tasks will be performed, and the results\n\tobject will only contain partial results.\n  \n\n__Example__\n\n```js\nasync.auto({\n    get_data: function(callback){\n        // async code to get some data\n    },\n    make_folder: function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    },\n    write_file: [\'get_data\', \'make_folder\', function(callback){\n        // once there is some data and the directory exists,\n        // write the data to a file in the directory\n        callback(null, filename);\n    }],\n    email_link: [\'write_file\', function(callback, results){\n        // once the file is written let\'s email a link to it...\n        // results.write_file contains the filename returned by write_file.\n    }]\n});\n```\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n```js\nasync.parallel([\n    function(callback){\n        // async code to get some data\n    },\n    function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    }\n],\nfunction(err, results){\n    async.series([\n        function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n        },\n        function(callback){\n            // once the file is written let\'s email a link to it...\n        }\n    ]);\n});\n```\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name="iterator" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. It\'s also possible to\n\'peek\' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run.\n\n__Example__\n\n```js\nvar iterator = async.iterator([\n    function(){ sys.p(\'one\'); },\n    function(){ sys.p(\'two\'); },\n    function(){ sys.p(\'three\'); }\n]);\n\nnode> var iterator2 = iterator();\n\'one\'\nnode> var iterator3 = iterator2();\n\'two\'\nnode> iterator3();\n\'three\'\nnode> var nextfn = iterator2.next();\nnode> nextfn();\n\'three\'\n```\n\n---------------------------------------\n\n<a name="apply" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n```js\n// using apply\n\nasync.parallel([\n    async.apply(fs.writeFile, \'testfile1\', \'test1\'),\n    async.apply(fs.writeFile, \'testfile2\', \'test2\'),\n]);\n\n\n// the same process without using apply\n\nasync.parallel([\n    function(callback){\n        fs.writeFile(\'testfile1\', \'test1\', callback);\n    },\n    function(callback){\n        fs.writeFile(\'testfile2\', \'test2\', callback);\n    }\n]);\n```\n\nIt\'s possible to pass any number of additional arguments when calling the\ncontinuation:\n\n```js\nnode> var fn = async.apply(sys.puts, \'one\');\nnode> fn(\'two\', \'three\');\none\ntwo\nthree\n```\n\n---------------------------------------\n\n<a name="nextTick" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setImmediate(callback)\nif available, otherwise setTimeout(callback, 0), which means other higher priority\nevents may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n```js\nvar call_order = [];\nasync.nextTick(function(){\n    call_order.push(\'two\');\n    // call_order now equals [\'one\',\'two\']\n});\ncall_order.push(\'one\')\n```\n\n<a name="times" />\n### times(n, callback)\n\nCalls the callback n times and accumulates results in the same manner\nyou would use with async.map.\n\n__Arguments__\n\n* n - The number of times to run the function.\n* callback - The function to call n times.\n\n__Example__\n\n```js\n// Pretend this is some complicated async factory\nvar createUser = function(id, callback) {\n  callback(null, {\n    id: \'user\' + id\n  })\n}\n// generate 5 users\nasync.times(5, function(n, next){\n    createUser(n, function(err, user) {\n      next(err, user)\n    })\n}, function(err, users) {\n  // we should now have 5 users\n});\n```\n\n<a name="timesSeries" />\n### timesSeries(n, callback)\n\nThe same as times only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n## Utils\n\n<a name="memoize" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\nThe cache of results is exposed as the `memo` property of the function returned\nby `memoize`.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n```js\nvar slow_fn = function (name, callback) {\n    // do something\n    callback(null, result);\n};\nvar fn = async.memoize(slow_fn);\n\n// fn can now be used as if it were slow_fn\nfn(\'some name\', function () {\n    // callback\n});\n```\n\n<a name="unmemoize" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name="log" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, \'hello \' + name);\n    }, 1000);\n};\n```\n```js\nnode> async.log(hello, \'world\');\n\'hello world\'\n```\n\n---------------------------------------\n\n<a name="dir" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, {hello: name});\n    }, 1000);\n};\n```\n```js\nnode> async.dir(hello, \'world\');\n{hello: \'world\'}\n```\n\n---------------------------------------\n\n<a name="noConflict" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n',
7559 silly resolved     readmeFilename: 'README.md',
7559 silly resolved     homepage: 'https://github.com/caolan/async',
7559 silly resolved     _id: 'async@0.2.9',
7559 silly resolved     dist: { shasum: '6455af537fb64d92209589d5c8eb2e50fc71c035' },
7559 silly resolved     _from: 'async@~0.2.9',
7559 silly resolved     _resolved: 'https://registry.npmjs.org/async/-/async-0.2.9.tgz' } ]
7560 info install lpad@0.1.0 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-concurrent
7561 info install async@0.2.9 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-concurrent
7562 info installOne lpad@0.1.0
7563 info installOne async@0.2.9
7564 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-compass\node_modules\tmp unbuild
7565 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-compass\node_modules\dargs unbuild
7566 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-compass\node_modules\async unbuild
7567 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-concurrent\node_modules\lpad unbuild
7568 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-concurrent\node_modules\async unbuild
7569 verbose addRemoteTarball [ 'https://registry.npmjs.org/pause/-/pause-0.0.1.tgz',
7569 verbose addRemoteTarball   '1d408b3fdb76923b9543d96fb4c9dfd535d9cb5d' ]
7570 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\async\0.2.9\package.tgz
7571 silly lockFile 3ad832c7-s-grunt-newer-node-modules-async tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-newer\node_modules\async
7572 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-newer\node_modules\async C:\Users\Gaston\AppData\Roaming\npm-cache\3ad832c7-s-grunt-newer-node-modules-async.lock
7573 silly lockFile f1e10200-pm-cache-async-0-2-9-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\async\0.2.9\package.tgz
7574 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\async\0.2.9\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\f1e10200-pm-cache-async-0-2-9-package-tgz.lock
7575 info retry fetch attempt 1 at 16:39:39
7576 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979919-0.051672365283593535\tmp.tgz
7577 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\tmp\0.0.23\package.tgz
7578 silly lockFile 278d64de-contrib-compass-node-modules-tmp tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-compass\node_modules\tmp
7579 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-compass\node_modules\tmp C:\Users\Gaston\AppData\Roaming\npm-cache\278d64de-contrib-compass-node-modules-tmp.lock
7580 silly lockFile 91eb8eac-npm-cache-tmp-0-0-23-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\tmp\0.0.23\package.tgz
7581 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\tmp\0.0.23\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\91eb8eac-npm-cache-tmp-0-0-23-package-tgz.lock
7582 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\dargs\0.1.0\package.tgz
7583 silly lockFile b7f5df66-ntrib-compass-node-modules-dargs tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-compass\node_modules\dargs
7584 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-compass\node_modules\dargs C:\Users\Gaston\AppData\Roaming\npm-cache\b7f5df66-ntrib-compass-node-modules-dargs.lock
7585 silly lockFile d6f509d2-pm-cache-dargs-0-1-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\dargs\0.1.0\package.tgz
7586 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\dargs\0.1.0\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\d6f509d2-pm-cache-dargs-0-1-0-package-tgz.lock
7587 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\async\0.2.9\package.tgz
7588 silly lockFile 967726a5-ntrib-compass-node-modules-async tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-compass\node_modules\async
7589 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-compass\node_modules\async C:\Users\Gaston\AppData\Roaming\npm-cache\967726a5-ntrib-compass-node-modules-async.lock
7590 silly lockFile f1e10200-pm-cache-async-0-2-9-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\async\0.2.9\package.tgz
7591 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\async\0.2.9\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\f1e10200-pm-cache-async-0-2-9-package-tgz.lock
7592 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\lpad\0.1.0\package.tgz
7593 silly lockFile f23eaf8c-unt-concurrent-node-modules-lpad tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-concurrent\node_modules\lpad
7594 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-concurrent\node_modules\lpad C:\Users\Gaston\AppData\Roaming\npm-cache\f23eaf8c-unt-concurrent-node-modules-lpad.lock
7595 silly lockFile 3bb618f8-npm-cache-lpad-0-1-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\lpad\0.1.0\package.tgz
7596 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\lpad\0.1.0\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\3bb618f8-npm-cache-lpad-0-1-0-package-tgz.lock
7597 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\async\0.2.9\package.tgz
7598 silly lockFile c5d5c578-nt-concurrent-node-modules-async tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-concurrent\node_modules\async
7599 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-concurrent\node_modules\async C:\Users\Gaston\AppData\Roaming\npm-cache\c5d5c578-nt-concurrent-node-modules-async.lock
7600 silly lockFile f1e10200-pm-cache-async-0-2-9-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\async\0.2.9\package.tgz
7601 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\async\0.2.9\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\f1e10200-pm-cache-async-0-2-9-package-tgz.lock
7602 http GET https://registry.npmjs.org/pause/-/pause-0.0.1.tgz
7603 silly gunzTarPerm modes [ '755', '644' ]
7604 silly gunzTarPerm modes [ '755', '644' ]
7605 silly gunzTarPerm modes [ '755', '644' ]
7606 silly gunzTarPerm modes [ '755', '644' ]
7607 silly gunzTarPerm extractEntry package.json
7608 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
7609 silly gunzTarPerm extractEntry package.json
7610 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
7611 silly gunzTarPerm extractEntry package.json
7612 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
7613 silly lockFile c7b774e6-978771-0-457123247673735-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978771-0.457123247673735\package
7614 silly lockFile c7b774e6-978771-0-457123247673735-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978771-0.457123247673735\package
7615 silly gunzTarPerm extractEntry package.json
7616 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
7617 silly lockFile 6b67aba9-978771-0-457123247673735-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978771-0.457123247673735\tmp.tgz
7618 silly lockFile 6b67aba9-978771-0-457123247673735-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978771-0.457123247673735\tmp.tgz
7619 silly gunzTarPerm extractEntry README.md
7620 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
7621 silly gunzTarPerm extractEntry LICENSE
7622 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
7623 silly gunzTarPerm extractEntry component.json
7624 silly gunzTarPerm modified mode [ 'component.json', 438, 420 ]
7625 silly gunzTarPerm extractEntry lib/async.js
7626 silly gunzTarPerm modified mode [ 'lib/async.js', 438, 420 ]
7627 silly gunzTarPerm extractEntry .npmignore
7628 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
7629 silly gunzTarPerm extractEntry README.md
7630 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
7631 silly gunzTarPerm extractEntry lpad.js
7632 silly gunzTarPerm modified mode [ 'lpad.js', 438, 420 ]
7633 silly gunzTarPerm extractEntry readme.md
7634 silly gunzTarPerm modified mode [ 'readme.md', 438, 420 ]
7635 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\buffer-crc32\\0.2.1\\package.tgz',
7635 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388777978771-0.457123247673735\\package' ]
7636 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\buffer-crc32\0.2.1\package.tgz
7637 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978771-0.457123247673735\package
7638 silly lockFile c7b774e6-978771-0-457123247673735-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978771-0.457123247673735\package
7639 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978771-0.457123247673735\package C:\Users\Gaston\AppData\Roaming\npm-cache\c7b774e6-978771-0-457123247673735-package.lock
7640 silly lockFile 5b37a7d2-e-buffer-crc32-0-2-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\buffer-crc32\0.2.1\package.tgz
7641 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\buffer-crc32\0.2.1\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\5b37a7d2-e-buffer-crc32-0-2-1-package-tgz.lock
7642 silly gunzTarPerm extractEntry dargs.js
7643 silly gunzTarPerm modified mode [ 'dargs.js', 438, 420 ]
7644 silly gunzTarPerm extractEntry readme.md
7645 silly gunzTarPerm modified mode [ 'readme.md', 438, 420 ]
7646 silly gunzTarPerm extractEntry domain-test.js
7647 silly gunzTarPerm modified mode [ 'domain-test.js', 438, 420 ]
7648 silly gunzTarPerm extractEntry test.js
7649 silly gunzTarPerm modified mode [ 'test.js', 438, 420 ]
7650 silly lockFile 9aa1ef7e-ing-npm-cache-gaze-0-4-3-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\gaze\0.4.3\package
7651 silly lockFile 9aa1ef7e-ing-npm-cache-gaze-0-4-3-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\gaze\0.4.3\package
7652 silly lockFile 11fcaf92-npm-cache-gaze-0-4-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\gaze\0.4.3\package.tgz
7653 silly lockFile 11fcaf92-npm-cache-gaze-0-4-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\gaze\0.4.3\package.tgz
7654 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\gaze\0.4.3\package.tgz 644
7655 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\gaze\0.4.3\package.tgz
7656 silly lockFile 23200fc8-ry-npmjs-org-gaze-gaze-0-4-3-tgz https://registry.npmjs.org/gaze/-/gaze-0.4.3.tgz
7657 silly lockFile 23200fc8-ry-npmjs-org-gaze-gaze-0-4-3-tgz https://registry.npmjs.org/gaze/-/gaze-0.4.3.tgz
7658 silly gunzTarPerm extractEntry .travis.yml
7659 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]
7660 silly gunzTarPerm extractEntry lib/tmp.js
7661 silly gunzTarPerm modified mode [ 'lib/tmp.js', 438, 420 ]
7662 silly lockFile 6119999c-gaze-0-4-3 gaze@0.4.3
7663 silly lockFile 6119999c-gaze-0-4-3 gaze@0.4.3
7664 silly lockFile 7f0764ad-gaze-0-4-0 gaze@~0.4.0
7665 silly lockFile 7f0764ad-gaze-0-4-0 gaze@~0.4.0
7666 http 200 https://registry.npmjs.org/qs/-/qs-0.6.5.tgz
7667 silly gunzTarPerm extractEntry test/base.js
7668 silly gunzTarPerm modified mode [ 'test/base.js', 438, 420 ]
7669 silly lockFile f23eaf8c-unt-concurrent-node-modules-lpad tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-concurrent\node_modules\lpad
7670 silly lockFile f23eaf8c-unt-concurrent-node-modules-lpad tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-concurrent\node_modules\lpad
7671 silly lockFile 3bb618f8-npm-cache-lpad-0-1-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\lpad\0.1.0\package.tgz
7672 silly lockFile 3bb618f8-npm-cache-lpad-0-1-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\lpad\0.1.0\package.tgz
7673 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978463-0.045157130574807525\tmp.tgz
7674 silly lockFile d744c817-463-0-045157130574807525-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978463-0.045157130574807525\package
7675 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978463-0.045157130574807525\package C:\Users\Gaston\AppData\Roaming\npm-cache\d744c817-463-0-045157130574807525-package.lock
7676 silly lockFile 7a3b72f3-463-0-045157130574807525-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978463-0.045157130574807525\tmp.tgz
7677 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978463-0.045157130574807525\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\7a3b72f3-463-0-045157130574807525-tmp-tgz.lock
7678 silly lockFile b7f5df66-ntrib-compass-node-modules-dargs tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-compass\node_modules\dargs
7679 silly lockFile b7f5df66-ntrib-compass-node-modules-dargs tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-compass\node_modules\dargs
7680 silly lockFile d6f509d2-pm-cache-dargs-0-1-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\dargs\0.1.0\package.tgz
7681 silly lockFile d6f509d2-pm-cache-dargs-0-1-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\dargs\0.1.0\package.tgz
7682 silly gunzTarPerm modes [ '755', '644' ]
7683 silly gunzTarPerm extractEntry test/dir-test.js
7684 silly gunzTarPerm modified mode [ 'test/dir-test.js', 438, 420 ]
7685 silly gunzTarPerm extractEntry test/file-test.js
7686 silly gunzTarPerm modified mode [ 'test/file-test.js', 438, 420 ]
7687 info preinstall lpad@0.1.0
7688 info preinstall dargs@0.1.0
7689 verbose readDependencies using package.json deps
7690 silly gunzTarPerm extractEntry package.json
7691 verbose readDependencies using package.json deps
7692 silly resolved []
7693 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-concurrent\node_modules\lpad
7694 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-concurrent\node_modules\lpad
7695 verbose linkStuff [ false,
7695 verbose linkStuff   false,
7695 verbose linkStuff   false,
7695 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-concurrent\\node_modules' ]
7696 info linkStuff lpad@0.1.0
7697 verbose linkBins lpad@0.1.0
7698 verbose linkMans lpad@0.1.0
7699 verbose rebuildBundles lpad@0.1.0
7700 verbose readDependencies using package.json deps
7701 info install lpad@0.1.0
7702 verbose readDependencies using package.json deps
7703 silly resolved []
7704 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-compass\node_modules\dargs
7705 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-compass\node_modules\dargs
7706 verbose linkStuff [ false,
7706 verbose linkStuff   false,
7706 verbose linkStuff   false,
7706 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-contrib-compass\\node_modules' ]
7707 info linkStuff dargs@0.1.0
7708 verbose linkBins dargs@0.1.0
7709 verbose linkMans dargs@0.1.0
7710 verbose rebuildBundles dargs@0.1.0
7711 silly lockFile c7b774e6-978771-0-457123247673735-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978771-0.457123247673735\package
7712 silly lockFile c7b774e6-978771-0-457123247673735-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978771-0.457123247673735\package
7713 info install dargs@0.1.0
7714 info postinstall lpad@0.1.0
7715 silly gunzTarPerm extractEntry .npmignore
7716 silly gunzTarPerm extractEntry index.js
7717 silly gunzTarPerm extractEntry test/graceful.js
7718 silly gunzTarPerm modified mode [ 'test/graceful.js', 438, 420 ]
7719 silly gunzTarPerm extractEntry test/keep.js
7720 silly gunzTarPerm modified mode [ 'test/keep.js', 438, 420 ]
7721 silly lockFile 5b37a7d2-e-buffer-crc32-0-2-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\buffer-crc32\0.2.1\package.tgz
7722 silly lockFile 5b37a7d2-e-buffer-crc32-0-2-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\buffer-crc32\0.2.1\package.tgz
7723 info postinstall dargs@0.1.0
7724 http 200 https://registry.npmjs.org/bytes/0.2.0
7725 silly registry.get cb [ 200,
7725 silly registry.get   { date: 'Fri, 03 Jan 2014 19:38:40 GMT',
7725 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
7725 silly registry.get     etag: '"C5WK2HI2NVKX3163YY0USS40B"',
7725 silly registry.get     'content-type': 'application/json',
7725 silly registry.get     'content-length': '2064',
7725 silly registry.get     'accept-ranges': 'bytes',
7725 silly registry.get     via: '1.1 varnish',
7725 silly registry.get     age: '86365',
7725 silly registry.get     'x-served-by': 'cache-d46-DAL',
7725 silly registry.get     'x-cache': 'HIT',
7725 silly registry.get     'x-cache-hits': '1',
7725 silly registry.get     'x-timer': 'S1388777920.866102219,VS0,VE12',
7725 silly registry.get     vary: 'Accept',
7725 silly registry.get     'keep-alive': 'timeout=10, max=41',
7725 silly registry.get     connection: 'Keep-Alive' } ]
7726 silly lockFile 6e9cf78a-cache-buffer-crc32-0-2-1-package C:\Users\Gaston\AppData\Roaming\npm-cache\buffer-crc32\0.2.1\package
7727 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\buffer-crc32\0.2.1\package C:\Users\Gaston\AppData\Roaming\npm-cache\6e9cf78a-cache-buffer-crc32-0-2-1-package.lock
7728 silly lockFile 6e9cf78a-cache-buffer-crc32-0-2-1-package C:\Users\Gaston\AppData\Roaming\npm-cache\buffer-crc32\0.2.1\package
7729 silly lockFile 6e9cf78a-cache-buffer-crc32-0-2-1-package C:\Users\Gaston\AppData\Roaming\npm-cache\buffer-crc32\0.2.1\package
7730 silly gunzTarPerm extractEntry .gitmodules
7731 silly gunzTarPerm extractEntry Readme.md
7732 silly gunzTarPerm extractEntry test/name-test.js
7733 silly gunzTarPerm modified mode [ 'test/name-test.js', 438, 420 ]
7734 silly gunzTarPerm extractEntry test/spawn.js
7735 silly gunzTarPerm modified mode [ 'test/spawn.js', 438, 420 ]
7736 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\buffer-crc32\0.2.1\package.tgz
7737 silly lockFile 6bbe3862-cache-buffer-crc32-0-2-1-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\buffer-crc32\0.2.1\package
7738 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\buffer-crc32\0.2.1\package C:\Users\Gaston\AppData\Roaming\npm-cache\6bbe3862-cache-buffer-crc32-0-2-1-package.lock
7739 silly lockFile 5b37a7d2-e-buffer-crc32-0-2-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\buffer-crc32\0.2.1\package.tgz
7740 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\buffer-crc32\0.2.1\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\5b37a7d2-e-buffer-crc32-0-2-1-package-tgz.lock
7741 silly gunzTarPerm modes [ '755', '644' ]
7742 silly lockFile e8d954bc--npmjs-org-bytes-bytes-0-2-0-tgz https://registry.npmjs.org/bytes/-/bytes-0.2.0.tgz
7743 verbose lock https://registry.npmjs.org/bytes/-/bytes-0.2.0.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\e8d954bc--npmjs-org-bytes-bytes-0-2-0-tgz.lock
7744 verbose addRemoteTarball [ 'https://registry.npmjs.org/bytes/-/bytes-0.2.0.tgz',
7744 verbose addRemoteTarball   'aad33ec14e3dc2ca74e8e7d451f9ba053ad4f7a0' ]
7745 silly gunzTarPerm extractEntry package.json
7746 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
7747 info retry fetch attempt 1 at 16:39:40
7748 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777980190-0.255074494285509\tmp.tgz
7749 http GET https://registry.npmjs.org/bytes/-/bytes-0.2.0.tgz
7750 silly gunzTarPerm extractEntry .npmignore
7751 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
7752 silly gunzTarPerm extractEntry README.md
7753 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
7754 silly gunzTarPerm extractEntry test/unsafe.js
7755 silly gunzTarPerm modified mode [ 'test/unsafe.js', 438, 420 ]
7756 silly gunzTarPerm extractEntry test/symlinkme/file.js
7757 silly gunzTarPerm modified mode [ 'test/symlinkme/file.js', 438, 420 ]
7758 silly gunzTarPerm extractEntry index.js
7759 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
7760 silly gunzTarPerm extractEntry .travis.yml
7761 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]
7762 silly gunzTarPerm extractEntry test-all.sh
7763 silly gunzTarPerm modified mode [ 'test-all.sh', 438, 420 ]
7764 silly gunzTarPerm extractEntry tests/crc.test.js
7765 silly gunzTarPerm modified mode [ 'tests/crc.test.js', 438, 420 ]
7766 silly lockFile d744c817-463-0-045157130574807525-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978463-0.045157130574807525\package
7767 silly lockFile d744c817-463-0-045157130574807525-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978463-0.045157130574807525\package
7768 silly lockFile 7a3b72f3-463-0-045157130574807525-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978463-0.045157130574807525\tmp.tgz
7769 silly lockFile 7a3b72f3-463-0-045157130574807525-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978463-0.045157130574807525\tmp.tgz
7770 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\qs\\0.6.5\\package.tgz',
7770 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388777978463-0.045157130574807525\\package' ]
7771 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.6.5\package.tgz
7772 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978463-0.045157130574807525\package
7773 silly lockFile d744c817-463-0-045157130574807525-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978463-0.045157130574807525\package
7774 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978463-0.045157130574807525\package C:\Users\Gaston\AppData\Roaming\npm-cache\d744c817-463-0-045157130574807525-package.lock
7775 silly lockFile 789b0dd8-g-npm-cache-qs-0-6-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.6.5\package.tgz
7776 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.6.5\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\789b0dd8-g-npm-cache-qs-0-6-5-package-tgz.lock
7777 http 200 https://registry.npmjs.org/fresh/-/fresh-0.1.0.tgz
7778 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979657-0.06051657837815583\tmp.tgz
7779 silly lockFile e00e9ae8-9657-0-06051657837815583-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979657-0.06051657837815583\package
7780 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979657-0.06051657837815583\package C:\Users\Gaston\AppData\Roaming\npm-cache\e00e9ae8-9657-0-06051657837815583-package.lock
7781 silly lockFile 41496bb8-9657-0-06051657837815583-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979657-0.06051657837815583\tmp.tgz
7782 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979657-0.06051657837815583\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\41496bb8-9657-0-06051657837815583-tmp-tgz.lock
7783 silly gunzTarPerm modes [ '755', '644' ]
7784 silly lockFile 3ad832c7-s-grunt-newer-node-modules-async tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-newer\node_modules\async
7785 silly lockFile 3ad832c7-s-grunt-newer-node-modules-async tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-newer\node_modules\async
7786 silly gunzTarPerm extractEntry package.json
7787 silly lockFile f1e10200-pm-cache-async-0-2-9-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\async\0.2.9\package.tgz
7788 silly lockFile f1e10200-pm-cache-async-0-2-9-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\async\0.2.9\package.tgz
7789 silly lockFile 6bbe3862-cache-buffer-crc32-0-2-1-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\buffer-crc32\0.2.1\package
7790 silly lockFile 6bbe3862-cache-buffer-crc32-0-2-1-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\buffer-crc32\0.2.1\package
7791 http 304 https://registry.npmjs.org/debug
7792 silly registry.get cb [ 304,
7792 silly registry.get   { date: 'Fri, 03 Jan 2014 19:38:41 GMT',
7792 silly registry.get     server: 'Apache',
7792 silly registry.get     connection: 'Keep-Alive',
7792 silly registry.get     'keep-alive': 'timeout=10, max=40',
7792 silly registry.get     etag: '"D3KJHAZTCKQ35NYLNYQDEN7JN"',
7792 silly registry.get     vary: 'Accept' } ]
7793 verbose etag debug from cache
7794 silly lockFile 5b37a7d2-e-buffer-crc32-0-2-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\buffer-crc32\0.2.1\package.tgz
7795 silly lockFile 5b37a7d2-e-buffer-crc32-0-2-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\buffer-crc32\0.2.1\package.tgz
7796 silly gunzTarPerm extractEntry .npmignore
7797 silly gunzTarPerm extractEntry index.js
7798 silly gunzTarPerm modes [ '755', '644' ]
7799 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\buffer-crc32\0.2.1\package.tgz 644
7800 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\buffer-crc32\0.2.1\package.tgz
7801 silly lockFile bc249dfa-fer-crc32-buffer-crc32-0-2-1-tgz https://registry.npmjs.org/buffer-crc32/-/buffer-crc32-0.2.1.tgz
7802 silly lockFile bc249dfa-fer-crc32-buffer-crc32-0-2-1-tgz https://registry.npmjs.org/buffer-crc32/-/buffer-crc32-0.2.1.tgz
7803 silly lockFile 057d0d26-buffer-crc32-0-2-1 buffer-crc32@0.2.1
7804 silly lockFile 057d0d26-buffer-crc32-0-2-1 buffer-crc32@0.2.1
7805 silly gunzTarPerm extractEntry package.json
7806 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
7807 silly gunzTarPerm extractEntry Makefile
7808 silly gunzTarPerm extractEntry Readme.md
7809 silly gunzTarPerm extractEntry README.md
7810 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
7811 silly gunzTarPerm extractEntry LICENSE
7812 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
7813 silly gunzTarPerm extractEntry component.json
7814 silly gunzTarPerm modified mode [ 'component.json', 438, 420 ]
7815 silly gunzTarPerm extractEntry lib/async.js
7816 silly gunzTarPerm modified mode [ 'lib/async.js', 438, 420 ]
7817 info preinstall async@0.2.9
7818 silly addNameRange number 2 { name: 'debug', range: '*', hasData: true }
7819 silly addNameRange versions [ 'debug',
7819 silly addNameRange   [ '0.0.1',
7819 silly addNameRange     '0.1.0',
7819 silly addNameRange     '0.2.0',
7819 silly addNameRange     '0.3.0',
7819 silly addNameRange     '0.4.0',
7819 silly addNameRange     '0.4.1',
7819 silly addNameRange     '0.5.0',
7819 silly addNameRange     '0.6.0',
7819 silly addNameRange     '0.7.0',
7819 silly addNameRange     '0.7.1',
7819 silly addNameRange     '0.7.2',
7819 silly addNameRange     '0.7.3',
7819 silly addNameRange     '0.7.4' ] ]
7820 verbose addNamed [ 'debug', '0.7.4' ]
7821 verbose addNamed [ '0.7.4', '0.7.4' ]
7822 silly lockFile 16160008-debug-0-7-4 debug@0.7.4
7823 verbose lock debug@0.7.4 C:\Users\Gaston\AppData\Roaming\npm-cache\16160008-debug-0-7-4.lock
7824 verbose readDependencies using package.json deps
7825 silly lockFile 16160008-debug-0-7-4 debug@0.7.4
7826 silly lockFile 16160008-debug-0-7-4 debug@0.7.4
7827 verbose readDependencies using package.json deps
7828 silly resolved []
7829 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-newer\node_modules\async
7830 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-newer\node_modules\async
7831 verbose linkStuff [ false,
7831 verbose linkStuff   false,
7831 verbose linkStuff   false,
7831 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-newer\\node_modules' ]
7832 info linkStuff async@0.2.9
7833 verbose linkBins async@0.2.9
7834 verbose linkMans async@0.2.9
7835 verbose rebuildBundles async@0.2.9
7836 silly lockFile 3ac45eff-debug debug@*
7837 silly lockFile 3ac45eff-debug debug@*
7838 info install async@0.2.9
7839 silly lockFile d744c817-463-0-045157130574807525-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978463-0.045157130574807525\package
7840 silly lockFile d744c817-463-0-045157130574807525-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978463-0.045157130574807525\package
7841 silly lockFile 789b0dd8-g-npm-cache-qs-0-6-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.6.5\package.tgz
7842 silly lockFile 789b0dd8-g-npm-cache-qs-0-6-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.6.5\package.tgz
7843 info postinstall async@0.2.9
7844 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-newer
7845 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-newer
7846 verbose linkStuff [ false,
7846 verbose linkStuff   false,
7846 verbose linkStuff   false,
7846 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules' ]
7847 info linkStuff grunt-newer@0.6.0
7848 verbose linkBins grunt-newer@0.6.0
7849 verbose linkMans grunt-newer@0.6.0
7850 verbose rebuildBundles grunt-newer@0.6.0
7851 silly lockFile e1f1ce22-aming-npm-cache-qs-0-6-5-package C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.6.5\package
7852 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.6.5\package C:\Users\Gaston\AppData\Roaming\npm-cache\e1f1ce22-aming-npm-cache-qs-0-6-5-package.lock
7853 verbose rebuildBundles [ 'async' ]
7854 info install grunt-newer@0.6.0
7855 info postinstall grunt-newer@0.6.0
7856 silly lockFile e1f1ce22-aming-npm-cache-qs-0-6-5-package C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.6.5\package
7857 silly lockFile e1f1ce22-aming-npm-cache-qs-0-6-5-package C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.6.5\package
7858 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.6.5\package.tgz
7859 silly lockFile c1a36b1f-aming-npm-cache-qs-0-6-5-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.6.5\package
7860 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.6.5\package C:\Users\Gaston\AppData\Roaming\npm-cache\c1a36b1f-aming-npm-cache-qs-0-6-5-package.lock
7861 silly lockFile 789b0dd8-g-npm-cache-qs-0-6-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.6.5\package.tgz
7862 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.6.5\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\789b0dd8-g-npm-cache-qs-0-6-5-package-tgz.lock
7863 silly gunzTarPerm modes [ '755', '644' ]
7864 silly gunzTarPerm extractEntry package.json
7865 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
7866 silly gunzTarPerm extractEntry .npmignore
7867 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
7868 silly gunzTarPerm extractEntry index.js
7869 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
7870 silly lockFile e00e9ae8-9657-0-06051657837815583-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979657-0.06051657837815583\package
7871 silly lockFile e00e9ae8-9657-0-06051657837815583-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979657-0.06051657837815583\package
7872 silly lockFile 41496bb8-9657-0-06051657837815583-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979657-0.06051657837815583\tmp.tgz
7873 silly lockFile 41496bb8-9657-0-06051657837815583-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979657-0.06051657837815583\tmp.tgz
7874 silly lockFile 278d64de-contrib-compass-node-modules-tmp tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-compass\node_modules\tmp
7875 silly lockFile 278d64de-contrib-compass-node-modules-tmp tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-compass\node_modules\tmp
7876 silly gunzTarPerm extractEntry .gitmodules
7877 silly gunzTarPerm modified mode [ '.gitmodules', 438, 420 ]
7878 silly gunzTarPerm extractEntry Readme.md
7879 silly gunzTarPerm modified mode [ 'Readme.md', 438, 420 ]
7880 silly lockFile 91eb8eac-npm-cache-tmp-0-0-23-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\tmp\0.0.23\package.tgz
7881 silly lockFile 91eb8eac-npm-cache-tmp-0-0-23-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\tmp\0.0.23\package.tgz
7882 http 200 https://registry.npmjs.org/pause/-/pause-0.0.1.tgz
7883 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\fresh\\0.1.0\\package.tgz',
7883 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388777979657-0.06051657837815583\\package' ]
7884 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\fresh\0.1.0\package.tgz
7885 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979657-0.06051657837815583\package
7886 silly lockFile e00e9ae8-9657-0-06051657837815583-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979657-0.06051657837815583\package
7887 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979657-0.06051657837815583\package C:\Users\Gaston\AppData\Roaming\npm-cache\e00e9ae8-9657-0-06051657837815583-package.lock
7888 silly lockFile 51d1c521-pm-cache-fresh-0-1-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\fresh\0.1.0\package.tgz
7889 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\fresh\0.1.0\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\51d1c521-pm-cache-fresh-0-1-0-package-tgz.lock
7890 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979919-0.051672365283593535\tmp.tgz
7891 silly lockFile b16143fc-919-0-051672365283593535-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979919-0.051672365283593535\package
7892 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979919-0.051672365283593535\package C:\Users\Gaston\AppData\Roaming\npm-cache\b16143fc-919-0-051672365283593535-package.lock
7893 silly lockFile 7421aef2-919-0-051672365283593535-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979919-0.051672365283593535\tmp.tgz
7894 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979919-0.051672365283593535\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\7421aef2-919-0-051672365283593535-tmp-tgz.lock
7895 info preinstall tmp@0.0.23
7896 silly gunzTarPerm modes [ '755', '644' ]
7897 verbose readDependencies using package.json deps
7898 verbose readDependencies using package.json deps
7899 silly resolved []
7900 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-compass\node_modules\tmp
7901 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-compass\node_modules\tmp
7902 verbose linkStuff [ false,
7902 verbose linkStuff   false,
7902 verbose linkStuff   false,
7902 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-contrib-compass\\node_modules' ]
7903 info linkStuff tmp@0.0.23
7904 verbose linkBins tmp@0.0.23
7905 verbose linkMans tmp@0.0.23
7906 verbose rebuildBundles tmp@0.0.23
7907 info install tmp@0.0.23
7908 silly gunzTarPerm extractEntry package.json
7909 http 200 https://registry.npmjs.org/cookie/-/cookie-0.0.5.tgz
7910 info postinstall tmp@0.0.23
7911 silly gunzTarPerm extractEntry .npmignore
7912 silly gunzTarPerm extractEntry index.js
7913 silly gunzTarPerm extractEntry History.md
7914 silly gunzTarPerm extractEntry Makefile
7915 http 304 https://registry.npmjs.org/graceful-fs
7916 silly registry.get cb [ 304,
7916 silly registry.get   { date: 'Fri, 03 Jan 2014 19:38:41 GMT',
7916 silly registry.get     server: 'Apache',
7916 silly registry.get     connection: 'Keep-Alive',
7916 silly registry.get     'keep-alive': 'timeout=10, max=39',
7916 silly registry.get     etag: '"CD9PAXA6045JPCERIXC2VPOQH"',
7916 silly registry.get     vary: 'Accept' } ]
7917 verbose etag graceful-fs from cache
7918 silly gunzTarPerm extractEntry Readme.md
7919 silly lockFile e00e9ae8-9657-0-06051657837815583-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979657-0.06051657837815583\package
7920 silly lockFile e00e9ae8-9657-0-06051657837815583-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979657-0.06051657837815583\package
7921 silly lockFile 51d1c521-pm-cache-fresh-0-1-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\fresh\0.1.0\package.tgz
7922 silly lockFile 51d1c521-pm-cache-fresh-0-1-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\fresh\0.1.0\package.tgz
7923 silly lockFile 3630efd8-ng-npm-cache-fresh-0-1-0-package C:\Users\Gaston\AppData\Roaming\npm-cache\fresh\0.1.0\package
7924 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\fresh\0.1.0\package C:\Users\Gaston\AppData\Roaming\npm-cache\3630efd8-ng-npm-cache-fresh-0-1-0-package.lock
7925 silly lockFile 3630efd8-ng-npm-cache-fresh-0-1-0-package C:\Users\Gaston\AppData\Roaming\npm-cache\fresh\0.1.0\package
7926 silly lockFile 3630efd8-ng-npm-cache-fresh-0-1-0-package C:\Users\Gaston\AppData\Roaming\npm-cache\fresh\0.1.0\package
7927 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\fresh\0.1.0\package.tgz
7928 silly lockFile e205e902-ng-npm-cache-fresh-0-1-0-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\fresh\0.1.0\package
7929 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\fresh\0.1.0\package C:\Users\Gaston\AppData\Roaming\npm-cache\e205e902-ng-npm-cache-fresh-0-1-0-package.lock
7930 silly lockFile 51d1c521-pm-cache-fresh-0-1-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\fresh\0.1.0\package.tgz
7931 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\fresh\0.1.0\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\51d1c521-pm-cache-fresh-0-1-0-package-tgz.lock
7932 silly addNameRange number 2 { name: 'graceful-fs',
7932 silly addNameRange   range: '>=1.2.0-0 <1.3.0-0',
7932 silly addNameRange   hasData: true }
7933 silly addNameRange versions [ 'graceful-fs',
7933 silly addNameRange   [ '1.0.0',
7933 silly addNameRange     '1.0.1',
7933 silly addNameRange     '1.0.2',
7933 silly addNameRange     '1.1.0',
7933 silly addNameRange     '1.1.1',
7933 silly addNameRange     '1.1.2',
7933 silly addNameRange     '1.1.3',
7933 silly addNameRange     '1.1.4',
7933 silly addNameRange     '1.1.5',
7933 silly addNameRange     '1.1.6',
7933 silly addNameRange     '1.1.7',
7933 silly addNameRange     '1.1.8',
7933 silly addNameRange     '1.1.9',
7933 silly addNameRange     '1.1.10',
7933 silly addNameRange     '1.1.11',
7933 silly addNameRange     '1.1.12',
7933 silly addNameRange     '1.1.13',
7933 silly addNameRange     '1.1.14',
7933 silly addNameRange     '1.2.0',
7933 silly addNameRange     '1.2.1',
7933 silly addNameRange     '1.2.2',
7933 silly addNameRange     '1.2.3',
7933 silly addNameRange     '2.0.0',
7933 silly addNameRange     '2.0.1' ] ]
7934 verbose addNamed [ 'graceful-fs', '1.2.3' ]
7935 verbose addNamed [ '1.2.3', '1.2.3' ]
7936 silly lockFile 6c7102cf-graceful-fs-1-2-3 graceful-fs@1.2.3
7937 verbose lock graceful-fs@1.2.3 C:\Users\Gaston\AppData\Roaming\npm-cache\6c7102cf-graceful-fs-1-2-3.lock
7938 silly gunzTarPerm modes [ '755', '644' ]
7939 silly gunzTarPerm extractEntry package.json
7940 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
7941 silly lockFile c1a36b1f-aming-npm-cache-qs-0-6-5-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.6.5\package
7942 silly lockFile c1a36b1f-aming-npm-cache-qs-0-6-5-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.6.5\package
7943 silly gunzTarPerm extractEntry .npmignore
7944 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
7945 silly gunzTarPerm extractEntry index.js
7946 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
7947 silly lockFile 789b0dd8-g-npm-cache-qs-0-6-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.6.5\package.tgz
7948 silly lockFile 789b0dd8-g-npm-cache-qs-0-6-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.6.5\package.tgz
7949 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.6.5\package.tgz 644
7950 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.6.5\package.tgz
7951 silly lockFile 45ccff3d-gistry-npmjs-org-qs-qs-0-6-5-tgz https://registry.npmjs.org/qs/-/qs-0.6.5.tgz
7952 silly lockFile 45ccff3d-gistry-npmjs-org-qs-qs-0-6-5-tgz https://registry.npmjs.org/qs/-/qs-0.6.5.tgz
7953 silly lockFile f5e5a40f-qs-0-6-5 qs@0.6.5
7954 silly lockFile f5e5a40f-qs-0-6-5 qs@0.6.5
7955 silly gunzTarPerm extractEntry Makefile
7956 silly gunzTarPerm modified mode [ 'Makefile', 438, 420 ]
7957 silly gunzTarPerm extractEntry Readme.md
7958 silly gunzTarPerm modified mode [ 'Readme.md', 438, 420 ]
7959 silly lockFile b16143fc-919-0-051672365283593535-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979919-0.051672365283593535\package
7960 silly lockFile b16143fc-919-0-051672365283593535-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979919-0.051672365283593535\package
7961 silly lockFile 7421aef2-919-0-051672365283593535-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979919-0.051672365283593535\tmp.tgz
7962 silly lockFile 7421aef2-919-0-051672365283593535-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979919-0.051672365283593535\tmp.tgz
7963 silly lockFile 6c7102cf-graceful-fs-1-2-3 graceful-fs@1.2.3
7964 silly lockFile 6c7102cf-graceful-fs-1-2-3 graceful-fs@1.2.3
7965 silly lockFile 9c0bb906-graceful-fs-1-2-0 graceful-fs@~1.2.0
7966 silly lockFile 9c0bb906-graceful-fs-1-2-0 graceful-fs@~1.2.0
7967 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\pause\\0.0.1\\package.tgz',
7967 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388777979919-0.051672365283593535\\package' ]
7968 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\pause\0.0.1\package.tgz
7969 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979919-0.051672365283593535\package
7970 silly lockFile b16143fc-919-0-051672365283593535-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979919-0.051672365283593535\package
7971 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979919-0.051672365283593535\package C:\Users\Gaston\AppData\Roaming\npm-cache\b16143fc-919-0-051672365283593535-package.lock
7972 silly lockFile 6ea191ff-pm-cache-pause-0-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\pause\0.0.1\package.tgz
7973 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\pause\0.0.1\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\6ea191ff-pm-cache-pause-0-0-1-package-tgz.lock
7974 silly lockFile e205e902-ng-npm-cache-fresh-0-1-0-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\fresh\0.1.0\package
7975 silly lockFile e205e902-ng-npm-cache-fresh-0-1-0-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\fresh\0.1.0\package
7976 silly lockFile 51d1c521-pm-cache-fresh-0-1-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\fresh\0.1.0\package.tgz
7977 silly lockFile 51d1c521-pm-cache-fresh-0-1-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\fresh\0.1.0\package.tgz
7978 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979393-0.25621652347035706\tmp.tgz
7979 silly lockFile 93269888-9393-0-25621652347035706-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979393-0.25621652347035706\package
7980 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979393-0.25621652347035706\package C:\Users\Gaston\AppData\Roaming\npm-cache\93269888-9393-0-25621652347035706-package.lock
7981 silly lockFile 3b96326a-9393-0-25621652347035706-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979393-0.25621652347035706\tmp.tgz
7982 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979393-0.25621652347035706\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\3b96326a-9393-0-25621652347035706-tmp-tgz.lock
7983 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\fresh\0.1.0\package.tgz 644
7984 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\fresh\0.1.0\package.tgz
7985 silly gunzTarPerm modes [ '755', '644' ]
7986 silly lockFile 0e5f2eb8--npmjs-org-fresh-fresh-0-1-0-tgz https://registry.npmjs.org/fresh/-/fresh-0.1.0.tgz
7987 silly lockFile 0e5f2eb8--npmjs-org-fresh-fresh-0-1-0-tgz https://registry.npmjs.org/fresh/-/fresh-0.1.0.tgz
7988 silly lockFile 3dea7da8-fresh-0-1-0 fresh@0.1.0
7989 silly lockFile 3dea7da8-fresh-0-1-0 fresh@0.1.0
7990 silly lockFile b16143fc-919-0-051672365283593535-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979919-0.051672365283593535\package
7991 silly lockFile b16143fc-919-0-051672365283593535-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979919-0.051672365283593535\package
7992 silly gunzTarPerm extractEntry package.json
7993 silly lockFile 6ea191ff-pm-cache-pause-0-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\pause\0.0.1\package.tgz
7994 silly lockFile 6ea191ff-pm-cache-pause-0-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\pause\0.0.1\package.tgz
7995 silly lockFile c5d5c578-nt-concurrent-node-modules-async tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-concurrent\node_modules\async
7996 silly lockFile c5d5c578-nt-concurrent-node-modules-async tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-concurrent\node_modules\async
7997 silly lockFile f1e10200-pm-cache-async-0-2-9-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\async\0.2.9\package.tgz
7998 silly lockFile f1e10200-pm-cache-async-0-2-9-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\async\0.2.9\package.tgz
7999 silly lockFile 485e5f97-ng-npm-cache-pause-0-0-1-package C:\Users\Gaston\AppData\Roaming\npm-cache\pause\0.0.1\package
8000 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\pause\0.0.1\package C:\Users\Gaston\AppData\Roaming\npm-cache\485e5f97-ng-npm-cache-pause-0-0-1-package.lock
8001 silly gunzTarPerm extractEntry .npmignore
8002 silly gunzTarPerm extractEntry README.md
8003 silly lockFile 485e5f97-ng-npm-cache-pause-0-0-1-package C:\Users\Gaston\AppData\Roaming\npm-cache\pause\0.0.1\package
8004 silly lockFile 485e5f97-ng-npm-cache-pause-0-0-1-package C:\Users\Gaston\AppData\Roaming\npm-cache\pause\0.0.1\package
8005 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\pause\0.0.1\package.tgz
8006 silly lockFile baa4c316-ng-npm-cache-pause-0-0-1-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\pause\0.0.1\package
8007 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\pause\0.0.1\package C:\Users\Gaston\AppData\Roaming\npm-cache\baa4c316-ng-npm-cache-pause-0-0-1-package.lock
8008 silly lockFile 6ea191ff-pm-cache-pause-0-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\pause\0.0.1\package.tgz
8009 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\pause\0.0.1\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\6ea191ff-pm-cache-pause-0-0-1-package-tgz.lock
8010 silly gunzTarPerm modes [ '755', '644' ]
8011 silly gunzTarPerm extractEntry index.js
8012 silly gunzTarPerm extractEntry .travis.yml
8013 silly gunzTarPerm extractEntry package.json
8014 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
8015 silly gunzTarPerm extractEntry test/serialize.js
8016 silly gunzTarPerm extractEntry test/parse.js
8017 silly gunzTarPerm extractEntry .npmignore
8018 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
8019 silly gunzTarPerm extractEntry index.js
8020 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
8021 http 304 https://registry.npmjs.org/inherits
8022 silly registry.get cb [ 304,
8022 silly registry.get   { date: 'Fri, 03 Jan 2014 19:38:41 GMT',
8022 silly registry.get     server: 'Apache',
8022 silly registry.get     connection: 'Keep-Alive',
8022 silly registry.get     'keep-alive': 'timeout=10, max=38',
8022 silly registry.get     etag: '"6GND9JGNFJBVB470HZYXMNR4P"',
8022 silly registry.get     vary: 'Accept' } ]
8023 verbose etag inherits from cache
8024 silly gunzTarPerm extractEntry test/mocha.opts
8025 silly gunzTarPerm extractEntry History.md
8026 silly gunzTarPerm modified mode [ 'History.md', 438, 420 ]
8027 silly gunzTarPerm extractEntry Makefile
8028 silly gunzTarPerm modified mode [ 'Makefile', 438, 420 ]
8029 info preinstall async@0.2.9
8030 silly addNameRange number 2 { name: 'inherits', range: '>=1.0.0-0 <2.0.0-0', hasData: true }
8031 silly addNameRange versions [ 'inherits', [ '1.0.0', '2.0.0', '2.0.1' ] ]
8032 verbose addNamed [ 'inherits', '1.0.0' ]
8033 verbose addNamed [ '1.0.0', '1.0.0' ]
8034 silly lockFile 776fbe77-inherits-1-0-0 inherits@1.0.0
8035 verbose lock inherits@1.0.0 C:\Users\Gaston\AppData\Roaming\npm-cache\776fbe77-inherits-1-0-0.lock
8036 verbose readDependencies using package.json deps
8037 verbose readDependencies using package.json deps
8038 silly resolved []
8039 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-concurrent\node_modules\async
8040 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-concurrent\node_modules\async
8041 verbose linkStuff [ false,
8041 verbose linkStuff   false,
8041 verbose linkStuff   false,
8041 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-concurrent\\node_modules' ]
8042 info linkStuff async@0.2.9
8043 verbose linkBins async@0.2.9
8044 verbose linkMans async@0.2.9
8045 verbose rebuildBundles async@0.2.9
8046 info install async@0.2.9
8047 silly gunzTarPerm extractEntry Readme.md
8048 silly gunzTarPerm modified mode [ 'Readme.md', 438, 420 ]
8049 info postinstall async@0.2.9
8050 silly gunzTarPerm modes [ '755', '644' ]
8051 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-concurrent
8052 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-concurrent
8053 verbose linkStuff [ false,
8053 verbose linkStuff   false,
8053 verbose linkStuff   false,
8053 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules' ]
8054 info linkStuff grunt-concurrent@0.4.2
8055 verbose linkBins grunt-concurrent@0.4.2
8056 verbose linkMans grunt-concurrent@0.4.2
8057 verbose rebuildBundles grunt-concurrent@0.4.2
8058 verbose rebuildBundles [ 'async', 'lpad' ]
8059 info install grunt-concurrent@0.4.2
8060 info postinstall grunt-concurrent@0.4.2
8061 silly gunzTarPerm extractEntry package.json
8062 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
8063 silly lockFile 776fbe77-inherits-1-0-0 inherits@1.0.0
8064 silly lockFile 776fbe77-inherits-1-0-0 inherits@1.0.0
8065 silly lockFile 4bca46d0-inherits-1 inherits@1
8066 silly lockFile 4bca46d0-inherits-1 inherits@1
8067 silly gunzTarPerm extractEntry README.md
8068 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
8069 silly gunzTarPerm extractEntry LICENSE
8070 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
8071 silly gunzTarPerm extractEntry component.json
8072 silly gunzTarPerm modified mode [ 'component.json', 438, 420 ]
8073 silly gunzTarPerm extractEntry lib/async.js
8074 silly gunzTarPerm modified mode [ 'lib/async.js', 438, 420 ]
8075 silly lockFile baa4c316-ng-npm-cache-pause-0-0-1-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\pause\0.0.1\package
8076 silly lockFile baa4c316-ng-npm-cache-pause-0-0-1-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\pause\0.0.1\package
8077 silly lockFile 6ea191ff-pm-cache-pause-0-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\pause\0.0.1\package.tgz
8078 silly lockFile 6ea191ff-pm-cache-pause-0-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\pause\0.0.1\package.tgz
8079 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\pause\0.0.1\package.tgz 644
8080 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\pause\0.0.1\package.tgz
8081 silly lockFile 93269888-9393-0-25621652347035706-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979393-0.25621652347035706\package
8082 silly lockFile 93269888-9393-0-25621652347035706-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979393-0.25621652347035706\package
8083 silly lockFile 51c6cd47--npmjs-org-pause-pause-0-0-1-tgz https://registry.npmjs.org/pause/-/pause-0.0.1.tgz
8084 silly lockFile 51c6cd47--npmjs-org-pause-pause-0-0-1-tgz https://registry.npmjs.org/pause/-/pause-0.0.1.tgz
8085 silly lockFile 3b96326a-9393-0-25621652347035706-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979393-0.25621652347035706\tmp.tgz
8086 silly lockFile 3b96326a-9393-0-25621652347035706-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979393-0.25621652347035706\tmp.tgz
8087 silly lockFile c62fc432-pause-0-0-1 pause@0.0.1
8088 silly lockFile c62fc432-pause-0-0-1 pause@0.0.1
8089 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\cookie\\0.0.5\\package.tgz',
8089 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388777979393-0.25621652347035706\\package' ]
8090 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\cookie\0.0.5\package.tgz
8091 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979393-0.25621652347035706\package
8092 silly lockFile 93269888-9393-0-25621652347035706-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979393-0.25621652347035706\package
8093 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979393-0.25621652347035706\package C:\Users\Gaston\AppData\Roaming\npm-cache\93269888-9393-0-25621652347035706-package.lock
8094 silly lockFile e313b369-m-cache-cookie-0-0-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\cookie\0.0.5\package.tgz
8095 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\cookie\0.0.5\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\e313b369-m-cache-cookie-0-0-5-package-tgz.lock
8096 http 200 https://registry.npmjs.org/bytes/-/bytes-0.2.0.tgz
8097 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777980190-0.255074494285509\tmp.tgz
8098 silly lockFile 8e1c04d5-980190-0-255074494285509-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777980190-0.255074494285509\package
8099 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777980190-0.255074494285509\package C:\Users\Gaston\AppData\Roaming\npm-cache\8e1c04d5-980190-0-255074494285509-package.lock
8100 silly lockFile a829f13a-980190-0-255074494285509-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777980190-0.255074494285509\tmp.tgz
8101 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777980190-0.255074494285509\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\a829f13a-980190-0-255074494285509-tmp-tgz.lock
8102 silly gunzTarPerm modes [ '755', '644' ]
8103 silly gunzTarPerm extractEntry package.json
8104 silly gunzTarPerm extractEntry .npmignore
8105 silly gunzTarPerm extractEntry index.js
8106 silly gunzTarPerm extractEntry component.json
8107 silly gunzTarPerm extractEntry History.md
8108 silly gunzTarPerm extractEntry Makefile
8109 silly gunzTarPerm extractEntry Readme.md
8110 silly lockFile 93269888-9393-0-25621652347035706-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979393-0.25621652347035706\package
8111 silly lockFile 93269888-9393-0-25621652347035706-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979393-0.25621652347035706\package
8112 silly lockFile e313b369-m-cache-cookie-0-0-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\cookie\0.0.5\package.tgz
8113 silly lockFile e313b369-m-cache-cookie-0-0-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\cookie\0.0.5\package.tgz
8114 silly lockFile 5f0bc286-g-npm-cache-cookie-0-0-5-package C:\Users\Gaston\AppData\Roaming\npm-cache\cookie\0.0.5\package
8115 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\cookie\0.0.5\package C:\Users\Gaston\AppData\Roaming\npm-cache\5f0bc286-g-npm-cache-cookie-0-0-5-package.lock
8116 silly lockFile 5f0bc286-g-npm-cache-cookie-0-0-5-package C:\Users\Gaston\AppData\Roaming\npm-cache\cookie\0.0.5\package
8117 silly lockFile 5f0bc286-g-npm-cache-cookie-0-0-5-package C:\Users\Gaston\AppData\Roaming\npm-cache\cookie\0.0.5\package
8118 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\cookie\0.0.5\package.tgz
8119 silly lockFile 74378d3c-g-npm-cache-cookie-0-0-5-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\cookie\0.0.5\package
8120 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\cookie\0.0.5\package C:\Users\Gaston\AppData\Roaming\npm-cache\74378d3c-g-npm-cache-cookie-0-0-5-package.lock
8121 silly lockFile e313b369-m-cache-cookie-0-0-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\cookie\0.0.5\package.tgz
8122 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\cookie\0.0.5\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\e313b369-m-cache-cookie-0-0-5-package-tgz.lock
8123 silly gunzTarPerm modes [ '755', '644' ]
8124 silly gunzTarPerm extractEntry package.json
8125 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
8126 silly gunzTarPerm extractEntry .npmignore
8127 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
8128 silly gunzTarPerm extractEntry README.md
8129 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
8130 silly lockFile 967726a5-ntrib-compass-node-modules-async tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-compass\node_modules\async
8131 silly lockFile 967726a5-ntrib-compass-node-modules-async tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-compass\node_modules\async
8132 silly lockFile f1e10200-pm-cache-async-0-2-9-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\async\0.2.9\package.tgz
8133 silly lockFile f1e10200-pm-cache-async-0-2-9-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\async\0.2.9\package.tgz
8134 silly gunzTarPerm extractEntry index.js
8135 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
8136 silly gunzTarPerm extractEntry .travis.yml
8137 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]
8138 silly gunzTarPerm extractEntry test/parse.js
8139 silly gunzTarPerm modified mode [ 'test/parse.js', 438, 420 ]
8140 silly gunzTarPerm extractEntry test/serialize.js
8141 silly gunzTarPerm modified mode [ 'test/serialize.js', 438, 420 ]
8142 silly lockFile 8e1c04d5-980190-0-255074494285509-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777980190-0.255074494285509\package
8143 silly lockFile 8e1c04d5-980190-0-255074494285509-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777980190-0.255074494285509\package
8144 silly lockFile a829f13a-980190-0-255074494285509-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777980190-0.255074494285509\tmp.tgz
8145 silly lockFile a829f13a-980190-0-255074494285509-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777980190-0.255074494285509\tmp.tgz
8146 silly gunzTarPerm extractEntry test/mocha.opts
8147 silly gunzTarPerm modified mode [ 'test/mocha.opts', 438, 420 ]
8148 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\bytes\\0.2.0\\package.tgz',
8148 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388777980190-0.255074494285509\\package' ]
8149 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\bytes\0.2.0\package.tgz
8150 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777980190-0.255074494285509\package
8151 silly lockFile 8e1c04d5-980190-0-255074494285509-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777980190-0.255074494285509\package
8152 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777980190-0.255074494285509\package C:\Users\Gaston\AppData\Roaming\npm-cache\8e1c04d5-980190-0-255074494285509-package.lock
8153 silly lockFile dbfea84c-pm-cache-bytes-0-2-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\bytes\0.2.0\package.tgz
8154 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\bytes\0.2.0\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\dbfea84c-pm-cache-bytes-0-2-0-package-tgz.lock
8155 info preinstall async@0.2.9
8156 verbose readDependencies using package.json deps
8157 verbose readDependencies using package.json deps
8158 silly resolved []
8159 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-compass\node_modules\async
8160 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-compass\node_modules\async
8161 verbose linkStuff [ false,
8161 verbose linkStuff   false,
8161 verbose linkStuff   false,
8161 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-contrib-compass\\node_modules' ]
8162 info linkStuff async@0.2.9
8163 verbose linkBins async@0.2.9
8164 verbose linkMans async@0.2.9
8165 verbose rebuildBundles async@0.2.9
8166 info install async@0.2.9
8167 info postinstall async@0.2.9
8168 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-compass
8169 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-compass
8170 verbose linkStuff [ false,
8170 verbose linkStuff   false,
8170 verbose linkStuff   false,
8170 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules' ]
8171 info linkStuff grunt-contrib-compass@0.7.0
8172 verbose linkBins grunt-contrib-compass@0.7.0
8173 verbose linkMans grunt-contrib-compass@0.7.0
8174 verbose rebuildBundles grunt-contrib-compass@0.7.0
8175 verbose rebuildBundles [ 'async', 'dargs', 'tmp' ]
8176 info install grunt-contrib-compass@0.7.0
8177 http 200 https://registry.npmjs.org/send/-/send-0.1.1.tgz
8178 info postinstall grunt-contrib-compass@0.7.0
8179 silly lockFile 74378d3c-g-npm-cache-cookie-0-0-5-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\cookie\0.0.5\package
8180 silly lockFile 74378d3c-g-npm-cache-cookie-0-0-5-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\cookie\0.0.5\package
8181 silly lockFile 8e1c04d5-980190-0-255074494285509-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777980190-0.255074494285509\package
8182 silly lockFile 8e1c04d5-980190-0-255074494285509-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777980190-0.255074494285509\package
8183 silly lockFile e313b369-m-cache-cookie-0-0-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\cookie\0.0.5\package.tgz
8184 silly lockFile e313b369-m-cache-cookie-0-0-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\cookie\0.0.5\package.tgz
8185 silly lockFile dbfea84c-pm-cache-bytes-0-2-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\bytes\0.2.0\package.tgz
8186 silly lockFile dbfea84c-pm-cache-bytes-0-2-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\bytes\0.2.0\package.tgz
8187 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\cookie\0.0.5\package.tgz 644
8188 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\cookie\0.0.5\package.tgz
8189 silly lockFile c7cd4f35-ng-npm-cache-bytes-0-2-0-package C:\Users\Gaston\AppData\Roaming\npm-cache\bytes\0.2.0\package
8190 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\bytes\0.2.0\package C:\Users\Gaston\AppData\Roaming\npm-cache\c7cd4f35-ng-npm-cache-bytes-0-2-0-package.lock
8191 silly lockFile 65da37ca-pmjs-org-cookie-cookie-0-0-5-tgz https://registry.npmjs.org/cookie/-/cookie-0.0.5.tgz
8192 silly lockFile 65da37ca-pmjs-org-cookie-cookie-0-0-5-tgz https://registry.npmjs.org/cookie/-/cookie-0.0.5.tgz
8193 silly lockFile fe08ced7-cookie-0-0-5 cookie@0.0.5
8194 silly lockFile fe08ced7-cookie-0-0-5 cookie@0.0.5
8195 silly lockFile c7cd4f35-ng-npm-cache-bytes-0-2-0-package C:\Users\Gaston\AppData\Roaming\npm-cache\bytes\0.2.0\package
8196 silly lockFile c7cd4f35-ng-npm-cache-bytes-0-2-0-package C:\Users\Gaston\AppData\Roaming\npm-cache\bytes\0.2.0\package
8197 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\bytes\0.2.0\package.tgz
8198 silly lockFile db326bbb-ng-npm-cache-bytes-0-2-0-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\bytes\0.2.0\package
8199 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\bytes\0.2.0\package C:\Users\Gaston\AppData\Roaming\npm-cache\db326bbb-ng-npm-cache-bytes-0-2-0-package.lock
8200 silly lockFile dbfea84c-pm-cache-bytes-0-2-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\bytes\0.2.0\package.tgz
8201 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\bytes\0.2.0\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\dbfea84c-pm-cache-bytes-0-2-0-package-tgz.lock
8202 silly gunzTarPerm modes [ '755', '644' ]
8203 silly gunzTarPerm extractEntry package.json
8204 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
8205 silly gunzTarPerm extractEntry .npmignore
8206 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
8207 silly gunzTarPerm extractEntry index.js
8208 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
8209 silly gunzTarPerm extractEntry component.json
8210 silly gunzTarPerm modified mode [ 'component.json', 438, 420 ]
8211 silly gunzTarPerm extractEntry History.md
8212 silly gunzTarPerm modified mode [ 'History.md', 438, 420 ]
8213 silly gunzTarPerm extractEntry Makefile
8214 silly gunzTarPerm modified mode [ 'Makefile', 438, 420 ]
8215 silly gunzTarPerm extractEntry Readme.md
8216 silly gunzTarPerm modified mode [ 'Readme.md', 438, 420 ]
8217 silly lockFile db326bbb-ng-npm-cache-bytes-0-2-0-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\bytes\0.2.0\package
8218 silly lockFile db326bbb-ng-npm-cache-bytes-0-2-0-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\bytes\0.2.0\package
8219 silly lockFile dbfea84c-pm-cache-bytes-0-2-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\bytes\0.2.0\package.tgz
8220 silly lockFile dbfea84c-pm-cache-bytes-0-2-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\bytes\0.2.0\package.tgz
8221 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\bytes\0.2.0\package.tgz 644
8222 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\bytes\0.2.0\package.tgz
8223 silly lockFile e8d954bc--npmjs-org-bytes-bytes-0-2-0-tgz https://registry.npmjs.org/bytes/-/bytes-0.2.0.tgz
8224 silly lockFile e8d954bc--npmjs-org-bytes-bytes-0-2-0-tgz https://registry.npmjs.org/bytes/-/bytes-0.2.0.tgz
8225 silly lockFile e351aee0-bytes-0-2-0 bytes@0.2.0
8226 silly lockFile e351aee0-bytes-0-2-0 bytes@0.2.0
8227 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979115-0.7692725793458521\tmp.tgz
8228 silly lockFile 2c7fb1da-79115-0-7692725793458521-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979115-0.7692725793458521\package
8229 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979115-0.7692725793458521\package C:\Users\Gaston\AppData\Roaming\npm-cache\2c7fb1da-79115-0-7692725793458521-package.lock
8230 silly lockFile a10ba6fe-79115-0-7692725793458521-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979115-0.7692725793458521\tmp.tgz
8231 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979115-0.7692725793458521\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\a10ba6fe-79115-0-7692725793458521-tmp-tgz.lock
8232 silly gunzTarPerm modes [ '755', '644' ]
8233 silly gunzTarPerm extractEntry package.json
8234 silly gunzTarPerm extractEntry .npmignore
8235 silly gunzTarPerm extractEntry index.js
8236 silly gunzTarPerm extractEntry History.md
8237 silly gunzTarPerm extractEntry lib/send.js
8238 silly gunzTarPerm extractEntry lib/utils.js
8239 silly gunzTarPerm extractEntry Makefile
8240 silly gunzTarPerm extractEntry Readme.md
8241 silly lockFile 2c7fb1da-79115-0-7692725793458521-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979115-0.7692725793458521\package
8242 silly lockFile 2c7fb1da-79115-0-7692725793458521-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979115-0.7692725793458521\package
8243 silly lockFile a10ba6fe-79115-0-7692725793458521-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979115-0.7692725793458521\tmp.tgz
8244 silly lockFile a10ba6fe-79115-0-7692725793458521-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979115-0.7692725793458521\tmp.tgz
8245 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\send\\0.1.1\\package.tgz',
8245 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388777979115-0.7692725793458521\\package' ]
8246 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\send\0.1.1\package.tgz
8247 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979115-0.7692725793458521\package
8248 silly lockFile 2c7fb1da-79115-0-7692725793458521-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979115-0.7692725793458521\package
8249 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979115-0.7692725793458521\package C:\Users\Gaston\AppData\Roaming\npm-cache\2c7fb1da-79115-0-7692725793458521-package.lock
8250 silly lockFile b2611e08-npm-cache-send-0-1-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\send\0.1.1\package.tgz
8251 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\send\0.1.1\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\b2611e08-npm-cache-send-0-1-1-package-tgz.lock
8252 silly lockFile 2c7fb1da-79115-0-7692725793458521-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979115-0.7692725793458521\package
8253 silly lockFile 2c7fb1da-79115-0-7692725793458521-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777979115-0.7692725793458521\package
8254 silly lockFile b2611e08-npm-cache-send-0-1-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\send\0.1.1\package.tgz
8255 silly lockFile b2611e08-npm-cache-send-0-1-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\send\0.1.1\package.tgz
8256 silly lockFile 9fc289e4-ing-npm-cache-send-0-1-1-package C:\Users\Gaston\AppData\Roaming\npm-cache\send\0.1.1\package
8257 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\send\0.1.1\package C:\Users\Gaston\AppData\Roaming\npm-cache\9fc289e4-ing-npm-cache-send-0-1-1-package.lock
8258 silly lockFile 9fc289e4-ing-npm-cache-send-0-1-1-package C:\Users\Gaston\AppData\Roaming\npm-cache\send\0.1.1\package
8259 silly lockFile 9fc289e4-ing-npm-cache-send-0-1-1-package C:\Users\Gaston\AppData\Roaming\npm-cache\send\0.1.1\package
8260 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\send\0.1.1\package.tgz
8261 silly lockFile 9211a8a6-ing-npm-cache-send-0-1-1-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\send\0.1.1\package
8262 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\send\0.1.1\package C:\Users\Gaston\AppData\Roaming\npm-cache\9211a8a6-ing-npm-cache-send-0-1-1-package.lock
8263 silly lockFile b2611e08-npm-cache-send-0-1-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\send\0.1.1\package.tgz
8264 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\send\0.1.1\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\b2611e08-npm-cache-send-0-1-1-package-tgz.lock
8265 silly gunzTarPerm modes [ '755', '644' ]
8266 silly gunzTarPerm extractEntry package.json
8267 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
8268 silly gunzTarPerm extractEntry .npmignore
8269 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
8270 silly gunzTarPerm extractEntry index.js
8271 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
8272 silly gunzTarPerm extractEntry History.md
8273 silly gunzTarPerm modified mode [ 'History.md', 438, 420 ]
8274 silly gunzTarPerm extractEntry lib/send.js
8275 silly gunzTarPerm modified mode [ 'lib/send.js', 438, 420 ]
8276 silly gunzTarPerm extractEntry lib/utils.js
8277 silly gunzTarPerm modified mode [ 'lib/utils.js', 438, 420 ]
8278 silly gunzTarPerm extractEntry Makefile
8279 silly gunzTarPerm modified mode [ 'Makefile', 438, 420 ]
8280 silly gunzTarPerm extractEntry Readme.md
8281 silly gunzTarPerm modified mode [ 'Readme.md', 438, 420 ]
8282 silly lockFile 9211a8a6-ing-npm-cache-send-0-1-1-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\send\0.1.1\package
8283 silly lockFile 9211a8a6-ing-npm-cache-send-0-1-1-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\send\0.1.1\package
8284 silly lockFile b2611e08-npm-cache-send-0-1-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\send\0.1.1\package.tgz
8285 silly lockFile b2611e08-npm-cache-send-0-1-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\send\0.1.1\package.tgz
8286 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\send\0.1.1\package.tgz 644
8287 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\send\0.1.1\package.tgz
8288 silly lockFile f12c24a6-ry-npmjs-org-send-send-0-1-1-tgz https://registry.npmjs.org/send/-/send-0.1.1.tgz
8289 silly lockFile f12c24a6-ry-npmjs-org-send-send-0-1-1-tgz https://registry.npmjs.org/send/-/send-0.1.1.tgz
8290 silly lockFile aa25b10a-send-0-1-1 send@0.1.1
8291 silly lockFile aa25b10a-send-0-1-1 send@0.1.1
8292 http 200 https://registry.npmjs.org/formidable/-/formidable-1.0.14.tgz
8293 http 200 https://registry.npmjs.org/grunt-lib-contrib
8294 silly registry.get cb [ 200,
8294 silly registry.get   { date: 'Fri, 03 Jan 2014 19:38:41 GMT',
8294 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
8294 silly registry.get     etag: '"58P8VKNC1R59EATNYUD1QF5XK"',
8294 silly registry.get     'content-type': 'application/json',
8294 silly registry.get     'content-length': '31639',
8294 silly registry.get     'accept-ranges': 'bytes',
8294 silly registry.get     via: '1.1 varnish',
8294 silly registry.get     age: '6656',
8294 silly registry.get     'x-served-by': 'cache-d46-DAL',
8294 silly registry.get     'x-cache': 'HIT',
8294 silly registry.get     'x-cache-hits': '1',
8294 silly registry.get     'x-timer': 'S1388777921.907086611,VS0,VE11',
8294 silly registry.get     vary: 'Accept',
8294 silly registry.get     'keep-alive': 'timeout=10, max=37',
8294 silly registry.get     connection: 'Keep-Alive' } ]
8295 silly addNameRange number 2 { name: 'grunt-lib-contrib',
8295 silly addNameRange   range: '>=0.6.1-0 <0.7.0-0',
8295 silly addNameRange   hasData: true }
8296 silly addNameRange versions [ 'grunt-lib-contrib',
8296 silly addNameRange   [ '0.3.0',
8296 silly addNameRange     '0.3.1',
8296 silly addNameRange     '0.4.0',
8296 silly addNameRange     '0.5.1',
8296 silly addNameRange     '0.5.2',
8296 silly addNameRange     '0.5.3',
8296 silly addNameRange     '0.6.0',
8296 silly addNameRange     '0.6.1' ] ]
8297 verbose addNamed [ 'grunt-lib-contrib', '0.6.1' ]
8298 verbose addNamed [ '0.6.1', '0.6.1' ]
8299 silly lockFile 0ef65a81-grunt-lib-contrib-0-6-1 grunt-lib-contrib@0.6.1
8300 verbose lock grunt-lib-contrib@0.6.1 C:\Users\Gaston\AppData\Roaming\npm-cache\0ef65a81-grunt-lib-contrib-0-6-1.lock
8301 silly lockFile 0ef65a81-grunt-lib-contrib-0-6-1 grunt-lib-contrib@0.6.1
8302 silly lockFile 0ef65a81-grunt-lib-contrib-0-6-1 grunt-lib-contrib@0.6.1
8303 silly lockFile a97902f4-grunt-lib-contrib-0-6-1 grunt-lib-contrib@~0.6.1
8304 silly lockFile a97902f4-grunt-lib-contrib-0-6-1 grunt-lib-contrib@~0.6.1
8305 http 304 https://registry.npmjs.org/minimatch
8306 silly registry.get cb [ 304,
8306 silly registry.get   { date: 'Fri, 03 Jan 2014 19:38:47 GMT',
8306 silly registry.get     server: 'Apache',
8306 silly registry.get     connection: 'Keep-Alive',
8306 silly registry.get     'keep-alive': 'timeout=10, max=36',
8306 silly registry.get     etag: '"ENY6937TKFXIJARH44KNW9ZPF"',
8306 silly registry.get     vary: 'Accept' } ]
8307 verbose etag minimatch from cache
8308 silly addNameRange number 2 { name: 'minimatch',
8308 silly addNameRange   range: '>=0.2.11-0 <0.3.0-0',
8308 silly addNameRange   hasData: true }
8309 silly addNameRange versions [ 'minimatch',
8309 silly addNameRange   [ '0.0.1',
8309 silly addNameRange     '0.0.2',
8309 silly addNameRange     '0.0.4',
8309 silly addNameRange     '0.0.5',
8309 silly addNameRange     '0.1.1',
8309 silly addNameRange     '0.1.2',
8309 silly addNameRange     '0.1.3',
8309 silly addNameRange     '0.1.4',
8309 silly addNameRange     '0.1.5',
8309 silly addNameRange     '0.2.0',
8309 silly addNameRange     '0.2.2',
8309 silly addNameRange     '0.2.3',
8309 silly addNameRange     '0.2.4',
8309 silly addNameRange     '0.2.5',
8309 silly addNameRange     '0.2.6',
8309 silly addNameRange     '0.2.7',
8309 silly addNameRange     '0.2.8',
8309 silly addNameRange     '0.2.9',
8309 silly addNameRange     '0.2.10',
8309 silly addNameRange     '0.2.11',
8309 silly addNameRange     '0.2.12',
8309 silly addNameRange     '0.2.13',
8309 silly addNameRange     '0.2.14' ] ]
8310 verbose addNamed [ 'minimatch', '0.2.14' ]
8311 verbose addNamed [ '0.2.14', '0.2.14' ]
8312 silly lockFile a72880d0-minimatch-0-2-14 minimatch@0.2.14
8313 verbose lock minimatch@0.2.14 C:\Users\Gaston\AppData\Roaming\npm-cache\a72880d0-minimatch-0-2-14.lock
8314 silly lockFile a72880d0-minimatch-0-2-14 minimatch@0.2.14
8315 silly lockFile a72880d0-minimatch-0-2-14 minimatch@0.2.14
8316 silly lockFile 94473efb-minimatch-0-2-11 minimatch@~0.2.11
8317 silly lockFile 94473efb-minimatch-0-2-11 minimatch@~0.2.11
8318 silly resolved [ { name: 'lodash',
8318 silly resolved     version: '1.0.1',
8318 silly resolved     description: 'A utility library delivering consistency, customization, performance, and extras.',
8318 silly resolved     homepage: 'http://lodash.com/',
8318 silly resolved     license: 'MIT',
8318 silly resolved     main: './dist/lodash.js',
8318 silly resolved     keywords:
8318 silly resolved      [ 'browser',
8318 silly resolved        'client',
8318 silly resolved        'functional',
8318 silly resolved        'performance',
8318 silly resolved        'server',
8318 silly resolved        'speed',
8318 silly resolved        'util' ],
8318 silly resolved     author:
8318 silly resolved      { name: 'John-David Dalton',
8318 silly resolved        email: 'john.david.dalton@gmail.com',
8318 silly resolved        url: 'http://allyoucanleet.com/' },
8318 silly resolved     contributors: [ [Object], [Object], [Object], [Object] ],
8318 silly resolved     bugs: { url: 'https://github.com/lodash/lodash/issues' },
8318 silly resolved     repository: { type: 'git', url: 'https://github.com/lodash/lodash.git' },
8318 silly resolved     engines: [ 'node', 'rhino' ],
8318 silly resolved     jam: { main: './dist/lodash.compat.js' },
8318 silly resolved     readme: '# Lo-Dash v1.0.1\n\nA utility library delivering consistency, [customization](http://lodash.com/custom-builds), [performance](http://lodash.com/benchmarks), & [extras](http://lodash.com/#features).\n\n## Download\n\n* Lo-Dash builds (for modern environments):<br>\n[Development](https://raw.github.com/lodash/lodash/v1.0.1/dist/lodash.js) and\n[Production](https://raw.github.com/lodash/lodash/v1.0.1/dist/lodash.min.js)\n\n* Lo-Dash compatibility builds (for legacy and modern environments):<br>\n[Development](https://raw.github.com/lodash/lodash/v1.0.1/dist/lodash.compat.js) and\n[Production](https://raw.github.com/lodash/lodash/v1.0.1/dist/lodash.compat.min.js)\n\n* Underscore compatibility builds:<br>\n[Development](https://raw.github.com/lodash/lodash/v1.0.1/dist/lodash.underscore.js) and\n[Production](https://raw.github.com/lodash/lodash/v1.0.1/dist/lodash.underscore.min.js)\n\n* CDN copies of ≤ v1.0.1’s builds are available on [cdnjs](http://cdnjs.com/) thanks to [CloudFlare](http://www.cloudflare.com/):<br>\n[Lo-Dash dev](http://cdnjs.cloudflare.com/ajax/libs/lodash.js/1.0.1/lodash.js),\n[Lo-Dash prod](http://cdnjs.cloudflare.com/ajax/libs/lodash.js/1.0.1/lodash.min.js),<br>\n[Lo-Dash compat-dev](http://cdnjs.cloudflare.com/ajax/libs/lodash.js/1.0.1/lodash.compat.js),\n[Lo-Dash compat-prod](http://cdnjs.cloudflare.com/ajax/libs/lodash.js/1.0.1/lodash.compat.min.js),<br>\n[Underscore compat-dev](http://cdnjs.cloudflare.com/ajax/libs/lodash.js/1.0.1/lodash.underscore.js), and\n[Underscore compat-prod](http://cdnjs.cloudflare.com/ajax/libs/lodash.js/1.0.1/lodash.underscore.min.js)\n\n* For optimal file size, [create a custom build](http://lodash.com/custom-builds) with only the features you need\n\n## Dive in\n\nWe’ve got [API docs](http://lodash.com/docs), [benchmarks](http://lodash.com/benchmarks), and [unit tests](http://lodash.com/tests).\n\nFor a list of upcoming features, check out our [roadmap](https://github.com/lodash/lodash/wiki/Roadmap).\n\n## Resources\n\nFor more information check out these articles, screencasts, and other videos over Lo-Dash:\n\n * Posts\n  - [Say “Hello” to Lo-Dash](http://kitcambridge.be/blog/say-hello-to-lo-dash/)\n\n * Videos\n  - [Introducing Lo-Dash](https://vimeo.com/44154599)\n  - [Lo-Dash optimizations and custom builds](https://vimeo.com/44154601)\n  - [Lo-Dash’s origin and why it’s a better utility belt](https://vimeo.com/44154600)\n  - [Unit testing in Lo-Dash](https://vimeo.com/45865290)\n  - [Lo-Dash’s approach to native method use](https://vimeo.com/48576012)\n  - [CascadiaJS: Lo-Dash for a better utility belt](http://www.youtube.com/watch?v=dpPy4f_SeEk)\n\n## Features\n\n * AMD loader support ([RequireJS](http://requirejs.org/), [curl.js](https://github.com/cujojs/curl), etc.)\n * [_(…)](http://lodash.com/docs#_) supports intuitive chaining\n * [_.at](http://lodash.com/docs#at) for cherry-picking collection values\n * [_.bindKey](http://lodash.com/docs#bindKey) for binding [*“lazy”* defined](http://michaux.ca/articles/lazy-function-definition-pattern) methods\n * [_.cloneDeep](http://lodash.com/docs#cloneDeep) for deep cloning arrays and objects\n * [_.contains](http://lodash.com/docs#contains) accepts a `fromIndex` argument\n * [_.forEach](http://lodash.com/docs#forEach) is chainable and supports exiting iteration early\n * [_.forIn](http://lodash.com/docs#forIn) for iterating over an object’s own and inherited properties\n * [_.forOwn](http://lodash.com/docs#forOwn) for iterating over an object’s own properties\n * [_.isPlainObject](http://lodash.com/docs#isPlainObject) checks if values are created by the `Object` constructor\n * [_.merge](http://lodash.com/docs#merge) for a deep [_.extend](http://lodash.com/docs#extend)\n * [_.partial](http://lodash.com/docs#partial) and [_.partialRight](http://lodash.com/docs#partialRight) for partial application without `this` binding\n * [_.template](http://lodash.com/docs#template) supports [*“imports”* options](http://lodash.com/docs#templateSettings_imports), [ES6 template delimiters](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-7.8.6), and [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\n * [_.where](http://lodash.com/docs#where) supports deep object comparisons\n * [_.clone](http://lodash.com/docs#clone), [_.omit](http://lodash.com/docs#omit), [_.pick](http://lodash.com/docs#pick),\n   [and more…](http://lodash.com/docs "_.assign, _.cloneDeep, _.first, _.initial, _.isEqual, _.last, _.merge, _.rest") accept `callback` and `thisArg` arguments\n * [_.contains](http://lodash.com/docs#contains), [_.size](http://lodash.com/docs#size), [_.toArray](http://lodash.com/docs#toArray),\n   [and more…](http://lodash.com/docs "_.at, _.countBy, _.every, _.filter, _.find, _.forEach, _.groupBy, _.invoke, _.map, _.max, _.min, _.pluck, _.reduce, _.reduceRight, _.reject, _.shuffle, _.some, _.sortBy, _.where") accept strings\n * [_.filter](http://lodash.com/docs#filter), [_.find](http://lodash.com/docs#find), [_.map](http://lodash.com/docs#map),\n   [and more…](http://lodash.com/docs "_.countBy, _.every, _.first, _.groupBy, _.initial, _.last, _.max, _.min, _.reject, _.rest, _.some, _.sortBy, _.sortedIndex, _.uniq") support *“_.pluck”* and *“_.where”* `callback` shorthands\n\n## Support\n\nLo-Dash has been tested in at least Chrome 5~24, Firefox 1~18, IE 6-10, Opera 9.25-12, Safari 3-6, Node.js 0.4.8-0.8.20, Narwhal 0.3.2, PhantomJS 1.8.1, RingoJS 0.9, and Rhino 1.7RC5.\n\n## Installation and usage\n\nIn browsers:\n\n```html\n<script src="lodash.js"></script>\n```\n\nUsing [`npm`](http://npmjs.org/):\n\n```bash\nnpm install lodash\n\nnpm install -g lodash\nnpm link lodash\n```\n\nTo avoid potential issues, update `npm` before installing Lo-Dash:\n\n```bash\nnpm install npm -g\n```\n\nIn [Node.js](http://nodejs.org/) and [RingoJS v0.8.0+](http://ringojs.org/):\n\n```js\nvar _ = require(\'lodash\');\n\n// or as a drop-in replacement for Underscore\nvar _ = require(\'lodash/lodash.underscore\');\n```\n\n**Note:** If Lo-Dash is installed globally, run [`npm link lodash`](http://blog.nodejs.org/2011/03/23/npm-1-0-global-vs-local-installation/) in your project’s root directory before requiring it.\n\nIn [RingoJS v0.7.0-](http://ringojs.org/):\n\n```js\nvar _ = require(\'lodash\')._;\n```\n\nIn [Rhino](http://www.mozilla.org/rhino/):\n\n```js\nload(\'lodash.js\');\n```\n\nIn an AMD loader like [RequireJS](http://requirejs.org/):\n\n```js\nrequire({\n  \'paths\': {\n    \'underscore\': \'path/to/lodash\'\n  }\n},\n[\'underscore\'], function(_) {\n  console.log(_.VERSION);\n});\n```\n\n## Release Notes\n\n### <sup>v1.0.1</sup>\n\n * Add support for specifying source map URLs in `-p`/`--source-map` build options\n * Ensured the second argument passed to `_.assign` is not treated as a `callback`\n * Ensured `-p`/`--source-map` build options correctly set the `sourceMappingURL`\n * Made `-p`/`--source-map` build options set source map *“sources”* keys based on the builds performed\n * Made `_.defer` use `setImmediate`, in Node.js, when available\n * Made `_.where` search arrays for values regardless of their index position\n * Removed dead code from `_.template`\n\nThe full changelog is available [here](https://github.com/lodash/lodash/wiki/Changelog).\n\n## BestieJS\n\nLo-Dash is part of the [BestieJS](https://github.com/bestiejs) *“Best in Class”* module collection. This means we promote solid browser/environment support, ES5 precedents, unit testing, and plenty of documentation.\n\n## Author\n\n| [![twitter/jdalton](http://gravatar.com/avatar/299a3d891ff1920b69c364d061007043?s=70)](http://twitter.com/jdalton "Follow @jdalton on Twitter") |\n|---|\n| [John-David Dalton](http://allyoucanleet.com/) |\n\n## Contributors\n\n| [![twitter/blainebublitz](http://gravatar.com/avatar/ac1c67fd906c9fecd823ce302283b4c1?s=70)](http://twitter.com/blainebublitz "Follow @BlaineBublitz on Twitter") | [![twitter/kitcambridge](http://gravatar.com/avatar/6662a1d02f351b5ef2f8b4d815804661?s=70)](https://twitter.com/kitcambridge "Follow @kitcambridge on Twitter") | [![twitter/mathias](http://gravatar.com/avatar/24e08a9ea84deb17ae121074d0f17125?s=70)](http://twitter.com/mathias "Follow @mathias on Twitter") |\n|---|---|---|\n| [Blaine Bublitz](http://iceddev.com/) | [Kit Cambridge](http://kitcambridge.github.io/) | [Mathias Bynens](http://mathiasbynens.be/) |\n',
8318 silly resolved     readmeFilename: 'README.md',
8318 silly resolved     _id: 'lodash@1.0.1',
8318 silly resolved     _from: 'lodash@~1.0.1',
8318 silly resolved     scripts: {} },
8318 silly resolved   { author:
8318 silly resolved      { name: 'Isaac Z. Schlueter',
8318 silly resolved        email: 'i@izs.me',
8318 silly resolved        url: 'http://blog.izs.me/' },
8318 silly resolved     name: 'glob',
8318 silly resolved     description: 'a little globber',
8318 silly resolved     version: '3.1.21',
8318 silly resolved     repository: { type: 'git', url: 'git://github.com/isaacs/node-glob.git' },
8318 silly resolved     main: 'glob.js',
8318 silly resolved     engines: { node: '*' },
8318 silly resolved     dependencies: { minimatch: '~0.2.11', 'graceful-fs': '~1.2.0', inherits: '1' },
8318 silly resolved     devDependencies: { tap: '~0.4.0', mkdirp: '0', rimraf: '1' },
8318 silly resolved     scripts: { test: 'tap test/*.js' },
8318 silly resolved     license: 'BSD',
8318 silly resolved     readme: '# Glob\n\nThis is a glob implementation in JavaScript.  It uses the `minimatch`\nlibrary to do its matching.\n\n## Attention: node-glob users!\n\nThe API has changed dramatically between 2.x and 3.x. This library is\nnow 100% JavaScript, and the integer flags have been replaced with an\noptions object.\n\nAlso, there\'s an event emitter class, proper tests, and all the other\nthings you\'ve come to expect from node modules.\n\nAnd best of all, no compilation!\n\n## Usage\n\n```javascript\nvar glob = require("glob")\n\n// options is optional\nglob("**/*.js", options, function (er, files) {\n  // files is an array of filenames.\n  // If the `nonull` option is set, and nothing\n  // was found, then files is ["**/*.js"]\n  // er is an error object or null.\n})\n```\n\n## Features\n\nPlease see the [minimatch\ndocumentation](https://github.com/isaacs/minimatch) for more details.\n\nSupports these glob features:\n\n* Brace Expansion\n* Extended glob matching\n* "Globstar" `**` matching\n\nSee:\n\n* `man sh`\n* `man bash`\n* `man 3 fnmatch`\n* `man 5 gitignore`\n* [minimatch documentation](https://github.com/isaacs/minimatch)\n\n## glob(pattern, [options], cb)\n\n* `pattern` {String} Pattern to be matched\n* `options` {Object}\n* `cb` {Function}\n  * `err` {Error | null}\n  * `matches` {Array<String>} filenames found matching the pattern\n\nPerform an asynchronous glob search.\n\n## glob.sync(pattern, [options]\n\n* `pattern` {String} Pattern to be matched\n* `options` {Object}\n* return: {Array<String>} filenames found matching the pattern\n\nPerform a synchronous glob search.\n\n## Class: glob.Glob\n\nCreate a Glob object by instanting the `glob.Glob` class.\n\n```javascript\nvar Glob = require("glob").Glob\nvar mg = new Glob(pattern, options, cb)\n```\n\nIt\'s an EventEmitter, and starts walking the filesystem to find matches\nimmediately.\n\n### new glob.Glob(pattern, [options], [cb])\n\n* `pattern` {String} pattern to search for\n* `options` {Object}\n* `cb` {Function} Called when an error occurs, or matches are found\n  * `err` {Error | null}\n  * `matches` {Array<String>} filenames found matching the pattern\n\nNote that if the `sync` flag is set in the options, then matches will\nbe immediately available on the `g.found` member.\n\n### Properties\n\n* `minimatch` The minimatch object that the glob uses.\n* `options` The options object passed in.\n* `error` The error encountered.  When an error is encountered, the\n  glob object is in an undefined state, and should be discarded.\n* `aborted` Boolean which is set to true when calling `abort()`.  There\n  is no way at this time to continue a glob search after aborting, but\n  you can re-use the statCache to avoid having to duplicate syscalls.\n\n### Events\n\n* `end` When the matching is finished, this is emitted with all the\n  matches found.  If the `nonull` option is set, and no match was found,\n  then the `matches` list contains the original pattern.  The matches\n  are sorted, unless the `nosort` flag is set.\n* `match` Every time a match is found, this is emitted with the matched.\n* `error` Emitted when an unexpected error is encountered, or whenever\n  any fs error occurs if `options.strict` is set.\n* `abort` When `abort()` is called, this event is raised.\n\n### Methods\n\n* `abort` Stop the search.\n\n### Options\n\nAll the options that can be passed to Minimatch can also be passed to\nGlob to change pattern matching behavior.  Also, some have been added,\nor have glob-specific ramifications.\n\nAll options are false by default, unless otherwise noted.\n\nAll options are added to the glob object, as well.\n\n* `cwd` The current working directory in which to search.  Defaults\n  to `process.cwd()`.\n* `root` The place where patterns starting with `/` will be mounted\n  onto.  Defaults to `path.resolve(options.cwd, "/")` (`/` on Unix\n  systems, and `C:\\` or some such on Windows.)\n* `nomount` By default, a pattern starting with a forward-slash will be\n  "mounted" onto the root setting, so that a valid filesystem path is\n  returned.  Set this flag to disable that behavior.\n* `mark` Add a `/` character to directory matches.  Note that this\n  requires additional stat calls.\n* `nosort` Don\'t sort the results.\n* `stat` Set to true to stat *all* results.  This reduces performance\n  somewhat, and is completely unnecessary, unless `readdir` is presumed\n  to be an untrustworthy indicator of file existence.  It will cause\n  ELOOP to be triggered one level sooner in the case of cyclical\n  symbolic links.\n* `silent` When an unusual error is encountered\n  when attempting to read a directory, a warning will be printed to\n  stderr.  Set the `silent` option to true to suppress these warnings.\n* `strict` When an unusual error is encountered\n  when attempting to read a directory, the process will just continue on\n  in search of other matches.  Set the `strict` option to raise an error\n  in these cases.\n* `statCache` A cache of results of filesystem information, to prevent\n  unnecessary stat calls.  While it should not normally be necessary to\n  set this, you may pass the statCache from one glob() call to the\n  options object of another, if you know that the filesystem will not\n  change between calls.  (See "Race Conditions" below.)\n* `sync` Perform a synchronous glob search.\n* `nounique` In some cases, brace-expanded patterns can result in the\n  same file showing up multiple times in the result set.  By default,\n  this implementation prevents duplicates in the result set.\n  Set this flag to disable that behavior.\n* `nonull` Set to never return an empty set, instead returning a set\n  containing the pattern itself.  This is the default in glob(3).\n* `nocase` Perform a case-insensitive match.  Note that case-insensitive\n  filesystems will sometimes result in glob returning results that are\n  case-insensitively matched anyway, since readdir and stat will not\n  raise an error.\n* `debug` Set to enable debug logging in minimatch and glob.\n* `globDebug` Set to enable debug logging in glob, but not minimatch.\n\n## Comparisons to other fnmatch/glob implementations\n\nWhile strict compliance with the existing standards is a worthwhile\ngoal, some discrepancies exist between node-glob and other\nimplementations, and are intentional.\n\nIf the pattern starts with a `!` character, then it is negated.  Set the\n`nonegate` flag to suppress this behavior, and treat leading `!`\ncharacters normally.  This is perhaps relevant if you wish to start the\npattern with a negative extglob pattern like `!(a|B)`.  Multiple `!`\ncharacters at the start of a pattern will negate the pattern multiple\ntimes.\n\nIf a pattern starts with `#`, then it is treated as a comment, and\nwill not match anything.  Use `\\#` to match a literal `#` at the\nstart of a line, or set the `nocomment` flag to suppress this behavior.\n\nThe double-star character `**` is supported by default, unless the\n`noglobstar` flag is set.  This is supported in the manner of bsdglob\nand bash 4.1, where `**` only has special significance if it is the only\nthing in a path part.  That is, `a/**/b` will match `a/x/y/b`, but\n`a/**b` will not.  **Note that this is different from the way that `**` is\nhandled by ruby\'s `Dir` class.**\n\nIf an escaped pattern has no matches, and the `nonull` flag is set,\nthen glob returns the pattern as-provided, rather than\ninterpreting the character escapes.  For example,\n`glob.match([], "\\\\*a\\\\?")` will return `"\\\\*a\\\\?"` rather than\n`"*a?"`.  This is akin to setting the `nullglob` option in bash, except\nthat it does not resolve escaped pattern characters.\n\nIf brace expansion is not disabled, then it is performed before any\nother interpretation of the glob pattern.  Thus, a pattern like\n`+(a|{b),c)}`, which would not be valid in bash or zsh, is expanded\n**first** into the set of `+(a|b)` and `+(a|c)`, and those patterns are\nchecked for validity.  Since those two are valid, matching proceeds.\n\n## Windows\n\n**Please only use forward-slashes in glob expressions.**\n\nThough windows uses either `/` or `\\` as its path separator, only `/`\ncharacters are used by this glob implementation.  You must use\nforward-slashes **only** in glob expressions.  Back-slashes will always\nbe interpreted as escape characters, not path separators.\n\nResults from absolute patterns such as `/foo/*` are mounted onto the\nroot setting using `path.join`.  On windows, this will by default result\nin `/foo/*` matching `C:\\foo\\bar.txt`.\n\n## Race Conditions\n\nGlob searching, by its very nature, is susceptible to race conditions,\nsince it relies on directory walking and such.\n\nAs a result, it is possible that a file that exists when glob looks for\nit may have been deleted or modified by the time it returns the result.\n\nAs part of its internal implementation, this program caches all stat\nand readdir calls that it makes, in order to cut down on system\noverhead.  However, this also makes it even more susceptible to races,\nespecially if the statCache object is reused between glob calls.\n\nUsers are thus advised not to use a glob result as a\nguarantee of filesystem state in the face of rapid changes.\nFor the vast majority of operations, this is never a problem.\n',
8318 silly resolved     readmeFilename: 'README.md',
8318 silly resolved     bugs: { url: 'https://github.com/isaacs/node-glob/issues' },
8318 silly resolved     homepage: 'https://github.com/isaacs/node-glob',
8318 silly resolved     _id: 'glob@3.1.21',
8318 silly resolved     _from: 'glob@~3.1.21' },
8318 silly resolved   { author:
8318 silly resolved      { name: 'Isaac Z. Schlueter',
8318 silly resolved        email: 'i@izs.me',
8318 silly resolved        url: 'http://blog.izs.me' },
8318 silly resolved     name: 'minimatch',
8318 silly resolved     description: 'a glob matcher in javascript',
8318 silly resolved     version: '0.2.14',
8318 silly resolved     repository: { type: 'git', url: 'git://github.com/isaacs/minimatch.git' },
8318 silly resolved     main: 'minimatch.js',
8318 silly resolved     scripts: { test: 'tap test/*.js' },
8318 silly resolved     engines: { node: '*' },
8318 silly resolved     dependencies: { 'lru-cache': '2', sigmund: '~1.0.0' },
8318 silly resolved     devDependencies: { tap: '' },
8318 silly resolved     license:
8318 silly resolved      { type: 'MIT',
8318 silly resolved        url: 'http://github.com/isaacs/minimatch/raw/master/LICENSE' },
8318 silly resolved     readme: '# minimatch\n\nA minimal matching utility.\n\n[![Build Status](https://secure.travis-ci.org/isaacs/minimatch.png)](http://travis-ci.org/isaacs/minimatch)\n\n\nThis is the matching library used internally by npm.\n\nEventually, it will replace the C binding in node-glob.\n\nIt works by converting glob expressions into JavaScript `RegExp`\nobjects.\n\n## Usage\n\n```javascript\nvar minimatch = require("minimatch")\n\nminimatch("bar.foo", "*.foo") // true!\nminimatch("bar.foo", "*.bar") // false!\nminimatch("bar.foo", "*.+(bar|foo)", { debug: true }) // true, and noisy!\n```\n\n## Features\n\nSupports these glob features:\n\n* Brace Expansion\n* Extended glob matching\n* "Globstar" `**` matching\n\nSee:\n\n* `man sh`\n* `man bash`\n* `man 3 fnmatch`\n* `man 5 gitignore`\n\n## Minimatch Class\n\nCreate a minimatch object by instanting the `minimatch.Minimatch` class.\n\n```javascript\nvar Minimatch = require("minimatch").Minimatch\nvar mm = new Minimatch(pattern, options)\n```\n\n### Properties\n\n* `pattern` The original pattern the minimatch object represents.\n* `options` The options supplied to the constructor.\n* `set` A 2-dimensional array of regexp or string expressions.\n  Each row in the\n  array corresponds to a brace-expanded pattern.  Each item in the row\n  corresponds to a single path-part.  For example, the pattern\n  `{a,b/c}/d` would expand to a set of patterns like:\n\n        [ [ a, d ]\n        , [ b, c, d ] ]\n\n    If a portion of the pattern doesn\'t have any "magic" in it\n    (that is, it\'s something like `"foo"` rather than `fo*o?`), then it\n    will be left as a string rather than converted to a regular\n    expression.\n\n* `regexp` Created by the `makeRe` method.  A single regular expression\n  expressing the entire pattern.  This is useful in cases where you wish\n  to use the pattern somewhat like `fnmatch(3)` with `FNM_PATH` enabled.\n* `negate` True if the pattern is negated.\n* `comment` True if the pattern is a comment.\n* `empty` True if the pattern is `""`.\n\n### Methods\n\n* `makeRe` Generate the `regexp` member if necessary, and return it.\n  Will return `false` if the pattern is invalid.\n* `match(fname)` Return true if the filename matches the pattern, or\n  false otherwise.\n* `matchOne(fileArray, patternArray, partial)` Take a `/`-split\n  filename, and match it against a single row in the `regExpSet`.  This\n  method is mainly for internal use, but is exposed so that it can be\n  used by a glob-walker that needs to avoid excessive filesystem calls.\n\nAll other methods are internal, and will be called as necessary.\n\n## Functions\n\nThe top-level exported function has a `cache` property, which is an LRU\ncache set to store 100 items.  So, calling these methods repeatedly\nwith the same pattern and options will use the same Minimatch object,\nsaving the cost of parsing it multiple times.\n\n### minimatch(path, pattern, options)\n\nMain export.  Tests a path against the pattern using the options.\n\n```javascript\nvar isJS = minimatch(file, "*.js", { matchBase: true })\n```\n\n### minimatch.filter(pattern, options)\n\nReturns a function that tests its\nsupplied argument, suitable for use with `Array.filter`.  Example:\n\n```javascript\nvar javascripts = fileList.filter(minimatch.filter("*.js", {matchBase: true}))\n```\n\n### minimatch.match(list, pattern, options)\n\nMatch against the list of\nfiles, in the style of fnmatch or glob.  If nothing is matched, and\noptions.nonull is set, then return a list containing the pattern itself.\n\n```javascript\nvar javascripts = minimatch.match(fileList, "*.js", {matchBase: true}))\n```\n\n### minimatch.makeRe(pattern, options)\n\nMake a regular expression object from the pattern.\n\n## Options\n\nAll options are `false` by default.\n\n### debug\n\nDump a ton of stuff to stderr.\n\n### nobrace\n\nDo not expand `{a,b}` and `{1..3}` brace sets.\n\n### noglobstar\n\nDisable `**` matching against multiple folder names.\n\n### dot\n\nAllow patterns to match filenames starting with a period, even if\nthe pattern does not explicitly have a period in that spot.\n\nNote that by default, `a/**/b` will **not** match `a/.d/b`, unless `dot`\nis set.\n\n### noext\n\nDisable "extglob" style patterns like `+(a|b)`.\n\n### nocase\n\nPerform a case-insensitive match.\n\n### nonull\n\nWhen a match is not found by `minimatch.match`, return a list containing\nthe pattern itself.  When set, an empty list is returned if there are\nno matches.\n\n### matchBase\n\nIf set, then patterns without slashes will be matched\nagainst the basename of the path if it contains slashes.  For example,\n`a?b` would match the path `/xyz/123/acb`, but not `/xyz/acb/123`.\n\n### nocomment\n\nSuppress the behavior of treating `#` at the start of a pattern as a\ncomment.\n\n### nonegate\n\nSuppress the behavior of treating a leading `!` character as negation.\n\n### flipNegate\n\nReturns from negate expressions the same as if they were not negated.\n(Ie, true on a hit, false on a miss.)\n\n\n## Comparisons to other fnmatch/glob implementations\n\nWhile strict compliance with the existing standards is a worthwhile\ngoal, some discrepancies exist between minimatch and other\nimplementations, and are intentional.\n\nIf the pattern starts with a `!` character, then it is negated.  Set the\n`nonegate` flag to suppress this behavior, and treat leading `!`\ncharacters normally.  This is perhaps relevant if you wish to start the\npattern with a negative extglob pattern like `!(a|B)`.  Multiple `!`\ncharacters at the start of a pattern will negate the pattern multiple\ntimes.\n\nIf a pattern starts with `#`, then it is treated as a comment, and\nwill not match anything.  Use `\\#` to match a literal `#` at the\nstart of a line, or set the `nocomment` flag to suppress this behavior.\n\nThe double-star character `**` is supported by default, unless the\n`noglobstar` flag is set.  This is supported in the manner of bsdglob\nand bash 4.1, where `**` only has special significance if it is the only\nthing in a path part.  That is, `a/**/b` will match `a/x/y/b`, but\n`a/**b` will not.\n\nIf an escaped pattern has no matches, and the `nonull` flag is set,\nthen minimatch.match returns the pattern as-provided, rather than\ninterpreting the character escapes.  For example,\n`minimatch.match([], "\\\\*a\\\\?")` will return `"\\\\*a\\\\?"` rather than\n`"*a?"`.  This is akin to setting the `nullglob` option in bash, except\nthat it does not resolve escaped pattern characters.\n\nIf brace expansion is not disabled, then it is performed before any\nother interpretation of the glob pattern.  Thus, a pattern like\n`+(a|{b),c)}`, which would not be valid in bash or zsh, is expanded\n**first** into the set of `+(a|b)` and `+(a|c)`, and those patterns are\nchecked for validity.  Since those two are valid, matching proceeds.\n',
8318 silly resolved     readmeFilename: 'README.md',
8318 silly resolved     bugs: { url: 'https://github.com/isaacs/minimatch/issues' },
8318 silly resolved     homepage: 'https://github.com/isaacs/minimatch',
8318 silly resolved     _id: 'minimatch@0.2.14',
8318 silly resolved     _from: 'minimatch@~0.2.11' } ]
8319 info install lodash@1.0.1 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule
8320 info install glob@3.1.21 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule
8321 info install minimatch@0.2.14 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule
8322 info installOne lodash@1.0.1
8323 info installOne glob@3.1.21
8324 info installOne minimatch@0.2.14
8325 silly resolved [ { author:
8325 silly resolved      { name: 'Isaac Z. Schlueter',
8325 silly resolved        email: 'i@izs.me',
8325 silly resolved        url: 'http://blog.izs.me' },
8325 silly resolved     name: 'graceful-fs',
8325 silly resolved     description: 'A drop-in replacement for fs, making various improvements.',
8325 silly resolved     version: '1.2.3',
8325 silly resolved     repository:
8325 silly resolved      { type: 'git',
8325 silly resolved        url: 'git://github.com/isaacs/node-graceful-fs.git' },
8325 silly resolved     main: 'graceful-fs.js',
8325 silly resolved     engines: { node: '>=0.4.0' },
8325 silly resolved     directories: { test: 'test' },
8325 silly resolved     scripts: { test: 'tap test/*.js' },
8325 silly resolved     keywords:
8325 silly resolved      [ 'fs',
8325 silly resolved        'module',
8325 silly resolved        'reading',
8325 silly resolved        'retry',
8325 silly resolved        'retries',
8325 silly resolved        'queue',
8325 silly resolved        'error',
8325 silly resolved        'errors',
8325 silly resolved        'handling',
8325 silly resolved        'EMFILE',
8325 silly resolved        'EAGAIN',
8325 silly resolved        'EINVAL',
8325 silly resolved        'EPERM',
8325 silly resolved        'EACCESS' ],
8325 silly resolved     license: 'BSD',
8325 silly resolved     readme: '# graceful-fs\n\ngraceful-fs functions as a drop-in replacement for the fs module,\nmaking various improvements.\n\nThe improvements are meant to normalize behavior across different\nplatforms and environments, and to make filesystem access more\nresilient to errors.\n\n## Improvements over fs module\n\ngraceful-fs:\n\n* keeps track of how many file descriptors are open, and by default\n  limits this to 1024. Any further requests to open a file are put in a\n  queue until new slots become available. If 1024 turns out to be too\n  much, it decreases the limit further.\n* fixes `lchmod` for Node versions prior to 0.6.2.\n* implements `fs.lutimes` if possible. Otherwise it becomes a noop.\n* ignores `EINVAL` and `EPERM` errors in `chown`, `fchown` or\n  `lchown` if the user isn\'t root.\n* makes `lchmod` and `lchown` become noops, if not available.\n* retries reading a file if `read` results in EAGAIN error.\n\nOn Windows, it retries renaming a file for up to one second if `EACCESS`\nor `EPERM` error occurs, likely because antivirus software has locked\nthe directory.\n\n## Configuration\n\nThe maximum number of open file descriptors that graceful-fs manages may\nbe adjusted by setting `fs.MAX_OPEN` to a different number. The default\nis 1024.\n',
8325 silly resolved     readmeFilename: 'README.md',
8325 silly resolved     bugs: { url: 'https://github.com/isaacs/node-graceful-fs/issues' },
8325 silly resolved     homepage: 'https://github.com/isaacs/node-graceful-fs',
8325 silly resolved     _id: 'graceful-fs@1.2.3',
8325 silly resolved     _from: 'graceful-fs@~1.2.0' },
8325 silly resolved   { name: 'inherits',
8325 silly resolved     description: 'A tiny simple way to do classic inheritance in js',
8325 silly resolved     version: '1.0.0',
8325 silly resolved     keywords: [ 'inheritance', 'class', 'klass', 'oop', 'object-oriented' ],
8325 silly resolved     main: './inherits.js',
8325 silly resolved     repository: { type: 'git', url: 'https://github.com/isaacs/inherits' },
8325 silly resolved     author:
8325 silly resolved      { name: 'Isaac Z. Schlueter',
8325 silly resolved        email: 'i@izs.me',
8325 silly resolved        url: 'http://blog.izs.me/' },
8325 silly resolved     readme: 'A dead simple way to do inheritance in JS.\n\n    var inherits = require("inherits")\n\n    function Animal () {\n      this.alive = true\n    }\n    Animal.prototype.say = function (what) {\n      console.log(what)\n    }\n\n    inherits(Dog, Animal)\n    function Dog () {\n      Dog.super.apply(this)\n    }\n    Dog.prototype.sniff = function () {\n      this.say("sniff sniff")\n    }\n    Dog.prototype.bark = function () {\n      this.say("woof woof")\n    }\n\n    inherits(Chihuahua, Dog)\n    function Chihuahua () {\n      Chihuahua.super.apply(this)\n    }\n    Chihuahua.prototype.bark = function () {\n      this.say("yip yip")\n    }\n\n    // also works\n    function Cat () {\n      Cat.super.apply(this)\n    }\n    Cat.prototype.hiss = function () {\n      this.say("CHSKKSS!!")\n    }\n    inherits(Cat, Animal, {\n      meow: function () { this.say("miao miao") }\n    })\n    Cat.prototype.purr = function () {\n      this.say("purr purr")\n    }\n\n\n    var c = new Chihuahua\n    assert(c instanceof Chihuahua)\n    assert(c instanceof Dog)\n    assert(c instanceof Animal)\n\nThe actual function is laughably small.  10-lines small.\n',
8325 silly resolved     readmeFilename: 'README.md',
8325 silly resolved     bugs: { url: 'https://github.com/isaacs/inherits/issues' },
8325 silly resolved     homepage: 'https://github.com/isaacs/inherits',
8325 silly resolved     _id: 'inherits@1.0.0',
8325 silly resolved     _from: 'inherits@1' },
8325 silly resolved   { author:
8325 silly resolved      { name: 'Isaac Z. Schlueter',
8325 silly resolved        email: 'i@izs.me',
8325 silly resolved        url: 'http://blog.izs.me' },
8325 silly resolved     name: 'minimatch',
8325 silly resolved     description: 'a glob matcher in javascript',
8325 silly resolved     version: '0.2.14',
8325 silly resolved     repository: { type: 'git', url: 'git://github.com/isaacs/minimatch.git' },
8325 silly resolved     main: 'minimatch.js',
8325 silly resolved     scripts: { test: 'tap test/*.js' },
8325 silly resolved     engines: { node: '*' },
8325 silly resolved     dependencies: { 'lru-cache': '2', sigmund: '~1.0.0' },
8325 silly resolved     devDependencies: { tap: '' },
8325 silly resolved     license:
8325 silly resolved      { type: 'MIT',
8325 silly resolved        url: 'http://github.com/isaacs/minimatch/raw/master/LICENSE' },
8325 silly resolved     readme: '# minimatch\n\nA minimal matching utility.\n\n[![Build Status](https://secure.travis-ci.org/isaacs/minimatch.png)](http://travis-ci.org/isaacs/minimatch)\n\n\nThis is the matching library used internally by npm.\n\nEventually, it will replace the C binding in node-glob.\n\nIt works by converting glob expressions into JavaScript `RegExp`\nobjects.\n\n## Usage\n\n```javascript\nvar minimatch = require("minimatch")\n\nminimatch("bar.foo", "*.foo") // true!\nminimatch("bar.foo", "*.bar") // false!\nminimatch("bar.foo", "*.+(bar|foo)", { debug: true }) // true, and noisy!\n```\n\n## Features\n\nSupports these glob features:\n\n* Brace Expansion\n* Extended glob matching\n* "Globstar" `**` matching\n\nSee:\n\n* `man sh`\n* `man bash`\n* `man 3 fnmatch`\n* `man 5 gitignore`\n\n## Minimatch Class\n\nCreate a minimatch object by instanting the `minimatch.Minimatch` class.\n\n```javascript\nvar Minimatch = require("minimatch").Minimatch\nvar mm = new Minimatch(pattern, options)\n```\n\n### Properties\n\n* `pattern` The original pattern the minimatch object represents.\n* `options` The options supplied to the constructor.\n* `set` A 2-dimensional array of regexp or string expressions.\n  Each row in the\n  array corresponds to a brace-expanded pattern.  Each item in the row\n  corresponds to a single path-part.  For example, the pattern\n  `{a,b/c}/d` would expand to a set of patterns like:\n\n        [ [ a, d ]\n        , [ b, c, d ] ]\n\n    If a portion of the pattern doesn\'t have any "magic" in it\n    (that is, it\'s something like `"foo"` rather than `fo*o?`), then it\n    will be left as a string rather than converted to a regular\n    expression.\n\n* `regexp` Created by the `makeRe` method.  A single regular expression\n  expressing the entire pattern.  This is useful in cases where you wish\n  to use the pattern somewhat like `fnmatch(3)` with `FNM_PATH` enabled.\n* `negate` True if the pattern is negated.\n* `comment` True if the pattern is a comment.\n* `empty` True if the pattern is `""`.\n\n### Methods\n\n* `makeRe` Generate the `regexp` member if necessary, and return it.\n  Will return `false` if the pattern is invalid.\n* `match(fname)` Return true if the filename matches the pattern, or\n  false otherwise.\n* `matchOne(fileArray, patternArray, partial)` Take a `/`-split\n  filename, and match it against a single row in the `regExpSet`.  This\n  method is mainly for internal use, but is exposed so that it can be\n  used by a glob-walker that needs to avoid excessive filesystem calls.\n\nAll other methods are internal, and will be called as necessary.\n\n## Functions\n\nThe top-level exported function has a `cache` property, which is an LRU\ncache set to store 100 items.  So, calling these methods repeatedly\nwith the same pattern and options will use the same Minimatch object,\nsaving the cost of parsing it multiple times.\n\n### minimatch(path, pattern, options)\n\nMain export.  Tests a path against the pattern using the options.\n\n```javascript\nvar isJS = minimatch(file, "*.js", { matchBase: true })\n```\n\n### minimatch.filter(pattern, options)\n\nReturns a function that tests its\nsupplied argument, suitable for use with `Array.filter`.  Example:\n\n```javascript\nvar javascripts = fileList.filter(minimatch.filter("*.js", {matchBase: true}))\n```\n\n### minimatch.match(list, pattern, options)\n\nMatch against the list of\nfiles, in the style of fnmatch or glob.  If nothing is matched, and\noptions.nonull is set, then return a list containing the pattern itself.\n\n```javascript\nvar javascripts = minimatch.match(fileList, "*.js", {matchBase: true}))\n```\n\n### minimatch.makeRe(pattern, options)\n\nMake a regular expression object from the pattern.\n\n## Options\n\nAll options are `false` by default.\n\n### debug\n\nDump a ton of stuff to stderr.\n\n### nobrace\n\nDo not expand `{a,b}` and `{1..3}` brace sets.\n\n### noglobstar\n\nDisable `**` matching against multiple folder names.\n\n### dot\n\nAllow patterns to match filenames starting with a period, even if\nthe pattern does not explicitly have a period in that spot.\n\nNote that by default, `a/**/b` will **not** match `a/.d/b`, unless `dot`\nis set.\n\n### noext\n\nDisable "extglob" style patterns like `+(a|b)`.\n\n### nocase\n\nPerform a case-insensitive match.\n\n### nonull\n\nWhen a match is not found by `minimatch.match`, return a list containing\nthe pattern itself.  When set, an empty list is returned if there are\nno matches.\n\n### matchBase\n\nIf set, then patterns without slashes will be matched\nagainst the basename of the path if it contains slashes.  For example,\n`a?b` would match the path `/xyz/123/acb`, but not `/xyz/acb/123`.\n\n### nocomment\n\nSuppress the behavior of treating `#` at the start of a pattern as a\ncomment.\n\n### nonegate\n\nSuppress the behavior of treating a leading `!` character as negation.\n\n### flipNegate\n\nReturns from negate expressions the same as if they were not negated.\n(Ie, true on a hit, false on a miss.)\n\n\n## Comparisons to other fnmatch/glob implementations\n\nWhile strict compliance with the existing standards is a worthwhile\ngoal, some discrepancies exist between minimatch and other\nimplementations, and are intentional.\n\nIf the pattern starts with a `!` character, then it is negated.  Set the\n`nonegate` flag to suppress this behavior, and treat leading `!`\ncharacters normally.  This is perhaps relevant if you wish to start the\npattern with a negative extglob pattern like `!(a|B)`.  Multiple `!`\ncharacters at the start of a pattern will negate the pattern multiple\ntimes.\n\nIf a pattern starts with `#`, then it is treated as a comment, and\nwill not match anything.  Use `\\#` to match a literal `#` at the\nstart of a line, or set the `nocomment` flag to suppress this behavior.\n\nThe double-star character `**` is supported by default, unless the\n`noglobstar` flag is set.  This is supported in the manner of bsdglob\nand bash 4.1, where `**` only has special significance if it is the only\nthing in a path part.  That is, `a/**/b` will match `a/x/y/b`, but\n`a/**b` will not.\n\nIf an escaped pattern has no matches, and the `nonull` flag is set,\nthen minimatch.match returns the pattern as-provided, rather than\ninterpreting the character escapes.  For example,\n`minimatch.match([], "\\\\*a\\\\?")` will return `"\\\\*a\\\\?"` rather than\n`"*a?"`.  This is akin to setting the `nullglob` option in bash, except\nthat it does not resolve escaped pattern characters.\n\nIf brace expansion is not disabled, then it is performed before any\nother interpretation of the glob pattern.  Thus, a pattern like\n`+(a|{b),c)}`, which would not be valid in bash or zsh, is expanded\n**first** into the set of `+(a|b)` and `+(a|c)`, and those patterns are\nchecked for validity.  Since those two are valid, matching proceeds.\n',
8325 silly resolved     readmeFilename: 'README.md',
8325 silly resolved     bugs: { url: 'https://github.com/isaacs/minimatch/issues' },
8325 silly resolved     homepage: 'https://github.com/isaacs/minimatch',
8325 silly resolved     _id: 'minimatch@0.2.14',
8325 silly resolved     _from: 'minimatch@~0.2.11' } ]
8326 info install graceful-fs@1.2.3 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob
8327 info install inherits@1.0.0 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob
8328 info install minimatch@0.2.14 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob
8329 info installOne graceful-fs@1.2.3
8330 info installOne inherits@1.0.0
8331 info installOne minimatch@0.2.14
8332 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\lodash unbuild
8333 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\glob unbuild
8334 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\minimatch unbuild
8335 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob\node_modules\graceful-fs unbuild
8336 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob\node_modules\inherits unbuild
8337 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob\node_modules\minimatch unbuild
8338 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\lodash\1.0.1\package.tgz
8339 silly lockFile 658a11fa-ules-globule-node-modules-lodash tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\lodash
8340 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\lodash C:\Users\Gaston\AppData\Roaming\npm-cache\658a11fa-ules-globule-node-modules-lodash.lock
8341 silly lockFile f5ae224a-m-cache-lodash-1-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\lodash\1.0.1\package.tgz
8342 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\lodash\1.0.1\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\f5ae224a-m-cache-lodash-1-0-1-package-tgz.lock
8343 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\glob\3.1.21\package.tgz
8344 silly lockFile 0bfa4649-odules-globule-node-modules-glob tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\glob
8345 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\glob C:\Users\Gaston\AppData\Roaming\npm-cache\0bfa4649-odules-globule-node-modules-glob.lock
8346 silly lockFile e5ccf26d-pm-cache-glob-3-1-21-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\glob\3.1.21\package.tgz
8347 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\glob\3.1.21\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\e5ccf26d-pm-cache-glob-3-1-21-package-tgz.lock
8348 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\minimatch\0.2.14\package.tgz
8349 silly lockFile dda6846d-s-globule-node-modules-minimatch tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\minimatch
8350 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\minimatch C:\Users\Gaston\AppData\Roaming\npm-cache\dda6846d-s-globule-node-modules-minimatch.lock
8351 silly lockFile 327a09ae-che-minimatch-0-2-14-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\minimatch\0.2.14\package.tgz
8352 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\minimatch\0.2.14\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\327a09ae-che-minimatch-0-2-14-package-tgz.lock
8353 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\graceful-fs\1.2.3\package.tgz
8354 silly lockFile f9a50303-es-glob-node-modules-graceful-fs tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob\node_modules\graceful-fs
8355 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob\node_modules\graceful-fs C:\Users\Gaston\AppData\Roaming\npm-cache\f9a50303-es-glob-node-modules-graceful-fs.lock
8356 silly lockFile 5425704d-he-graceful-fs-1-2-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\graceful-fs\1.2.3\package.tgz
8357 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\graceful-fs\1.2.3\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\5425704d-he-graceful-fs-1-2-3-package-tgz.lock
8358 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\inherits\1.0.0\package.tgz
8359 silly lockFile ca51d68a-dules-glob-node-modules-inherits tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob\node_modules\inherits
8360 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob\node_modules\inherits C:\Users\Gaston\AppData\Roaming\npm-cache\ca51d68a-dules-glob-node-modules-inherits.lock
8361 silly lockFile ce1a2c46-cache-inherits-1-0-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\inherits\1.0.0\package.tgz
8362 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\inherits\1.0.0\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\ce1a2c46-cache-inherits-1-0-0-package-tgz.lock
8363 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\minimatch\0.2.14\package.tgz
8364 silly lockFile 32f8cbfe-ules-glob-node-modules-minimatch tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob\node_modules\minimatch
8365 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob\node_modules\minimatch C:\Users\Gaston\AppData\Roaming\npm-cache\32f8cbfe-ules-glob-node-modules-minimatch.lock
8366 silly lockFile 327a09ae-che-minimatch-0-2-14-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\minimatch\0.2.14\package.tgz
8367 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\minimatch\0.2.14\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\327a09ae-che-minimatch-0-2-14-package-tgz.lock
8368 silly gunzTarPerm modes [ '755', '644' ]
8369 silly gunzTarPerm modes [ '755', '644' ]
8370 silly gunzTarPerm modes [ '755', '644' ]
8371 silly gunzTarPerm modes [ '755', '644' ]
8372 silly gunzTarPerm modes [ '755', '644' ]
8373 silly gunzTarPerm extractEntry package.json
8374 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
8375 silly gunzTarPerm extractEntry package.json
8376 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
8377 silly gunzTarPerm extractEntry .npmignore
8378 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
8379 silly gunzTarPerm extractEntry README.md
8380 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
8381 silly gunzTarPerm extractEntry package.json
8382 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
8383 silly gunzTarPerm extractEntry package.json
8384 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
8385 silly gunzTarPerm extractEntry .npmignore
8386 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
8387 silly gunzTarPerm extractEntry README.md
8388 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
8389 silly gunzTarPerm extractEntry README.md
8390 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
8391 silly gunzTarPerm extractEntry dist/lodash.compat.js
8392 silly gunzTarPerm modified mode [ 'dist/lodash.compat.js', 438, 420 ]
8393 silly gunzTarPerm extractEntry package.json
8394 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
8395 silly gunzTarPerm extractEntry README.md
8396 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
8397 silly gunzTarPerm extractEntry inherits.js
8398 silly gunzTarPerm modified mode [ 'inherits.js', 438, 420 ]
8399 silly gunzTarPerm extractEntry LICENSE
8400 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
8401 silly gunzTarPerm extractEntry graceful-fs.js
8402 silly gunzTarPerm modified mode [ 'graceful-fs.js', 438, 420 ]
8403 silly gunzTarPerm extractEntry .npmignore
8404 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
8405 silly gunzTarPerm extractEntry README.md
8406 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
8407 silly gunzTarPerm extractEntry dist/lodash.compat.min.js
8408 silly gunzTarPerm modified mode [ 'dist/lodash.compat.min.js', 438, 420 ]
8409 silly gunzTarPerm extractEntry LICENSE
8410 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
8411 silly gunzTarPerm extractEntry glob.js
8412 silly gunzTarPerm modified mode [ 'glob.js', 438, 420 ]
8413 silly gunzTarPerm extractEntry test/open.js
8414 silly gunzTarPerm modified mode [ 'test/open.js', 438, 420 ]
8415 silly gunzTarPerm extractEntry LICENSE
8416 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
8417 silly gunzTarPerm extractEntry minimatch.js
8418 silly gunzTarPerm modified mode [ 'minimatch.js', 438, 420 ]
8419 silly gunzTarPerm extractEntry .travis.yml
8420 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]
8421 silly gunzTarPerm extractEntry test/basic.js
8422 silly gunzTarPerm modified mode [ 'test/basic.js', 438, 420 ]
8423 silly gunzTarPerm extractEntry test/ulimit.js
8424 silly gunzTarPerm modified mode [ 'test/ulimit.js', 438, 420 ]
8425 silly gunzTarPerm extractEntry dist/lodash.js
8426 silly gunzTarPerm modified mode [ 'dist/lodash.js', 438, 420 ]
8427 silly gunzTarPerm extractEntry dist/lodash.min.js
8428 silly gunzTarPerm modified mode [ 'dist/lodash.min.js', 438, 420 ]
8429 silly gunzTarPerm extractEntry dist/lodash.underscore.js
8430 silly gunzTarPerm modified mode [ 'dist/lodash.underscore.js', 438, 420 ]
8431 silly gunzTarPerm extractEntry dist/lodash.underscore.min.js
8432 silly gunzTarPerm modified mode [ 'dist/lodash.underscore.min.js', 438, 420 ]
8433 silly gunzTarPerm extractEntry examples/g.js
8434 silly gunzTarPerm modified mode [ 'examples/g.js', 438, 420 ]
8435 silly gunzTarPerm extractEntry examples/usr-local.js
8436 silly gunzTarPerm modified mode [ 'examples/usr-local.js', 438, 420 ]
8437 silly lockFile ca51d68a-dules-glob-node-modules-inherits tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob\node_modules\inherits
8438 silly lockFile ca51d68a-dules-glob-node-modules-inherits tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob\node_modules\inherits
8439 silly lockFile ce1a2c46-cache-inherits-1-0-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\inherits\1.0.0\package.tgz
8440 silly lockFile ce1a2c46-cache-inherits-1-0-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\inherits\1.0.0\package.tgz
8441 silly gunzTarPerm extractEntry test/brace-expand.js
8442 silly gunzTarPerm modified mode [ 'test/brace-expand.js', 438, 420 ]
8443 silly gunzTarPerm extractEntry test/caching.js
8444 silly gunzTarPerm modified mode [ 'test/caching.js', 438, 420 ]
8445 info preinstall inherits@1.0.0
8446 silly gunzTarPerm extractEntry test/00-setup.js
8447 silly gunzTarPerm modified mode [ 'test/00-setup.js', 438, 420 ]
8448 silly gunzTarPerm extractEntry test/bash-comparison.js
8449 silly gunzTarPerm modified mode [ 'test/bash-comparison.js', 438, 420 ]
8450 verbose readDependencies using package.json deps
8451 verbose readDependencies using package.json deps
8452 silly resolved []
8453 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob\node_modules\inherits
8454 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob\node_modules\inherits
8455 verbose linkStuff [ false,
8455 verbose linkStuff   false,
8455 verbose linkStuff   false,
8455 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\load-grunt-tasks\\node_modules\\findup-sync\\node_modules\\glob\\node_modules' ]
8456 info linkStuff inherits@1.0.0
8457 verbose linkBins inherits@1.0.0
8458 verbose linkMans inherits@1.0.0
8459 verbose rebuildBundles inherits@1.0.0
8460 info install inherits@1.0.0
8461 info postinstall inherits@1.0.0
8462 silly gunzTarPerm extractEntry test/defaults.js
8463 silly gunzTarPerm modified mode [ 'test/defaults.js', 438, 420 ]
8464 silly gunzTarPerm extractEntry test/extglob-ending-with-state-char.js
8465 silly gunzTarPerm modified mode [ 'test/extglob-ending-with-state-char.js', 438, 420 ]
8466 silly gunzTarPerm extractEntry test/cwd-test.js
8467 silly gunzTarPerm modified mode [ 'test/cwd-test.js', 438, 420 ]
8468 silly gunzTarPerm extractEntry test/mark.js
8469 silly gunzTarPerm modified mode [ 'test/mark.js', 438, 420 ]
8470 silly gunzTarPerm extractEntry test/nocase-nomagic.js
8471 silly gunzTarPerm modified mode [ 'test/nocase-nomagic.js', 438, 420 ]
8472 silly gunzTarPerm extractEntry test/pause-resume.js
8473 silly gunzTarPerm modified mode [ 'test/pause-resume.js', 438, 420 ]
8474 silly gunzTarPerm extractEntry test/root-nomount.js
8475 silly gunzTarPerm modified mode [ 'test/root-nomount.js', 438, 420 ]
8476 silly gunzTarPerm extractEntry test/root.js
8477 silly gunzTarPerm modified mode [ 'test/root.js', 438, 420 ]
8478 silly lockFile f9a50303-es-glob-node-modules-graceful-fs tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob\node_modules\graceful-fs
8479 silly lockFile f9a50303-es-glob-node-modules-graceful-fs tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob\node_modules\graceful-fs
8480 silly lockFile 5425704d-he-graceful-fs-1-2-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\graceful-fs\1.2.3\package.tgz
8481 silly lockFile 5425704d-he-graceful-fs-1-2-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\graceful-fs\1.2.3\package.tgz
8482 silly gunzTarPerm extractEntry test/zz-cleanup.js
8483 silly gunzTarPerm modified mode [ 'test/zz-cleanup.js', 438, 420 ]
8484 silly gunzTarPerm extractEntry test/bash-results.json
8485 silly gunzTarPerm modified mode [ 'test/bash-results.json', 438, 420 ]
8486 info preinstall graceful-fs@1.2.3
8487 verbose readDependencies using package.json deps
8488 verbose readDependencies using package.json deps
8489 silly resolved []
8490 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob\node_modules\graceful-fs
8491 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob\node_modules\graceful-fs
8492 verbose linkStuff [ false,
8492 verbose linkStuff   false,
8492 verbose linkStuff   false,
8492 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\load-grunt-tasks\\node_modules\\findup-sync\\node_modules\\glob\\node_modules' ]
8493 info linkStuff graceful-fs@1.2.3
8494 verbose linkBins graceful-fs@1.2.3
8495 verbose linkMans graceful-fs@1.2.3
8496 verbose rebuildBundles graceful-fs@1.2.3
8497 info install graceful-fs@1.2.3
8498 info postinstall graceful-fs@1.2.3
8499 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777977953-0.29677222832106054\tmp.tgz
8500 silly lockFile 8561df0d-7953-0-29677222832106054-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777977953-0.29677222832106054\package
8501 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777977953-0.29677222832106054\package C:\Users\Gaston\AppData\Roaming\npm-cache\8561df0d-7953-0-29677222832106054-package.lock
8502 silly lockFile d20c529b-7953-0-29677222832106054-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777977953-0.29677222832106054\tmp.tgz
8503 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777977953-0.29677222832106054\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\d20c529b-7953-0-29677222832106054-tmp-tgz.lock
8504 silly gunzTarPerm modes [ '755', '644' ]
8505 silly gunzTarPerm extractEntry package.json
8506 silly gunzTarPerm extractEntry .npmignore
8507 silly gunzTarPerm extractEntry LICENSE
8508 silly gunzTarPerm extractEntry index.js
8509 silly gunzTarPerm extractEntry benchmark/bench-multipart-parser.js
8510 silly gunzTarPerm extractEntry .travis.yml
8511 silly gunzTarPerm extractEntry tool/record.js
8512 silly gunzTarPerm extractEntry lib/file.js
8513 silly gunzTarPerm extractEntry lib/incoming_form.js
8514 silly gunzTarPerm extractEntry lib/index.js
8515 silly lockFile dda6846d-s-globule-node-modules-minimatch tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\minimatch
8516 silly lockFile dda6846d-s-globule-node-modules-minimatch tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\minimatch
8517 silly lockFile 327a09ae-che-minimatch-0-2-14-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\minimatch\0.2.14\package.tgz
8518 silly lockFile 327a09ae-che-minimatch-0-2-14-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\minimatch\0.2.14\package.tgz
8519 silly gunzTarPerm extractEntry lib/json_parser.js
8520 silly gunzTarPerm extractEntry lib/multipart_parser.js
8521 silly gunzTarPerm modes [ '755', '644' ]
8522 silly gunzTarPerm extractEntry lib/octet_parser.js
8523 silly gunzTarPerm extractEntry lib/querystring_parser.js
8524 info preinstall minimatch@0.2.14
8525 verbose readDependencies using package.json deps
8526 verbose readDependencies using package.json deps
8527 silly gunzTarPerm extractEntry package.json
8528 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
8529 silly gunzTarPerm extractEntry .npmignore
8530 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
8531 silly gunzTarPerm extractEntry README.md
8532 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
8533 silly gunzTarPerm extractEntry Readme.md
8534 silly gunzTarPerm extractEntry test/common.js
8535 verbose cache add [ 'lru-cache@2', null ]
8536 verbose cache add name=undefined spec="lru-cache@2" args=["lru-cache@2",null]
8537 verbose parsed url { protocol: null,
8537 verbose parsed url   slashes: null,
8537 verbose parsed url   auth: null,
8537 verbose parsed url   host: null,
8537 verbose parsed url   port: null,
8537 verbose parsed url   hostname: null,
8537 verbose parsed url   hash: null,
8537 verbose parsed url   search: null,
8537 verbose parsed url   query: null,
8537 verbose parsed url   pathname: 'lru-cache@2',
8537 verbose parsed url   path: 'lru-cache@2',
8537 verbose parsed url   href: 'lru-cache@2' }
8538 verbose cache add name="lru-cache" spec="2" args=["lru-cache","2"]
8539 verbose parsed url { protocol: null,
8539 verbose parsed url   slashes: null,
8539 verbose parsed url   auth: null,
8539 verbose parsed url   host: null,
8539 verbose parsed url   port: null,
8539 verbose parsed url   hostname: null,
8539 verbose parsed url   hash: null,
8539 verbose parsed url   search: null,
8539 verbose parsed url   query: null,
8539 verbose parsed url   pathname: '2',
8539 verbose parsed url   path: '2',
8539 verbose parsed url   href: '2' }
8540 verbose addNamed [ 'lru-cache', '2' ]
8541 verbose addNamed [ null, '>=2.0.0-0 <3.0.0-0' ]
8542 silly lockFile b4f9d1ff-lru-cache-2 lru-cache@2
8543 verbose lock lru-cache@2 C:\Users\Gaston\AppData\Roaming\npm-cache\b4f9d1ff-lru-cache-2.lock
8544 verbose cache add [ 'sigmund@~1.0.0', null ]
8545 verbose cache add name=undefined spec="sigmund@~1.0.0" args=["sigmund@~1.0.0",null]
8546 verbose parsed url { protocol: null,
8546 verbose parsed url   slashes: null,
8546 verbose parsed url   auth: null,
8546 verbose parsed url   host: null,
8546 verbose parsed url   port: null,
8546 verbose parsed url   hostname: null,
8546 verbose parsed url   hash: null,
8546 verbose parsed url   search: null,
8546 verbose parsed url   query: null,
8546 verbose parsed url   pathname: 'sigmund@~1.0.0',
8546 verbose parsed url   path: 'sigmund@~1.0.0',
8546 verbose parsed url   href: 'sigmund@~1.0.0' }
8547 verbose cache add name="sigmund" spec="~1.0.0" args=["sigmund","~1.0.0"]
8548 verbose parsed url { protocol: null,
8548 verbose parsed url   slashes: null,
8548 verbose parsed url   auth: null,
8548 verbose parsed url   host: null,
8548 verbose parsed url   port: null,
8548 verbose parsed url   hostname: null,
8548 verbose parsed url   hash: null,
8548 verbose parsed url   search: null,
8548 verbose parsed url   query: null,
8548 verbose parsed url   pathname: '~1.0.0',
8548 verbose parsed url   path: '~1.0.0',
8548 verbose parsed url   href: '~1.0.0' }
8549 verbose addNamed [ 'sigmund', '~1.0.0' ]
8550 verbose addNamed [ null, '>=1.0.0-0 <1.1.0-0' ]
8551 silly lockFile 584a4a05-sigmund-1-0-0 sigmund@~1.0.0
8552 verbose lock sigmund@~1.0.0 C:\Users\Gaston\AppData\Roaming\npm-cache\584a4a05-sigmund-1-0-0.lock
8553 silly addNameRange { name: 'lru-cache',
8553 silly addNameRange   range: '>=2.0.0-0 <3.0.0-0',
8553 silly addNameRange   hasData: false }
8554 silly addNameRange { name: 'sigmund', range: '>=1.0.0-0 <1.1.0-0', hasData: false }
8555 silly gunzTarPerm extractEntry LICENSE
8556 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
8557 silly gunzTarPerm extractEntry minimatch.js
8558 silly gunzTarPerm modified mode [ 'minimatch.js', 438, 420 ]
8559 silly gunzTarPerm extractEntry test/run.js
8560 silly gunzTarPerm extractEntry test/fixture/multipart.js
8561 silly gunzTarPerm extractEntry test/basic.js
8562 silly gunzTarPerm modified mode [ 'test/basic.js', 438, 420 ]
8563 verbose url raw lru-cache
8564 verbose url resolving [ 'https://registry.npmjs.org/', './lru-cache' ]
8565 verbose url resolved https://registry.npmjs.org/lru-cache
8566 info trying registry request attempt 1 at 16:39:48
8567 verbose etag "8XDTEJTKCZVVQR8F38J9XBFW5"
8568 http GET https://registry.npmjs.org/lru-cache
8569 silly gunzTarPerm extractEntry test/brace-expand.js
8570 silly gunzTarPerm modified mode [ 'test/brace-expand.js', 438, 420 ]
8571 silly gunzTarPerm extractEntry test/caching.js
8572 silly gunzTarPerm modified mode [ 'test/caching.js', 438, 420 ]
8573 verbose url raw sigmund
8574 verbose url resolving [ 'https://registry.npmjs.org/', './sigmund' ]
8575 verbose url resolved https://registry.npmjs.org/sigmund
8576 info trying registry request attempt 1 at 16:39:48
8577 verbose etag "1HD6GNM8EKTGCPCRL66MZK2B4"
8578 http GET https://registry.npmjs.org/sigmund
8579 silly gunzTarPerm extractEntry test/fixture/file/beta-sticker-1.png
8580 silly gunzTarPerm extractEntry test/fixture/file/binaryfile.tar.gz
8581 silly gunzTarPerm extractEntry test/defaults.js
8582 silly gunzTarPerm modified mode [ 'test/defaults.js', 438, 420 ]
8583 silly gunzTarPerm extractEntry test/extglob-ending-with-state-char.js
8584 silly gunzTarPerm modified mode [ 'test/extglob-ending-with-state-char.js', 438, 420 ]
8585 silly gunzTarPerm extractEntry test/fixture/file/blank.gif
8586 silly gunzTarPerm extractEntry test/fixture/file/funkyfilename.txt
8587 silly lockFile 0bfa4649-odules-globule-node-modules-glob tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\glob
8588 silly lockFile 0bfa4649-odules-globule-node-modules-glob tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\glob
8589 silly lockFile e5ccf26d-pm-cache-glob-3-1-21-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\glob\3.1.21\package.tgz
8590 silly lockFile e5ccf26d-pm-cache-glob-3-1-21-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\glob\3.1.21\package.tgz
8591 http 200 https://registry.npmjs.org/tiny-lr/0.0.4
8592 silly registry.get cb [ 200,
8592 silly registry.get   { date: 'Fri, 03 Jan 2014 19:38:48 GMT',
8592 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
8592 silly registry.get     etag: '"CRLV1H3S9VUTQ3HJT2OPKFQJQ"',
8592 silly registry.get     'content-type': 'application/json',
8592 silly registry.get     'content-length': '11122',
8592 silly registry.get     'accept-ranges': 'bytes',
8592 silly registry.get     via: '1.1 varnish',
8592 silly registry.get     age: '99780',
8592 silly registry.get     'x-served-by': 'cache-d46-DAL',
8592 silly registry.get     'x-cache': 'HIT',
8592 silly registry.get     'x-cache-hits': '1',
8592 silly registry.get     'x-timer': 'S1388777928.064813137,VS0,VE14',
8592 silly registry.get     vary: 'Accept',
8592 silly registry.get     'keep-alive': 'timeout=10, max=35',
8592 silly registry.get     connection: 'Keep-Alive' } ]
8593 silly gunzTarPerm extractEntry test/fixture/file/menu_separator.png
8594 silly gunzTarPerm extractEntry test/fixture/file/plain.txt
8595 info preinstall glob@3.1.21
8596 verbose readDependencies using package.json deps
8597 verbose readDependencies using package.json deps
8598 silly gunzTarPerm extractEntry test/fixture/http/special-chars-in-filename/info.md
8599 silly gunzTarPerm extractEntry test/fixture/js/encoding.js
8600 verbose cache add [ 'graceful-fs@~1.2.0', null ]
8601 verbose cache add name=undefined spec="graceful-fs@~1.2.0" args=["graceful-fs@~1.2.0",null]
8602 verbose parsed url { protocol: null,
8602 verbose parsed url   slashes: null,
8602 verbose parsed url   auth: null,
8602 verbose parsed url   host: null,
8602 verbose parsed url   port: null,
8602 verbose parsed url   hostname: null,
8602 verbose parsed url   hash: null,
8602 verbose parsed url   search: null,
8602 verbose parsed url   query: null,
8602 verbose parsed url   pathname: 'graceful-fs@~1.2.0',
8602 verbose parsed url   path: 'graceful-fs@~1.2.0',
8602 verbose parsed url   href: 'graceful-fs@~1.2.0' }
8603 verbose cache add name="graceful-fs" spec="~1.2.0" args=["graceful-fs","~1.2.0"]
8604 verbose parsed url { protocol: null,
8604 verbose parsed url   slashes: null,
8604 verbose parsed url   auth: null,
8604 verbose parsed url   host: null,
8604 verbose parsed url   port: null,
8604 verbose parsed url   hostname: null,
8604 verbose parsed url   hash: null,
8604 verbose parsed url   search: null,
8604 verbose parsed url   query: null,
8604 verbose parsed url   pathname: '~1.2.0',
8604 verbose parsed url   path: '~1.2.0',
8604 verbose parsed url   href: '~1.2.0' }
8605 verbose addNamed [ 'graceful-fs', '~1.2.0' ]
8606 verbose addNamed [ null, '>=1.2.0-0 <1.3.0-0' ]
8607 silly lockFile 9c0bb906-graceful-fs-1-2-0 graceful-fs@~1.2.0
8608 verbose lock graceful-fs@~1.2.0 C:\Users\Gaston\AppData\Roaming\npm-cache\9c0bb906-graceful-fs-1-2-0.lock
8609 verbose cache add [ 'inherits@1', null ]
8610 verbose cache add name=undefined spec="inherits@1" args=["inherits@1",null]
8611 verbose parsed url { protocol: null,
8611 verbose parsed url   slashes: null,
8611 verbose parsed url   auth: null,
8611 verbose parsed url   host: null,
8611 verbose parsed url   port: null,
8611 verbose parsed url   hostname: null,
8611 verbose parsed url   hash: null,
8611 verbose parsed url   search: null,
8611 verbose parsed url   query: null,
8611 verbose parsed url   pathname: 'inherits@1',
8611 verbose parsed url   path: 'inherits@1',
8611 verbose parsed url   href: 'inherits@1' }
8612 verbose cache add name="inherits" spec="1" args=["inherits","1"]
8613 verbose parsed url { protocol: null,
8613 verbose parsed url   slashes: null,
8613 verbose parsed url   auth: null,
8613 verbose parsed url   host: null,
8613 verbose parsed url   port: null,
8613 verbose parsed url   hostname: null,
8613 verbose parsed url   hash: null,
8613 verbose parsed url   search: null,
8613 verbose parsed url   query: null,
8613 verbose parsed url   pathname: '1',
8613 verbose parsed url   path: '1',
8613 verbose parsed url   href: '1' }
8614 verbose addNamed [ 'inherits', '1' ]
8615 verbose addNamed [ null, '>=1.0.0-0 <2.0.0-0' ]
8616 silly lockFile 4bca46d0-inherits-1 inherits@1
8617 verbose lock inherits@1 C:\Users\Gaston\AppData\Roaming\npm-cache\4bca46d0-inherits-1.lock
8618 silly lockFile 65e00cd9-js-org-tiny-lr-tiny-lr-0-0-4-tgz https://registry.npmjs.org/tiny-lr/-/tiny-lr-0.0.4.tgz
8619 verbose lock https://registry.npmjs.org/tiny-lr/-/tiny-lr-0.0.4.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\65e00cd9-js-org-tiny-lr-tiny-lr-0-0-4-tgz.lock
8620 silly addNameRange { name: 'graceful-fs',
8620 silly addNameRange   range: '>=1.2.0-0 <1.3.0-0',
8620 silly addNameRange   hasData: false }
8621 silly addNameRange { name: 'inherits', range: '>=1.0.0-0 <2.0.0-0', hasData: false }
8622 verbose addRemoteTarball [ 'https://registry.npmjs.org/tiny-lr/-/tiny-lr-0.0.4.tgz',
8622 verbose addRemoteTarball   '80618547f63f697d05cb40c4c2c4b083521aefb6' ]
8623 info retry fetch attempt 1 at 16:39:48
8624 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777988426-0.7334345413837582\tmp.tgz
8625 verbose registry.get graceful-fs not expired, no request
8626 silly addNameRange number 2 { name: 'graceful-fs',
8626 silly addNameRange   range: '>=1.2.0-0 <1.3.0-0',
8626 silly addNameRange   hasData: true }
8627 silly addNameRange versions [ 'graceful-fs',
8627 silly addNameRange   [ '1.0.0',
8627 silly addNameRange     '1.0.1',
8627 silly addNameRange     '1.0.2',
8627 silly addNameRange     '1.1.0',
8627 silly addNameRange     '1.1.1',
8627 silly addNameRange     '1.1.2',
8627 silly addNameRange     '1.1.3',
8627 silly addNameRange     '1.1.4',
8627 silly addNameRange     '1.1.5',
8627 silly addNameRange     '1.1.6',
8627 silly addNameRange     '1.1.7',
8627 silly addNameRange     '1.1.8',
8627 silly addNameRange     '1.1.9',
8627 silly addNameRange     '1.1.10',
8627 silly addNameRange     '1.1.11',
8627 silly addNameRange     '1.1.12',
8627 silly addNameRange     '1.1.13',
8627 silly addNameRange     '1.1.14',
8627 silly addNameRange     '1.2.0',
8627 silly addNameRange     '1.2.1',
8627 silly addNameRange     '1.2.2',
8627 silly addNameRange     '1.2.3',
8627 silly addNameRange     '2.0.0',
8627 silly addNameRange     '2.0.1' ] ]
8628 verbose addNamed [ 'graceful-fs', '1.2.3' ]
8629 verbose addNamed [ '1.2.3', '1.2.3' ]
8630 silly lockFile 6c7102cf-graceful-fs-1-2-3 graceful-fs@1.2.3
8631 verbose lock graceful-fs@1.2.3 C:\Users\Gaston\AppData\Roaming\npm-cache\6c7102cf-graceful-fs-1-2-3.lock
8632 verbose registry.get inherits not expired, no request
8633 silly addNameRange number 2 { name: 'inherits', range: '>=1.0.0-0 <2.0.0-0', hasData: true }
8634 silly addNameRange versions [ 'inherits', [ '1.0.0', '2.0.0', '2.0.1' ] ]
8635 verbose addNamed [ 'inherits', '1.0.0' ]
8636 verbose addNamed [ '1.0.0', '1.0.0' ]
8637 silly lockFile 776fbe77-inherits-1-0-0 inherits@1.0.0
8638 verbose lock inherits@1.0.0 C:\Users\Gaston\AppData\Roaming\npm-cache\776fbe77-inherits-1-0-0.lock
8639 silly gunzTarPerm extractEntry test/fixture/js/misc.js
8640 silly gunzTarPerm extractEntry test/fixture/js/no-filename.js
8641 http GET https://registry.npmjs.org/tiny-lr/-/tiny-lr-0.0.4.tgz
8642 silly lockFile 6c7102cf-graceful-fs-1-2-3 graceful-fs@1.2.3
8643 silly lockFile 6c7102cf-graceful-fs-1-2-3 graceful-fs@1.2.3
8644 silly lockFile 776fbe77-inherits-1-0-0 inherits@1.0.0
8645 silly lockFile 776fbe77-inherits-1-0-0 inherits@1.0.0
8646 silly lockFile 9c0bb906-graceful-fs-1-2-0 graceful-fs@~1.2.0
8647 silly lockFile 9c0bb906-graceful-fs-1-2-0 graceful-fs@~1.2.0
8648 silly lockFile 4bca46d0-inherits-1 inherits@1
8649 silly lockFile 4bca46d0-inherits-1 inherits@1
8650 silly resolved [ { author:
8650 silly resolved      { name: 'Isaac Z. Schlueter',
8650 silly resolved        email: 'i@izs.me',
8650 silly resolved        url: 'http://blog.izs.me' },
8650 silly resolved     name: 'graceful-fs',
8650 silly resolved     description: 'A drop-in replacement for fs, making various improvements.',
8650 silly resolved     version: '1.2.3',
8650 silly resolved     repository:
8650 silly resolved      { type: 'git',
8650 silly resolved        url: 'git://github.com/isaacs/node-graceful-fs.git' },
8650 silly resolved     main: 'graceful-fs.js',
8650 silly resolved     engines: { node: '>=0.4.0' },
8650 silly resolved     directories: { test: 'test' },
8650 silly resolved     scripts: { test: 'tap test/*.js' },
8650 silly resolved     keywords:
8650 silly resolved      [ 'fs',
8650 silly resolved        'module',
8650 silly resolved        'reading',
8650 silly resolved        'retry',
8650 silly resolved        'retries',
8650 silly resolved        'queue',
8650 silly resolved        'error',
8650 silly resolved        'errors',
8650 silly resolved        'handling',
8650 silly resolved        'EMFILE',
8650 silly resolved        'EAGAIN',
8650 silly resolved        'EINVAL',
8650 silly resolved        'EPERM',
8650 silly resolved        'EACCESS' ],
8650 silly resolved     license: 'BSD',
8650 silly resolved     readme: '# graceful-fs\n\ngraceful-fs functions as a drop-in replacement for the fs module,\nmaking various improvements.\n\nThe improvements are meant to normalize behavior across different\nplatforms and environments, and to make filesystem access more\nresilient to errors.\n\n## Improvements over fs module\n\ngraceful-fs:\n\n* keeps track of how many file descriptors are open, and by default\n  limits this to 1024. Any further requests to open a file are put in a\n  queue until new slots become available. If 1024 turns out to be too\n  much, it decreases the limit further.\n* fixes `lchmod` for Node versions prior to 0.6.2.\n* implements `fs.lutimes` if possible. Otherwise it becomes a noop.\n* ignores `EINVAL` and `EPERM` errors in `chown`, `fchown` or\n  `lchown` if the user isn\'t root.\n* makes `lchmod` and `lchown` become noops, if not available.\n* retries reading a file if `read` results in EAGAIN error.\n\nOn Windows, it retries renaming a file for up to one second if `EACCESS`\nor `EPERM` error occurs, likely because antivirus software has locked\nthe directory.\n\n## Configuration\n\nThe maximum number of open file descriptors that graceful-fs manages may\nbe adjusted by setting `fs.MAX_OPEN` to a different number. The default\nis 1024.\n',
8650 silly resolved     readmeFilename: 'README.md',
8650 silly resolved     bugs: { url: 'https://github.com/isaacs/node-graceful-fs/issues' },
8650 silly resolved     homepage: 'https://github.com/isaacs/node-graceful-fs',
8650 silly resolved     _id: 'graceful-fs@1.2.3',
8650 silly resolved     _from: 'graceful-fs@~1.2.0' },
8650 silly resolved   { name: 'inherits',
8650 silly resolved     description: 'A tiny simple way to do classic inheritance in js',
8650 silly resolved     version: '1.0.0',
8650 silly resolved     keywords: [ 'inheritance', 'class', 'klass', 'oop', 'object-oriented' ],
8650 silly resolved     main: './inherits.js',
8650 silly resolved     repository: { type: 'git', url: 'https://github.com/isaacs/inherits' },
8650 silly resolved     author:
8650 silly resolved      { name: 'Isaac Z. Schlueter',
8650 silly resolved        email: 'i@izs.me',
8650 silly resolved        url: 'http://blog.izs.me/' },
8650 silly resolved     readme: 'A dead simple way to do inheritance in JS.\n\n    var inherits = require("inherits")\n\n    function Animal () {\n      this.alive = true\n    }\n    Animal.prototype.say = function (what) {\n      console.log(what)\n    }\n\n    inherits(Dog, Animal)\n    function Dog () {\n      Dog.super.apply(this)\n    }\n    Dog.prototype.sniff = function () {\n      this.say("sniff sniff")\n    }\n    Dog.prototype.bark = function () {\n      this.say("woof woof")\n    }\n\n    inherits(Chihuahua, Dog)\n    function Chihuahua () {\n      Chihuahua.super.apply(this)\n    }\n    Chihuahua.prototype.bark = function () {\n      this.say("yip yip")\n    }\n\n    // also works\n    function Cat () {\n      Cat.super.apply(this)\n    }\n    Cat.prototype.hiss = function () {\n      this.say("CHSKKSS!!")\n    }\n    inherits(Cat, Animal, {\n      meow: function () { this.say("miao miao") }\n    })\n    Cat.prototype.purr = function () {\n      this.say("purr purr")\n    }\n\n\n    var c = new Chihuahua\n    assert(c instanceof Chihuahua)\n    assert(c instanceof Dog)\n    assert(c instanceof Animal)\n\nThe actual function is laughably small.  10-lines small.\n',
8650 silly resolved     readmeFilename: 'README.md',
8650 silly resolved     bugs: { url: 'https://github.com/isaacs/inherits/issues' },
8650 silly resolved     homepage: 'https://github.com/isaacs/inherits',
8650 silly resolved     _id: 'inherits@1.0.0',
8650 silly resolved     _from: 'inherits@1',
8650 silly resolved     scripts: {} } ]
8651 info install graceful-fs@1.2.3 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\glob
8652 info install inherits@1.0.0 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\glob
8653 info installOne graceful-fs@1.2.3
8654 info installOne inherits@1.0.0
8655 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\glob\node_modules\graceful-fs unbuild
8656 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\glob\node_modules\inherits unbuild
8657 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\graceful-fs\1.2.3\package.tgz
8658 silly lockFile 0e8788d1-es-glob-node-modules-graceful-fs tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\glob\node_modules\graceful-fs
8659 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\glob\node_modules\graceful-fs C:\Users\Gaston\AppData\Roaming\npm-cache\0e8788d1-es-glob-node-modules-graceful-fs.lock
8660 silly lockFile 5425704d-he-graceful-fs-1-2-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\graceful-fs\1.2.3\package.tgz
8661 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\graceful-fs\1.2.3\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\5425704d-he-graceful-fs-1-2-3-package-tgz.lock
8662 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\inherits\1.0.0\package.tgz
8663 silly lockFile 259590f0-dules-glob-node-modules-inherits tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\glob\node_modules\inherits
8664 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\glob\node_modules\inherits C:\Users\Gaston\AppData\Roaming\npm-cache\259590f0-dules-glob-node-modules-inherits.lock
8665 silly lockFile ce1a2c46-cache-inherits-1-0-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\inherits\1.0.0\package.tgz
8666 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\inherits\1.0.0\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\ce1a2c46-cache-inherits-1-0-0-package-tgz.lock
8667 silly gunzTarPerm extractEntry test/fixture/js/preamble.js
8668 silly gunzTarPerm extractEntry test/fixture/js/special-chars-in-filename.js
8669 silly gunzTarPerm modes [ '755', '644' ]
8670 silly gunzTarPerm modes [ '755', '644' ]
8671 silly gunzTarPerm extractEntry package.json
8672 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
8673 silly gunzTarPerm extractEntry package.json
8674 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
8675 silly gunzTarPerm extractEntry .npmignore
8676 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
8677 silly gunzTarPerm extractEntry README.md
8678 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
8679 silly gunzTarPerm extractEntry README.md
8680 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
8681 silly gunzTarPerm extractEntry inherits.js
8682 silly gunzTarPerm modified mode [ 'inherits.js', 438, 420 ]
8683 silly gunzTarPerm extractEntry test/fixture/js/workarounds.js
8684 silly gunzTarPerm extractEntry test/integration/test-fixtures.js
8685 http 200 https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.1.tgz
8686 silly gunzTarPerm extractEntry LICENSE
8687 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
8688 silly gunzTarPerm extractEntry graceful-fs.js
8689 silly gunzTarPerm modified mode [ 'graceful-fs.js', 438, 420 ]
8690 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978176-0.674945306731388\tmp.tgz
8691 silly lockFile 32e8d966-978176-0-674945306731388-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978176-0.674945306731388\package
8692 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978176-0.674945306731388\package C:\Users\Gaston\AppData\Roaming\npm-cache\32e8d966-978176-0-674945306731388-package.lock
8693 silly lockFile 77a4621b-978176-0-674945306731388-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978176-0.674945306731388\tmp.tgz
8694 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978176-0.674945306731388\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\77a4621b-978176-0-674945306731388-tmp-tgz.lock
8695 silly gunzTarPerm extractEntry test/open.js
8696 silly gunzTarPerm modified mode [ 'test/open.js', 438, 420 ]
8697 silly gunzTarPerm extractEntry test/integration/test-json.js
8698 silly gunzTarPerm extractEntry test/integration/test-octet-stream.js
8699 silly gunzTarPerm modes [ '755', '644' ]
8700 silly gunzTarPerm extractEntry package.json
8701 silly gunzTarPerm extractEntry test/legacy/common.js
8702 silly gunzTarPerm extractEntry test/legacy/integration/test-multipart-parser.js
8703 silly gunzTarPerm extractEntry .npmignore
8704 silly gunzTarPerm extractEntry index.js
8705 silly gunzTarPerm extractEntry test/ulimit.js
8706 silly gunzTarPerm modified mode [ 'test/ulimit.js', 438, 420 ]
8707 silly gunzTarPerm extractEntry History.md
8708 silly gunzTarPerm extractEntry Makefile
8709 silly lockFile 259590f0-dules-glob-node-modules-inherits tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\glob\node_modules\inherits
8710 silly lockFile 259590f0-dules-glob-node-modules-inherits tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\glob\node_modules\inherits
8711 silly lockFile ce1a2c46-cache-inherits-1-0-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\inherits\1.0.0\package.tgz
8712 silly lockFile ce1a2c46-cache-inherits-1-0-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\inherits\1.0.0\package.tgz
8713 silly gunzTarPerm extractEntry test/legacy/simple/test-file.js
8714 silly gunzTarPerm extractEntry test/legacy/simple/test-incoming-form.js
8715 silly gunzTarPerm extractEntry Readme.md
8716 info preinstall inherits@1.0.0
8717 verbose readDependencies using package.json deps
8718 verbose readDependencies using package.json deps
8719 silly resolved []
8720 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\glob\node_modules\inherits
8721 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\glob\node_modules\inherits
8722 verbose linkStuff [ false,
8722 verbose linkStuff   false,
8722 verbose linkStuff   false,
8722 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\load-grunt-tasks\\node_modules\\globule\\node_modules\\glob\\node_modules' ]
8723 info linkStuff inherits@1.0.0
8724 verbose linkBins inherits@1.0.0
8725 verbose linkMans inherits@1.0.0
8726 verbose rebuildBundles inherits@1.0.0
8727 info install inherits@1.0.0
8728 silly gunzTarPerm extractEntry test/legacy/simple/test-multipart-parser.js
8729 silly gunzTarPerm extractEntry test/legacy/simple/test-querystring-parser.js
8730 info postinstall inherits@1.0.0
8731 silly gunzTarPerm extractEntry test/legacy/system/test-multi-video-upload.js
8732 silly gunzTarPerm extractEntry test/standalone/test-connection-aborted.js
8733 silly lockFile 32f8cbfe-ules-glob-node-modules-minimatch tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob\node_modules\minimatch
8734 silly lockFile 32f8cbfe-ules-glob-node-modules-minimatch tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob\node_modules\minimatch
8735 silly gunzTarPerm extractEntry test/standalone/test-content-transfer-encoding.js
8736 silly gunzTarPerm extractEntry test/standalone/test-issue-46.js
8737 silly lockFile 327a09ae-che-minimatch-0-2-14-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\minimatch\0.2.14\package.tgz
8738 silly lockFile 327a09ae-che-minimatch-0-2-14-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\minimatch\0.2.14\package.tgz
8739 silly gunzTarPerm extractEntry test/tools/base64.html
8740 silly gunzTarPerm extractEntry test/unit/test-file.js
8741 info preinstall minimatch@0.2.14
8742 verbose readDependencies using package.json deps
8743 silly gunzTarPerm extractEntry test/unit/test-incoming-form.js
8744 silly gunzTarPerm extractEntry example/json.js
8745 verbose readDependencies using package.json deps
8746 silly lockFile 32e8d966-978176-0-674945306731388-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978176-0.674945306731388\package
8747 silly lockFile 32e8d966-978176-0-674945306731388-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978176-0.674945306731388\package
8748 silly lockFile 77a4621b-978176-0-674945306731388-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978176-0.674945306731388\tmp.tgz
8749 silly lockFile 77a4621b-978176-0-674945306731388-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978176-0.674945306731388\tmp.tgz
8750 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\cookie-signature\\1.0.1\\package.tgz',
8750 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388777978176-0.674945306731388\\package' ]
8751 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\cookie-signature\1.0.1\package.tgz
8752 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978176-0.674945306731388\package
8753 silly lockFile 32e8d966-978176-0-674945306731388-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978176-0.674945306731388\package
8754 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978176-0.674945306731388\package C:\Users\Gaston\AppData\Roaming\npm-cache\32e8d966-978176-0-674945306731388-package.lock
8755 silly lockFile 81992565-okie-signature-1-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\cookie-signature\1.0.1\package.tgz
8756 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\cookie-signature\1.0.1\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\81992565-okie-signature-1-0-1-package-tgz.lock
8757 verbose cache add [ 'lru-cache@2', null ]
8758 verbose cache add name=undefined spec="lru-cache@2" args=["lru-cache@2",null]
8759 verbose parsed url { protocol: null,
8759 verbose parsed url   slashes: null,
8759 verbose parsed url   auth: null,
8759 verbose parsed url   host: null,
8759 verbose parsed url   port: null,
8759 verbose parsed url   hostname: null,
8759 verbose parsed url   hash: null,
8759 verbose parsed url   search: null,
8759 verbose parsed url   query: null,
8759 verbose parsed url   pathname: 'lru-cache@2',
8759 verbose parsed url   path: 'lru-cache@2',
8759 verbose parsed url   href: 'lru-cache@2' }
8760 verbose cache add name="lru-cache" spec="2" args=["lru-cache","2"]
8761 verbose parsed url { protocol: null,
8761 verbose parsed url   slashes: null,
8761 verbose parsed url   auth: null,
8761 verbose parsed url   host: null,
8761 verbose parsed url   port: null,
8761 verbose parsed url   hostname: null,
8761 verbose parsed url   hash: null,
8761 verbose parsed url   search: null,
8761 verbose parsed url   query: null,
8761 verbose parsed url   pathname: '2',
8761 verbose parsed url   path: '2',
8761 verbose parsed url   href: '2' }
8762 verbose addNamed [ 'lru-cache', '2' ]
8763 verbose cache add [ 'sigmund@~1.0.0', null ]
8764 verbose cache add name=undefined spec="sigmund@~1.0.0" args=["sigmund@~1.0.0",null]
8765 verbose parsed url { protocol: null,
8765 verbose parsed url   slashes: null,
8765 verbose parsed url   auth: null,
8765 verbose parsed url   host: null,
8765 verbose parsed url   port: null,
8765 verbose parsed url   hostname: null,
8765 verbose parsed url   hash: null,
8765 verbose parsed url   search: null,
8765 verbose parsed url   query: null,
8765 verbose parsed url   pathname: 'sigmund@~1.0.0',
8765 verbose parsed url   path: 'sigmund@~1.0.0',
8765 verbose parsed url   href: 'sigmund@~1.0.0' }
8766 verbose cache add name="sigmund" spec="~1.0.0" args=["sigmund","~1.0.0"]
8767 verbose parsed url { protocol: null,
8767 verbose parsed url   slashes: null,
8767 verbose parsed url   auth: null,
8767 verbose parsed url   host: null,
8767 verbose parsed url   port: null,
8767 verbose parsed url   hostname: null,
8767 verbose parsed url   hash: null,
8767 verbose parsed url   search: null,
8767 verbose parsed url   query: null,
8767 verbose parsed url   pathname: '~1.0.0',
8767 verbose parsed url   path: '~1.0.0',
8767 verbose parsed url   href: '~1.0.0' }
8768 verbose addNamed [ 'sigmund', '~1.0.0' ]
8769 silly gunzTarPerm extractEntry example/post.js
8770 silly gunzTarPerm extractEntry example/upload.js
8771 silly lockFile 0e8788d1-es-glob-node-modules-graceful-fs tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\glob\node_modules\graceful-fs
8772 silly lockFile 0e8788d1-es-glob-node-modules-graceful-fs tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\glob\node_modules\graceful-fs
8773 silly lockFile 5425704d-he-graceful-fs-1-2-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\graceful-fs\1.2.3\package.tgz
8774 silly lockFile 5425704d-he-graceful-fs-1-2-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\graceful-fs\1.2.3\package.tgz
8775 info preinstall graceful-fs@1.2.3
8776 verbose readDependencies using package.json deps
8777 verbose readDependencies using package.json deps
8778 silly resolved []
8779 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\glob\node_modules\graceful-fs
8780 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\glob\node_modules\graceful-fs
8781 verbose linkStuff [ false,
8781 verbose linkStuff   false,
8781 verbose linkStuff   false,
8781 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\load-grunt-tasks\\node_modules\\globule\\node_modules\\glob\\node_modules' ]
8782 info linkStuff graceful-fs@1.2.3
8783 verbose linkBins graceful-fs@1.2.3
8784 verbose linkMans graceful-fs@1.2.3
8785 verbose rebuildBundles graceful-fs@1.2.3
8786 silly lockFile 658a11fa-ules-globule-node-modules-lodash tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\lodash
8787 silly lockFile 658a11fa-ules-globule-node-modules-lodash tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\lodash
8788 info install graceful-fs@1.2.3
8789 silly lockFile f5ae224a-m-cache-lodash-1-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\lodash\1.0.1\package.tgz
8790 silly lockFile f5ae224a-m-cache-lodash-1-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\lodash\1.0.1\package.tgz
8791 info postinstall graceful-fs@1.2.3
8792 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\glob
8793 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\glob
8794 verbose linkStuff [ false,
8794 verbose linkStuff   false,
8794 verbose linkStuff   false,
8794 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\load-grunt-tasks\\node_modules\\globule\\node_modules' ]
8795 info linkStuff glob@3.1.21
8796 verbose linkBins glob@3.1.21
8797 verbose linkMans glob@3.1.21
8798 verbose rebuildBundles glob@3.1.21
8799 verbose rebuildBundles [ 'graceful-fs', 'inherits' ]
8800 info install glob@3.1.21
8801 info postinstall glob@3.1.21
8802 info preinstall lodash@1.0.1
8803 verbose readDependencies using package.json deps
8804 verbose readDependencies using package.json deps
8805 silly resolved []
8806 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\lodash
8807 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\lodash
8808 verbose linkStuff [ false,
8808 verbose linkStuff   false,
8808 verbose linkStuff   false,
8808 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\load-grunt-tasks\\node_modules\\globule\\node_modules' ]
8809 info linkStuff lodash@1.0.1
8810 verbose linkBins lodash@1.0.1
8811 verbose linkMans lodash@1.0.1
8812 verbose rebuildBundles lodash@1.0.1
8813 silly lockFile 32e8d966-978176-0-674945306731388-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978176-0.674945306731388\package
8814 silly lockFile 32e8d966-978176-0-674945306731388-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777978176-0.674945306731388\package
8815 info install lodash@1.0.1
8816 silly lockFile 81992565-okie-signature-1-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\cookie-signature\1.0.1\package.tgz
8817 silly lockFile 81992565-okie-signature-1-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\cookie-signature\1.0.1\package.tgz
8818 info postinstall lodash@1.0.1
8819 silly lockFile 6634c612-e-cookie-signature-1-0-1-package C:\Users\Gaston\AppData\Roaming\npm-cache\cookie-signature\1.0.1\package
8820 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\cookie-signature\1.0.1\package C:\Users\Gaston\AppData\Roaming\npm-cache\6634c612-e-cookie-signature-1-0-1-package.lock
8821 silly lockFile 6634c612-e-cookie-signature-1-0-1-package C:\Users\Gaston\AppData\Roaming\npm-cache\cookie-signature\1.0.1\package
8822 silly lockFile 6634c612-e-cookie-signature-1-0-1-package C:\Users\Gaston\AppData\Roaming\npm-cache\cookie-signature\1.0.1\package
8823 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\cookie-signature\1.0.1\package.tgz
8824 silly lockFile 26b8bd4b-e-cookie-signature-1-0-1-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\cookie-signature\1.0.1\package
8825 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\cookie-signature\1.0.1\package C:\Users\Gaston\AppData\Roaming\npm-cache\26b8bd4b-e-cookie-signature-1-0-1-package.lock
8826 silly lockFile 81992565-okie-signature-1-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\cookie-signature\1.0.1\package.tgz
8827 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\cookie-signature\1.0.1\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\81992565-okie-signature-1-0-1-package-tgz.lock
8828 silly gunzTarPerm modes [ '755', '644' ]
8829 silly gunzTarPerm extractEntry package.json
8830 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
8831 silly gunzTarPerm extractEntry .npmignore
8832 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
8833 silly gunzTarPerm extractEntry index.js
8834 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
8835 silly gunzTarPerm extractEntry History.md
8836 silly gunzTarPerm modified mode [ 'History.md', 438, 420 ]
8837 silly gunzTarPerm extractEntry Makefile
8838 silly gunzTarPerm modified mode [ 'Makefile', 438, 420 ]
8839 silly gunzTarPerm extractEntry Readme.md
8840 silly gunzTarPerm modified mode [ 'Readme.md', 438, 420 ]
8841 silly lockFile 26b8bd4b-e-cookie-signature-1-0-1-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\cookie-signature\1.0.1\package
8842 silly lockFile 26b8bd4b-e-cookie-signature-1-0-1-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\cookie-signature\1.0.1\package
8843 silly lockFile 81992565-okie-signature-1-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\cookie-signature\1.0.1\package.tgz
8844 silly lockFile 81992565-okie-signature-1-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\cookie-signature\1.0.1\package.tgz
8845 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\cookie-signature\1.0.1\package.tgz 644
8846 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\cookie-signature\1.0.1\package.tgz
8847 silly lockFile 8b0b446f-ature-cookie-signature-1-0-1-tgz https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.1.tgz
8848 silly lockFile 8b0b446f-ature-cookie-signature-1-0-1-tgz https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.1.tgz
8849 silly lockFile d4a1eba1-cookie-signature-1-0-1 cookie-signature@1.0.1
8850 silly lockFile d4a1eba1-cookie-signature-1-0-1 cookie-signature@1.0.1
8851 silly lockFile 8561df0d-7953-0-29677222832106054-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777977953-0.29677222832106054\package
8852 silly lockFile 8561df0d-7953-0-29677222832106054-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777977953-0.29677222832106054\package
8853 silly lockFile d20c529b-7953-0-29677222832106054-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777977953-0.29677222832106054\tmp.tgz
8854 silly lockFile d20c529b-7953-0-29677222832106054-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777977953-0.29677222832106054\tmp.tgz
8855 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\formidable\\1.0.14\\package.tgz',
8855 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388777977953-0.29677222832106054\\package' ]
8856 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\formidable\1.0.14\package.tgz
8857 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777977953-0.29677222832106054\package
8858 silly lockFile 8561df0d-7953-0-29677222832106054-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777977953-0.29677222832106054\package
8859 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777977953-0.29677222832106054\package C:\Users\Gaston\AppData\Roaming\npm-cache\8561df0d-7953-0-29677222832106054-package.lock
8860 silly lockFile 7227e295-he-formidable-1-0-14-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\formidable\1.0.14\package.tgz
8861 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\formidable\1.0.14\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\7227e295-he-formidable-1-0-14-package-tgz.lock
8862 silly lockFile 8561df0d-7953-0-29677222832106054-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777977953-0.29677222832106054\package
8863 silly lockFile 8561df0d-7953-0-29677222832106054-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777977953-0.29677222832106054\package
8864 silly lockFile 7227e295-he-formidable-1-0-14-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\formidable\1.0.14\package.tgz
8865 silly lockFile 7227e295-he-formidable-1-0-14-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\formidable\1.0.14\package.tgz
8866 silly lockFile 08152191--cache-formidable-1-0-14-package C:\Users\Gaston\AppData\Roaming\npm-cache\formidable\1.0.14\package
8867 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\formidable\1.0.14\package C:\Users\Gaston\AppData\Roaming\npm-cache\08152191--cache-formidable-1-0-14-package.lock
8868 silly lockFile 08152191--cache-formidable-1-0-14-package C:\Users\Gaston\AppData\Roaming\npm-cache\formidable\1.0.14\package
8869 silly lockFile 08152191--cache-formidable-1-0-14-package C:\Users\Gaston\AppData\Roaming\npm-cache\formidable\1.0.14\package
8870 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\formidable\1.0.14\package.tgz
8871 silly lockFile 1c184025--cache-formidable-1-0-14-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\formidable\1.0.14\package
8872 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\formidable\1.0.14\package C:\Users\Gaston\AppData\Roaming\npm-cache\1c184025--cache-formidable-1-0-14-package.lock
8873 silly lockFile 7227e295-he-formidable-1-0-14-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\formidable\1.0.14\package.tgz
8874 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\formidable\1.0.14\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\7227e295-he-formidable-1-0-14-package-tgz.lock
8875 silly gunzTarPerm modes [ '755', '644' ]
8876 silly gunzTarPerm extractEntry package.json
8877 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
8878 silly gunzTarPerm extractEntry .npmignore
8879 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
8880 silly gunzTarPerm extractEntry LICENSE
8881 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
8882 silly gunzTarPerm extractEntry index.js
8883 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
8884 silly gunzTarPerm extractEntry tool/record.js
8885 silly gunzTarPerm modified mode [ 'tool/record.js', 438, 420 ]
8886 silly gunzTarPerm extractEntry .travis.yml
8887 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]
8888 silly gunzTarPerm extractEntry benchmark/bench-multipart-parser.js
8889 silly gunzTarPerm modified mode [ 'benchmark/bench-multipart-parser.js', 438, 420 ]
8890 silly gunzTarPerm extractEntry example/json.js
8891 silly gunzTarPerm modified mode [ 'example/json.js', 438, 420 ]
8892 silly gunzTarPerm extractEntry example/post.js
8893 silly gunzTarPerm modified mode [ 'example/post.js', 438, 420 ]
8894 silly gunzTarPerm extractEntry example/upload.js
8895 silly gunzTarPerm modified mode [ 'example/upload.js', 438, 420 ]
8896 silly gunzTarPerm extractEntry Readme.md
8897 silly gunzTarPerm modified mode [ 'Readme.md', 438, 420 ]
8898 silly gunzTarPerm extractEntry test/common.js
8899 silly gunzTarPerm modified mode [ 'test/common.js', 438, 420 ]
8900 silly gunzTarPerm extractEntry test/run.js
8901 silly gunzTarPerm modified mode [ 'test/run.js', 438, 420 ]
8902 silly gunzTarPerm extractEntry test/fixture/multipart.js
8903 silly gunzTarPerm modified mode [ 'test/fixture/multipart.js', 438, 420 ]
8904 silly gunzTarPerm extractEntry test/fixture/file/beta-sticker-1.png
8905 silly gunzTarPerm modified mode [ 'test/fixture/file/beta-sticker-1.png', 438, 420 ]
8906 silly gunzTarPerm extractEntry test/fixture/file/binaryfile.tar.gz
8907 silly gunzTarPerm modified mode [ 'test/fixture/file/binaryfile.tar.gz', 438, 420 ]
8908 silly gunzTarPerm extractEntry test/fixture/file/blank.gif
8909 silly gunzTarPerm modified mode [ 'test/fixture/file/blank.gif', 438, 420 ]
8910 silly gunzTarPerm extractEntry test/fixture/file/funkyfilename.txt
8911 silly gunzTarPerm modified mode [ 'test/fixture/file/funkyfilename.txt', 438, 420 ]
8912 silly gunzTarPerm extractEntry test/fixture/file/menu_separator.png
8913 silly gunzTarPerm modified mode [ 'test/fixture/file/menu_separator.png', 438, 420 ]
8914 silly gunzTarPerm extractEntry test/fixture/file/plain.txt
8915 silly gunzTarPerm modified mode [ 'test/fixture/file/plain.txt', 438, 420 ]
8916 silly gunzTarPerm extractEntry test/fixture/http/special-chars-in-filename/info.md
8917 silly gunzTarPerm modified mode [ 'test/fixture/http/special-chars-in-filename/info.md',
8917 silly gunzTarPerm   438,
8917 silly gunzTarPerm   420 ]
8918 silly gunzTarPerm extractEntry test/fixture/js/encoding.js
8919 silly gunzTarPerm modified mode [ 'test/fixture/js/encoding.js', 438, 420 ]
8920 silly gunzTarPerm extractEntry test/fixture/js/misc.js
8921 silly gunzTarPerm modified mode [ 'test/fixture/js/misc.js', 438, 420 ]
8922 silly gunzTarPerm extractEntry test/fixture/js/no-filename.js
8923 silly gunzTarPerm modified mode [ 'test/fixture/js/no-filename.js', 438, 420 ]
8924 silly gunzTarPerm extractEntry test/fixture/js/preamble.js
8925 silly gunzTarPerm modified mode [ 'test/fixture/js/preamble.js', 438, 420 ]
8926 silly gunzTarPerm extractEntry test/fixture/js/special-chars-in-filename.js
8927 silly gunzTarPerm modified mode [ 'test/fixture/js/special-chars-in-filename.js', 438, 420 ]
8928 silly gunzTarPerm extractEntry test/fixture/js/workarounds.js
8929 silly gunzTarPerm modified mode [ 'test/fixture/js/workarounds.js', 438, 420 ]
8930 silly gunzTarPerm extractEntry test/integration/test-fixtures.js
8931 silly gunzTarPerm modified mode [ 'test/integration/test-fixtures.js', 438, 420 ]
8932 silly gunzTarPerm extractEntry test/integration/test-json.js
8933 silly gunzTarPerm modified mode [ 'test/integration/test-json.js', 438, 420 ]
8934 silly gunzTarPerm extractEntry test/integration/test-octet-stream.js
8935 silly gunzTarPerm modified mode [ 'test/integration/test-octet-stream.js', 438, 420 ]
8936 silly gunzTarPerm extractEntry test/legacy/common.js
8937 silly gunzTarPerm modified mode [ 'test/legacy/common.js', 438, 420 ]
8938 silly gunzTarPerm extractEntry test/legacy/integration/test-multipart-parser.js
8939 silly gunzTarPerm modified mode [ 'test/legacy/integration/test-multipart-parser.js', 438, 420 ]
8940 silly gunzTarPerm extractEntry test/legacy/simple/test-file.js
8941 silly gunzTarPerm modified mode [ 'test/legacy/simple/test-file.js', 438, 420 ]
8942 silly gunzTarPerm extractEntry test/legacy/simple/test-incoming-form.js
8943 silly gunzTarPerm modified mode [ 'test/legacy/simple/test-incoming-form.js', 438, 420 ]
8944 silly gunzTarPerm extractEntry test/legacy/simple/test-multipart-parser.js
8945 silly gunzTarPerm modified mode [ 'test/legacy/simple/test-multipart-parser.js', 438, 420 ]
8946 silly gunzTarPerm extractEntry test/legacy/simple/test-querystring-parser.js
8947 silly gunzTarPerm modified mode [ 'test/legacy/simple/test-querystring-parser.js', 438, 420 ]
8948 silly gunzTarPerm extractEntry test/legacy/system/test-multi-video-upload.js
8949 silly gunzTarPerm modified mode [ 'test/legacy/system/test-multi-video-upload.js', 438, 420 ]
8950 silly gunzTarPerm extractEntry test/standalone/test-connection-aborted.js
8951 silly gunzTarPerm modified mode [ 'test/standalone/test-connection-aborted.js', 438, 420 ]
8952 silly gunzTarPerm extractEntry test/standalone/test-content-transfer-encoding.js
8953 silly gunzTarPerm modified mode [ 'test/standalone/test-content-transfer-encoding.js', 438, 420 ]
8954 silly gunzTarPerm extractEntry test/standalone/test-issue-46.js
8955 silly gunzTarPerm modified mode [ 'test/standalone/test-issue-46.js', 438, 420 ]
8956 silly gunzTarPerm extractEntry test/tools/base64.html
8957 silly gunzTarPerm modified mode [ 'test/tools/base64.html', 438, 420 ]
8958 silly gunzTarPerm extractEntry test/unit/test-file.js
8959 silly gunzTarPerm modified mode [ 'test/unit/test-file.js', 438, 420 ]
8960 silly gunzTarPerm extractEntry test/unit/test-incoming-form.js
8961 silly gunzTarPerm modified mode [ 'test/unit/test-incoming-form.js', 438, 420 ]
8962 silly gunzTarPerm extractEntry lib/file.js
8963 silly gunzTarPerm modified mode [ 'lib/file.js', 438, 420 ]
8964 silly gunzTarPerm extractEntry lib/incoming_form.js
8965 silly gunzTarPerm modified mode [ 'lib/incoming_form.js', 438, 420 ]
8966 silly gunzTarPerm extractEntry lib/index.js
8967 silly gunzTarPerm modified mode [ 'lib/index.js', 438, 420 ]
8968 silly gunzTarPerm extractEntry lib/json_parser.js
8969 silly gunzTarPerm modified mode [ 'lib/json_parser.js', 438, 420 ]
8970 silly gunzTarPerm extractEntry lib/multipart_parser.js
8971 silly gunzTarPerm modified mode [ 'lib/multipart_parser.js', 438, 420 ]
8972 silly gunzTarPerm extractEntry lib/octet_parser.js
8973 silly gunzTarPerm modified mode [ 'lib/octet_parser.js', 438, 420 ]
8974 silly gunzTarPerm extractEntry lib/querystring_parser.js
8975 silly gunzTarPerm modified mode [ 'lib/querystring_parser.js', 438, 420 ]
8976 silly lockFile 1c184025--cache-formidable-1-0-14-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\formidable\1.0.14\package
8977 silly lockFile 1c184025--cache-formidable-1-0-14-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\formidable\1.0.14\package
8978 silly lockFile 7227e295-he-formidable-1-0-14-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\formidable\1.0.14\package.tgz
8979 silly lockFile 7227e295-he-formidable-1-0-14-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\formidable\1.0.14\package.tgz
8980 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\formidable\1.0.14\package.tgz 644
8981 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\formidable\1.0.14\package.tgz
8982 silly lockFile d5dd65bf-formidable-formidable-1-0-14-tgz https://registry.npmjs.org/formidable/-/formidable-1.0.14.tgz
8983 silly lockFile d5dd65bf-formidable-formidable-1-0-14-tgz https://registry.npmjs.org/formidable/-/formidable-1.0.14.tgz
8984 silly lockFile 3f08b74a-formidable-1-0-14 formidable@1.0.14
8985 silly lockFile 3f08b74a-formidable-1-0-14 formidable@1.0.14
8986 silly resolved [ { author:
8986 silly resolved      { name: 'Brian J. Brennan',
8986 silly resolved        email: 'brianloveswords@gmail.com',
8986 silly resolved        url: 'http://bjb.io' },
8986 silly resolved     name: 'buffer-crc32',
8986 silly resolved     description: 'A pure javascript CRC32 algorithm that plays nice with binary data',
8986 silly resolved     version: '0.2.1',
8986 silly resolved     contributors: [ [Object] ],
8986 silly resolved     homepage: 'https://github.com/brianloveswords/buffer-crc32',
8986 silly resolved     repository:
8986 silly resolved      { type: 'git',
8986 silly resolved        url: 'git://github.com/brianloveswords/buffer-crc32.git' },
8986 silly resolved     main: 'index.js',
8986 silly resolved     scripts: { test: './node_modules/.bin/tap tests/*.test.js' },
8986 silly resolved     dependencies: {},
8986 silly resolved     devDependencies: { tap: '~0.2.5' },
8986 silly resolved     optionalDependencies: {},
8986 silly resolved     engines: { node: '*' },
8986 silly resolved     readme: '# buffer-crc32\n\n[![Build Status](https://secure.travis-ci.org/brianloveswords/buffer-crc32.png?branch=master)](http://travis-ci.org/brianloveswords/buffer-crc32)\n\ncrc32 that works with binary data and fancy character sets, outputs\nbuffer, signed or unsigned data and has tests.\n\nDerived from the sample CRC implementation in the PNG specification: http://www.w3.org/TR/PNG/#D-CRCAppendix\n\n# install\n```\nnpm install buffer-crc32\n```\n\n# example\n```js\nvar crc32 = require(\'buffer-crc32\');\n// works with buffers\nvar buf = Buffer([0x00, 0x73, 0x75, 0x70, 0x20, 0x62, 0x72, 0x6f, 0x00])\ncrc32(buf) // -> <Buffer 94 5a ab 4a>\n\n// has convenience methods for getting signed or unsigned ints\ncrc32.signed(buf) // -> -1805997238\ncrc32.unsigned(buf) // -> 2488970058\n\n// will cast to buffer if given a string, so you can\n// directly use foreign characters safely\ncrc32(\'自動販売機\') // -> <Buffer cb 03 1a c5>\n\n// and works in append mode too\nvar partialCrc = crc32(\'hey\');\nvar partialCrc = crc32(\' \', partialCrc);\nvar partialCrc = crc32(\'sup\', partialCrc);\nvar partialCrc = crc32(\' \', partialCrc);\nvar finalCrc = crc32(\'bros\', partialCrc); // -> <Buffer 47 fa 55 70>\n```\n\n# tests\nThis was tested against the output of zlib\'s crc32 method. You can run\nthe tests with`npm test` (requires tap)\n\n# see also\nhttps://github.com/alexgorbatchev/node-crc, `crc.buffer.crc32` also\nsupports buffer inputs and return unsigned ints (thanks @tjholowaychuk).\n\n# license\nMIT/X11\n',
8986 silly resolved     readmeFilename: 'README.md',
8986 silly resolved     bugs: { url: 'https://github.com/brianloveswords/buffer-crc32/issues' },
8986 silly resolved     _id: 'buffer-crc32@0.2.1',
8986 silly resolved     dist: { shasum: '6e0d1c7fa31c84bdfdf496962c938cf313fbc0fb' },
8986 silly resolved     _from: 'buffer-crc32@0.2.1',
8986 silly resolved     _resolved: 'https://registry.npmjs.org/buffer-crc32/-/buffer-crc32-0.2.1.tgz' },
8986 silly resolved   { name: 'debug',
8986 silly resolved     version: '0.7.4',
8986 silly resolved     repository: { type: 'git', url: 'git://github.com/visionmedia/debug.git' },
8986 silly resolved     description: 'small debugging utility',
8986 silly resolved     keywords: [ 'debug', 'log', 'debugger' ],
8986 silly resolved     author: { name: 'TJ Holowaychuk', email: 'tj@vision-media.ca' },
8986 silly resolved     dependencies: {},
8986 silly resolved     devDependencies: { mocha: '*' },
8986 silly resolved     main: 'lib/debug.js',
8986 silly resolved     browser: './debug.js',
8986 silly resolved     engines: { node: '*' },
8986 silly resolved     files: [ 'lib/debug.js', 'debug.js', 'index.js' ],
8986 silly resolved     component: { scripts: [Object] },
8986 silly resolved     readme: '# debug\n\n  tiny node.js debugging utility modelled after node core\'s debugging technique.\n\n## Installation\n\n```\n$ npm install debug\n```\n\n## Usage\n\n With `debug` you simply invoke the exported function to generate your debug function, passing it a name which will determine if a noop function is returned, or a decorated `console.error`, so all of the `console` format string goodies you\'re used to work fine. A unique color is selected per-function for visibility.\n \nExample _app.js_:\n\n```js\nvar debug = require(\'debug\')(\'http\')\n  , http = require(\'http\')\n  , name = \'My App\';\n\n// fake app\n\ndebug(\'booting %s\', name);\n\nhttp.createServer(function(req, res){\n  debug(req.method + \' \' + req.url);\n  res.end(\'hello\\n\');\n}).listen(3000, function(){\n  debug(\'listening\');\n});\n\n// fake worker of some kind\n\nrequire(\'./worker\');\n```\n\nExample _worker.js_:\n\n```js\nvar debug = require(\'debug\')(\'worker\');\n\nsetInterval(function(){\n  debug(\'doing some work\');\n}, 1000);\n```\n\n The __DEBUG__ environment variable is then used to enable these based on space or comma-delimited names. Here are some examples:\n\n  ![debug http and worker](http://f.cl.ly/items/18471z1H402O24072r1J/Screenshot.png)\n\n  ![debug worker](http://f.cl.ly/items/1X413v1a3M0d3C2c1E0i/Screenshot.png)\n\n## Millisecond diff\n\n  When actively developing an application it can be useful to see when the time spent between one `debug()` call and the next. Suppose for example you invoke `debug()` before requesting a resource, and after as well, the "+NNNms" will show you how much time was spent between calls.\n\n  ![](http://f.cl.ly/items/2i3h1d3t121M2Z1A3Q0N/Screenshot.png)\n\n  When stderr is not a TTY, `Date#toUTCString()` is used, making it more useful for logging the debug information as shown below:\n  _(NOTE: Debug now uses stderr instead of stdout, so the correct shell command for this example is actually `DEBUG=* node example/worker 2> out &`)_\n  \n  ![](http://f.cl.ly/items/112H3i0e0o0P0a2Q2r11/Screenshot.png)\n  \n## Conventions\n\n If you\'re using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use ":" to separate features. For example "bodyParser" from Connect would then be "connect:bodyParser". \n\n## Wildcards\n\n  The "*" character may be used as a wildcard. Suppose for example your library has debuggers named "connect:bodyParser", "connect:compress", "connect:session", instead of listing all three with `DEBUG=connect:bodyParser,connect.compress,connect:session`, you may simply do `DEBUG=connect:*`, or to run everything using this module simply use `DEBUG=*`.\n\n  You can also exclude specific debuggers by prefixing them with a "-" character.  For example, `DEBUG=* -connect:*` would include all debuggers except those starting with "connect:".\n\n## Browser support\n\n Debug works in the browser as well, currently persisted by `localStorage`. For example if you have `worker:a` and `worker:b` as shown below, and wish to debug both type `debug.enable(\'worker:*\')` in the console and refresh the page, this will remain until you disable with `debug.disable()`. \n\n```js\na = debug(\'worker:a\');\nb = debug(\'worker:b\');\n\nsetInterval(function(){\n  a(\'doing some work\');\n}, 1000);\n\nsetInterval(function(){\n  a(\'doing some work\');\n}, 1200);\n```\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2011 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n',
8986 silly resolved     readmeFilename: 'Readme.md',
8986 silly resolved     bugs: { url: 'https://github.com/visionmedia/debug/issues' },
8986 silly resolved     homepage: 'https://github.com/visionmedia/debug',
8986 silly resolved     _id: 'debug@0.7.4',
8986 silly resolved     dist: { shasum: '6dcec064d296d006c65b76b54e887dd138fcd4d0' },
8986 silly resolved     _from: 'debug@*',
8986 silly resolved     _resolved: 'https://registry.npmjs.org/debug/-/debug-0.7.4.tgz',
8986 silly resolved     scripts: {} },
8986 silly resolved   { name: 'qs',
8986 silly resolved     description: 'querystring parser',
8986 silly resolved     version: '0.6.5',
8986 silly resolved     keywords: [ 'query string', 'parser', 'component' ],
8986 silly resolved     repository:
8986 silly resolved      { type: 'git',
8986 silly resolved        url: 'git://github.com/visionmedia/node-querystring.git' },
8986 silly resolved     devDependencies: { mocha: '*', 'expect.js': '*' },
8986 silly resolved     scripts: { test: 'make test' },
8986 silly resolved     author:
8986 silly resolved      { name: 'TJ Holowaychuk',
8986 silly resolved        email: 'tj@vision-media.ca',
8986 silly resolved        url: 'http://tjholowaychuk.com' },
8986 silly resolved     main: 'index',
8986 silly resolved     engines: { node: '*' },
8986 silly resolved     readme: '# node-querystring\n\n  query string parser for node and the browser supporting nesting, as it was removed from `0.3.x`, so this library provides the previous and commonly desired behaviour (and twice as fast). Used by [express](http://expressjs.com), [connect](http://senchalabs.github.com/connect) and others.\n\n## Installation\n\n    $ npm install qs\n\n## Examples\n\n```js\nvar qs = require(\'qs\');\n\nqs.parse(\'user[name][first]=Tobi&user[email]=tobi@learnboost.com\');\n// => { user: { name: { first: \'Tobi\' }, email: \'tobi@learnboost.com\' } }\n\nqs.stringify({ user: { name: \'Tobi\', email: \'tobi@learnboost.com\' }})\n// => user[name]=Tobi&user[email]=tobi%40learnboost.com\n```\n\n## Testing\n\nInstall dev dependencies:\n\n    $ npm install -d\n\nand execute:\n\n    $ make test\n\nbrowser:\n\n    $ open test/browser/index.html\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2010 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.',
8986 silly resolved     readmeFilename: 'Readme.md',
8986 silly resolved     bugs: { url: 'https://github.com/visionmedia/node-querystring/issues' },
8986 silly resolved     homepage: 'https://github.com/visionmedia/node-querystring',
8986 silly resolved     _id: 'qs@0.6.5',
8986 silly resolved     dist: { shasum: '48c6e7daea46586e9705a775b0f25c2f229d579b' },
8986 silly resolved     _from: 'qs@0.6.5',
8986 silly resolved     _resolved: 'https://registry.npmjs.org/qs/-/qs-0.6.5.tgz' },
8986 silly resolved   { name: 'fresh',
8986 silly resolved     author:
8986 silly resolved      { name: 'TJ Holowaychuk',
8986 silly resolved        email: 'tj@vision-media.ca',
8986 silly resolved        url: 'http://tjholowaychuk.com' },
8986 silly resolved     description: 'HTTP response freshness testing',
8986 silly resolved     version: '0.1.0',
8986 silly resolved     main: 'index.js',
8986 silly resolved     dependencies: {},
8986 silly resolved     devDependencies: { mocha: '*', should: '*' },
8986 silly resolved     readme: '\n# node-fresh\n\n  HTTP response freshness testing\n\n## fresh(req, res)\n\n Check freshness of `req` and `res` headers.\n\n When the cache is "fresh" __true__ is returned,\n otherwise __false__ is returned to indicate that\n the cache is now stale.\n\n## Example:\n\n```js\nvar req = { \'if-none-match\': \'tobi\' };\nvar res = { \'etag\': \'luna\' };\nfresh(req, res);\n// => false\n\nvar req = { \'if-none-match\': \'tobi\' };\nvar res = { \'etag\': \'tobi\' };\nfresh(req, res);\n// => true\n```\n\n## Installation\n\n```\n$ npm install fresh\n```',
8986 silly resolved     readmeFilename: 'Readme.md',
8986 silly resolved     _id: 'fresh@0.1.0',
8986 silly resolved     dist: { shasum: '3ae90aaee8918a439c9bcfc34089a811ea410bf3' },
8986 silly resolved     _from: 'fresh@0.1.0',
8986 silly resolved     _resolved: 'https://registry.npmjs.org/fresh/-/fresh-0.1.0.tgz' },
8986 silly resolved   { name: 'pause',
8986 silly resolved     version: '0.0.1',
8986 silly resolved     description: 'Pause streams...',
8986 silly resolved     keywords: [],
8986 silly resolved     author: { name: 'TJ Holowaychuk', email: 'tj@vision-media.ca' },
8986 silly resolved     dependencies: {},
8986 silly resolved     devDependencies: { mocha: '*', should: '*' },
8986 silly resolved     main: 'index',
8986 silly resolved     readme: '\n# pause\n\n  Pause streams...\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.',
8986 silly resolved     readmeFilename: 'Readme.md',
8986 silly resolved     _id: 'pause@0.0.1',
8986 silly resolved     dist: { shasum: 'bbf1b5281d66fb5767dc892293bfc8c54f89782a' },
8986 silly resolved     _from: 'pause@0.0.1',
8986 silly resolved     _resolved: 'https://registry.npmjs.org/pause/-/pause-0.0.1.tgz' },
8986 silly resolved   { author: { name: 'Roman Shtylman', email: 'shtylman@gmail.com' },
8986 silly resolved     name: 'cookie',
8986 silly resolved     description: 'cookie parsing and serialization',
8986 silly resolved     version: '0.0.5',
8986 silly resolved     repository:
8986 silly resolved      { type: 'git',
8986 silly resolved        url: 'git://github.com/shtylman/node-cookie.git' },
8986 silly resolved     keywords: [ 'cookie', 'cookies' ],
8986 silly resolved     main: 'index.js',
8986 silly resolved     scripts: { test: 'mocha' },
8986 silly resolved     dependencies: {},
8986 silly resolved     devDependencies: { mocha: '1.x.x' },
8986 silly resolved     optionalDependencies: {},
8986 silly resolved     engines: { node: '*' },
8986 silly resolved     readme: '# cookie [![Build Status](https://secure.travis-ci.org/shtylman/node-cookie.png?branch=master)](http://travis-ci.org/shtylman/node-cookie) #\n\ncookie is a basic cookie parser and serializer. It doesn\'t make assumptions about how you are going to deal with your cookies. It basically just provides a way to read and write the HTTP cookie headers.\n\nSee [RFC6265](http://tools.ietf.org/html/rfc6265) for details about the http header for cookies.\n\n## how?\n\n```\nnpm install cookie\n```\n\n```javascript\nvar cookie = require(\'cookie\');\n\nvar hdr = cookie.serialize(\'foo\', \'bar\');\n// hdr = \'foo=bar\';\n\nvar cookies = cookie.parse(\'foo=bar; cat=meow; dog=ruff\');\n// cookies = { foo: \'bar\', cat: \'meow\', dog: \'ruff\' };\n```\n\n## more\n\nThe serialize function takes a third parameter, an object, to set cookie options. See the RFC for valid values.\n\n### path\n> cookie path\n\n### expires\n> absolute expiration date for the cookie (Date object)\n\n### maxAge\n> relative max age of the cookie from when the client receives it (seconds)\n\n### domain\n> domain for the cookie\n\n### secure\n> true or false\n\n### httpOnly\n> true or false\n\n',
8986 silly resolved     readmeFilename: 'README.md',
8986 silly resolved     bugs: { url: 'https://github.com/shtylman/node-cookie/issues' },
8986 silly resolved     homepage: 'https://github.com/shtylman/node-cookie',
8986 silly resolved     _id: 'cookie@0.0.5',
8986 silly resolved     dist: { shasum: '57a9f679489d035807f9edf4a2c538568614b8d6' },
8986 silly resolved     _from: 'cookie@0.0.5',
8986 silly resolved     _resolved: 'https://registry.npmjs.org/cookie/-/cookie-0.0.5.tgz' },
8986 silly resolved   { name: 'bytes',
8986 silly resolved     author:
8986 silly resolved      { name: 'TJ Holowaychuk',
8986 silly resolved        email: 'tj@vision-media.ca',
8986 silly resolved        url: 'http://tjholowaychuk.com' },
8986 silly resolved     description: 'byte size string parser / serializer',
8986 silly resolved     version: '0.2.0',
8986 silly resolved     main: 'index.js',
8986 silly resolved     dependencies: {},
8986 silly resolved     devDependencies: { mocha: '*', should: '*' },
8986 silly resolved     readme: '# node-bytes\n\n  Byte string parser / formatter.\n\n## Example:\n\n```js\nbytes(\'1kb\')\n// => 1024\n\nbytes(\'2mb\')\n// => 2097152\n\nbytes(\'1gb\')\n// => 1073741824\n\nbytes(1073741824)\n// => 1gb\n```\n\n## Installation\n\n```\n$ npm install bytes\n$ component install visionmedia/bytes.js\n```\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n',
8986 silly resolved     readmeFilename: 'Readme.md',
8986 silly resolved     _id: 'bytes@0.2.0',
8986 silly resolved     dist: { shasum: 'e6dea5103d9fbedb3727b80b44cb1ae8184d0e2a' },
8986 silly resolved     _from: 'bytes@0.2.0',
8986 silly resolved     _resolved: 'https://registry.npmjs.org/bytes/-/bytes-0.2.0.tgz' },
8986 silly resolved   { name: 'send',
8986 silly resolved     version: '0.1.1',
8986 silly resolved     description: 'Better streaming static file server with Range and conditional-GET support',
8986 silly resolved     keywords: [ 'static', 'file', 'server' ],
8986 silly resolved     author: { name: 'TJ Holowaychuk', email: 'tj@vision-media.ca' },
8986 silly resolved     dependencies:
8986 silly resolved      { debug: '*',
8986 silly resolved        mime: '~1.2.9',
8986 silly resolved        fresh: '0.1.0',
8986 silly resolved        'range-parser': '0.0.4' },
8986 silly resolved     devDependencies: { mocha: '*', should: '*', supertest: '0.0.1', connect: '2.x' },
8986 silly resolved     scripts: { test: 'make test' },
8986 silly resolved     repository: { type: 'git', url: 'git://github.com/visionmedia/send.git' },
8986 silly resolved     main: 'index',
8986 silly resolved     readme: '# send\n\n  Send is Connect\'s `static()` extracted for generalized use, a streaming static file\n  server supporting partial responses (Ranges), conditional-GET negotiation, high test coverage, and granular events which may be leveraged to take appropriate actions in your application or framework.\n\n## Installation\n\n    $ npm install send\n\n## Examples\n\n  Small:\n\n```js\nvar http = require(\'http\');\nvar send = require(\'send\');\n\nvar app = http.createServer(function(req, res){\n  send(req, req.url).pipe(res);\n}).listen(3000);\n```\n\n  Serving from a root directory with custom error-handling:\n\n```js\nvar http = require(\'http\');\nvar send = require(\'send\');\nvar url = require(\'url\');\n\nvar app = http.createServer(function(req, res){\n  // your custom error-handling logic:\n  function error(err) {\n    res.statusCode = err.status || 500;\n    res.end(err.message);\n  }\n\n  // your custom directory handling logic:\n  function redirect() {\n    res.statusCode = 301;\n    res.setHeader(\'Location\', req.url + \'/\');\n    res.end(\'Redirecting to \' + req.url + \'/\');\n  }\n\n  // transfer arbitrary files from within\n  // /www/example.com/public/*\n  send(req, url.parse(req.url).pathname)\n  .root(\'/www/example.com/public\')\n  .on(\'error\', error)\n  .on(\'directory\', redirect)\n  .pipe(res);\n}).listen(3000);\n```\n\n## API\n\n### Events\n\n  - `error` an error occurred `(err)`\n  - `directory` a directory was requested\n  - `file` a file was requested `(path, stat)`\n  - `stream` file streaming has started `(stream)`\n  - `end` streaming has completed\n\n### .root(dir)\n\n  Serve files relative to `path`. Aliased as `.from(dir)`.\n\n### .index(path)\n\n  By default send supports "index.html" files, to disable this\n  invoke `.index(false)` or to supply a new index pass a string.\n\n### .maxage(ms)\n\n  Provide a max-age in milliseconds for http caching, defaults to 0.\n\n### .hidden(bool)\n\n  Enable or disable transfer of hidden files, defaults to false.\n\n## Error-handling\n\n  By default when no `error` listeners are present an automatic response will be made, otherwise you have full control over the response, aka you may show a 5xx page etc.\n\n## Caching\n\n  It does _not_ perform internal caching, you should use a reverse proxy cache such\n  as Varnish for this, or those fancy things called CDNs. If your application is small enough that it would benefit from single-node memory caching, it\'s small enough that it does not need caching at all ;).\n\n## Debugging\n\n To enable `debug()` instrumentation output export __DEBUG__:\n\n```\n$ DEBUG=send node app\n```\n\n## Running tests\n\n```\n$ npm install\n$ make test\n```\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n',
8986 silly resolved     readmeFilename: 'Readme.md',
8986 silly resolved     bugs: { url: 'https://github.com/visionmedia/send/issues' },
8986 silly resolved     homepage: 'https://github.com/visionmedia/send',
8986 silly resolved     _id: 'send@0.1.1',
8986 silly resolved     dist: { shasum: '3a9cc4bca08531bbd12e48c9a2d12f1716b4f08e' },
8986 silly resolved     _from: 'send@0.1.1',
8986 silly resolved     _resolved: 'https://registry.npmjs.org/send/-/send-0.1.1.tgz' },
8986 silly resolved   { name: 'cookie-signature',
8986 silly resolved     version: '1.0.1',
8986 silly resolved     description: 'Sign and unsign cookies',
8986 silly resolved     keywords: [ 'cookie', 'sign', 'unsign' ],
8986 silly resolved     author: { name: 'TJ Holowaychuk', email: 'tj@learnboost.com' },
8986 silly resolved     dependencies: {},
8986 silly resolved     devDependencies: { mocha: '*', should: '*' },
8986 silly resolved     main: 'index',
8986 silly resolved     readme: '\n# cookie-signature\n\n  Sign and unsign cookies.\n\n## Example\n\n```js\nvar cookie = require(\'cookie-signature\');\n\nvar val = cookie.sign(\'hello\', \'tobiiscool\');\nval.should.equal(\'hello.DGDUkGlIkCzPz+C0B064FNgHdEjox7ch8tOBGslZ5QI\');\n\nvar val = cookie.sign(\'hello\', \'tobiiscool\');\ncookie.unsign(val, \'tobiiscool\').should.equal(\'hello\');\ncookie.unsign(val, \'luna\').should.be.false;\n```\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 LearnBoost &lt;tj@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.',
8986 silly resolved     readmeFilename: 'Readme.md',
8986 silly resolved     _id: 'cookie-signature@1.0.1',
8986 silly resolved     dist: { shasum: 'c5d00341b4dcf3e49341b46444af4cc515cc318a' },
8986 silly resolved     _from: 'cookie-signature@1.0.1',
8986 silly resolved     _resolved: 'https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.1.tgz' },
8986 silly resolved   { name: 'formidable',
8986 silly resolved     description: 'A node.js module for parsing form data, especially file uploads.',
8986 silly resolved     homepage: 'https://github.com/felixge/node-formidable',
8986 silly resolved     version: '1.0.14',
8986 silly resolved     devDependencies:
8986 silly resolved      { gently: '0.8.0',
8986 silly resolved        findit: '0.1.1',
8986 silly resolved        hashish: '0.0.4',
8986 silly resolved        urun: '~0.0.6',
8986 silly resolved        utest: '0.0.3',
8986 silly resolved        request: '~2.11.4' },
8986 silly resolved     directories: { lib: './lib' },
8986 silly resolved     main: './lib/index',
8986 silly resolved     scripts: { test: 'node test/run.js', clean: 'rm test/tmp/*' },
8986 silly resolved     engines: { node: '>=0.8.0' },
8986 silly resolved     repository:
8986 silly resolved      { type: 'git',
8986 silly resolved        url: 'git://github.com/felixge/node-formidable.git' },
8986 silly resolved     bugs: { url: 'http://github.com/felixge/node-formidable/issues' },
8986 silly resolved     optionalDependencies: {},
8986 silly resolved     readme: '# Formidable\n\n[![Build Status](https://secure.travis-ci.org/felixge/node-formidable.png?branch=master)](http://travis-ci.org/felixge/node-formidable)\n\n## Purpose\n\nA node.js module for parsing form data, especially file uploads.\n\n## Current status\n\nThis module was developed for [Transloadit](http://transloadit.com/), a service focused on uploading\nand encoding images and videos. It has been battle-tested against hundreds of GB of file uploads from\na large variety of clients and is considered production-ready.\n\n## Features\n\n* Fast (~500mb/sec), non-buffering multipart parser\n* Automatically writing file uploads to disk\n* Low memory footprint\n* Graceful error handling\n* Very high test coverage\n\n## Installation\n\nVia [npm](http://github.com/isaacs/npm):\n```\nnpm install formidable@latest\n```\nManually:\n```\ngit clone git://github.com/felixge/node-formidable.git formidable\nvim my.js\n# var formidable = require(\'./formidable\');\n```\n\nNote: Formidable requires [gently](http://github.com/felixge/node-gently) to run the unit tests, but you won\'t need it for just using the library.\n\n## Example\n\nParse an incoming file upload.\n```javascript\nvar formidable = require(\'formidable\'),\n    http = require(\'http\'),\n    util = require(\'util\');\n\nhttp.createServer(function(req, res) {\n  if (req.url == \'/upload\' && req.method.toLowerCase() == \'post\') {\n    // parse a file upload\n    var form = new formidable.IncomingForm();\n\n    form.parse(req, function(err, fields, files) {\n      res.writeHead(200, {\'content-type\': \'text/plain\'});\n      res.write(\'received upload:\\n\\n\');\n      res.end(util.inspect({fields: fields, files: files}));\n    });\n\n    return;\n  }\n\n  // show a file upload form\n  res.writeHead(200, {\'content-type\': \'text/html\'});\n  res.end(\n    \'<form action="/upload" enctype="multipart/form-data" method="post">\'+\n    \'<input type="text" name="title"><br>\'+\n    \'<input type="file" name="upload" multiple="multiple"><br>\'+\n    \'<input type="submit" value="Upload">\'+\n    \'</form>\'\n  );\n}).listen(8080);\n```\n## API\n\n### Formidable.IncomingForm\n```javascript\nvar form = new formidable.IncomingForm()\n```\nCreates a new incoming form.\n\n```javascript\nform.encoding = \'utf-8\';\n```\nSets encoding for incoming form fields.\n\n```javascript\nform.uploadDir = process.env.TMP || process.env.TMPDIR || process.env.TEMP || \'/tmp\' || process.cwd();\n```\nThe directory for placing file uploads in. You can move them later on using\n`fs.rename()`. The default directory is picked at module load time depending on\nthe first existing directory from those listed above.\n\n```javascript\nform.keepExtensions = false;\n```\nIf you want the files written to `form.uploadDir` to include the extensions of the original files, set this property to `true`.\n\n```javascript\nform.type\n```\nEither \'multipart\' or \'urlencoded\' depending on the incoming request.\n\n```javascript\nform.maxFieldsSize = 2 * 1024 * 1024;\n```\nLimits the amount of memory a field (not file) can allocate in bytes.\nIf this value is exceeded, an `\'error\'` event is emitted. The default\nsize is 2MB.\n\n```javascript\nform.maxFields = 0;\n```\nLimits the number of fields that the querystring parser will decode. Defaults\nto 0 (unlimited).\n\n```javascript\nform.hash = false;\n```\nIf you want checksums calculated for incoming files, set this to either `\'sha1\'` or `\'md5\'`.\n\n```javascript\nform.bytesReceived\n```\nThe amount of bytes received for this form so far.\n\n```javascript\nform.bytesExpected\n```\nThe expected number of bytes in this form.\n\n```javascript\nform.parse(request, [cb]);\n```\nParses an incoming node.js `request` containing form data. If `cb` is provided, all fields an files are collected and passed to the callback:\n\n\n```javascript\nform.parse(req, function(err, fields, files) {\n  // ...\n});\n\nform.onPart(part);\n```\nYou may overwrite this method if you are interested in directly accessing the multipart stream. Doing so will disable any `\'field\'` / `\'file\'` events  processing which would occur otherwise, making you fully responsible for handling the processing.\n\n```javascript\nform.onPart = function(part) {\n  part.addListener(\'data\', function() {\n    // ...\n  });\n}\n```\nIf you want to use formidable to only handle certain parts for you, you can do so:\n```javascript\nform.onPart = function(part) {\n  if (!part.filename) {\n    // let formidable handle all non-file parts\n    form.handlePart(part);\n  }\n}\n```\nCheck the code in this method for further inspiration.\n\n\n### Formidable.File\n```javascript\nfile.size = 0\n```\nThe size of the uploaded file in bytes. If the file is still being uploaded (see `\'fileBegin\'` event), this property says how many bytes of the file have been written to disk yet.\n```javascript\nfile.path = null\n```\nThe path this file is being written to. You can modify this in the `\'fileBegin\'` event in\ncase you are unhappy with the way formidable generates a temporary path for your files.\n```javascript\nfile.name = null\n```\nThe name this file had according to the uploading client.\n```javascript\nfile.type = null\n```\nThe mime type of this file, according to the uploading client.\n```javascript\nfile.lastModifiedDate = null\n```\nA date object (or `null`) containing the time this file was last written to. Mostly\nhere for compatibility with the [W3C File API Draft](http://dev.w3.org/2006/webapi/FileAPI/).\n```javascript\nfile.hash = null\n```\nIf hash calculation was set, you can read the hex digest out of this var.\n\n#### Formidable.File#toJSON()\n\n  This method returns a JSON-representation of the file, allowing you to\n  `JSON.stringify()` the file which is useful for logging and responding\n  to requests.\n\n### Events\n\n\n#### \'progress\'\n```javascript\nform.on(\'progress\', function(bytesReceived, bytesExpected) {\n});\n```\nEmitted after each incoming chunk of data that has been parsed. Can be used to roll your own progress bar.\n\n\n\n#### \'field\'\n```javascript\nform.on(\'field\', function(name, value) {\n});\n```\n\n#### \'fileBegin\'\n\nEmitted whenever a field / value pair has been received.\n```javascript\nform.on(\'fileBegin\', function(name, file) {\n});\n```\n\n#### \'file\'\n\nEmitted whenever a new file is detected in the upload stream. Use this even if\nyou want to stream the file to somewhere else while buffering the upload on\nthe file system.\n\nEmitted whenever a field / file pair has been received. `file` is an instance of `File`.\n```javascript\nform.on(\'file\', function(name, file) {\n});\n```\n\n#### \'error\'\n\nEmitted when there is an error processing the incoming form. A request that experiences an error is automatically paused, you will have to manually call `request.resume()` if you want the request to continue firing `\'data\'` events.\n```javascript\nform.on(\'error\', function(err) {\n});\n```\n\n#### \'aborted\'\n\n\nEmitted when the request was aborted by the user. Right now this can be due to a \'timeout\' or \'close\' event on the socket. In the future there will be a separate \'timeout\' event (needs a change in the node core).\n```javascript\nform.on(\'aborted\', function() {\n});\n```\n\n##### \'end\'\n```javascript\nform.on(\'end\', function() {\n});\n```\nEmitted when the entire request has been received, and all contained files have finished flushing to disk. This is a great place for you to send your response.\n\n\n\n## Changelog\n\n### v1.0.14\n\n* Add failing hash tests. (Ben Trask)\n* Enable hash calculation again (Eugene Girshov)\n* Test for immediate data events (Tim Smart)\n* Re-arrange IncomingForm#parse (Tim Smart)\n\n### v1.0.13\n\n* Only update hash if update method exists (Sven Lito)\n* According to travis v0.10 needs to go quoted (Sven Lito)\n* Bumping build node versions (Sven Lito)\n* Additional fix for empty requests (Eugene Girshov)\n* Change the default to 1000, to match the new Node behaviour. (OrangeDog)\n* Add ability to control maxKeys in the querystring parser. (OrangeDog)\n* Adjust test case to work with node 0.9.x (Eugene Girshov)\n* Update package.json (Sven Lito)\n* Path adjustment according to eb4468b (Markus Ast)\n\n### v1.0.12\n\n* Emit error on aborted connections (Eugene Girshov)\n* Add support for empty requests (Eugene Girshov)\n* Fix name/filename handling in Content-Disposition (jesperp)\n* Tolerate malformed closing boundary in multipart (Eugene Girshov)\n* Ignore preamble in multipart messages (Eugene Girshov)\n* Add support for application/json (Mike Frey, Carlos Rodriguez)\n* Add support for Base64 encoding (Elmer Bulthuis)\n* Add File#toJSON (TJ Holowaychuk)\n* Remove support for Node.js 0.4 & 0.6 (Andrew Kelley)\n* Documentation improvements (Sven Lito, Andre Azevedo)\n* Add support for application/octet-stream (Ion Lupascu, Chris Scribner)\n* Use os.tmpDir() to get tmp directory (Andrew Kelley)\n* Improve package.json (Andrew Kelley, Sven Lito)\n* Fix benchmark script (Andrew Kelley)\n* Fix scope issue in incoming_forms (Sven Lito)\n* Fix file handle leak on error (OrangeDog)\n\n### v1.0.11\n\n* Calculate checksums for incoming files (sreuter)\n* Add definition parameters to "IncomingForm" as an argument (Math-)\n\n### v1.0.10\n\n* Make parts to be proper Streams (Matt Robenolt)\n\n### v1.0.9\n\n* Emit progress when content length header parsed (Tim Koschützki)\n* Fix Readme syntax due to GitHub changes (goob)\n* Replace references to old \'sys\' module in Readme with \'util\' (Peter Sugihara)\n\n### v1.0.8\n\n* Strip potentially unsafe characters when using `keepExtensions: true`.\n* Switch to utest / urun for testing\n* Add travis build\n\n### v1.0.7\n\n* Remove file from package that was causing problems when installing on windows. (#102)\n* Fix typos in Readme (Jason Davies).\n\n### v1.0.6\n\n* Do not default to the default to the field name for file uploads where\n  filename="".\n\n### v1.0.5\n\n* Support filename="" in multipart parts\n* Explain unexpected end() errors in parser better\n\n**Note:** Starting with this version, formidable emits \'file\' events for empty\nfile input fields. Previously those were incorrectly emitted as regular file\ninput fields with value = "".\n\n### v1.0.4\n\n* Detect a good default tmp directory regardless of platform. (#88)\n\n### v1.0.3\n\n* Fix problems with utf8 characters (#84) / semicolons in filenames (#58)\n* Small performance improvements\n* New test suite and fixture system\n\n### v1.0.2\n\n* Exclude node\\_modules folder from git\n* Implement new `\'aborted\'` event\n* Fix files in example folder to work with recent node versions\n* Make gently a devDependency\n\n[See Commits](https://github.com/felixge/node-formidable/compare/v1.0.1...v1.0.2)\n\n### v1.0.1\n\n* Fix package.json to refer to proper main directory. (#68, Dean Landolt)\n\n[See Commits](https://github.com/felixge/node-formidable/compare/v1.0.0...v1.0.1)\n\n### v1.0.0\n\n* Add support for multipart boundaries that are quoted strings. (Jeff Craig)\n\nThis marks the beginning of development on version 2.0 which will include\nseveral architectural improvements.\n\n[See Commits](https://github.com/felixge/node-formidable/compare/v0.9.11...v1.0.0)\n\n### v0.9.11\n\n* Emit `\'progress\'` event when receiving data, regardless of parsing it. (Tim Koschützki)\n* Use [W3C FileAPI Draft](http://dev.w3.org/2006/webapi/FileAPI/) properties for File class\n\n**Important:** The old property names of the File class will be removed in a\nfuture release.\n\n[See Commits](https://github.com/felixge/node-formidable/compare/v0.9.10...v0.9.11)\n\n### Older releases\n\nThese releases were done before starting to maintain the above Changelog:\n\n* [v0.9.10](https://github.com/felixge/node-formidable/compare/v0.9.9...v0.9.10)\n* [v0.9.9](https://github.com/felixge/node-formidable/compare/v0.9.8...v0.9.9)\n* [v0.9.8](https://github.com/felixge/node-formidable/compare/v0.9.7...v0.9.8)\n* [v0.9.7](https://github.com/felixge/node-formidable/compare/v0.9.6...v0.9.7)\n* [v0.9.6](https://github.com/felixge/node-formidable/compare/v0.9.5...v0.9.6)\n* [v0.9.5](https://github.com/felixge/node-formidable/compare/v0.9.4...v0.9.5)\n* [v0.9.4](https://github.com/felixge/node-formidable/compare/v0.9.3...v0.9.4)\n* [v0.9.3](https://github.com/felixge/node-formidable/compare/v0.9.2...v0.9.3)\n* [v0.9.2](https://github.com/felixge/node-formidable/compare/v0.9.1...v0.9.2)\n* [v0.9.1](https://github.com/felixge/node-formidable/compare/v0.9.0...v0.9.1)\n* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)\n* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)\n* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)\n* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)\n* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)\n* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)\n* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)\n* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)\n* [v0.1.0](https://github.com/felixge/node-formidable/commits/v0.1.0)\n\n## License\n\nFormidable is licensed under the MIT license.\n\n## Ports\n\n* [multipart-parser](http://github.com/FooBarWidget/multipart-parser): a C++ parser based on formidable\n\n## Credits\n\n* [Ryan Dahl](http://twitter.com/ryah) for his work on [http-parser](http://github.com/ry/http-parser) which heavily inspired multipart_parser.js\n',
8986 silly resolved     readmeFilename: 'Readme.md',
8986 silly resolved     dependencies: {},
8986 silly resolved     _id: 'formidable@1.0.14',
8986 silly resolved     dist: { shasum: '92c067d12cef8369e73924a0ff922cdc17366ce6' },
8986 silly resolved     _from: 'formidable@1.0.14',
8986 silly resolved     _resolved: 'https://registry.npmjs.org/formidable/-/formidable-1.0.14.tgz' } ]
8987 info install buffer-crc32@0.2.1 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect
8988 info install debug@0.7.4 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect
8989 info install qs@0.6.5 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect
8990 info install fresh@0.1.0 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect
8991 info install pause@0.0.1 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect
8992 info install cookie@0.0.5 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect
8993 info install bytes@0.2.0 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect
8994 info install send@0.1.1 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect
8995 info install cookie-signature@1.0.1 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect
8996 info install formidable@1.0.14 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect
8997 info installOne buffer-crc32@0.2.1
8998 info installOne debug@0.7.4
8999 info installOne qs@0.6.5
9000 info installOne fresh@0.1.0
9001 info installOne pause@0.0.1
9002 info installOne cookie@0.0.5
9003 info installOne bytes@0.2.0
9004 info installOne send@0.1.1
9005 info installOne cookie-signature@1.0.1
9006 info installOne formidable@1.0.14
9007 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\buffer-crc32 unbuild
9008 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\debug unbuild
9009 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\qs unbuild
9010 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\fresh unbuild
9011 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\pause unbuild
9012 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\cookie unbuild
9013 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\bytes unbuild
9014 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\send unbuild
9015 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\cookie-signature unbuild
9016 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\formidable unbuild
9017 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\buffer-crc32\0.2.1\package.tgz
9018 silly lockFile 43c21820-onnect-node-modules-buffer-crc32 tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\buffer-crc32
9019 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\buffer-crc32 C:\Users\Gaston\AppData\Roaming\npm-cache\43c21820-onnect-node-modules-buffer-crc32.lock
9020 silly lockFile 5b37a7d2-e-buffer-crc32-0-2-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\buffer-crc32\0.2.1\package.tgz
9021 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\buffer-crc32\0.2.1\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\5b37a7d2-e-buffer-crc32-0-2-1-package-tgz.lock
9022 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\debug\0.7.4\package.tgz
9023 silly lockFile 987dc3f5-dules-connect-node-modules-debug tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\debug
9024 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\debug C:\Users\Gaston\AppData\Roaming\npm-cache\987dc3f5-dules-connect-node-modules-debug.lock
9025 silly lockFile 9cf76063-pm-cache-debug-0-7-4-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\debug\0.7.4\package.tgz
9026 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\debug\0.7.4\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\9cf76063-pm-cache-debug-0-7-4-package-tgz.lock
9027 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.6.5\package.tgz
9028 silly lockFile cdbd1c88--modules-connect-node-modules-qs tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\qs
9029 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\qs C:\Users\Gaston\AppData\Roaming\npm-cache\cdbd1c88--modules-connect-node-modules-qs.lock
9030 silly lockFile 789b0dd8-g-npm-cache-qs-0-6-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.6.5\package.tgz
9031 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.6.5\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\789b0dd8-g-npm-cache-qs-0-6-5-package-tgz.lock
9032 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\fresh\0.1.0\package.tgz
9033 silly lockFile 2ea1ef76-dules-connect-node-modules-fresh tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\fresh
9034 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\fresh C:\Users\Gaston\AppData\Roaming\npm-cache\2ea1ef76-dules-connect-node-modules-fresh.lock
9035 silly lockFile 51d1c521-pm-cache-fresh-0-1-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\fresh\0.1.0\package.tgz
9036 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\fresh\0.1.0\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\51d1c521-pm-cache-fresh-0-1-0-package-tgz.lock
9037 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\pause\0.0.1\package.tgz
9038 silly lockFile 14b87107-dules-connect-node-modules-pause tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\pause
9039 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\pause C:\Users\Gaston\AppData\Roaming\npm-cache\14b87107-dules-connect-node-modules-pause.lock
9040 silly lockFile 6ea191ff-pm-cache-pause-0-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\pause\0.0.1\package.tgz
9041 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\pause\0.0.1\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\6ea191ff-pm-cache-pause-0-0-1-package-tgz.lock
9042 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\cookie\0.0.5\package.tgz
9043 silly lockFile d99f2dea-ules-connect-node-modules-cookie tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\cookie
9044 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\cookie C:\Users\Gaston\AppData\Roaming\npm-cache\d99f2dea-ules-connect-node-modules-cookie.lock
9045 silly lockFile e313b369-m-cache-cookie-0-0-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\cookie\0.0.5\package.tgz
9046 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\cookie\0.0.5\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\e313b369-m-cache-cookie-0-0-5-package-tgz.lock
9047 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\bytes\0.2.0\package.tgz
9048 silly lockFile 851f5365-dules-connect-node-modules-bytes tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\bytes
9049 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\bytes C:\Users\Gaston\AppData\Roaming\npm-cache\851f5365-dules-connect-node-modules-bytes.lock
9050 silly lockFile dbfea84c-pm-cache-bytes-0-2-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\bytes\0.2.0\package.tgz
9051 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\bytes\0.2.0\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\dbfea84c-pm-cache-bytes-0-2-0-package-tgz.lock
9052 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\send\0.1.1\package.tgz
9053 silly lockFile a6e71260-odules-connect-node-modules-send tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\send
9054 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\send C:\Users\Gaston\AppData\Roaming\npm-cache\a6e71260-odules-connect-node-modules-send.lock
9055 silly lockFile b2611e08-npm-cache-send-0-1-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\send\0.1.1\package.tgz
9056 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\send\0.1.1\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\b2611e08-npm-cache-send-0-1-1-package-tgz.lock
9057 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\cookie-signature\1.0.1\package.tgz
9058 silly lockFile 62038454-ct-node-modules-cookie-signature tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\cookie-signature
9059 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\cookie-signature C:\Users\Gaston\AppData\Roaming\npm-cache\62038454-ct-node-modules-cookie-signature.lock
9060 silly lockFile 81992565-okie-signature-1-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\cookie-signature\1.0.1\package.tgz
9061 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\cookie-signature\1.0.1\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\81992565-okie-signature-1-0-1-package-tgz.lock
9062 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\formidable\1.0.14\package.tgz
9063 silly lockFile edacab1d--connect-node-modules-formidable tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\formidable
9064 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\formidable C:\Users\Gaston\AppData\Roaming\npm-cache\edacab1d--connect-node-modules-formidable.lock
9065 silly lockFile 7227e295-he-formidable-1-0-14-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\formidable\1.0.14\package.tgz
9066 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\formidable\1.0.14\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\7227e295-he-formidable-1-0-14-package-tgz.lock
9067 silly gunzTarPerm modes [ '755', '644' ]
9068 silly gunzTarPerm modes [ '755', '644' ]
9069 silly gunzTarPerm modes [ '755', '644' ]
9070 silly gunzTarPerm modes [ '755', '644' ]
9071 silly gunzTarPerm modes [ '755', '644' ]
9072 silly gunzTarPerm modes [ '755', '644' ]
9073 silly gunzTarPerm modes [ '755', '644' ]
9074 silly gunzTarPerm modes [ '755', '644' ]
9075 silly gunzTarPerm modes [ '755', '644' ]
9076 silly gunzTarPerm modes [ '755', '644' ]
9077 silly gunzTarPerm extractEntry package.json
9078 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
9079 silly gunzTarPerm extractEntry package.json
9080 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
9081 silly gunzTarPerm extractEntry package.json
9082 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
9083 silly gunzTarPerm extractEntry package.json
9084 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
9085 silly gunzTarPerm extractEntry package.json
9086 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
9087 silly gunzTarPerm extractEntry package.json
9088 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
9089 silly gunzTarPerm extractEntry package.json
9090 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
9091 silly gunzTarPerm extractEntry package.json
9092 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
9093 silly gunzTarPerm extractEntry package.json
9094 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
9095 silly gunzTarPerm extractEntry package.json
9096 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
9097 silly gunzTarPerm extractEntry .npmignore
9098 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
9099 silly gunzTarPerm extractEntry README.md
9100 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
9101 silly gunzTarPerm extractEntry debug.js
9102 silly gunzTarPerm modified mode [ 'debug.js', 438, 420 ]
9103 silly gunzTarPerm extractEntry index.js
9104 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
9105 silly gunzTarPerm extractEntry .npmignore
9106 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
9107 silly gunzTarPerm extractEntry index.js
9108 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
9109 silly gunzTarPerm extractEntry .npmignore
9110 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
9111 silly gunzTarPerm extractEntry index.js
9112 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
9113 silly gunzTarPerm extractEntry .npmignore
9114 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
9115 silly gunzTarPerm extractEntry index.js
9116 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
9117 silly gunzTarPerm extractEntry .npmignore
9118 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
9119 silly gunzTarPerm extractEntry index.js
9120 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
9121 silly gunzTarPerm extractEntry .npmignore
9122 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
9123 silly gunzTarPerm extractEntry index.js
9124 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
9125 silly gunzTarPerm extractEntry .npmignore
9126 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
9127 silly gunzTarPerm extractEntry README.md
9128 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
9129 silly gunzTarPerm extractEntry .npmignore
9130 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
9131 silly gunzTarPerm extractEntry LICENSE
9132 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
9133 silly gunzTarPerm extractEntry .npmignore
9134 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
9135 silly gunzTarPerm extractEntry index.js
9136 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
9137 silly gunzTarPerm extractEntry History.md
9138 silly gunzTarPerm modified mode [ 'History.md', 438, 420 ]
9139 silly gunzTarPerm extractEntry Makefile
9140 silly gunzTarPerm modified mode [ 'Makefile', 438, 420 ]
9141 silly gunzTarPerm extractEntry index.js
9142 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
9143 silly gunzTarPerm extractEntry .travis.yml
9144 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]
9145 silly gunzTarPerm extractEntry Makefile
9146 silly gunzTarPerm modified mode [ 'Makefile', 438, 420 ]
9147 silly gunzTarPerm extractEntry Readme.md
9148 silly gunzTarPerm modified mode [ 'Readme.md', 438, 420 ]
9149 silly gunzTarPerm extractEntry History.md
9150 silly gunzTarPerm modified mode [ 'History.md', 438, 420 ]
9151 silly gunzTarPerm extractEntry Makefile
9152 silly gunzTarPerm modified mode [ 'Makefile', 438, 420 ]
9153 silly gunzTarPerm extractEntry index.js
9154 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
9155 silly gunzTarPerm extractEntry .travis.yml
9156 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]
9157 silly gunzTarPerm extractEntry lib/debug.js
9158 silly gunzTarPerm modified mode [ 'lib/debug.js', 438, 420 ]
9159 silly gunzTarPerm extractEntry Readme.md
9160 silly gunzTarPerm modified mode [ 'Readme.md', 438, 420 ]
9161 silly gunzTarPerm extractEntry .gitmodules
9162 silly gunzTarPerm modified mode [ '.gitmodules', 438, 420 ]
9163 silly gunzTarPerm extractEntry Readme.md
9164 silly gunzTarPerm modified mode [ 'Readme.md', 438, 420 ]
9165 silly gunzTarPerm extractEntry component.json
9166 silly gunzTarPerm modified mode [ 'component.json', 438, 420 ]
9167 silly gunzTarPerm extractEntry History.md
9168 silly gunzTarPerm modified mode [ 'History.md', 438, 420 ]
9169 silly gunzTarPerm extractEntry History.md
9170 silly gunzTarPerm modified mode [ 'History.md', 438, 420 ]
9171 silly gunzTarPerm extractEntry lib/send.js
9172 silly gunzTarPerm modified mode [ 'lib/send.js', 438, 420 ]
9173 silly gunzTarPerm extractEntry index.js
9174 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
9175 silly gunzTarPerm extractEntry tool/record.js
9176 silly gunzTarPerm modified mode [ 'tool/record.js', 438, 420 ]
9177 silly gunzTarPerm extractEntry Readme.md
9178 silly gunzTarPerm modified mode [ 'Readme.md', 438, 420 ]
9179 silly gunzTarPerm extractEntry Readme.md
9180 silly gunzTarPerm modified mode [ 'Readme.md', 438, 420 ]
9181 silly gunzTarPerm extractEntry test/parse.js
9182 silly gunzTarPerm modified mode [ 'test/parse.js', 438, 420 ]
9183 silly gunzTarPerm extractEntry test/serialize.js
9184 silly gunzTarPerm modified mode [ 'test/serialize.js', 438, 420 ]
9185 silly gunzTarPerm extractEntry tests/crc.test.js
9186 silly gunzTarPerm modified mode [ 'tests/crc.test.js', 438, 420 ]
9187 silly gunzTarPerm extractEntry Makefile
9188 silly gunzTarPerm modified mode [ 'Makefile', 438, 420 ]
9189 silly gunzTarPerm extractEntry Readme.md
9190 silly gunzTarPerm modified mode [ 'Readme.md', 438, 420 ]
9191 silly gunzTarPerm extractEntry lib/utils.js
9192 silly gunzTarPerm modified mode [ 'lib/utils.js', 438, 420 ]
9193 silly gunzTarPerm extractEntry Makefile
9194 silly gunzTarPerm modified mode [ 'Makefile', 438, 420 ]
9195 silly gunzTarPerm extractEntry Readme.md
9196 silly gunzTarPerm modified mode [ 'Readme.md', 438, 420 ]
9197 silly gunzTarPerm extractEntry .travis.yml
9198 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]
9199 silly gunzTarPerm extractEntry benchmark/bench-multipart-parser.js
9200 silly gunzTarPerm modified mode [ 'benchmark/bench-multipart-parser.js', 438, 420 ]
9201 silly gunzTarPerm extractEntry test/mocha.opts
9202 silly gunzTarPerm modified mode [ 'test/mocha.opts', 438, 420 ]
9203 silly gunzTarPerm extractEntry example/json.js
9204 silly gunzTarPerm modified mode [ 'example/json.js', 438, 420 ]
9205 silly gunzTarPerm extractEntry example/post.js
9206 silly gunzTarPerm modified mode [ 'example/post.js', 438, 420 ]
9207 silly gunzTarPerm extractEntry example/upload.js
9208 silly gunzTarPerm modified mode [ 'example/upload.js', 438, 420 ]
9209 silly gunzTarPerm extractEntry Readme.md
9210 silly gunzTarPerm modified mode [ 'Readme.md', 438, 420 ]
9211 silly gunzTarPerm extractEntry test/common.js
9212 silly gunzTarPerm modified mode [ 'test/common.js', 438, 420 ]
9213 silly gunzTarPerm extractEntry test/run.js
9214 silly gunzTarPerm modified mode [ 'test/run.js', 438, 420 ]
9215 silly gunzTarPerm extractEntry test/fixture/multipart.js
9216 silly gunzTarPerm modified mode [ 'test/fixture/multipart.js', 438, 420 ]
9217 silly gunzTarPerm extractEntry test/fixture/file/beta-sticker-1.png
9218 silly gunzTarPerm modified mode [ 'test/fixture/file/beta-sticker-1.png', 438, 420 ]
9219 silly gunzTarPerm extractEntry test/fixture/file/binaryfile.tar.gz
9220 silly gunzTarPerm modified mode [ 'test/fixture/file/binaryfile.tar.gz', 438, 420 ]
9221 silly gunzTarPerm extractEntry test/fixture/file/blank.gif
9222 silly gunzTarPerm modified mode [ 'test/fixture/file/blank.gif', 438, 420 ]
9223 silly gunzTarPerm extractEntry test/fixture/file/funkyfilename.txt
9224 silly gunzTarPerm modified mode [ 'test/fixture/file/funkyfilename.txt', 438, 420 ]
9225 silly gunzTarPerm extractEntry test/fixture/file/menu_separator.png
9226 silly gunzTarPerm modified mode [ 'test/fixture/file/menu_separator.png', 438, 420 ]
9227 silly gunzTarPerm extractEntry test/fixture/file/plain.txt
9228 silly gunzTarPerm modified mode [ 'test/fixture/file/plain.txt', 438, 420 ]
9229 silly gunzTarPerm extractEntry test/fixture/http/special-chars-in-filename/info.md
9230 silly gunzTarPerm modified mode [ 'test/fixture/http/special-chars-in-filename/info.md',
9230 silly gunzTarPerm   438,
9230 silly gunzTarPerm   420 ]
9231 silly gunzTarPerm extractEntry test/fixture/js/encoding.js
9232 silly gunzTarPerm modified mode [ 'test/fixture/js/encoding.js', 438, 420 ]
9233 silly gunzTarPerm extractEntry test/fixture/js/misc.js
9234 silly gunzTarPerm modified mode [ 'test/fixture/js/misc.js', 438, 420 ]
9235 silly gunzTarPerm extractEntry test/fixture/js/no-filename.js
9236 silly gunzTarPerm modified mode [ 'test/fixture/js/no-filename.js', 438, 420 ]
9237 silly gunzTarPerm extractEntry test/fixture/js/preamble.js
9238 silly gunzTarPerm modified mode [ 'test/fixture/js/preamble.js', 438, 420 ]
9239 silly gunzTarPerm extractEntry test/fixture/js/special-chars-in-filename.js
9240 silly gunzTarPerm modified mode [ 'test/fixture/js/special-chars-in-filename.js', 438, 420 ]
9241 silly gunzTarPerm extractEntry test/fixture/js/workarounds.js
9242 silly gunzTarPerm modified mode [ 'test/fixture/js/workarounds.js', 438, 420 ]
9243 silly gunzTarPerm extractEntry test/integration/test-fixtures.js
9244 silly gunzTarPerm modified mode [ 'test/integration/test-fixtures.js', 438, 420 ]
9245 silly gunzTarPerm extractEntry test/integration/test-json.js
9246 silly gunzTarPerm modified mode [ 'test/integration/test-json.js', 438, 420 ]
9247 silly gunzTarPerm extractEntry test/integration/test-octet-stream.js
9248 silly gunzTarPerm modified mode [ 'test/integration/test-octet-stream.js', 438, 420 ]
9249 silly gunzTarPerm extractEntry test/legacy/common.js
9250 silly gunzTarPerm modified mode [ 'test/legacy/common.js', 438, 420 ]
9251 silly gunzTarPerm extractEntry test/legacy/integration/test-multipart-parser.js
9252 silly gunzTarPerm modified mode [ 'test/legacy/integration/test-multipart-parser.js', 438, 420 ]
9253 silly gunzTarPerm extractEntry test/legacy/simple/test-file.js
9254 silly gunzTarPerm modified mode [ 'test/legacy/simple/test-file.js', 438, 420 ]
9255 silly gunzTarPerm extractEntry test/legacy/simple/test-incoming-form.js
9256 silly gunzTarPerm modified mode [ 'test/legacy/simple/test-incoming-form.js', 438, 420 ]
9257 silly gunzTarPerm extractEntry test/legacy/simple/test-multipart-parser.js
9258 silly gunzTarPerm modified mode [ 'test/legacy/simple/test-multipart-parser.js', 438, 420 ]
9259 silly gunzTarPerm extractEntry test/legacy/simple/test-querystring-parser.js
9260 silly gunzTarPerm modified mode [ 'test/legacy/simple/test-querystring-parser.js', 438, 420 ]
9261 silly gunzTarPerm extractEntry test/legacy/system/test-multi-video-upload.js
9262 silly gunzTarPerm modified mode [ 'test/legacy/system/test-multi-video-upload.js', 438, 420 ]
9263 silly gunzTarPerm extractEntry test/standalone/test-connection-aborted.js
9264 silly gunzTarPerm modified mode [ 'test/standalone/test-connection-aborted.js', 438, 420 ]
9265 silly gunzTarPerm extractEntry test/standalone/test-content-transfer-encoding.js
9266 silly gunzTarPerm modified mode [ 'test/standalone/test-content-transfer-encoding.js', 438, 420 ]
9267 silly gunzTarPerm extractEntry test/standalone/test-issue-46.js
9268 silly gunzTarPerm modified mode [ 'test/standalone/test-issue-46.js', 438, 420 ]
9269 silly gunzTarPerm extractEntry test/tools/base64.html
9270 silly gunzTarPerm modified mode [ 'test/tools/base64.html', 438, 420 ]
9271 silly gunzTarPerm extractEntry test/unit/test-file.js
9272 silly gunzTarPerm modified mode [ 'test/unit/test-file.js', 438, 420 ]
9273 silly gunzTarPerm extractEntry test/unit/test-incoming-form.js
9274 silly gunzTarPerm modified mode [ 'test/unit/test-incoming-form.js', 438, 420 ]
9275 silly gunzTarPerm extractEntry lib/file.js
9276 silly gunzTarPerm modified mode [ 'lib/file.js', 438, 420 ]
9277 silly gunzTarPerm extractEntry lib/incoming_form.js
9278 silly gunzTarPerm modified mode [ 'lib/incoming_form.js', 438, 420 ]
9279 silly gunzTarPerm extractEntry lib/index.js
9280 silly gunzTarPerm modified mode [ 'lib/index.js', 438, 420 ]
9281 silly gunzTarPerm extractEntry lib/json_parser.js
9282 silly gunzTarPerm modified mode [ 'lib/json_parser.js', 438, 420 ]
9283 silly gunzTarPerm extractEntry lib/multipart_parser.js
9284 silly gunzTarPerm modified mode [ 'lib/multipart_parser.js', 438, 420 ]
9285 silly gunzTarPerm extractEntry lib/octet_parser.js
9286 silly gunzTarPerm modified mode [ 'lib/octet_parser.js', 438, 420 ]
9287 silly gunzTarPerm extractEntry lib/querystring_parser.js
9288 silly gunzTarPerm modified mode [ 'lib/querystring_parser.js', 438, 420 ]
9289 silly lockFile 14b87107-dules-connect-node-modules-pause tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\pause
9290 silly lockFile 14b87107-dules-connect-node-modules-pause tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\pause
9291 silly lockFile 62038454-ct-node-modules-cookie-signature tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\cookie-signature
9292 silly lockFile 62038454-ct-node-modules-cookie-signature tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\cookie-signature
9293 silly lockFile 6ea191ff-pm-cache-pause-0-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\pause\0.0.1\package.tgz
9294 silly lockFile 6ea191ff-pm-cache-pause-0-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\pause\0.0.1\package.tgz
9295 silly lockFile 81992565-okie-signature-1-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\cookie-signature\1.0.1\package.tgz
9296 silly lockFile 81992565-okie-signature-1-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\cookie-signature\1.0.1\package.tgz
9297 silly lockFile 2ea1ef76-dules-connect-node-modules-fresh tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\fresh
9298 silly lockFile 2ea1ef76-dules-connect-node-modules-fresh tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\fresh
9299 silly lockFile 51d1c521-pm-cache-fresh-0-1-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\fresh\0.1.0\package.tgz
9300 silly lockFile 51d1c521-pm-cache-fresh-0-1-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\fresh\0.1.0\package.tgz
9301 info preinstall pause@0.0.1
9302 info preinstall cookie-signature@1.0.1
9303 silly lockFile 851f5365-dules-connect-node-modules-bytes tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\bytes
9304 silly lockFile 851f5365-dules-connect-node-modules-bytes tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\bytes
9305 verbose readDependencies using package.json deps
9306 verbose readDependencies using package.json deps
9307 silly lockFile 987dc3f5-dules-connect-node-modules-debug tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\debug
9308 silly lockFile 987dc3f5-dules-connect-node-modules-debug tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\debug
9309 silly lockFile dbfea84c-pm-cache-bytes-0-2-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\bytes\0.2.0\package.tgz
9310 silly lockFile dbfea84c-pm-cache-bytes-0-2-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\bytes\0.2.0\package.tgz
9311 info preinstall fresh@0.1.0
9312 verbose readDependencies using package.json deps
9313 silly resolved []
9314 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\pause
9315 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\pause
9316 verbose linkStuff [ false,
9316 verbose linkStuff   false,
9316 verbose linkStuff   false,
9316 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-contrib-connect\\node_modules\\connect\\node_modules' ]
9317 info linkStuff pause@0.0.1
9318 verbose linkBins pause@0.0.1
9319 verbose linkMans pause@0.0.1
9320 verbose rebuildBundles pause@0.0.1
9321 verbose readDependencies using package.json deps
9322 silly resolved []
9323 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\cookie-signature
9324 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\cookie-signature
9325 verbose linkStuff [ false,
9325 verbose linkStuff   false,
9325 verbose linkStuff   false,
9325 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-contrib-connect\\node_modules\\connect\\node_modules' ]
9326 info linkStuff cookie-signature@1.0.1
9327 verbose linkBins cookie-signature@1.0.1
9328 verbose linkMans cookie-signature@1.0.1
9329 verbose rebuildBundles cookie-signature@1.0.1
9330 silly lockFile 9cf76063-pm-cache-debug-0-7-4-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\debug\0.7.4\package.tgz
9331 silly lockFile 9cf76063-pm-cache-debug-0-7-4-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\debug\0.7.4\package.tgz
9332 info install pause@0.0.1
9333 info install cookie-signature@1.0.1
9334 verbose readDependencies using package.json deps
9335 info postinstall pause@0.0.1
9336 info postinstall cookie-signature@1.0.1
9337 verbose readDependencies using package.json deps
9338 silly resolved []
9339 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\fresh
9340 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\fresh
9341 verbose linkStuff [ false,
9341 verbose linkStuff   false,
9341 verbose linkStuff   false,
9341 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-contrib-connect\\node_modules\\connect\\node_modules' ]
9342 info linkStuff fresh@0.1.0
9343 verbose linkBins fresh@0.1.0
9344 verbose linkMans fresh@0.1.0
9345 verbose rebuildBundles fresh@0.1.0
9346 info preinstall bytes@0.2.0
9347 info install fresh@0.1.0
9348 silly lockFile 43c21820-onnect-node-modules-buffer-crc32 tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\buffer-crc32
9349 silly lockFile 43c21820-onnect-node-modules-buffer-crc32 tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\buffer-crc32
9350 info preinstall debug@0.7.4
9351 silly lockFile cdbd1c88--modules-connect-node-modules-qs tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\qs
9352 silly lockFile cdbd1c88--modules-connect-node-modules-qs tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\qs
9353 silly lockFile 5b37a7d2-e-buffer-crc32-0-2-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\buffer-crc32\0.2.1\package.tgz
9354 silly lockFile 5b37a7d2-e-buffer-crc32-0-2-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\buffer-crc32\0.2.1\package.tgz
9355 silly lockFile 789b0dd8-g-npm-cache-qs-0-6-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.6.5\package.tgz
9356 silly lockFile 789b0dd8-g-npm-cache-qs-0-6-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.6.5\package.tgz
9357 info postinstall fresh@0.1.0
9358 verbose readDependencies using package.json deps
9359 verbose readDependencies using package.json deps
9360 verbose readDependencies using package.json deps
9361 silly resolved []
9362 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\bytes
9363 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\bytes
9364 verbose linkStuff [ false,
9364 verbose linkStuff   false,
9364 verbose linkStuff   false,
9364 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-contrib-connect\\node_modules\\connect\\node_modules' ]
9365 info linkStuff bytes@0.2.0
9366 verbose linkBins bytes@0.2.0
9367 verbose linkMans bytes@0.2.0
9368 verbose rebuildBundles bytes@0.2.0
9369 verbose readDependencies using package.json deps
9370 silly resolved []
9371 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\debug
9372 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\debug
9373 verbose linkStuff [ false,
9373 verbose linkStuff   false,
9373 verbose linkStuff   false,
9373 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-contrib-connect\\node_modules\\connect\\node_modules' ]
9374 info linkStuff debug@0.7.4
9375 verbose linkBins debug@0.7.4
9376 verbose linkMans debug@0.7.4
9377 verbose rebuildBundles debug@0.7.4
9378 info install bytes@0.2.0
9379 info install debug@0.7.4
9380 info preinstall buffer-crc32@0.2.1
9381 info preinstall qs@0.6.5
9382 info postinstall bytes@0.2.0
9383 info postinstall debug@0.7.4
9384 verbose readDependencies using package.json deps
9385 verbose readDependencies using package.json deps
9386 verbose readDependencies using package.json deps
9387 silly resolved []
9388 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\buffer-crc32
9389 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\buffer-crc32
9390 verbose linkStuff [ false,
9390 verbose linkStuff   false,
9390 verbose linkStuff   false,
9390 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-contrib-connect\\node_modules\\connect\\node_modules' ]
9391 info linkStuff buffer-crc32@0.2.1
9392 verbose linkBins buffer-crc32@0.2.1
9393 verbose linkMans buffer-crc32@0.2.1
9394 verbose rebuildBundles buffer-crc32@0.2.1
9395 verbose readDependencies using package.json deps
9396 silly resolved []
9397 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\qs
9398 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\qs
9399 verbose linkStuff [ false,
9399 verbose linkStuff   false,
9399 verbose linkStuff   false,
9399 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-contrib-connect\\node_modules\\connect\\node_modules' ]
9400 info linkStuff qs@0.6.5
9401 verbose linkBins qs@0.6.5
9402 verbose linkMans qs@0.6.5
9403 verbose rebuildBundles qs@0.6.5
9404 info install buffer-crc32@0.2.1
9405 info install qs@0.6.5
9406 info postinstall buffer-crc32@0.2.1
9407 info postinstall qs@0.6.5
9408 silly lockFile d99f2dea-ules-connect-node-modules-cookie tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\cookie
9409 silly lockFile d99f2dea-ules-connect-node-modules-cookie tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\cookie
9410 silly lockFile e313b369-m-cache-cookie-0-0-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\cookie\0.0.5\package.tgz
9411 silly lockFile e313b369-m-cache-cookie-0-0-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\cookie\0.0.5\package.tgz
9412 info preinstall cookie@0.0.5
9413 verbose readDependencies using package.json deps
9414 verbose readDependencies using package.json deps
9415 silly resolved []
9416 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\cookie
9417 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\cookie
9418 verbose linkStuff [ false,
9418 verbose linkStuff   false,
9418 verbose linkStuff   false,
9418 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-contrib-connect\\node_modules\\connect\\node_modules' ]
9419 info linkStuff cookie@0.0.5
9420 verbose linkBins cookie@0.0.5
9421 verbose linkMans cookie@0.0.5
9422 verbose rebuildBundles cookie@0.0.5
9423 info install cookie@0.0.5
9424 silly lockFile a6e71260-odules-connect-node-modules-send tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\send
9425 silly lockFile a6e71260-odules-connect-node-modules-send tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\send
9426 silly lockFile b2611e08-npm-cache-send-0-1-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\send\0.1.1\package.tgz
9427 silly lockFile b2611e08-npm-cache-send-0-1-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\send\0.1.1\package.tgz
9428 info postinstall cookie@0.0.5
9429 info preinstall send@0.1.1
9430 verbose readDependencies using package.json deps
9431 verbose readDependencies using package.json deps
9432 verbose cache add [ 'mime@~1.2.9', null ]
9433 verbose cache add name=undefined spec="mime@~1.2.9" args=["mime@~1.2.9",null]
9434 verbose parsed url { protocol: null,
9434 verbose parsed url   slashes: null,
9434 verbose parsed url   auth: null,
9434 verbose parsed url   host: null,
9434 verbose parsed url   port: null,
9434 verbose parsed url   hostname: null,
9434 verbose parsed url   hash: null,
9434 verbose parsed url   search: null,
9434 verbose parsed url   query: null,
9434 verbose parsed url   pathname: 'mime@~1.2.9',
9434 verbose parsed url   path: 'mime@~1.2.9',
9434 verbose parsed url   href: 'mime@~1.2.9' }
9435 verbose cache add name="mime" spec="~1.2.9" args=["mime","~1.2.9"]
9436 verbose parsed url { protocol: null,
9436 verbose parsed url   slashes: null,
9436 verbose parsed url   auth: null,
9436 verbose parsed url   host: null,
9436 verbose parsed url   port: null,
9436 verbose parsed url   hostname: null,
9436 verbose parsed url   hash: null,
9436 verbose parsed url   search: null,
9436 verbose parsed url   query: null,
9436 verbose parsed url   pathname: '~1.2.9',
9436 verbose parsed url   path: '~1.2.9',
9436 verbose parsed url   href: '~1.2.9' }
9437 verbose addNamed [ 'mime', '~1.2.9' ]
9438 verbose addNamed [ null, '>=1.2.9-0 <1.3.0-0' ]
9439 silly lockFile ccf24a67-mime-1-2-9 mime@~1.2.9
9440 verbose lock mime@~1.2.9 C:\Users\Gaston\AppData\Roaming\npm-cache\ccf24a67-mime-1-2-9.lock
9441 verbose cache add [ 'range-parser@0.0.4', null ]
9442 verbose cache add name=undefined spec="range-parser@0.0.4" args=["range-parser@0.0.4",null]
9443 verbose parsed url { protocol: null,
9443 verbose parsed url   slashes: null,
9443 verbose parsed url   auth: null,
9443 verbose parsed url   host: null,
9443 verbose parsed url   port: null,
9443 verbose parsed url   hostname: null,
9443 verbose parsed url   hash: null,
9443 verbose parsed url   search: null,
9443 verbose parsed url   query: null,
9443 verbose parsed url   pathname: 'range-parser@0.0.4',
9443 verbose parsed url   path: 'range-parser@0.0.4',
9443 verbose parsed url   href: 'range-parser@0.0.4' }
9444 verbose cache add name="range-parser" spec="0.0.4" args=["range-parser","0.0.4"]
9445 verbose parsed url { protocol: null,
9445 verbose parsed url   slashes: null,
9445 verbose parsed url   auth: null,
9445 verbose parsed url   host: null,
9445 verbose parsed url   port: null,
9445 verbose parsed url   hostname: null,
9445 verbose parsed url   hash: null,
9445 verbose parsed url   search: null,
9445 verbose parsed url   query: null,
9445 verbose parsed url   pathname: '0.0.4',
9445 verbose parsed url   path: '0.0.4',
9445 verbose parsed url   href: '0.0.4' }
9446 verbose addNamed [ 'range-parser', '0.0.4' ]
9447 verbose addNamed [ '0.0.4', '0.0.4' ]
9448 silly lockFile 0760c556-range-parser-0-0-4 range-parser@0.0.4
9449 verbose lock range-parser@0.0.4 C:\Users\Gaston\AppData\Roaming\npm-cache\0760c556-range-parser-0-0-4.lock
9450 silly addNameRange { name: 'mime', range: '>=1.2.9-0 <1.3.0-0', hasData: false }
9451 verbose url raw mime
9452 verbose url resolving [ 'https://registry.npmjs.org/', './mime' ]
9453 verbose url resolved https://registry.npmjs.org/mime
9454 info trying registry request attempt 1 at 16:39:50
9455 http GET https://registry.npmjs.org/mime
9456 verbose url raw range-parser/0.0.4
9457 verbose url resolving [ 'https://registry.npmjs.org/', './range-parser/0.0.4' ]
9458 verbose url resolved https://registry.npmjs.org/range-parser/0.0.4
9459 info trying registry request attempt 1 at 16:39:50
9460 http GET https://registry.npmjs.org/range-parser/0.0.4
9461 silly lockFile edacab1d--connect-node-modules-formidable tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\formidable
9462 silly lockFile edacab1d--connect-node-modules-formidable tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\formidable
9463 silly lockFile 7227e295-he-formidable-1-0-14-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\formidable\1.0.14\package.tgz
9464 silly lockFile 7227e295-he-formidable-1-0-14-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\formidable\1.0.14\package.tgz
9465 info preinstall formidable@1.0.14
9466 verbose readDependencies using package.json deps
9467 verbose readDependencies using package.json deps
9468 silly resolved []
9469 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\formidable
9470 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\formidable
9471 verbose linkStuff [ false,
9471 verbose linkStuff   false,
9471 verbose linkStuff   false,
9471 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-contrib-connect\\node_modules\\connect\\node_modules' ]
9472 info linkStuff formidable@1.0.14
9473 verbose linkBins formidable@1.0.14
9474 verbose linkMans formidable@1.0.14
9475 verbose rebuildBundles formidable@1.0.14
9476 info install formidable@1.0.14
9477 info postinstall formidable@1.0.14
9478 http 200 https://registry.npmjs.org/has-color
9479 silly registry.get cb [ 200,
9479 silly registry.get   { date: 'Fri, 03 Jan 2014 19:38:49 GMT',
9479 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
9479 silly registry.get     etag: '"E00VUQTPJF0SVT08NXQ20MQ7G"',
9479 silly registry.get     'content-type': 'application/json',
9479 silly registry.get     'content-length': '7000',
9479 silly registry.get     'accept-ranges': 'bytes',
9479 silly registry.get     via: '1.1 varnish',
9479 silly registry.get     age: '13115',
9479 silly registry.get     'x-served-by': 'cache-d46-DAL',
9479 silly registry.get     'x-cache': 'HIT',
9479 silly registry.get     'x-cache-hits': '1',
9479 silly registry.get     'x-timer': 'S1388777929.355944872,VS0,VE10',
9479 silly registry.get     vary: 'Accept',
9479 silly registry.get     'keep-alive': 'timeout=10, max=34',
9479 silly registry.get     connection: 'Keep-Alive' } ]
9480 silly addNameRange number 2 { name: 'has-color', range: '>=0.1.0-0 <0.2.0-0', hasData: true }
9481 silly addNameRange versions [ 'has-color', [ '0.1.0', '0.1.1', '0.1.2' ] ]
9482 verbose addNamed [ 'has-color', '0.1.2' ]
9483 verbose addNamed [ '0.1.2', '0.1.2' ]
9484 silly lockFile cddba125-has-color-0-1-2 has-color@0.1.2
9485 verbose lock has-color@0.1.2 C:\Users\Gaston\AppData\Roaming\npm-cache\cddba125-has-color-0-1-2.lock
9486 silly lockFile f8b87c9f-rg-has-color-has-color-0-1-2-tgz https://registry.npmjs.org/has-color/-/has-color-0.1.2.tgz
9487 verbose lock https://registry.npmjs.org/has-color/-/has-color-0.1.2.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\f8b87c9f-rg-has-color-has-color-0-1-2-tgz.lock
9488 verbose addRemoteTarball [ 'https://registry.npmjs.org/has-color/-/has-color-0.1.2.tgz',
9488 verbose addRemoteTarball   'c4a523038912451262c745e0a663c38d948098b4' ]
9489 info retry fetch attempt 1 at 16:39:51
9490 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777991716-0.1767532981466502\tmp.tgz
9491 http GET https://registry.npmjs.org/has-color/-/has-color-0.1.2.tgz
9492 http 200 https://registry.npmjs.org/tiny-lr/-/tiny-lr-0.0.4.tgz
9493 http 200 https://registry.npmjs.org/ansi-styles
9494 silly registry.get cb [ 200,
9494 silly registry.get   { date: 'Fri, 03 Jan 2014 19:38:52 GMT',
9494 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
9494 silly registry.get     etag: '"12DN9D3DRSMFN87HEKUZNDQ71"',
9494 silly registry.get     'content-type': 'application/json',
9494 silly registry.get     'content-length': '14230',
9494 silly registry.get     'accept-ranges': 'bytes',
9494 silly registry.get     via: '1.1 varnish',
9494 silly registry.get     age: '77122',
9494 silly registry.get     'x-served-by': 'cache-d46-DAL',
9494 silly registry.get     'x-cache': 'HIT',
9494 silly registry.get     'x-cache-hits': '1',
9494 silly registry.get     'x-timer': 'S1388777932.672630787,VS0,VE10',
9494 silly registry.get     vary: 'Accept',
9494 silly registry.get     'keep-alive': 'timeout=10, max=33',
9494 silly registry.get     connection: 'Keep-Alive' } ]
9495 silly addNameRange number 2 { name: 'ansi-styles',
9495 silly addNameRange   range: '>=1.0.0-0 <1.1.0-0',
9495 silly addNameRange   hasData: true }
9496 silly addNameRange versions [ 'ansi-styles',
9496 silly addNameRange   [ '0.1.0', '0.1.1', '0.1.2', '0.2.0', '1.0.0' ] ]
9497 verbose addNamed [ 'ansi-styles', '1.0.0' ]
9498 verbose addNamed [ '1.0.0', '1.0.0' ]
9499 silly lockFile 92057bb9-ansi-styles-1-0-0 ansi-styles@1.0.0
9500 verbose lock ansi-styles@1.0.0 C:\Users\Gaston\AppData\Roaming\npm-cache\92057bb9-ansi-styles-1-0-0.lock
9501 silly lockFile c87c7033-nsi-styles-ansi-styles-1-0-0-tgz https://registry.npmjs.org/ansi-styles/-/ansi-styles-1.0.0.tgz
9502 verbose lock https://registry.npmjs.org/ansi-styles/-/ansi-styles-1.0.0.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\c87c7033-nsi-styles-ansi-styles-1-0-0-tgz.lock
9503 verbose addRemoteTarball [ 'https://registry.npmjs.org/ansi-styles/-/ansi-styles-1.0.0.tgz',
9503 verbose addRemoteTarball   'cb102df1c56f5123eab8b67cd7b98027a0279178' ]
9504 info retry fetch attempt 1 at 16:39:53
9505 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777993151-0.47679307870566845\tmp.tgz
9506 http GET https://registry.npmjs.org/ansi-styles/-/ansi-styles-1.0.0.tgz
9507 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777988426-0.7334345413837582\tmp.tgz
9508 silly lockFile c9bd9886-88426-0-7334345413837582-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777988426-0.7334345413837582\package
9509 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777988426-0.7334345413837582\package C:\Users\Gaston\AppData\Roaming\npm-cache\c9bd9886-88426-0-7334345413837582-package.lock
9510 silly lockFile 9b42f0ed-88426-0-7334345413837582-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777988426-0.7334345413837582\tmp.tgz
9511 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777988426-0.7334345413837582\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\9b42f0ed-88426-0-7334345413837582-tmp-tgz.lock
9512 silly gunzTarPerm modes [ '755', '644' ]
9513 silly gunzTarPerm extractEntry package.json
9514 silly gunzTarPerm extractEntry .npmignore
9515 silly gunzTarPerm extractEntry .travis.yml
9516 silly gunzTarPerm extractEntry bin/tiny-lr
9517 silly gunzTarPerm extractEntry bin/update-livereload
9518 silly gunzTarPerm extractEntry lib/client.js
9519 silly gunzTarPerm extractEntry lib/index.js
9520 silly gunzTarPerm extractEntry lib/server.js
9521 silly gunzTarPerm extractEntry lib/public/livereload.js
9522 silly gunzTarPerm extractEntry readme.md
9523 silly gunzTarPerm extractEntry tasks/tiny-lr.js
9524 silly gunzTarPerm extractEntry tasks/tiny-lr.mk
9525 silly gunzTarPerm extractEntry test/client.js
9526 silly gunzTarPerm extractEntry test/middleware.js
9527 silly gunzTarPerm extractEntry test/server.js
9528 silly lockFile c9bd9886-88426-0-7334345413837582-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777988426-0.7334345413837582\package
9529 silly lockFile c9bd9886-88426-0-7334345413837582-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777988426-0.7334345413837582\package
9530 silly lockFile 9b42f0ed-88426-0-7334345413837582-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777988426-0.7334345413837582\tmp.tgz
9531 silly lockFile 9b42f0ed-88426-0-7334345413837582-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777988426-0.7334345413837582\tmp.tgz
9532 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\tiny-lr\\0.0.4\\package.tgz',
9532 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388777988426-0.7334345413837582\\package' ]
9533 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\tiny-lr\0.0.4\package.tgz
9534 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777988426-0.7334345413837582\package
9535 silly lockFile c9bd9886-88426-0-7334345413837582-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777988426-0.7334345413837582\package
9536 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777988426-0.7334345413837582\package C:\Users\Gaston\AppData\Roaming\npm-cache\c9bd9886-88426-0-7334345413837582-package.lock
9537 silly lockFile d1dad579--cache-tiny-lr-0-0-4-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\tiny-lr\0.0.4\package.tgz
9538 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\tiny-lr\0.0.4\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\d1dad579--cache-tiny-lr-0-0-4-package-tgz.lock
9539 silly lockFile c9bd9886-88426-0-7334345413837582-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777988426-0.7334345413837582\package
9540 silly lockFile c9bd9886-88426-0-7334345413837582-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777988426-0.7334345413837582\package
9541 silly lockFile d1dad579--cache-tiny-lr-0-0-4-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\tiny-lr\0.0.4\package.tgz
9542 silly lockFile d1dad579--cache-tiny-lr-0-0-4-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\tiny-lr\0.0.4\package.tgz
9543 silly lockFile eb309300--npm-cache-tiny-lr-0-0-4-package C:\Users\Gaston\AppData\Roaming\npm-cache\tiny-lr\0.0.4\package
9544 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\tiny-lr\0.0.4\package C:\Users\Gaston\AppData\Roaming\npm-cache\eb309300--npm-cache-tiny-lr-0-0-4-package.lock
9545 silly lockFile eb309300--npm-cache-tiny-lr-0-0-4-package C:\Users\Gaston\AppData\Roaming\npm-cache\tiny-lr\0.0.4\package
9546 silly lockFile eb309300--npm-cache-tiny-lr-0-0-4-package C:\Users\Gaston\AppData\Roaming\npm-cache\tiny-lr\0.0.4\package
9547 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\tiny-lr\0.0.4\package.tgz
9548 silly lockFile 6beac1fd--npm-cache-tiny-lr-0-0-4-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\tiny-lr\0.0.4\package
9549 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\tiny-lr\0.0.4\package C:\Users\Gaston\AppData\Roaming\npm-cache\6beac1fd--npm-cache-tiny-lr-0-0-4-package.lock
9550 silly lockFile d1dad579--cache-tiny-lr-0-0-4-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\tiny-lr\0.0.4\package.tgz
9551 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\tiny-lr\0.0.4\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\d1dad579--cache-tiny-lr-0-0-4-package-tgz.lock
9552 silly gunzTarPerm modes [ '755', '644' ]
9553 silly gunzTarPerm extractEntry package.json
9554 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
9555 silly gunzTarPerm extractEntry .npmignore
9556 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
9557 silly gunzTarPerm extractEntry .travis.yml
9558 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]
9559 silly gunzTarPerm extractEntry bin/tiny-lr
9560 silly gunzTarPerm modified mode [ 'bin/tiny-lr', 438, 420 ]
9561 silly gunzTarPerm extractEntry bin/update-livereload
9562 silly gunzTarPerm modified mode [ 'bin/update-livereload', 438, 420 ]
9563 silly gunzTarPerm extractEntry lib/client.js
9564 silly gunzTarPerm modified mode [ 'lib/client.js', 438, 420 ]
9565 silly gunzTarPerm extractEntry lib/index.js
9566 silly gunzTarPerm modified mode [ 'lib/index.js', 438, 420 ]
9567 silly gunzTarPerm extractEntry lib/server.js
9568 silly gunzTarPerm modified mode [ 'lib/server.js', 438, 420 ]
9569 silly gunzTarPerm extractEntry lib/public/livereload.js
9570 silly gunzTarPerm modified mode [ 'lib/public/livereload.js', 438, 420 ]
9571 silly gunzTarPerm extractEntry readme.md
9572 silly gunzTarPerm modified mode [ 'readme.md', 438, 420 ]
9573 silly gunzTarPerm extractEntry tasks/tiny-lr.js
9574 silly gunzTarPerm modified mode [ 'tasks/tiny-lr.js', 438, 420 ]
9575 silly gunzTarPerm extractEntry tasks/tiny-lr.mk
9576 silly gunzTarPerm modified mode [ 'tasks/tiny-lr.mk', 438, 420 ]
9577 silly gunzTarPerm extractEntry test/client.js
9578 silly gunzTarPerm modified mode [ 'test/client.js', 438, 420 ]
9579 silly gunzTarPerm extractEntry test/middleware.js
9580 silly gunzTarPerm modified mode [ 'test/middleware.js', 438, 420 ]
9581 silly gunzTarPerm extractEntry test/server.js
9582 silly gunzTarPerm modified mode [ 'test/server.js', 438, 420 ]
9583 silly lockFile 6beac1fd--npm-cache-tiny-lr-0-0-4-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\tiny-lr\0.0.4\package
9584 silly lockFile 6beac1fd--npm-cache-tiny-lr-0-0-4-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\tiny-lr\0.0.4\package
9585 silly lockFile d1dad579--cache-tiny-lr-0-0-4-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\tiny-lr\0.0.4\package.tgz
9586 silly lockFile d1dad579--cache-tiny-lr-0-0-4-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\tiny-lr\0.0.4\package.tgz
9587 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\tiny-lr\0.0.4\package.tgz 644
9588 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\tiny-lr\0.0.4\package.tgz
9589 silly lockFile 65e00cd9-js-org-tiny-lr-tiny-lr-0-0-4-tgz https://registry.npmjs.org/tiny-lr/-/tiny-lr-0.0.4.tgz
9590 silly lockFile 65e00cd9-js-org-tiny-lr-tiny-lr-0-0-4-tgz https://registry.npmjs.org/tiny-lr/-/tiny-lr-0.0.4.tgz
9591 silly lockFile e531f95d-tiny-lr-0-0-4 tiny-lr@0.0.4
9592 silly lockFile e531f95d-tiny-lr-0-0-4 tiny-lr@0.0.4
9593 silly resolved [ { name: 'gaze',
9593 silly resolved     description: 'A globbing fs.watch wrapper built from the best parts of other fine watch libs.',
9593 silly resolved     version: '0.4.3',
9593 silly resolved     homepage: 'https://github.com/shama/gaze',
9593 silly resolved     author: { name: 'Kyle Robinson Young', email: 'kyle@dontkry.com' },
9593 silly resolved     repository: { type: 'git', url: 'git://github.com/shama/gaze.git' },
9593 silly resolved     bugs: { url: 'https://github.com/shama/gaze/issues' },
9593 silly resolved     licenses: [ [Object] ],
9593 silly resolved     main: 'lib/gaze',
9593 silly resolved     engines: { node: '>= 0.8.0' },
9593 silly resolved     scripts: { test: 'grunt nodeunit -v' },
9593 silly resolved     dependencies: { globule: '~0.1.0' },
9593 silly resolved     devDependencies:
9593 silly resolved      { grunt: '~0.4.1',
9593 silly resolved        'grunt-contrib-nodeunit': '~0.2.0',
9593 silly resolved        'grunt-contrib-jshint': '~0.6.0',
9593 silly resolved        'grunt-benchmark': '~0.2.0' },
9593 silly resolved     keywords: [ 'watch', 'glob' ],
9593 silly resolved     contributors:
9593 silly resolved      [ [Object],
9593 silly resolved        [Object],
9593 silly resolved        [Object],
9593 silly resolved        [Object],
9593 silly resolved        [Object],
9593 silly resolved        [Object],
9593 silly resolved        [Object],
9593 silly resolved        [Object],
9593 silly resolved        [Object],
9593 silly resolved        [Object] ],
9593 silly resolved     readme: '# gaze [![Build Status](https://secure.travis-ci.org/shama/gaze.png?branch=master)](http://travis-ci.org/shama/gaze)\n\nA globbing fs.watch wrapper built from the best parts of other fine watch libs.  \nCompatible with Node.js 0.10/0.8, Windows, OSX and Linux.\n\n![gaze](http://dontkry.com/images/repos/gaze.png)\n\n## Usage\nInstall the module with: `npm install gaze` or place into your `package.json`\nand run `npm install`.\n\n```javascript\nvar gaze = require(\'gaze\');\n\n// Watch all .js files/dirs in process.cwd()\ngaze(\'**/*.js\', function(err, watcher) {\n  // Files have all started watching\n  // watcher === this\n\n  // Get all watched files\n  console.log(this.watched());\n\n  // On file changed\n  this.on(\'changed\', function(filepath) {\n    console.log(filepath + \' was changed\');\n  });\n\n  // On file added\n  this.on(\'added\', function(filepath) {\n    console.log(filepath + \' was added\');\n  });\n\n  // On file deleted\n  this.on(\'deleted\', function(filepath) {\n    console.log(filepath + \' was deleted\');\n  });\n\n  // On changed/added/deleted\n  this.on(\'all\', function(event, filepath) {\n    console.log(filepath + \' was \' + event);\n  });\n\n  // Get watched files with relative paths\n  console.log(this.relative());\n});\n\n// Also accepts an array of patterns\ngaze([\'stylesheets/*.css\', \'images/**/*.png\'], function() {\n  // Add more patterns later to be watched\n  this.add([\'js/*.js\']);\n});\n```\n\n### Alternate Interface\n\n```javascript\nvar Gaze = require(\'gaze\').Gaze;\n\nvar gaze = new Gaze(\'**/*\');\n\n// Files have all started watching\ngaze.on(\'ready\', function(watcher) { });\n\n// A file has been added/changed/deleted has occurred\ngaze.on(\'all\', function(event, filepath) { });\n```\n\n### Errors\n\n```javascript\ngaze(\'**/*\', function() {\n  this.on(\'error\', function(err) {\n    // Handle error here\n  });\n});\n```\n\n### Minimatch / Glob\n\nSee [isaacs\'s minimatch](https://github.com/isaacs/minimatch) for more\ninformation on glob patterns.\n\n## Documentation\n\n### gaze(patterns, [options], callback)\n\n* `patterns` {String|Array} File patterns to be matched\n* `options` {Object}\n* `callback` {Function}\n  * `err` {Error | null}\n  * `watcher` {Object} Instance of the Gaze watcher\n\n### Class: gaze.Gaze\n\nCreate a Gaze object by instanting the `gaze.Gaze` class.\n\n```javascript\nvar Gaze = require(\'gaze\').Gaze;\nvar gaze = new Gaze(pattern, options, callback);\n```\n\n#### Properties\n\n* `options` The options object passed in.\n  * `interval` {integer} Interval to pass to fs.watchFile\n  * `debounceDelay` {integer} Delay for events called in succession for the same\n    file/event\n\n#### Events\n\n* `ready(watcher)` When files have been globbed and watching has begun.\n* `all(event, filepath)` When an `added`, `changed` or `deleted` event occurs.\n* `added(filepath)` When a file has been added to a watch directory.\n* `changed(filepath)` When a file has been changed.\n* `deleted(filepath)` When a file has been deleted.\n* `renamed(newPath, oldPath)` When a file has been renamed.\n* `end()` When the watcher is closed and watches have been removed.\n* `error(err)` When an error occurs.\n\n#### Methods\n\n* `emit(event, [...])` Wrapper for the EventEmitter.emit.\n  `added`|`changed`|`deleted` events will also trigger the `all` event.\n* `close()` Unwatch all files and reset the watch instance.\n* `add(patterns, callback)` Adds file(s) patterns to be watched.\n* `remove(filepath)` removes a file or directory from being watched. Does not\n  recurse directories.\n* `watched()` Returns the currently watched files.\n* `relative([dir, unixify])` Returns the currently watched files with relative paths.\n  * `dir` {string} Only return relative files for this directory.\n  * `unixify` {boolean} Return paths with `/` instead of `\\\\` if on Windows.\n\n## FAQs\n\n### Why Another `fs.watch` Wrapper?\nI liked parts of other `fs.watch` wrappers but none had all the features I\nneeded. This lib combines the features I needed from other fine watch libs:\nSpeedy data behavior from\n[paulmillr\'s chokidar](https://github.com/paulmillr/chokidar), API interface\nfrom [mikeal\'s watch](https://github.com/mikeal/watch) and file globbing using\n[isaacs\'s glob](https://github.com/isaacs/node-glob) which is also used by\n[cowboy\'s Grunt](https://github.com/gruntjs/grunt).\n\n### How do I fix the error `EMFILE: Too many opened files.`?\nThis is because of your system\'s max opened file limit. For OSX the default is\nvery low (256). Increase your limit temporarily with `ulimit -n 10480`, the\nnumber being the new max limit.\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style.\nAdd unit tests for any new or changed functionality. Lint and test your code\nusing [grunt](http://gruntjs.com/).\n\n## Release History\n* 0.4.3 - Track file additions in newly created folders (@brett-shwom).\n* 0.4.2 - Fix .remove() method to remove a single file in a directory (@kaelzhang). Fixing Cannot call method \'call\' of undefined (@krasimir). Track new file additions within folders (@brett-shwom).\n* 0.4.1 - Fix watchDir not respecting close in race condition (@chrisirhc).\n* 0.4.0 - Drop support for node v0.6. Use globule for file matching. Avoid node v0.10 path.resolve/join errors. Register new files when added to non-existent folder. Multiple instances can now poll the same files (@jpommerening).\n* 0.3.4 - Code clean up. Fix path must be strings errors (@groner). Fix incorrect added events (@groner).\n* 0.3.3 - Fix for multiple patterns with negate.\n* 0.3.2 - Emit `end` before removeAllListeners.\n* 0.3.1 - Fix added events within subfolder patterns.\n* 0.3.0 - Handle safewrite events, `forceWatchMethod` option removed, bug fixes and watch optimizations (@rgaskill).\n* 0.2.2 - Fix issue where subsequent add calls dont get watched (@samcday). removeAllListeners on close.\n* 0.2.1 - Fix issue with invalid `added` events in current working dir.\n* 0.2.0 - Support and mark folders with `path.sep`. Add `forceWatchMethod` option. Support `renamed` events.\n* 0.1.6 - Recognize the `cwd` option properly\n* 0.1.5 - Catch too many open file errors\n* 0.1.4 - Really fix the race condition with 2 watches\n* 0.1.3 - Fix race condition with 2 watches\n* 0.1.2 - Read triggering changed event fix\n* 0.1.1 - Minor fixes\n* 0.1.0 - Initial release\n\n## License\nCopyright (c) 2013 Kyle Robinson Young  \nLicensed under the MIT license.\n',
9593 silly resolved     readmeFilename: 'README.md',
9593 silly resolved     _id: 'gaze@0.4.3',
9593 silly resolved     dist: { shasum: '8c6fc6a909bd464cb8416b156c181e3732ebbf07' },
9593 silly resolved     _from: 'gaze@~0.4.0',
9593 silly resolved     _resolved: 'https://registry.npmjs.org/gaze/-/gaze-0.4.3.tgz' },
9593 silly resolved   { author: { name: 'mklabs' },
9593 silly resolved     name: 'tiny-lr',
9593 silly resolved     description: 'Tiny LiveReload server, background-friendly',
9593 silly resolved     version: '0.0.4',
9593 silly resolved     homepage: 'https://github.com/mklabs/tiny-lr',
9593 silly resolved     repository: { url: 'git://github.com/mklabs/tiny-lr.git' },
9593 silly resolved     bin: { 'tiny-lr': './bin/tiny-lr' },
9593 silly resolved     main: './lib',
9593 silly resolved     scripts:
9593 silly resolved      { 'prepublish:': 'npm test',
9593 silly resolved        test: 'mocha --reporter list',
9593 silly resolved        'test-debug': 'DEBUG=tinylr:* mocha --reporter list',
9593 silly resolved        'test-debug-all': 'DEBUG=* mocha --reporter list' },
9593 silly resolved     dependencies:
9593 silly resolved      { qs: '~0.5.2',
9593 silly resolved        'faye-websocket': '~0.4.3',
9593 silly resolved        noptify: 'latest',
9593 silly resolved        debug: '~0.7.0' },
9593 silly resolved     devDependencies:
9593 silly resolved      { mocha: '~1.7.1',
9593 silly resolved        request: '~2.12.0',
9593 silly resolved        supertest: '~0.4.2',
9593 silly resolved        express: '~3.0.6',
9593 silly resolved        connect: '~2.7.2' },
9593 silly resolved     config: { test_port: '9001' },
9593 silly resolved     readme: 'tiny-lr\n-------\n\nThis script manages a tiny [LiveReload](http://livereload.com/) server\nimplementation you can spawn in the background.\n\nIt exposes:\n\n- a background-friendly bin wrapper (thanks to\n  [@FGRibreau](https://github.com/FGRibreau) [pid.js\n  gist](https://gist.github.com/1846952))\n\n- [Grunt tasks](https://github.com/mklabs/tiny-lr#using-grunt) to start the server and trigger reload notification. Every task\n  name is prefixed by `tinylr-`.\n\n- [Generic targets](https://github.com/mklabs/tiny-lr#using-make) to include in\n  your Makefile (`include node_modules/tiny-lr/tasks/tiny-lr.mk`)\n\nIt doesn\'t have any watch ability, it must be done at the build process or\napplication level.\n\nInstead, it exposes a very simple API to notify the server that some\nchanges have been made, that is then broadcasted to every livereload client\nconnected.\n\n    # notify a single change\n    curl http://localhost:35729/changed?files=style.css\n\n    # notify using a longer path\n    curl http://localhost:35729/changed?files=js/app.js\n\n    # notify multiple changes, comma or space delimited\n    curl http://localhost:35729/changed?files=index.html,style.css,docs/docco.css\n\nOr you can bulk the information into a POST request, with body as a JSON array of files.\n\n    curl -X POST http://localhost:35729/changed -d \'{ "files": ["style.css", "app.js"] }\'\n\nAs for the livereload client, you need to install the browser extension:\nhttp://feedback.livereload.com/knowledgebase/articles/86242-how-do-i-install-and-use-the-browser-extensions-\n(**note**: you need to listen on port 35729 to be able to use with your\nbrower extension)\n\nor add the livereload script tag manually:\nhttp://feedback.livereload.com/knowledgebase/articles/86180-how-do-i-add-the-script-tag-manually-\n(and here you can choose whatever port you want)\n\n## Integration\n\nThis package exposes a `bin` you can decide to install globally, but it\'s not recommended.\n\n    tiny-lr --help\n\n    Usage: tiny-lr [options]\n\n    Options:\n      -h, --help        - Show help usage\n      -v, --version     - Show package version\n      -p, --port        - Port to listen on (default: 35729)\n      --pid             - Path to the generated PID file (default: ./tiny-lr.pid)\n\n\nThe best way to integrate the runner in your workflow is to add it as a `reload`\nstep within your build tool. This build tool can then use the internal binary\nlinked by npm in `node_modules/.bin/tiny-lr` to not rely on global installs (or\nuse the server programmtically).\n\nYou can start the server using the binary provided, or use your own start script.\n\n```js\nvar tinylr = require(\'tiny-lr\');\n\n// standard LiveReload port\nvar port = 35729;\n\n// tinylr(opts) => new tinylr.Server(opts);\ntinylr().listen(port, function() {\n  if(err) {\n    // deal with err\n    return;\n  }\n\n  console.log(\'... Listening on %s (pid: %s) ...\', port);\n})\n```\n\nYou can define your own route and listen for specific request:\n\n```js\nvar server = tinylr();\n\nserver.on(\'GET /myplace\', function(req, res) {\n  res.write(\'Mine\');\n  res.end();\n})\n```\n\nAnd stop the server manually:\n\n```js\nserver.close();\n```\n\nThis will close any websocket connection established and emit a close event.\n\n### Middleware\n\nTo use as a connect / express middleware, tiny-lr needs query /\nbodyParse middlewares prior in the stack.\n\nAny handled requests ends at the tinylr level, not found and errors are\nnexted to the rest of the stack.\n\n```js\n// This binds both express app and tinylr on the same port\nvar app = express();\napp.use(express.query())\n  .use(express.bodyParser())\n  .use(tinylr.middleware({ app: app }))\n  .use(express.static(path.resolve(\'./\')))\n  .use(express.directory(path.resolve(\'./\')))\n  .listen(35729, function() {\n    console.log(\'Listening on %d\', 35729);\n  })\n```\n\nThe port you listen on is important, and tinylr should **always** listen on\nthe LiveReload standard one: `35729`. Otherwise, you won\'t be able to rely\non the browser extensions, though you can still use the manual snippet\napproach.\n\nYou can also start two different servers, one on your app port, the\nother listening on the LiveReload port. Check the\n`examples/express/server.js` file to see how.\n\n### Using grunt\n\nThis package exposes a `tasks/` directory, that you can use within your Gruntfile with:\n\n```js\ngrunt.loadNpmTasks(\'tiny-lr\');\n```\n\n- tinylr-start    - Starts a new tiny-lr Server, with the provided port.\n- tinylr-reload   - Sends a reload notification to the previously started server.\n\n`tinylr-start` should be used with the `watch` task, probably with an alias\nthat triggers both `tinylr-start watch` tasks.\n\n`tinylr-reload` should be configured as a "watch" task in your Gruntfile.\n\n```js\ngrunt.initConfig({\n  watch: {\n    reload: {\n      files: [\'**/*.html\', \'**/*.js\', \'**/*.css\', \'**/*.{png,jpg}\'],\n      tasks: \'tinylr-reload\'\n    }\n  }\n});\n\ngrunt.registerTask(\'reload\', \'tinylr-start watch\');\n```\n\n\n### Using make\n\nSee `tasks/tiny-lr.mk`.\n\nInclude this file into your project Makefile to bring in the following targets:\n\n- start \t\t\t\t\t\t- Start the LiveReload server\n- stop \t\t\t\t\t\t\t- Stops the LiveReload server\n- livereload \t\t\t\t- alias to start\n- livereload-stop \t- aias to stop\n\nThen define your "empty" targets, and the list of files you want to monitor.\n\n```make\nCSS_DIR = app/styles\nCSS_FILES = $(shell find $(CSS_DIR) -name \'*.css\')\n\n# include the livereload targets\ninclude node_modules/tiny-lr/tasks/*.mk\n\n$(CSS_DIR): $(CSS_FILES)\n  @echo CSS files changed: $?\n    @touch $@\n  curl -X POST http://localhost:35729/changed -d \'{ "files": "$?" }\'\n\nreload-css: livereload $(CSS_DIR)\n\n.PHONY: reload-css\n```\n\nThe pattern is always the same:\n\n- define a target for your root directory that triggers a POST request\n- `touch` the directory to update its mtime\n- add reload target with `livereload` and the list of files to "watch" as\n  prerequisites\n\nYou can chain multiple "reload" targets in a single one:\n\n```make\nreload: reload-js reload-css reload-img reload-EVERYTHING\n```\n\nCombine this with [visionmedia/watch](https://github.com/visionmedia/watch) and\nyou have a livereload environment.\n\n    watch make reload\n\n    # add a -q flag to the watch command to suppress most of the annoying output\n    watch -q reload\n\nThe `-q` flag only outputs STDERR, you can in your Makefile redirect the\noutput of your commands to `>&2` to see them in `watch -q` mode.\n\n\n## Tests\n\n    npm test\n\n---\n\n\n# TOC\n   - [tiny-lr](#tiny-lr)\n     - [GET /](#tiny-lr-get-)\n     - [GET /changed](#tiny-lr-get-changed)\n     - [POST /changed](#tiny-lr-post-changed)\n     - [GET /livereload.js](#tiny-lr-get-livereloadjs)\n     - [GET /kill](#tiny-lr-get-kill)\n<a name="" />\n\n<a name="tiny-lr" />\n# tiny-lr\naccepts ws clients.\n\n```js\nvar url = parse(this.request.url);\nvar server = this.app;\n\nvar ws = this.ws = new WebSocket(\'ws://\' + url.host + \'/livereload\');\n\nws.onopen = function(event) {\n  var hello = {\n    command: \'hello\',\n    protocols: [\'http://livereload.com/protocols/official-7\']\n  };\n\n  ws.send(JSON.stringify(hello));\n};\n\nws.onmessage = function(event) {\n  assert.deepEqual(event.data, JSON.stringify({\n    command: \'hello\',\n    protocols: [\'http://livereload.com/protocols/official-7\'],\n    serverName: \'tiny-lr\'\n  }));\n\n  assert.ok(Object.keys(server.clients).length);\n  done();\n};\n```\n\nproperly cleans up established connection on exit.\n\n```js\nvar ws = this.ws;\n\nws.onclose = done.bind(null, null);\n\nrequest(this.server)\n  .get(\'/kill\')\n  .expect(200, function() {\n    console.log(\'server shutdown\');\n  });\n```\n\n<a name="tiny-lr" />\n# tiny-lr\n<a name="tiny-lr-get-" />\n## GET /\nrespond with nothing, but respond.\n\n```js\nrequest(this.server)\n  .get(\'/\')\n  .expect(\'Content-Type\', /json/)\n  .expect(\'{"tinylr":"Welcome","version":"0.0.1"}\')\n  .expect(200, done);\n```\n\nunknown route respond with proper 404 and error message.\n\n```js\nrequest(this.server)\n  .get(\'/whatev\')\n  .expect(\'Content-Type\', /json/)\n  .expect(\'{"error":"not_found","reason":"no such route"}\')\n  .expect(404, done);\n```\n\n<a name="tiny-lr-get-changed" />\n## GET /changed\nwith no clients, no files.\n\n```js\nrequest(this.server)\n  .get(\'/changed\')\n  .expect(\'Content-Type\', /json/)\n  .expect(/"clients":\\[\\]/)\n  .expect(/"files":\\[\\]/)\n  .expect(200, done);\n```\n\nwith no clients, some files.\n\n```js\nrequest(this.server)\n  .get(\'/changed?files=gonna.css,test.css,it.css\')\n  .expect(\'Content-Type\', /json/)\n  .expect(\'{"clients":[],"files":["gonna.css","test.css","it.css"]}\')\n  .expect(200, done);\n```\n\n<a name="tiny-lr-post-changed" />\n## POST /changed\nwith no clients, no files.\n\n```js\nrequest(this.server)\n  .post(\'/changed\')\n  .expect(\'Content-Type\', /json/)\n  .expect(/"clients":\\[\\]/)\n  .expect(/"files":\\[\\]/)\n  .expect(200, done);\n```\n\nwith no clients, some files.\n\n```js\nvar data = { clients: [], files: [\'cat.css\', \'sed.css\', \'ack.js\'] };\n\nrequest(this.server)\n  .post(\'/changed\')\n  .send({ files: data.files })\n  .expect(\'Content-Type\', /json/)\n  .expect(JSON.stringify(data))\n  .expect(200, done);\n```\n\n<a name="tiny-lr-get-livereloadjs" />\n## GET /livereload.js\nrespond with livereload script.\n\n```js\nrequest(this.server)\n  .get(\'/livereload.js\')\n  .expect(/LiveReload/)\n  .expect(200, done);\n```\n\n<a name="tiny-lr-get-kill" />\n## GET /kill\nshutdown the server.\n\n```js\nvar server = this.server;\nrequest(server)\n  .get(\'/kill\')\n  .expect(200, function(err) {\n    if(err) return done(err);\n    assert.ok(!server._handle);\n    done();\n  });\n```\n\n---\n\n- 2013-01-21 - v0.0.4 - middleware support\n- 2013-01-20 - v0.0.3 - serve livereload from repo (#4)\n- 2013-01-12 - v0.0.2 - tasks - support for grunt 0.3.x (#1)\n- 2013-01-05 - v0.0.1 - Initial release\n',
9593 silly resolved     readmeFilename: 'readme.md',
9593 silly resolved     bugs: { url: 'https://github.com/mklabs/tiny-lr/issues' },
9593 silly resolved     _id: 'tiny-lr@0.0.4',
9593 silly resolved     dist: { shasum: '49a24e2058da5b44df03743b99d61e70c48a46ba' },
9593 silly resolved     _from: 'tiny-lr@0.0.4',
9593 silly resolved     _resolved: 'https://registry.npmjs.org/tiny-lr/-/tiny-lr-0.0.4.tgz' } ]
9594 info install gaze@0.4.3 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch
9595 info install tiny-lr@0.0.4 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch
9596 info installOne gaze@0.4.3
9597 info installOne tiny-lr@0.0.4
9598 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze unbuild
9599 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\tiny-lr unbuild
9600 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\gaze\0.4.3\package.tgz
9601 silly lockFile 49513f48--contrib-watch-node-modules-gaze tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze
9602 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze C:\Users\Gaston\AppData\Roaming\npm-cache\49513f48--contrib-watch-node-modules-gaze.lock
9603 silly lockFile 11fcaf92-npm-cache-gaze-0-4-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\gaze\0.4.3\package.tgz
9604 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\gaze\0.4.3\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\11fcaf92-npm-cache-gaze-0-4-3-package-tgz.lock
9605 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\tiny-lr\0.0.4\package.tgz
9606 silly lockFile 89bc4954-ntrib-watch-node-modules-tiny-lr tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\tiny-lr
9607 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\tiny-lr C:\Users\Gaston\AppData\Roaming\npm-cache\89bc4954-ntrib-watch-node-modules-tiny-lr.lock
9608 silly lockFile d1dad579--cache-tiny-lr-0-0-4-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\tiny-lr\0.0.4\package.tgz
9609 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\tiny-lr\0.0.4\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\d1dad579--cache-tiny-lr-0-0-4-package-tgz.lock
9610 silly gunzTarPerm modes [ '755', '644' ]
9611 silly gunzTarPerm modes [ '755', '644' ]
9612 silly gunzTarPerm extractEntry package.json
9613 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
9614 silly gunzTarPerm extractEntry package.json
9615 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
9616 silly gunzTarPerm extractEntry .npmignore
9617 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
9618 silly gunzTarPerm extractEntry .travis.yml
9619 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]
9620 silly gunzTarPerm extractEntry .npmignore
9621 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
9622 silly gunzTarPerm extractEntry README.md
9623 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
9624 silly gunzTarPerm extractEntry Gruntfile.js
9625 silly gunzTarPerm modified mode [ 'Gruntfile.js', 438, 420 ]
9626 silly gunzTarPerm extractEntry AUTHORS
9627 silly gunzTarPerm modified mode [ 'AUTHORS', 438, 420 ]
9628 silly gunzTarPerm extractEntry bin/tiny-lr
9629 silly gunzTarPerm modified mode [ 'bin/tiny-lr', 438, 420 ]
9630 silly gunzTarPerm extractEntry bin/update-livereload
9631 silly gunzTarPerm modified mode [ 'bin/update-livereload', 438, 420 ]
9632 silly gunzTarPerm extractEntry benchmarks/gaze100s.js
9633 silly gunzTarPerm modified mode [ 'benchmarks/gaze100s.js', 438, 420 ]
9634 silly gunzTarPerm extractEntry .jshintrc
9635 silly gunzTarPerm modified mode [ '.jshintrc', 438, 420 ]
9636 silly gunzTarPerm extractEntry lib/client.js
9637 silly gunzTarPerm modified mode [ 'lib/client.js', 438, 420 ]
9638 silly gunzTarPerm extractEntry lib/index.js
9639 silly gunzTarPerm modified mode [ 'lib/index.js', 438, 420 ]
9640 silly gunzTarPerm extractEntry lib/server.js
9641 silly gunzTarPerm modified mode [ 'lib/server.js', 438, 420 ]
9642 silly gunzTarPerm extractEntry lib/public/livereload.js
9643 silly gunzTarPerm modified mode [ 'lib/public/livereload.js', 438, 420 ]
9644 silly gunzTarPerm extractEntry readme.md
9645 silly gunzTarPerm modified mode [ 'readme.md', 438, 420 ]
9646 silly gunzTarPerm extractEntry tasks/tiny-lr.js
9647 silly gunzTarPerm modified mode [ 'tasks/tiny-lr.js', 438, 420 ]
9648 silly gunzTarPerm extractEntry tasks/tiny-lr.mk
9649 silly gunzTarPerm modified mode [ 'tasks/tiny-lr.mk', 438, 420 ]
9650 silly gunzTarPerm extractEntry test/client.js
9651 silly gunzTarPerm modified mode [ 'test/client.js', 438, 420 ]
9652 silly gunzTarPerm extractEntry test/middleware.js
9653 silly gunzTarPerm modified mode [ 'test/middleware.js', 438, 420 ]
9654 silly gunzTarPerm extractEntry test/server.js
9655 silly gunzTarPerm modified mode [ 'test/server.js', 438, 420 ]
9656 silly gunzTarPerm extractEntry lib/gaze.js
9657 silly gunzTarPerm modified mode [ 'lib/gaze.js', 438, 420 ]
9658 silly gunzTarPerm extractEntry lib/helper.js
9659 silly gunzTarPerm modified mode [ 'lib/helper.js', 438, 420 ]
9660 silly gunzTarPerm extractEntry LICENSE-MIT
9661 silly gunzTarPerm modified mode [ 'LICENSE-MIT', 438, 420 ]
9662 silly gunzTarPerm extractEntry .editorconfig
9663 silly gunzTarPerm modified mode [ '.editorconfig', 438, 420 ]
9664 silly gunzTarPerm extractEntry .travis.yml
9665 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]
9666 silly gunzTarPerm extractEntry test/add_test.js
9667 silly gunzTarPerm modified mode [ 'test/add_test.js', 438, 420 ]
9668 silly gunzTarPerm extractEntry test/file_poller.js
9669 silly gunzTarPerm modified mode [ 'test/file_poller.js', 438, 420 ]
9670 silly gunzTarPerm extractEntry test/watch_race_test.js
9671 silly gunzTarPerm modified mode [ 'test/watch_race_test.js', 438, 420 ]
9672 silly gunzTarPerm extractEntry test/helper.js
9673 silly gunzTarPerm modified mode [ 'test/helper.js', 438, 420 ]
9674 silly gunzTarPerm extractEntry test/matching_test.js
9675 silly gunzTarPerm modified mode [ 'test/matching_test.js', 438, 420 ]
9676 silly gunzTarPerm extractEntry test/api_test.js
9677 silly gunzTarPerm modified mode [ 'test/api_test.js', 438, 420 ]
9678 silly gunzTarPerm extractEntry test/relative_test.js
9679 silly gunzTarPerm modified mode [ 'test/relative_test.js', 438, 420 ]
9680 silly gunzTarPerm extractEntry test/rename_test.js
9681 silly gunzTarPerm modified mode [ 'test/rename_test.js', 438, 420 ]
9682 silly gunzTarPerm extractEntry test/safewrite_test.js
9683 silly gunzTarPerm modified mode [ 'test/safewrite_test.js', 438, 420 ]
9684 silly gunzTarPerm extractEntry test/watch_test.js
9685 silly gunzTarPerm modified mode [ 'test/watch_test.js', 438, 420 ]
9686 silly gunzTarPerm extractEntry test/patterns_test.js
9687 silly gunzTarPerm modified mode [ 'test/patterns_test.js', 438, 420 ]
9688 silly gunzTarPerm extractEntry test/fixtures/one.js
9689 silly gunzTarPerm modified mode [ 'test/fixtures/one.js', 438, 420 ]
9690 silly gunzTarPerm extractEntry test/fixtures/nested/one.js
9691 silly gunzTarPerm modified mode [ 'test/fixtures/nested/one.js', 438, 420 ]
9692 silly gunzTarPerm extractEntry test/fixtures/nested/three.js
9693 silly gunzTarPerm modified mode [ 'test/fixtures/nested/three.js', 438, 420 ]
9694 silly gunzTarPerm extractEntry test/fixtures/nested/sub/two.js
9695 silly gunzTarPerm modified mode [ 'test/fixtures/nested/sub/two.js', 438, 420 ]
9696 silly gunzTarPerm extractEntry test/fixtures/nested/sub2/two.js
9697 silly gunzTarPerm modified mode [ 'test/fixtures/nested/sub2/two.js', 438, 420 ]
9698 silly gunzTarPerm extractEntry test/fixtures/Project (LO)/one.js
9699 silly gunzTarPerm modified mode [ 'test/fixtures/Project (LO)/one.js', 438, 420 ]
9700 silly gunzTarPerm extractEntry test/fixtures/sub/one.js
9701 silly gunzTarPerm modified mode [ 'test/fixtures/sub/one.js', 438, 420 ]
9702 silly gunzTarPerm extractEntry test/fixtures/sub/two.js
9703 silly gunzTarPerm modified mode [ 'test/fixtures/sub/two.js', 438, 420 ]
9704 http 200 https://registry.npmjs.org/ansi-styles/-/ansi-styles-1.0.0.tgz
9705 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777993151-0.47679307870566845\tmp.tgz
9706 silly lockFile 5c854a06-3151-0-47679307870566845-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777993151-0.47679307870566845\package
9707 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777993151-0.47679307870566845\package C:\Users\Gaston\AppData\Roaming\npm-cache\5c854a06-3151-0-47679307870566845-package.lock
9708 silly lockFile cc91d665-3151-0-47679307870566845-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777993151-0.47679307870566845\tmp.tgz
9709 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777993151-0.47679307870566845\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\cc91d665-3151-0-47679307870566845-tmp-tgz.lock
9710 silly gunzTarPerm modes [ '755', '644' ]
9711 silly gunzTarPerm extractEntry package.json
9712 silly gunzTarPerm extractEntry ansi-styles.js
9713 silly gunzTarPerm extractEntry readme.md
9714 silly lockFile 5c854a06-3151-0-47679307870566845-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777993151-0.47679307870566845\package
9715 silly lockFile 5c854a06-3151-0-47679307870566845-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777993151-0.47679307870566845\package
9716 silly lockFile cc91d665-3151-0-47679307870566845-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777993151-0.47679307870566845\tmp.tgz
9717 silly lockFile cc91d665-3151-0-47679307870566845-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777993151-0.47679307870566845\tmp.tgz
9718 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\ansi-styles\\1.0.0\\package.tgz',
9718 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388777993151-0.47679307870566845\\package' ]
9719 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\ansi-styles\1.0.0\package.tgz
9720 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777993151-0.47679307870566845\package
9721 silly lockFile 5c854a06-3151-0-47679307870566845-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777993151-0.47679307870566845\package
9722 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777993151-0.47679307870566845\package C:\Users\Gaston\AppData\Roaming\npm-cache\5c854a06-3151-0-47679307870566845-package.lock
9723 silly lockFile 869e6209-he-ansi-styles-1-0-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\ansi-styles\1.0.0\package.tgz
9724 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\ansi-styles\1.0.0\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\869e6209-he-ansi-styles-1-0-0-package-tgz.lock
9725 silly lockFile 5c854a06-3151-0-47679307870566845-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777993151-0.47679307870566845\package
9726 silly lockFile 5c854a06-3151-0-47679307870566845-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777993151-0.47679307870566845\package
9727 silly lockFile 869e6209-he-ansi-styles-1-0-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\ansi-styles\1.0.0\package.tgz
9728 silly lockFile 869e6209-he-ansi-styles-1-0-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\ansi-styles\1.0.0\package.tgz
9729 silly lockFile 85685628--cache-ansi-styles-1-0-0-package C:\Users\Gaston\AppData\Roaming\npm-cache\ansi-styles\1.0.0\package
9730 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\ansi-styles\1.0.0\package C:\Users\Gaston\AppData\Roaming\npm-cache\85685628--cache-ansi-styles-1-0-0-package.lock
9731 silly lockFile 85685628--cache-ansi-styles-1-0-0-package C:\Users\Gaston\AppData\Roaming\npm-cache\ansi-styles\1.0.0\package
9732 silly lockFile 85685628--cache-ansi-styles-1-0-0-package C:\Users\Gaston\AppData\Roaming\npm-cache\ansi-styles\1.0.0\package
9733 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\ansi-styles\1.0.0\package.tgz
9734 silly lockFile 5759e639--cache-ansi-styles-1-0-0-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\ansi-styles\1.0.0\package
9735 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\ansi-styles\1.0.0\package C:\Users\Gaston\AppData\Roaming\npm-cache\5759e639--cache-ansi-styles-1-0-0-package.lock
9736 silly lockFile 869e6209-he-ansi-styles-1-0-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\ansi-styles\1.0.0\package.tgz
9737 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\ansi-styles\1.0.0\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\869e6209-he-ansi-styles-1-0-0-package-tgz.lock
9738 silly gunzTarPerm modes [ '755', '644' ]
9739 silly gunzTarPerm extractEntry package.json
9740 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
9741 silly gunzTarPerm extractEntry ansi-styles.js
9742 silly gunzTarPerm modified mode [ 'ansi-styles.js', 438, 420 ]
9743 silly gunzTarPerm extractEntry readme.md
9744 silly gunzTarPerm modified mode [ 'readme.md', 438, 420 ]
9745 silly lockFile 5759e639--cache-ansi-styles-1-0-0-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\ansi-styles\1.0.0\package
9746 silly lockFile 5759e639--cache-ansi-styles-1-0-0-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\ansi-styles\1.0.0\package
9747 silly lockFile 869e6209-he-ansi-styles-1-0-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\ansi-styles\1.0.0\package.tgz
9748 silly lockFile 869e6209-he-ansi-styles-1-0-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\ansi-styles\1.0.0\package.tgz
9749 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\ansi-styles\1.0.0\package.tgz 644
9750 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\ansi-styles\1.0.0\package.tgz
9751 silly lockFile c87c7033-nsi-styles-ansi-styles-1-0-0-tgz https://registry.npmjs.org/ansi-styles/-/ansi-styles-1.0.0.tgz
9752 silly lockFile c87c7033-nsi-styles-ansi-styles-1-0-0-tgz https://registry.npmjs.org/ansi-styles/-/ansi-styles-1.0.0.tgz
9753 silly lockFile 92057bb9-ansi-styles-1-0-0 ansi-styles@1.0.0
9754 silly lockFile 92057bb9-ansi-styles-1-0-0 ansi-styles@1.0.0
9755 silly lockFile 82a4f1f6-ansi-styles-1-0-0 ansi-styles@~1.0.0
9756 silly lockFile 82a4f1f6-ansi-styles-1-0-0 ansi-styles@~1.0.0
9757 silly lockFile 89bc4954-ntrib-watch-node-modules-tiny-lr tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\tiny-lr
9758 silly lockFile 89bc4954-ntrib-watch-node-modules-tiny-lr tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\tiny-lr
9759 silly lockFile d1dad579--cache-tiny-lr-0-0-4-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\tiny-lr\0.0.4\package.tgz
9760 silly lockFile d1dad579--cache-tiny-lr-0-0-4-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\tiny-lr\0.0.4\package.tgz
9761 info preinstall tiny-lr@0.0.4
9762 http 200 https://registry.npmjs.org/has-color/-/has-color-0.1.2.tgz
9763 verbose readDependencies using package.json deps
9764 verbose readDependencies using package.json deps
9765 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777991716-0.1767532981466502\tmp.tgz
9766 silly lockFile d9d43cda-91716-0-1767532981466502-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777991716-0.1767532981466502\package
9767 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777991716-0.1767532981466502\package C:\Users\Gaston\AppData\Roaming\npm-cache\d9d43cda-91716-0-1767532981466502-package.lock
9768 silly lockFile 30e37868-91716-0-1767532981466502-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777991716-0.1767532981466502\tmp.tgz
9769 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777991716-0.1767532981466502\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\30e37868-91716-0-1767532981466502-tmp-tgz.lock
9770 http 200 https://registry.npmjs.org/strip-ansi
9771 silly registry.get cb [ 200,
9771 silly registry.get   { date: 'Fri, 03 Jan 2014 19:38:54 GMT',
9771 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
9771 silly registry.get     etag: '"C2S894OMW6DBMVE4176CFGFYT"',
9771 silly registry.get     'content-type': 'application/json',
9771 silly registry.get     'content-length': '5788',
9771 silly registry.get     'accept-ranges': 'bytes',
9771 silly registry.get     via: '1.1 varnish',
9771 silly registry.get     age: '29813',
9771 silly registry.get     'x-served-by': 'cache-d46-DAL',
9771 silly registry.get     'x-cache': 'HIT',
9771 silly registry.get     'x-cache-hits': '1',
9771 silly registry.get     'x-timer': 'S1388777934.093150139,VS0,VE15',
9771 silly registry.get     vary: 'Accept',
9771 silly registry.get     'keep-alive': 'timeout=10, max=32',
9771 silly registry.get     connection: 'Keep-Alive' } ]
9772 verbose cache add [ 'qs@~0.5.2', null ]
9773 verbose cache add name=undefined spec="qs@~0.5.2" args=["qs@~0.5.2",null]
9774 verbose parsed url { protocol: null,
9774 verbose parsed url   slashes: null,
9774 verbose parsed url   auth: null,
9774 verbose parsed url   host: null,
9774 verbose parsed url   port: null,
9774 verbose parsed url   hostname: null,
9774 verbose parsed url   hash: null,
9774 verbose parsed url   search: null,
9774 verbose parsed url   query: null,
9774 verbose parsed url   pathname: 'qs@~0.5.2',
9774 verbose parsed url   path: 'qs@~0.5.2',
9774 verbose parsed url   href: 'qs@~0.5.2' }
9775 verbose cache add name="qs" spec="~0.5.2" args=["qs","~0.5.2"]
9776 verbose parsed url { protocol: null,
9776 verbose parsed url   slashes: null,
9776 verbose parsed url   auth: null,
9776 verbose parsed url   host: null,
9776 verbose parsed url   port: null,
9776 verbose parsed url   hostname: null,
9776 verbose parsed url   hash: null,
9776 verbose parsed url   search: null,
9776 verbose parsed url   query: null,
9776 verbose parsed url   pathname: '~0.5.2',
9776 verbose parsed url   path: '~0.5.2',
9776 verbose parsed url   href: '~0.5.2' }
9777 verbose addNamed [ 'qs', '~0.5.2' ]
9778 verbose addNamed [ null, '>=0.5.2-0 <0.6.0-0' ]
9779 silly lockFile 60f93a07-qs-0-5-2 qs@~0.5.2
9780 verbose lock qs@~0.5.2 C:\Users\Gaston\AppData\Roaming\npm-cache\60f93a07-qs-0-5-2.lock
9781 verbose cache add [ 'faye-websocket@~0.4.3', null ]
9782 verbose cache add name=undefined spec="faye-websocket@~0.4.3" args=["faye-websocket@~0.4.3",null]
9783 verbose parsed url { protocol: null,
9783 verbose parsed url   slashes: null,
9783 verbose parsed url   auth: null,
9783 verbose parsed url   host: null,
9783 verbose parsed url   port: null,
9783 verbose parsed url   hostname: null,
9783 verbose parsed url   hash: null,
9783 verbose parsed url   search: null,
9783 verbose parsed url   query: null,
9783 verbose parsed url   pathname: 'faye-websocket@~0.4.3',
9783 verbose parsed url   path: 'faye-websocket@~0.4.3',
9783 verbose parsed url   href: 'faye-websocket@~0.4.3' }
9784 verbose cache add name="faye-websocket" spec="~0.4.3" args=["faye-websocket","~0.4.3"]
9785 verbose parsed url { protocol: null,
9785 verbose parsed url   slashes: null,
9785 verbose parsed url   auth: null,
9785 verbose parsed url   host: null,
9785 verbose parsed url   port: null,
9785 verbose parsed url   hostname: null,
9785 verbose parsed url   hash: null,
9785 verbose parsed url   search: null,
9785 verbose parsed url   query: null,
9785 verbose parsed url   pathname: '~0.4.3',
9785 verbose parsed url   path: '~0.4.3',
9785 verbose parsed url   href: '~0.4.3' }
9786 verbose addNamed [ 'faye-websocket', '~0.4.3' ]
9787 verbose addNamed [ null, '>=0.4.3-0 <0.5.0-0' ]
9788 silly lockFile 20d63c72-faye-websocket-0-4-3 faye-websocket@~0.4.3
9789 verbose lock faye-websocket@~0.4.3 C:\Users\Gaston\AppData\Roaming\npm-cache\20d63c72-faye-websocket-0-4-3.lock
9790 verbose cache add [ 'noptify@latest', null ]
9791 verbose cache add name=undefined spec="noptify@latest" args=["noptify@latest",null]
9792 verbose parsed url { protocol: null,
9792 verbose parsed url   slashes: null,
9792 verbose parsed url   auth: null,
9792 verbose parsed url   host: null,
9792 verbose parsed url   port: null,
9792 verbose parsed url   hostname: null,
9792 verbose parsed url   hash: null,
9792 verbose parsed url   search: null,
9792 verbose parsed url   query: null,
9792 verbose parsed url   pathname: 'noptify@latest',
9792 verbose parsed url   path: 'noptify@latest',
9792 verbose parsed url   href: 'noptify@latest' }
9793 verbose cache add name="noptify" spec="latest" args=["noptify","latest"]
9794 verbose parsed url { protocol: null,
9794 verbose parsed url   slashes: null,
9794 verbose parsed url   auth: null,
9794 verbose parsed url   host: null,
9794 verbose parsed url   port: null,
9794 verbose parsed url   hostname: null,
9794 verbose parsed url   hash: null,
9794 verbose parsed url   search: null,
9794 verbose parsed url   query: null,
9794 verbose parsed url   pathname: 'latest',
9794 verbose parsed url   path: 'latest',
9794 verbose parsed url   href: 'latest' }
9795 verbose addNamed [ 'noptify', 'latest' ]
9796 verbose addNamed [ null, null ]
9797 silly lockFile ca287262-noptify-latest noptify@latest
9798 verbose lock noptify@latest C:\Users\Gaston\AppData\Roaming\npm-cache\ca287262-noptify-latest.lock
9799 verbose cache add [ 'debug@~0.7.0', null ]
9800 verbose cache add name=undefined spec="debug@~0.7.0" args=["debug@~0.7.0",null]
9801 verbose parsed url { protocol: null,
9801 verbose parsed url   slashes: null,
9801 verbose parsed url   auth: null,
9801 verbose parsed url   host: null,
9801 verbose parsed url   port: null,
9801 verbose parsed url   hostname: null,
9801 verbose parsed url   hash: null,
9801 verbose parsed url   search: null,
9801 verbose parsed url   query: null,
9801 verbose parsed url   pathname: 'debug@~0.7.0',
9801 verbose parsed url   path: 'debug@~0.7.0',
9801 verbose parsed url   href: 'debug@~0.7.0' }
9802 verbose cache add name="debug" spec="~0.7.0" args=["debug","~0.7.0"]
9803 verbose parsed url { protocol: null,
9803 verbose parsed url   slashes: null,
9803 verbose parsed url   auth: null,
9803 verbose parsed url   host: null,
9803 verbose parsed url   port: null,
9803 verbose parsed url   hostname: null,
9803 verbose parsed url   hash: null,
9803 verbose parsed url   search: null,
9803 verbose parsed url   query: null,
9803 verbose parsed url   pathname: '~0.7.0',
9803 verbose parsed url   path: '~0.7.0',
9803 verbose parsed url   href: '~0.7.0' }
9804 verbose addNamed [ 'debug', '~0.7.0' ]
9805 verbose addNamed [ null, '>=0.7.0-0 <0.8.0-0' ]
9806 silly lockFile 88a35dfc-debug-0-7-0 debug@~0.7.0
9807 verbose lock debug@~0.7.0 C:\Users\Gaston\AppData\Roaming\npm-cache\88a35dfc-debug-0-7-0.lock
9808 silly gunzTarPerm modes [ '755', '644' ]
9809 silly addNameRange { name: 'qs', range: '>=0.5.2-0 <0.6.0-0', hasData: false }
9810 silly addNameRange { name: 'faye-websocket',
9810 silly addNameRange   range: '>=0.4.3-0 <0.5.0-0',
9810 silly addNameRange   hasData: false }
9811 verbose url raw qs
9812 verbose url resolving [ 'https://registry.npmjs.org/', './qs' ]
9813 verbose url resolved https://registry.npmjs.org/qs
9814 info trying registry request attempt 1 at 16:39:54
9815 http GET https://registry.npmjs.org/qs
9816 info addNameTag [ 'noptify', 'latest' ]
9817 silly addNameRange { name: 'debug', range: '>=0.7.0-0 <0.8.0-0', hasData: false }
9818 verbose url raw faye-websocket
9819 verbose url resolving [ 'https://registry.npmjs.org/', './faye-websocket' ]
9820 verbose url resolved https://registry.npmjs.org/faye-websocket
9821 info trying registry request attempt 1 at 16:39:54
9822 http GET https://registry.npmjs.org/faye-websocket
9823 verbose url raw noptify
9824 verbose url resolving [ 'https://registry.npmjs.org/', './noptify' ]
9825 verbose url resolved https://registry.npmjs.org/noptify
9826 info trying registry request attempt 1 at 16:39:54
9827 http GET https://registry.npmjs.org/noptify
9828 verbose url raw debug
9829 verbose url resolving [ 'https://registry.npmjs.org/', './debug' ]
9830 verbose url resolved https://registry.npmjs.org/debug
9831 info trying registry request attempt 1 at 16:39:54
9832 verbose etag "D3KJHAZTCKQ35NYLNYQDEN7JN"
9833 http GET https://registry.npmjs.org/debug
9834 silly addNameRange number 2 { name: 'strip-ansi',
9834 silly addNameRange   range: '>=0.1.0-0 <0.2.0-0',
9834 silly addNameRange   hasData: true }
9835 silly addNameRange versions [ 'strip-ansi', [ '0.1.0', '0.1.1' ] ]
9836 verbose addNamed [ 'strip-ansi', '0.1.1' ]
9837 verbose addNamed [ '0.1.1', '0.1.1' ]
9838 silly lockFile ed6fc536-strip-ansi-0-1-1 strip-ansi@0.1.1
9839 verbose lock strip-ansi@0.1.1 C:\Users\Gaston\AppData\Roaming\npm-cache\ed6fc536-strip-ansi-0-1-1.lock
9840 silly gunzTarPerm extractEntry package.json
9841 silly lockFile 91b36f9c--strip-ansi-strip-ansi-0-1-1-tgz https://registry.npmjs.org/strip-ansi/-/strip-ansi-0.1.1.tgz
9842 verbose lock https://registry.npmjs.org/strip-ansi/-/strip-ansi-0.1.1.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\91b36f9c--strip-ansi-strip-ansi-0-1-1-tgz.lock
9843 silly gunzTarPerm extractEntry has-color.js
9844 silly gunzTarPerm extractEntry readme.md
9845 verbose addRemoteTarball [ 'https://registry.npmjs.org/strip-ansi/-/strip-ansi-0.1.1.tgz',
9845 verbose addRemoteTarball   '39e8a98d044d150660abe4a6808acf70bb7bc991' ]
9846 info retry fetch attempt 1 at 16:39:54
9847 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777994575-0.4901680687908083\tmp.tgz
9848 http GET https://registry.npmjs.org/strip-ansi/-/strip-ansi-0.1.1.tgz
9849 silly lockFile d9d43cda-91716-0-1767532981466502-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777991716-0.1767532981466502\package
9850 silly lockFile d9d43cda-91716-0-1767532981466502-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777991716-0.1767532981466502\package
9851 silly lockFile 30e37868-91716-0-1767532981466502-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777991716-0.1767532981466502\tmp.tgz
9852 silly lockFile 30e37868-91716-0-1767532981466502-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777991716-0.1767532981466502\tmp.tgz
9853 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\has-color\\0.1.2\\package.tgz',
9853 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388777991716-0.1767532981466502\\package' ]
9854 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\has-color\0.1.2\package.tgz
9855 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777991716-0.1767532981466502\package
9856 silly lockFile d9d43cda-91716-0-1767532981466502-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777991716-0.1767532981466502\package
9857 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777991716-0.1767532981466502\package C:\Users\Gaston\AppData\Roaming\npm-cache\d9d43cda-91716-0-1767532981466502-package.lock
9858 silly lockFile 5725e640-ache-has-color-0-1-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\has-color\0.1.2\package.tgz
9859 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\has-color\0.1.2\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\5725e640-ache-has-color-0-1-2-package-tgz.lock
9860 silly lockFile 49513f48--contrib-watch-node-modules-gaze tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze
9861 silly lockFile 49513f48--contrib-watch-node-modules-gaze tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze
9862 silly lockFile 11fcaf92-npm-cache-gaze-0-4-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\gaze\0.4.3\package.tgz
9863 silly lockFile 11fcaf92-npm-cache-gaze-0-4-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\gaze\0.4.3\package.tgz
9864 silly lockFile d9d43cda-91716-0-1767532981466502-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777991716-0.1767532981466502\package
9865 silly lockFile d9d43cda-91716-0-1767532981466502-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777991716-0.1767532981466502\package
9866 silly lockFile 5725e640-ache-has-color-0-1-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\has-color\0.1.2\package.tgz
9867 silly lockFile 5725e640-ache-has-color-0-1-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\has-color\0.1.2\package.tgz
9868 silly lockFile fd7ef555-pm-cache-has-color-0-1-2-package C:\Users\Gaston\AppData\Roaming\npm-cache\has-color\0.1.2\package
9869 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\has-color\0.1.2\package C:\Users\Gaston\AppData\Roaming\npm-cache\fd7ef555-pm-cache-has-color-0-1-2-package.lock
9870 silly lockFile fd7ef555-pm-cache-has-color-0-1-2-package C:\Users\Gaston\AppData\Roaming\npm-cache\has-color\0.1.2\package
9871 silly lockFile fd7ef555-pm-cache-has-color-0-1-2-package C:\Users\Gaston\AppData\Roaming\npm-cache\has-color\0.1.2\package
9872 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\has-color\0.1.2\package.tgz
9873 silly lockFile 7324f6b4-pm-cache-has-color-0-1-2-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\has-color\0.1.2\package
9874 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\has-color\0.1.2\package C:\Users\Gaston\AppData\Roaming\npm-cache\7324f6b4-pm-cache-has-color-0-1-2-package.lock
9875 silly lockFile 5725e640-ache-has-color-0-1-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\has-color\0.1.2\package.tgz
9876 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\has-color\0.1.2\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\5725e640-ache-has-color-0-1-2-package-tgz.lock
9877 silly gunzTarPerm modes [ '755', '644' ]
9878 info preinstall gaze@0.4.3
9879 verbose readDependencies using package.json deps
9880 verbose readDependencies using package.json deps
9881 silly gunzTarPerm extractEntry package.json
9882 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
9883 silly gunzTarPerm extractEntry has-color.js
9884 silly gunzTarPerm modified mode [ 'has-color.js', 438, 420 ]
9885 silly gunzTarPerm extractEntry readme.md
9886 silly gunzTarPerm modified mode [ 'readme.md', 438, 420 ]
9887 verbose cache add [ 'globule@~0.1.0', null ]
9888 verbose cache add name=undefined spec="globule@~0.1.0" args=["globule@~0.1.0",null]
9889 verbose parsed url { protocol: null,
9889 verbose parsed url   slashes: null,
9889 verbose parsed url   auth: null,
9889 verbose parsed url   host: null,
9889 verbose parsed url   port: null,
9889 verbose parsed url   hostname: null,
9889 verbose parsed url   hash: null,
9889 verbose parsed url   search: null,
9889 verbose parsed url   query: null,
9889 verbose parsed url   pathname: 'globule@~0.1.0',
9889 verbose parsed url   path: 'globule@~0.1.0',
9889 verbose parsed url   href: 'globule@~0.1.0' }
9890 verbose cache add name="globule" spec="~0.1.0" args=["globule","~0.1.0"]
9891 verbose parsed url { protocol: null,
9891 verbose parsed url   slashes: null,
9891 verbose parsed url   auth: null,
9891 verbose parsed url   host: null,
9891 verbose parsed url   port: null,
9891 verbose parsed url   hostname: null,
9891 verbose parsed url   hash: null,
9891 verbose parsed url   search: null,
9891 verbose parsed url   query: null,
9891 verbose parsed url   pathname: '~0.1.0',
9891 verbose parsed url   path: '~0.1.0',
9891 verbose parsed url   href: '~0.1.0' }
9892 verbose addNamed [ 'globule', '~0.1.0' ]
9893 verbose addNamed [ null, '>=0.1.0-0 <0.2.0-0' ]
9894 silly lockFile 95d0eb0c-globule-0-1-0 globule@~0.1.0
9895 verbose lock globule@~0.1.0 C:\Users\Gaston\AppData\Roaming\npm-cache\95d0eb0c-globule-0-1-0.lock
9896 silly addNameRange { name: 'globule', range: '>=0.1.0-0 <0.2.0-0', hasData: false }
9897 verbose url raw globule
9898 verbose url resolving [ 'https://registry.npmjs.org/', './globule' ]
9899 verbose url resolved https://registry.npmjs.org/globule
9900 info trying registry request attempt 1 at 16:39:54
9901 verbose etag "5S2LVP7WVZ0S3OX44PA9AA8M5"
9902 http GET https://registry.npmjs.org/globule
9903 silly lockFile 7324f6b4-pm-cache-has-color-0-1-2-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\has-color\0.1.2\package
9904 silly lockFile 7324f6b4-pm-cache-has-color-0-1-2-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\has-color\0.1.2\package
9905 silly lockFile 5725e640-ache-has-color-0-1-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\has-color\0.1.2\package.tgz
9906 silly lockFile 5725e640-ache-has-color-0-1-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\has-color\0.1.2\package.tgz
9907 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\has-color\0.1.2\package.tgz 644
9908 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\has-color\0.1.2\package.tgz
9909 silly lockFile f8b87c9f-rg-has-color-has-color-0-1-2-tgz https://registry.npmjs.org/has-color/-/has-color-0.1.2.tgz
9910 silly lockFile f8b87c9f-rg-has-color-has-color-0-1-2-tgz https://registry.npmjs.org/has-color/-/has-color-0.1.2.tgz
9911 silly lockFile cddba125-has-color-0-1-2 has-color@0.1.2
9912 silly lockFile cddba125-has-color-0-1-2 has-color@0.1.2
9913 silly lockFile c89da621-has-color-0-1-0 has-color@~0.1.0
9914 silly lockFile c89da621-has-color-0-1-0 has-color@~0.1.0
9915 http 200 https://registry.npmjs.org/strip-ansi/-/strip-ansi-0.1.1.tgz
9916 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777994575-0.4901680687908083\tmp.tgz
9917 silly lockFile 98b7a2f3-94575-0-4901680687908083-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777994575-0.4901680687908083\package
9918 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777994575-0.4901680687908083\package C:\Users\Gaston\AppData\Roaming\npm-cache\98b7a2f3-94575-0-4901680687908083-package.lock
9919 silly lockFile dbd00ca8-94575-0-4901680687908083-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777994575-0.4901680687908083\tmp.tgz
9920 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777994575-0.4901680687908083\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\dbd00ca8-94575-0-4901680687908083-tmp-tgz.lock
9921 silly gunzTarPerm modes [ '755', '644' ]
9922 silly gunzTarPerm extractEntry package.json
9923 silly gunzTarPerm extractEntry cli.js
9924 silly gunzTarPerm extractEntry index.js
9925 silly gunzTarPerm extractEntry readme.md
9926 silly lockFile 98b7a2f3-94575-0-4901680687908083-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777994575-0.4901680687908083\package
9927 silly lockFile 98b7a2f3-94575-0-4901680687908083-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777994575-0.4901680687908083\package
9928 silly lockFile dbd00ca8-94575-0-4901680687908083-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777994575-0.4901680687908083\tmp.tgz
9929 silly lockFile dbd00ca8-94575-0-4901680687908083-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777994575-0.4901680687908083\tmp.tgz
9930 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\strip-ansi\\0.1.1\\package.tgz',
9930 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388777994575-0.4901680687908083\\package' ]
9931 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\strip-ansi\0.1.1\package.tgz
9932 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777994575-0.4901680687908083\package
9933 silly lockFile 98b7a2f3-94575-0-4901680687908083-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777994575-0.4901680687908083\package
9934 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777994575-0.4901680687908083\package C:\Users\Gaston\AppData\Roaming\npm-cache\98b7a2f3-94575-0-4901680687908083-package.lock
9935 silly lockFile 6dc73cca-che-strip-ansi-0-1-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\strip-ansi\0.1.1\package.tgz
9936 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\strip-ansi\0.1.1\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\6dc73cca-che-strip-ansi-0-1-1-package-tgz.lock
9937 silly lockFile 98b7a2f3-94575-0-4901680687908083-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777994575-0.4901680687908083\package
9938 silly lockFile 98b7a2f3-94575-0-4901680687908083-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777994575-0.4901680687908083\package
9939 silly lockFile 6dc73cca-che-strip-ansi-0-1-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\strip-ansi\0.1.1\package.tgz
9940 silly lockFile 6dc73cca-che-strip-ansi-0-1-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\strip-ansi\0.1.1\package.tgz
9941 silly lockFile 2b09cfc1-m-cache-strip-ansi-0-1-1-package C:\Users\Gaston\AppData\Roaming\npm-cache\strip-ansi\0.1.1\package
9942 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\strip-ansi\0.1.1\package C:\Users\Gaston\AppData\Roaming\npm-cache\2b09cfc1-m-cache-strip-ansi-0-1-1-package.lock
9943 silly lockFile 2b09cfc1-m-cache-strip-ansi-0-1-1-package C:\Users\Gaston\AppData\Roaming\npm-cache\strip-ansi\0.1.1\package
9944 silly lockFile 2b09cfc1-m-cache-strip-ansi-0-1-1-package C:\Users\Gaston\AppData\Roaming\npm-cache\strip-ansi\0.1.1\package
9945 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\strip-ansi\0.1.1\package.tgz
9946 silly lockFile bf4f5ee9-m-cache-strip-ansi-0-1-1-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\strip-ansi\0.1.1\package
9947 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\strip-ansi\0.1.1\package C:\Users\Gaston\AppData\Roaming\npm-cache\bf4f5ee9-m-cache-strip-ansi-0-1-1-package.lock
9948 silly lockFile 6dc73cca-che-strip-ansi-0-1-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\strip-ansi\0.1.1\package.tgz
9949 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\strip-ansi\0.1.1\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\6dc73cca-che-strip-ansi-0-1-1-package-tgz.lock
9950 silly gunzTarPerm modes [ '755', '644' ]
9951 silly gunzTarPerm extractEntry package.json
9952 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
9953 silly gunzTarPerm extractEntry cli.js
9954 silly gunzTarPerm modified mode [ 'cli.js', 438, 420 ]
9955 silly gunzTarPerm extractEntry index.js
9956 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
9957 silly gunzTarPerm extractEntry readme.md
9958 silly gunzTarPerm modified mode [ 'readme.md', 438, 420 ]
9959 silly lockFile bf4f5ee9-m-cache-strip-ansi-0-1-1-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\strip-ansi\0.1.1\package
9960 silly lockFile bf4f5ee9-m-cache-strip-ansi-0-1-1-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\strip-ansi\0.1.1\package
9961 silly lockFile 6dc73cca-che-strip-ansi-0-1-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\strip-ansi\0.1.1\package.tgz
9962 silly lockFile 6dc73cca-che-strip-ansi-0-1-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\strip-ansi\0.1.1\package.tgz
9963 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\strip-ansi\0.1.1\package.tgz 644
9964 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\strip-ansi\0.1.1\package.tgz
9965 silly lockFile 91b36f9c--strip-ansi-strip-ansi-0-1-1-tgz https://registry.npmjs.org/strip-ansi/-/strip-ansi-0.1.1.tgz
9966 silly lockFile 91b36f9c--strip-ansi-strip-ansi-0-1-1-tgz https://registry.npmjs.org/strip-ansi/-/strip-ansi-0.1.1.tgz
9967 silly lockFile ed6fc536-strip-ansi-0-1-1 strip-ansi@0.1.1
9968 silly lockFile ed6fc536-strip-ansi-0-1-1 strip-ansi@0.1.1
9969 silly lockFile 0cdb0eaa-strip-ansi-0-1-0 strip-ansi@~0.1.0
9970 silly lockFile 0cdb0eaa-strip-ansi-0-1-0 strip-ansi@~0.1.0
9971 silly resolved [ { name: 'ansi-styles',
9971 silly resolved     version: '1.0.0',
9971 silly resolved     description: 'ANSI escape codes for colorizing strings in the terminal',
9971 silly resolved     keywords:
9971 silly resolved      [ 'ansi',
9971 silly resolved        'styles',
9971 silly resolved        'color',
9971 silly resolved        'colour',
9971 silly resolved        'colors',
9971 silly resolved        'terminal',
9971 silly resolved        'console',
9971 silly resolved        'cli',
9971 silly resolved        'string',
9971 silly resolved        'tty',
9971 silly resolved        'escape',
9971 silly resolved        'formatting',
9971 silly resolved        'rgb',
9971 silly resolved        '256',
9971 silly resolved        'shell',
9971 silly resolved        'xterm',
9971 silly resolved        'log',
9971 silly resolved        'logging',
9971 silly resolved        'command-line',
9971 silly resolved        'text' ],
9971 silly resolved     homepage: 'https://github.com/sindresorhus/ansi-styles',
9971 silly resolved     bugs: { url: 'https://github.com/sindresorhus/ansi-styles/issues' },
9971 silly resolved     license: 'MIT',
9971 silly resolved     author:
9971 silly resolved      { name: 'Sindre Sorhus',
9971 silly resolved        email: 'sindresorhus@gmail.com',
9971 silly resolved        url: 'http://sindresorhus.com' },
9971 silly resolved     files: [ 'ansi-styles.js' ],
9971 silly resolved     main: 'ansi-styles',
9971 silly resolved     repository:
9971 silly resolved      { type: 'git',
9971 silly resolved        url: 'git://github.com/sindresorhus/ansi-styles.git' },
9971 silly resolved     scripts: { test: 'mocha' },
9971 silly resolved     devDependencies: { mocha: '~1.12.0' },
9971 silly resolved     engines: { node: '>=0.8.0' },
9971 silly resolved     readme: '# ansi-styles [![Build Status](https://secure.travis-ci.org/sindresorhus/ansi-styles.png?branch=master)](http://travis-ci.org/sindresorhus/ansi-styles)\n\n> [ANSI escape codes](http://en.wikipedia.org/wiki/ANSI_escape_code#Colors_and_Styles) for colorizing strings in the terminal.\n\nYou probably want the higher-level [chalk](https://github.com/sindresorhus/chalk) module for styling your strings.\n\n![screenshot](screenshot.png)\n\n\n## Install\n\nInstall with [npm](https://npmjs.org/package/ansi-styles): `npm install --save ansi-styles`\n\n\n## Example\n\n```js\nvar ansi = require(\'ansi-styles\');\n\nconsole.log(ansi.green.open + \'Hello world!\' + ansi.green.close);\n```\n\n## API\n\nEach style has an `open` and `close` property.\n\n\n## Styles\n\n### General\n\n- reset\n- bold\n- italic\n- underline\n- inverse\n- strikethrough\n\n### Text colors\n\n- black\n- red\n- green\n- yellow\n- blue\n- magenta\n- cyan\n- white\n- gray\n\n### Background colors\n\n- bgBlack\n- bgRed\n- bgGreen\n- bgYellow\n- bgBlue\n- bgMagenta\n- bgCyan\n- bgWhite\n\n\n## License\n\nMIT © [Sindre Sorhus](http://sindresorhus.com)\n',
9971 silly resolved     readmeFilename: 'readme.md',
9971 silly resolved     _id: 'ansi-styles@1.0.0',
9971 silly resolved     dist: { shasum: '8d9118f1cebdcb317841396b0ca8381a4c3d0831' },
9971 silly resolved     _from: 'ansi-styles@~1.0.0',
9971 silly resolved     _resolved: 'https://registry.npmjs.org/ansi-styles/-/ansi-styles-1.0.0.tgz' },
9971 silly resolved   { name: 'has-color',
9971 silly resolved     version: '0.1.2',
9971 silly resolved     description: 'Detect whether a terminal supports color',
9971 silly resolved     keywords:
9971 silly resolved      [ 'color',
9971 silly resolved        'colour',
9971 silly resolved        'colors',
9971 silly resolved        'terminal',
9971 silly resolved        'console',
9971 silly resolved        'cli',
9971 silly resolved        'ansi',
9971 silly resolved        'styles',
9971 silly resolved        'tty',
9971 silly resolved        'rgb',
9971 silly resolved        '256',
9971 silly resolved        'shell',
9971 silly resolved        'xterm',
9971 silly resolved        'command-line',
9971 silly resolved        'support',
9971 silly resolved        'capability',
9971 silly resolved        'detect' ],
9971 silly resolved     homepage: 'https://github.com/sindresorhus/has-color',
9971 silly resolved     bugs: { url: 'https://github.com/sindresorhus/has-color/issues' },
9971 silly resolved     license: 'MIT',
9971 silly resolved     author:
9971 silly resolved      { name: 'Sindre Sorhus',
9971 silly resolved        email: 'sindresorhus@gmail.com',
9971 silly resolved        url: 'http://sindresorhus.com' },
9971 silly resolved     files: [ 'has-color.js' ],
9971 silly resolved     main: 'has-color',
9971 silly resolved     repository:
9971 silly resolved      { type: 'git',
9971 silly resolved        url: 'git://github.com/sindresorhus/has-color.git' },
9971 silly resolved     scripts: { test: 'mocha' },
9971 silly resolved     devDependencies: { mocha: '~1.12.0' },
9971 silly resolved     engines: { node: '>=0.8.0' },
9971 silly resolved     readme: '# has-color [![Build Status](https://secure.travis-ci.org/sindresorhus/has-color.png?branch=master)](http://travis-ci.org/sindresorhus/has-color)\n\n> Detect whether a terminal supports color.\n\nUsed in the terminal color module [chalk](https://github.com/sindresorhus/chalk).\n\n\n## Install\n\nInstall with [npm](https://npmjs.org/package/has-color): `npm install --save has-color`\n\n\n## Example\n\n```js\nvar hasColor = require(\'has-color\');\n\nif (hasColor) {\n\tconsole.log(\'Terminal supports color.\');\n}\n```\n\nIt obeys the CLI flags `--color` and `--no-color`.\n\n\n## License\n\nMIT © [Sindre Sorhus](http://sindresorhus.com)\n',
9971 silly resolved     readmeFilename: 'readme.md',
9971 silly resolved     _id: 'has-color@0.1.2',
9971 silly resolved     dist: { shasum: '436c3ceb4db9f3a5373521d4734a1801058da838' },
9971 silly resolved     _from: 'has-color@~0.1.0',
9971 silly resolved     _resolved: 'https://registry.npmjs.org/has-color/-/has-color-0.1.2.tgz' },
9971 silly resolved   { name: 'strip-ansi',
9971 silly resolved     version: '0.1.1',
9971 silly resolved     description: 'Strip ANSI escape codes (used for colorizing strings in the terminal)',
9971 silly resolved     license: 'MIT',
9971 silly resolved     bin: { 'strip-ansi': 'cli.js' },
9971 silly resolved     repository: { type: 'git', url: 'git://github.com/sindresorhus/strip-ansi' },
9971 silly resolved     author:
9971 silly resolved      { name: 'Sindre Sorhus',
9971 silly resolved        email: 'sindresorhus@gmail.com',
9971 silly resolved        url: 'http://sindresorhus.com' },
9971 silly resolved     engines: { node: '>=0.8.0' },
9971 silly resolved     scripts: { test: 'mocha' },
9971 silly resolved     files: [ 'index.js', 'cli.js' ],
9971 silly resolved     keywords:
9971 silly resolved      [ 'strip',
9971 silly resolved        'trim',
9971 silly resolved        'remove',
9971 silly resolved        'ansi',
9971 silly resolved        'styles',
9971 silly resolved        'color',
9971 silly resolved        'colour',
9971 silly resolved        'colors',
9971 silly resolved        'terminal',
9971 silly resolved        'console',
9971 silly resolved        'cli',
9971 silly resolved        'string',
9971 silly resolved        'tty',
9971 silly resolved        'escape',
9971 silly resolved        'formatting',
9971 silly resolved        'rgb',
9971 silly resolved        '256',
9971 silly resolved        'shell',
9971 silly resolved        'xterm',
9971 silly resolved        'log',
9971 silly resolved        'logging',
9971 silly resolved        'command-line',
9971 silly resolved        'text' ],
9971 silly resolved     devDependencies: { mocha: '~1.x' },
9971 silly resolved     readme: '# strip-ansi [![Build Status](https://secure.travis-ci.org/sindresorhus/strip-ansi.png?branch=master)](http://travis-ci.org/sindresorhus/strip-ansi)\n\n> Strip [ANSI escape codes](http://en.wikipedia.org/wiki/ANSI_escape_code#Colors_and_Styles) (used for colorizing strings in the terminal)\n\nUsed in the terminal color module [chalk](https://github.com/sindresorhus/chalk).\n\n\n## Install\n\nInstall locally with [npm](https://npmjs.org/package/strip-ansi):\n\n```\nnpm install --save strip-ansi\n```\n\nOr globally if you want to use it as a CLI app:\n\n```\nnpm install --global strip-ansi\n```\n\nYou can then use it in your Terminal like:\n\n```\nstrip-ansi file-with-color-codes\n```\n\nOr pipe something to it:\n\n```\nls | strip-ansi\n```\n\n\n## Example\n\n```js\nvar stripAnsi = require(\'strip-ansi\');\nstripAnsi(\'\\x1b[4mcake\\x1b[0m\');\n//=> cake\n```\n\n\n## License\n\nMIT © [Sindre Sorhus](http://sindresorhus.com)\n',
9971 silly resolved     readmeFilename: 'readme.md',
9971 silly resolved     bugs: { url: 'https://github.com/sindresorhus/strip-ansi/issues' },
9971 silly resolved     homepage: 'https://github.com/sindresorhus/strip-ansi',
9971 silly resolved     _id: 'strip-ansi@0.1.1',
9971 silly resolved     dist: { shasum: 'ba961175948b326a2087cb18e29013cdce5eb4c1' },
9971 silly resolved     _from: 'strip-ansi@~0.1.0',
9971 silly resolved     _resolved: 'https://registry.npmjs.org/strip-ansi/-/strip-ansi-0.1.1.tgz' } ]
9972 info install ansi-styles@1.0.0 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\time-grunt\node_modules\chalk
9973 info install has-color@0.1.2 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\time-grunt\node_modules\chalk
9974 info install strip-ansi@0.1.1 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\time-grunt\node_modules\chalk
9975 info installOne ansi-styles@1.0.0
9976 info installOne has-color@0.1.2
9977 info installOne strip-ansi@0.1.1
9978 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\time-grunt\node_modules\chalk\node_modules\ansi-styles unbuild
9979 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\time-grunt\node_modules\chalk\node_modules\has-color unbuild
9980 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\time-grunt\node_modules\chalk\node_modules\strip-ansi unbuild
9981 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\ansi-styles\1.0.0\package.tgz
9982 silly lockFile b57428e7-s-chalk-node-modules-ansi-styles tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\time-grunt\node_modules\chalk\node_modules\ansi-styles
9983 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\time-grunt\node_modules\chalk\node_modules\ansi-styles C:\Users\Gaston\AppData\Roaming\npm-cache\b57428e7-s-chalk-node-modules-ansi-styles.lock
9984 silly lockFile 869e6209-he-ansi-styles-1-0-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\ansi-styles\1.0.0\package.tgz
9985 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\ansi-styles\1.0.0\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\869e6209-he-ansi-styles-1-0-0-package-tgz.lock
9986 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\has-color\0.1.2\package.tgz
9987 silly lockFile a0e83cce-les-chalk-node-modules-has-color tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\time-grunt\node_modules\chalk\node_modules\has-color
9988 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\time-grunt\node_modules\chalk\node_modules\has-color C:\Users\Gaston\AppData\Roaming\npm-cache\a0e83cce-les-chalk-node-modules-has-color.lock
9989 silly lockFile 5725e640-ache-has-color-0-1-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\has-color\0.1.2\package.tgz
9990 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\has-color\0.1.2\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\5725e640-ache-has-color-0-1-2-package-tgz.lock
9991 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\strip-ansi\0.1.1\package.tgz
9992 silly lockFile 6b936720-es-chalk-node-modules-strip-ansi tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\time-grunt\node_modules\chalk\node_modules\strip-ansi
9993 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\time-grunt\node_modules\chalk\node_modules\strip-ansi C:\Users\Gaston\AppData\Roaming\npm-cache\6b936720-es-chalk-node-modules-strip-ansi.lock
9994 silly lockFile 6dc73cca-che-strip-ansi-0-1-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\strip-ansi\0.1.1\package.tgz
9995 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\strip-ansi\0.1.1\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\6dc73cca-che-strip-ansi-0-1-1-package-tgz.lock
9996 silly gunzTarPerm modes [ '755', '644' ]
9997 silly gunzTarPerm modes [ '755', '644' ]
9998 silly gunzTarPerm modes [ '755', '644' ]
9999 silly gunzTarPerm extractEntry package.json
10000 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
10001 silly gunzTarPerm extractEntry package.json
10002 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
10003 silly gunzTarPerm extractEntry cli.js
10004 silly gunzTarPerm modified mode [ 'cli.js', 438, 420 ]
10005 silly gunzTarPerm extractEntry index.js
10006 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
10007 silly gunzTarPerm extractEntry package.json
10008 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
10009 silly gunzTarPerm extractEntry has-color.js
10010 silly gunzTarPerm modified mode [ 'has-color.js', 438, 420 ]
10011 silly gunzTarPerm extractEntry readme.md
10012 silly gunzTarPerm modified mode [ 'readme.md', 438, 420 ]
10013 silly gunzTarPerm extractEntry ansi-styles.js
10014 silly gunzTarPerm modified mode [ 'ansi-styles.js', 438, 420 ]
10015 silly gunzTarPerm extractEntry readme.md
10016 silly gunzTarPerm modified mode [ 'readme.md', 438, 420 ]
10017 silly gunzTarPerm extractEntry readme.md
10018 silly gunzTarPerm modified mode [ 'readme.md', 438, 420 ]
10019 silly lockFile a0e83cce-les-chalk-node-modules-has-color tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\time-grunt\node_modules\chalk\node_modules\has-color
10020 silly lockFile a0e83cce-les-chalk-node-modules-has-color tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\time-grunt\node_modules\chalk\node_modules\has-color
10021 silly lockFile 6b936720-es-chalk-node-modules-strip-ansi tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\time-grunt\node_modules\chalk\node_modules\strip-ansi
10022 silly lockFile 6b936720-es-chalk-node-modules-strip-ansi tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\time-grunt\node_modules\chalk\node_modules\strip-ansi
10023 silly lockFile 5725e640-ache-has-color-0-1-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\has-color\0.1.2\package.tgz
10024 silly lockFile 5725e640-ache-has-color-0-1-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\has-color\0.1.2\package.tgz
10025 silly lockFile 6dc73cca-che-strip-ansi-0-1-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\strip-ansi\0.1.1\package.tgz
10026 silly lockFile 6dc73cca-che-strip-ansi-0-1-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\strip-ansi\0.1.1\package.tgz
10027 silly lockFile b57428e7-s-chalk-node-modules-ansi-styles tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\time-grunt\node_modules\chalk\node_modules\ansi-styles
10028 silly lockFile b57428e7-s-chalk-node-modules-ansi-styles tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\time-grunt\node_modules\chalk\node_modules\ansi-styles
10029 silly lockFile 869e6209-he-ansi-styles-1-0-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\ansi-styles\1.0.0\package.tgz
10030 silly lockFile 869e6209-he-ansi-styles-1-0-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\ansi-styles\1.0.0\package.tgz
10031 info preinstall has-color@0.1.2
10032 info preinstall strip-ansi@0.1.1
10033 info preinstall ansi-styles@1.0.0
10034 verbose readDependencies using package.json deps
10035 verbose readDependencies using package.json deps
10036 silly resolved []
10037 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\time-grunt\node_modules\chalk\node_modules\has-color
10038 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\time-grunt\node_modules\chalk\node_modules\has-color
10039 verbose linkStuff [ false,
10039 verbose linkStuff   false,
10039 verbose linkStuff   false,
10039 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\time-grunt\\node_modules\\chalk\\node_modules' ]
10040 info linkStuff has-color@0.1.2
10041 verbose linkBins has-color@0.1.2
10042 verbose linkMans has-color@0.1.2
10043 verbose rebuildBundles has-color@0.1.2
10044 verbose readDependencies using package.json deps
10045 info install has-color@0.1.2
10046 verbose readDependencies using package.json deps
10047 verbose readDependencies using package.json deps
10048 silly resolved []
10049 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\time-grunt\node_modules\chalk\node_modules\strip-ansi
10050 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\time-grunt\node_modules\chalk\node_modules\strip-ansi
10051 verbose linkStuff [ false,
10051 verbose linkStuff   false,
10051 verbose linkStuff   false,
10051 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\time-grunt\\node_modules\\chalk\\node_modules' ]
10052 info linkStuff strip-ansi@0.1.1
10053 verbose linkBins strip-ansi@0.1.1
10054 verbose link bins [ { 'strip-ansi': 'cli.js' },
10054 verbose link bins   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\time-grunt\\node_modules\\chalk\\node_modules\\.bin',
10054 verbose link bins   false ]
10055 verbose linkMans strip-ansi@0.1.1
10056 verbose rebuildBundles strip-ansi@0.1.1
10057 verbose readDependencies using package.json deps
10058 silly resolved []
10059 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\time-grunt\node_modules\chalk\node_modules\ansi-styles
10060 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\time-grunt\node_modules\chalk\node_modules\ansi-styles
10061 verbose linkStuff [ false,
10061 verbose linkStuff   false,
10061 verbose linkStuff   false,
10061 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\time-grunt\\node_modules\\chalk\\node_modules' ]
10062 info linkStuff ansi-styles@1.0.0
10063 verbose linkBins ansi-styles@1.0.0
10064 verbose linkMans ansi-styles@1.0.0
10065 verbose rebuildBundles ansi-styles@1.0.0
10066 info postinstall has-color@0.1.2
10067 info install ansi-styles@1.0.0
10068 info postinstall ansi-styles@1.0.0
10069 info install strip-ansi@0.1.1
10070 info postinstall strip-ansi@0.1.1
10071 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\time-grunt\node_modules\chalk
10072 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\time-grunt\node_modules\chalk
10073 verbose linkStuff [ false,
10073 verbose linkStuff   false,
10073 verbose linkStuff   false,
10073 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\time-grunt\\node_modules' ]
10074 info linkStuff chalk@0.4.0
10075 verbose linkBins chalk@0.4.0
10076 verbose linkMans chalk@0.4.0
10077 verbose rebuildBundles chalk@0.4.0
10078 verbose rebuildBundles [ '.bin', 'ansi-styles', 'has-color', 'strip-ansi' ]
10079 info install chalk@0.4.0
10080 info postinstall chalk@0.4.0
10081 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\time-grunt
10082 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\time-grunt
10083 verbose linkStuff [ false,
10083 verbose linkStuff   false,
10083 verbose linkStuff   false,
10083 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules' ]
10084 info linkStuff time-grunt@0.2.7
10085 verbose linkBins time-grunt@0.2.7
10086 verbose linkMans time-grunt@0.2.7
10087 verbose rebuildBundles time-grunt@0.2.7
10088 verbose rebuildBundles [ 'chalk', 'hooker', 'text-table' ]
10089 info install time-grunt@0.2.7
10090 info postinstall time-grunt@0.2.7
10091 http 200 https://registry.npmjs.org/commander
10092 silly registry.get cb [ 200,
10092 silly registry.get   { date: 'Fri, 03 Jan 2014 19:38:33 GMT',
10092 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
10092 silly registry.get     etag: '"ETIUISUWDJT0WHV42I4WU4HLQ"',
10092 silly registry.get     'content-type': 'application/json',
10092 silly registry.get     'content-length': '153637',
10092 silly registry.get     'accept-ranges': 'bytes',
10092 silly registry.get     via: '1.1 varnish',
10092 silly registry.get     age: '369',
10092 silly registry.get     'x-served-by': 'cache-jfk1023-JFK',
10092 silly registry.get     'x-cache': 'HIT',
10092 silly registry.get     'x-cache-hits': '1',
10092 silly registry.get     'x-timer': 'S1388777912.958470106,VS0,VE53',
10092 silly registry.get     vary: 'Accept',
10092 silly registry.get     'keep-alive': 'timeout=10, max=44',
10092 silly registry.get     connection: 'Keep-Alive' } ]
10093 silly addNameRange number 2 { name: 'commander', range: '>=2.0.0-0 <2.1.0-0', hasData: true }
10094 silly addNameRange versions [ 'commander',
10094 silly addNameRange   [ '0.0.1',
10094 silly addNameRange     '0.0.3',
10094 silly addNameRange     '0.0.4',
10094 silly addNameRange     '0.0.5',
10094 silly addNameRange     '0.1.0',
10094 silly addNameRange     '0.2.0',
10094 silly addNameRange     '0.2.1',
10094 silly addNameRange     '0.3.0',
10094 silly addNameRange     '0.3.1',
10094 silly addNameRange     '0.3.2',
10094 silly addNameRange     '0.3.3',
10094 silly addNameRange     '0.4.0',
10094 silly addNameRange     '0.4.1',
10094 silly addNameRange     '0.4.2',
10094 silly addNameRange     '0.4.3',
10094 silly addNameRange     '0.5.0',
10094 silly addNameRange     '0.5.1',
10094 silly addNameRange     '0.6.0',
10094 silly addNameRange     '0.6.1',
10094 silly addNameRange     '0.5.2',
10094 silly addNameRange     '1.0.0',
10094 silly addNameRange     '1.0.1',
10094 silly addNameRange     '1.0.2',
10094 silly addNameRange     '1.0.3',
10094 silly addNameRange     '1.0.4',
10094 silly addNameRange     '1.0.5',
10094 silly addNameRange     '1.1.0',
10094 silly addNameRange     '1.1.1',
10094 silly addNameRange     '1.2.0',
10094 silly addNameRange     '1.3.0',
10094 silly addNameRange     '1.3.1',
10094 silly addNameRange     '1.3.2',
10094 silly addNameRange     '2.0.0',
10094 silly addNameRange     '2.1.0' ] ]
10095 verbose addNamed [ 'commander', '2.0.0' ]
10096 verbose addNamed [ '2.0.0', '2.0.0' ]
10097 silly lockFile d5315eb7-commander-2-0-0 commander@2.0.0
10098 verbose lock commander@2.0.0 C:\Users\Gaston\AppData\Roaming\npm-cache\d5315eb7-commander-2-0-0.lock
10099 silly lockFile 420d0e3b-rg-commander-commander-2-0-0-tgz https://registry.npmjs.org/commander/-/commander-2.0.0.tgz
10100 verbose lock https://registry.npmjs.org/commander/-/commander-2.0.0.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\420d0e3b-rg-commander-commander-2-0-0-tgz.lock
10101 verbose addRemoteTarball [ 'https://registry.npmjs.org/commander/-/commander-2.0.0.tgz',
10101 verbose addRemoteTarball   'd1b86f901f8b64bd941bdeadaf924530393be928' ]
10102 info retry fetch attempt 1 at 16:40:01
10103 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778001623-0.25608507031574845\tmp.tgz
10104 http GET https://registry.npmjs.org/commander/-/commander-2.0.0.tgz
10105 http 304 https://registry.npmjs.org/lru-cache
10106 silly registry.get cb [ 304,
10106 silly registry.get   { date: 'Fri, 03 Jan 2014 19:39:02 GMT',
10106 silly registry.get     server: 'Apache',
10106 silly registry.get     connection: 'Keep-Alive',
10106 silly registry.get     'keep-alive': 'timeout=10, max=43',
10106 silly registry.get     etag: '"8XDTEJTKCZVVQR8F38J9XBFW5"',
10106 silly registry.get     vary: 'Accept' } ]
10107 verbose etag lru-cache from cache
10108 silly addNameRange number 2 { name: 'lru-cache', range: '>=2.0.0-0 <3.0.0-0', hasData: true }
10109 silly addNameRange versions [ 'lru-cache',
10109 silly addNameRange   [ '1.0.1',
10109 silly addNameRange     '1.0.2',
10109 silly addNameRange     '1.0.3',
10109 silly addNameRange     '1.0.4',
10109 silly addNameRange     '1.0.5',
10109 silly addNameRange     '1.0.6',
10109 silly addNameRange     '1.1.0',
10109 silly addNameRange     '1.1.1',
10109 silly addNameRange     '2.0.0',
10109 silly addNameRange     '2.0.1',
10109 silly addNameRange     '2.0.2',
10109 silly addNameRange     '2.0.3',
10109 silly addNameRange     '2.0.4',
10109 silly addNameRange     '2.1.0',
10109 silly addNameRange     '2.2.0',
10109 silly addNameRange     '2.2.1',
10109 silly addNameRange     '2.2.2',
10109 silly addNameRange     '2.2.4',
10109 silly addNameRange     '2.3.0',
10109 silly addNameRange     '2.3.1',
10109 silly addNameRange     '2.5.0' ] ]
10110 verbose addNamed [ 'lru-cache', '2.5.0' ]
10111 verbose addNamed [ '2.5.0', '2.5.0' ]
10112 silly lockFile 30aa630e-lru-cache-2-5-0 lru-cache@2.5.0
10113 verbose lock lru-cache@2.5.0 C:\Users\Gaston\AppData\Roaming\npm-cache\30aa630e-lru-cache-2-5-0.lock
10114 silly lockFile 30aa630e-lru-cache-2-5-0 lru-cache@2.5.0
10115 silly lockFile 30aa630e-lru-cache-2-5-0 lru-cache@2.5.0
10116 silly lockFile b4f9d1ff-lru-cache-2 lru-cache@2
10117 silly lockFile b4f9d1ff-lru-cache-2 lru-cache@2
10118 http 304 https://registry.npmjs.org/sigmund
10119 silly registry.get cb [ 304,
10119 silly registry.get   { date: 'Fri, 03 Jan 2014 19:39:02 GMT',
10119 silly registry.get     server: 'Apache',
10119 silly registry.get     connection: 'Keep-Alive',
10119 silly registry.get     'keep-alive': 'timeout=10, max=42',
10119 silly registry.get     etag: '"1HD6GNM8EKTGCPCRL66MZK2B4"',
10119 silly registry.get     vary: 'Accept' } ]
10120 verbose etag sigmund from cache
10121 silly addNameRange number 2 { name: 'sigmund', range: '>=1.0.0-0 <1.1.0-0', hasData: true }
10122 silly addNameRange versions [ 'sigmund', [ '1.0.0' ] ]
10123 verbose addNamed [ 'sigmund', '1.0.0' ]
10124 verbose addNamed [ '1.0.0', '1.0.0' ]
10125 silly lockFile 7b2d1244-sigmund-1-0-0 sigmund@1.0.0
10126 verbose lock sigmund@1.0.0 C:\Users\Gaston\AppData\Roaming\npm-cache\7b2d1244-sigmund-1-0-0.lock
10127 silly lockFile 7b2d1244-sigmund-1-0-0 sigmund@1.0.0
10128 silly lockFile 7b2d1244-sigmund-1-0-0 sigmund@1.0.0
10129 silly lockFile 584a4a05-sigmund-1-0-0 sigmund@~1.0.0
10130 silly lockFile 584a4a05-sigmund-1-0-0 sigmund@~1.0.0
10131 silly resolved [ { name: 'lru-cache',
10131 silly resolved     description: 'A cache object that deletes the least-recently-used items.',
10131 silly resolved     version: '2.5.0',
10131 silly resolved     author: { name: 'Isaac Z. Schlueter', email: 'i@izs.me' },
10131 silly resolved     scripts: { test: 'tap test --gc' },
10131 silly resolved     main: 'lib/lru-cache.js',
10131 silly resolved     repository:
10131 silly resolved      { type: 'git',
10131 silly resolved        url: 'git://github.com/isaacs/node-lru-cache.git' },
10131 silly resolved     devDependencies: { tap: '', weak: '' },
10131 silly resolved     license:
10131 silly resolved      { type: 'MIT',
10131 silly resolved        url: 'http://github.com/isaacs/node-lru-cache/raw/master/LICENSE' },
10131 silly resolved     readme: '# lru cache\n\nA cache object that deletes the least-recently-used items.\n\n## Usage:\n\n```javascript\nvar LRU = require("lru-cache")\n  , options = { max: 500\n              , length: function (n) { return n * 2 }\n              , dispose: function (key, n) { n.close() }\n              , maxAge: 1000 * 60 * 60 }\n  , cache = LRU(options)\n  , otherCache = LRU(50) // sets just the max size\n\ncache.set("key", "value")\ncache.get("key") // "value"\n\ncache.reset()    // empty the cache\n```\n\nIf you put more stuff in it, then items will fall out.\n\nIf you try to put an oversized thing in it, then it\'ll fall out right\naway.\n\n## Options\n\n* `max` The maximum size of the cache, checked by applying the length\n  function to all values in the cache.  Not setting this is kind of\n  silly, since that\'s the whole purpose of this lib, but it defaults\n  to `Infinity`.\n* `maxAge` Maximum age in ms.  Items are not pro-actively pruned out\n  as they age, but if you try to get an item that is too old, it\'ll\n  drop it and return undefined instead of giving it to you.\n* `length` Function that is used to calculate the length of stored\n  items.  If you\'re storing strings or buffers, then you probably want\n  to do something like `function(n){return n.length}`.  The default is\n  `function(n){return 1}`, which is fine if you want to store `n`\n  like-sized things.\n* `dispose` Function that is called on items when they are dropped\n  from the cache.  This can be handy if you want to close file\n  descriptors or do other cleanup tasks when items are no longer\n  accessible.  Called with `key, value`.  It\'s called *before*\n  actually removing the item from the internal cache, so if you want\n  to immediately put it back in, you\'ll have to do that in a\n  `nextTick` or `setTimeout` callback or it won\'t do anything.\n* `stale` By default, if you set a `maxAge`, it\'ll only actually pull\n  stale items out of the cache when you `get(key)`.  (That is, it\'s\n  not pre-emptively doing a `setTimeout` or anything.)  If you set\n  `stale:true`, it\'ll return the stale value before deleting it.  If\n  you don\'t set this, then it\'ll return `undefined` when you try to\n  get a stale entry, as if it had already been deleted.\n\n## API\n\n* `set(key, value)`\n* `get(key) => value`\n\n    Both of these will update the "recently used"-ness of the key.\n    They do what you think.\n\n* `peek(key)`\n\n    Returns the key value (or `undefined` if not found) without\n    updating the "recently used"-ness of the key.\n\n    (If you find yourself using this a lot, you *might* be using the\n    wrong sort of data structure, but there are some use cases where\n    it\'s handy.)\n\n* `del(key)`\n\n    Deletes a key out of the cache.\n\n* `reset()`\n\n    Clear the cache entirely, throwing away all values.\n\n* `has(key)`\n\n    Check if a key is in the cache, without updating the recent-ness\n    or deleting it for being stale.\n\n* `forEach(function(value,key,cache), [thisp])`\n\n    Just like `Array.prototype.forEach`.  Iterates over all the keys\n    in the cache, in order of recent-ness.  (Ie, more recently used\n    items are iterated over first.)\n\n* `keys()`\n\n    Return an array of the keys in the cache.\n\n* `values()`\n\n    Return an array of the values in the cache.\n',
10131 silly resolved     readmeFilename: 'README.md',
10131 silly resolved     bugs: { url: 'https://github.com/isaacs/node-lru-cache/issues' },
10131 silly resolved     homepage: 'https://github.com/isaacs/node-lru-cache',
10131 silly resolved     _id: 'lru-cache@2.5.0',
10131 silly resolved     _from: 'lru-cache@2' },
10131 silly resolved   { name: 'sigmund',
10131 silly resolved     version: '1.0.0',
10131 silly resolved     description: 'Quick and dirty signatures for Objects.',
10131 silly resolved     main: 'sigmund.js',
10131 silly resolved     directories: { test: 'test' },
10131 silly resolved     dependencies: {},
10131 silly resolved     devDependencies: { tap: '~0.3.0' },
10131 silly resolved     scripts: { test: 'tap test/*.js', bench: 'node bench.js' },
10131 silly resolved     repository: { type: 'git', url: 'git://github.com/isaacs/sigmund' },
10131 silly resolved     keywords: [ 'object', 'signature', 'key', 'data', 'psychoanalysis' ],
10131 silly resolved     author:
10131 silly resolved      { name: 'Isaac Z. Schlueter',
10131 silly resolved        email: 'i@izs.me',
10131 silly resolved        url: 'http://blog.izs.me/' },
10131 silly resolved     license: 'BSD',
10131 silly resolved     readme: '# sigmund\n\nQuick and dirty signatures for Objects.\n\nThis is like a much faster `deepEquals` comparison, which returns a\nstring key suitable for caches and the like.\n\n## Usage\n\n```javascript\nfunction doSomething (someObj) {\n  var key = sigmund(someObj, maxDepth) // max depth defaults to 10\n  var cached = cache.get(key)\n  if (cached) return cached)\n\n  var result = expensiveCalculation(someObj)\n  cache.set(key, result)\n  return result\n}\n```\n\nThe resulting key will be as unique and reproducible as calling\n`JSON.stringify` or `util.inspect` on the object, but is much faster.\nIn order to achieve this speed, some differences are glossed over.\nFor example, the object `{0:\'foo\'}` will be treated identically to the\narray `[\'foo\']`.\n\nAlso, just as there is no way to summon the soul from the scribblings\nof a cocain-addled psychoanalyst, there is no way to revive the object\nfrom the signature string that sigmund gives you.  In fact, it\'s\nbarely even readable.\n\nAs with `sys.inspect` and `JSON.stringify`, larger objects will\nproduce larger signature strings.\n\nBecause sigmund is a bit less strict than the more thorough\nalternatives, the strings will be shorter, and also there is a\nslightly higher chance for collisions.  For example, these objects\nhave the same signature:\n\n    var obj1 = {a:\'b\',c:/def/,g:[\'h\',\'i\',{j:\'\',k:\'l\'}]}\n    var obj2 = {a:\'b\',c:\'/def/\',g:[\'h\',\'i\',\'{jkl\']}\n\nLike a good Freudian, sigmund is most effective when you already have\nsome understanding of what you\'re looking for.  It can help you help\nyourself, but you must be willing to do some work as well.\n\nCycles are handled, and cyclical objects are silently omitted (though\nthe key is included in the signature output.)\n\nThe second argument is the maximum depth, which defaults to 10,\nbecause that is the maximum object traversal depth covered by most\ninsurance carriers.\n',
10131 silly resolved     readmeFilename: 'README.md',
10131 silly resolved     bugs: { url: 'https://github.com/isaacs/sigmund/issues' },
10131 silly resolved     homepage: 'https://github.com/isaacs/sigmund',
10131 silly resolved     _id: 'sigmund@1.0.0',
10131 silly resolved     _from: 'sigmund@~1.0.0' } ]
10132 info install lru-cache@2.5.0 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\minimatch
10133 info install sigmund@1.0.0 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\minimatch
10134 info installOne lru-cache@2.5.0
10135 info installOne sigmund@1.0.0
10136 silly resolved [ { name: 'lru-cache',
10136 silly resolved     description: 'A cache object that deletes the least-recently-used items.',
10136 silly resolved     version: '2.5.0',
10136 silly resolved     author: { name: 'Isaac Z. Schlueter', email: 'i@izs.me' },
10136 silly resolved     scripts: { test: 'tap test --gc' },
10136 silly resolved     main: 'lib/lru-cache.js',
10136 silly resolved     repository:
10136 silly resolved      { type: 'git',
10136 silly resolved        url: 'git://github.com/isaacs/node-lru-cache.git' },
10136 silly resolved     devDependencies: { tap: '', weak: '' },
10136 silly resolved     license:
10136 silly resolved      { type: 'MIT',
10136 silly resolved        url: 'http://github.com/isaacs/node-lru-cache/raw/master/LICENSE' },
10136 silly resolved     readme: '# lru cache\n\nA cache object that deletes the least-recently-used items.\n\n## Usage:\n\n```javascript\nvar LRU = require("lru-cache")\n  , options = { max: 500\n              , length: function (n) { return n * 2 }\n              , dispose: function (key, n) { n.close() }\n              , maxAge: 1000 * 60 * 60 }\n  , cache = LRU(options)\n  , otherCache = LRU(50) // sets just the max size\n\ncache.set("key", "value")\ncache.get("key") // "value"\n\ncache.reset()    // empty the cache\n```\n\nIf you put more stuff in it, then items will fall out.\n\nIf you try to put an oversized thing in it, then it\'ll fall out right\naway.\n\n## Options\n\n* `max` The maximum size of the cache, checked by applying the length\n  function to all values in the cache.  Not setting this is kind of\n  silly, since that\'s the whole purpose of this lib, but it defaults\n  to `Infinity`.\n* `maxAge` Maximum age in ms.  Items are not pro-actively pruned out\n  as they age, but if you try to get an item that is too old, it\'ll\n  drop it and return undefined instead of giving it to you.\n* `length` Function that is used to calculate the length of stored\n  items.  If you\'re storing strings or buffers, then you probably want\n  to do something like `function(n){return n.length}`.  The default is\n  `function(n){return 1}`, which is fine if you want to store `n`\n  like-sized things.\n* `dispose` Function that is called on items when they are dropped\n  from the cache.  This can be handy if you want to close file\n  descriptors or do other cleanup tasks when items are no longer\n  accessible.  Called with `key, value`.  It\'s called *before*\n  actually removing the item from the internal cache, so if you want\n  to immediately put it back in, you\'ll have to do that in a\n  `nextTick` or `setTimeout` callback or it won\'t do anything.\n* `stale` By default, if you set a `maxAge`, it\'ll only actually pull\n  stale items out of the cache when you `get(key)`.  (That is, it\'s\n  not pre-emptively doing a `setTimeout` or anything.)  If you set\n  `stale:true`, it\'ll return the stale value before deleting it.  If\n  you don\'t set this, then it\'ll return `undefined` when you try to\n  get a stale entry, as if it had already been deleted.\n\n## API\n\n* `set(key, value)`\n* `get(key) => value`\n\n    Both of these will update the "recently used"-ness of the key.\n    They do what you think.\n\n* `peek(key)`\n\n    Returns the key value (or `undefined` if not found) without\n    updating the "recently used"-ness of the key.\n\n    (If you find yourself using this a lot, you *might* be using the\n    wrong sort of data structure, but there are some use cases where\n    it\'s handy.)\n\n* `del(key)`\n\n    Deletes a key out of the cache.\n\n* `reset()`\n\n    Clear the cache entirely, throwing away all values.\n\n* `has(key)`\n\n    Check if a key is in the cache, without updating the recent-ness\n    or deleting it for being stale.\n\n* `forEach(function(value,key,cache), [thisp])`\n\n    Just like `Array.prototype.forEach`.  Iterates over all the keys\n    in the cache, in order of recent-ness.  (Ie, more recently used\n    items are iterated over first.)\n\n* `keys()`\n\n    Return an array of the keys in the cache.\n\n* `values()`\n\n    Return an array of the values in the cache.\n',
10136 silly resolved     readmeFilename: 'README.md',
10136 silly resolved     bugs: { url: 'https://github.com/isaacs/node-lru-cache/issues' },
10136 silly resolved     homepage: 'https://github.com/isaacs/node-lru-cache',
10136 silly resolved     _id: 'lru-cache@2.5.0',
10136 silly resolved     _from: 'lru-cache@2' },
10136 silly resolved   { name: 'sigmund',
10136 silly resolved     version: '1.0.0',
10136 silly resolved     description: 'Quick and dirty signatures for Objects.',
10136 silly resolved     main: 'sigmund.js',
10136 silly resolved     directories: { test: 'test' },
10136 silly resolved     dependencies: {},
10136 silly resolved     devDependencies: { tap: '~0.3.0' },
10136 silly resolved     scripts: { test: 'tap test/*.js', bench: 'node bench.js' },
10136 silly resolved     repository: { type: 'git', url: 'git://github.com/isaacs/sigmund' },
10136 silly resolved     keywords: [ 'object', 'signature', 'key', 'data', 'psychoanalysis' ],
10136 silly resolved     author:
10136 silly resolved      { name: 'Isaac Z. Schlueter',
10136 silly resolved        email: 'i@izs.me',
10136 silly resolved        url: 'http://blog.izs.me/' },
10136 silly resolved     license: 'BSD',
10136 silly resolved     readme: '# sigmund\n\nQuick and dirty signatures for Objects.\n\nThis is like a much faster `deepEquals` comparison, which returns a\nstring key suitable for caches and the like.\n\n## Usage\n\n```javascript\nfunction doSomething (someObj) {\n  var key = sigmund(someObj, maxDepth) // max depth defaults to 10\n  var cached = cache.get(key)\n  if (cached) return cached)\n\n  var result = expensiveCalculation(someObj)\n  cache.set(key, result)\n  return result\n}\n```\n\nThe resulting key will be as unique and reproducible as calling\n`JSON.stringify` or `util.inspect` on the object, but is much faster.\nIn order to achieve this speed, some differences are glossed over.\nFor example, the object `{0:\'foo\'}` will be treated identically to the\narray `[\'foo\']`.\n\nAlso, just as there is no way to summon the soul from the scribblings\nof a cocain-addled psychoanalyst, there is no way to revive the object\nfrom the signature string that sigmund gives you.  In fact, it\'s\nbarely even readable.\n\nAs with `sys.inspect` and `JSON.stringify`, larger objects will\nproduce larger signature strings.\n\nBecause sigmund is a bit less strict than the more thorough\nalternatives, the strings will be shorter, and also there is a\nslightly higher chance for collisions.  For example, these objects\nhave the same signature:\n\n    var obj1 = {a:\'b\',c:/def/,g:[\'h\',\'i\',{j:\'\',k:\'l\'}]}\n    var obj2 = {a:\'b\',c:\'/def/\',g:[\'h\',\'i\',\'{jkl\']}\n\nLike a good Freudian, sigmund is most effective when you already have\nsome understanding of what you\'re looking for.  It can help you help\nyourself, but you must be willing to do some work as well.\n\nCycles are handled, and cyclical objects are silently omitted (though\nthe key is included in the signature output.)\n\nThe second argument is the maximum depth, which defaults to 10,\nbecause that is the maximum object traversal depth covered by most\ninsurance carriers.\n',
10136 silly resolved     readmeFilename: 'README.md',
10136 silly resolved     bugs: { url: 'https://github.com/isaacs/sigmund/issues' },
10136 silly resolved     homepage: 'https://github.com/isaacs/sigmund',
10136 silly resolved     _id: 'sigmund@1.0.0',
10136 silly resolved     _from: 'sigmund@~1.0.0' } ]
10137 info install lru-cache@2.5.0 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob\node_modules\minimatch
10138 info install sigmund@1.0.0 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob\node_modules\minimatch
10139 info installOne lru-cache@2.5.0
10140 info installOne sigmund@1.0.0
10141 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\minimatch\node_modules\lru-cache unbuild
10142 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\minimatch\node_modules\sigmund unbuild
10143 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob\node_modules\minimatch\node_modules\lru-cache unbuild
10144 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob\node_modules\minimatch\node_modules\sigmund unbuild
10145 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\lru-cache\2.5.0\package.tgz
10146 silly lockFile 7d77ad4a-minimatch-node-modules-lru-cache tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\minimatch\node_modules\lru-cache
10147 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\minimatch\node_modules\lru-cache C:\Users\Gaston\AppData\Roaming\npm-cache\7d77ad4a-minimatch-node-modules-lru-cache.lock
10148 silly lockFile 7ace0446-ache-lru-cache-2-5-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\lru-cache\2.5.0\package.tgz
10149 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\lru-cache\2.5.0\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\7ace0446-ache-lru-cache-2-5-0-package-tgz.lock
10150 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\sigmund\1.0.0\package.tgz
10151 silly lockFile d986d616-s-minimatch-node-modules-sigmund tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\minimatch\node_modules\sigmund
10152 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\minimatch\node_modules\sigmund C:\Users\Gaston\AppData\Roaming\npm-cache\d986d616-s-minimatch-node-modules-sigmund.lock
10153 silly lockFile d8e8b3e0--cache-sigmund-1-0-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\sigmund\1.0.0\package.tgz
10154 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\sigmund\1.0.0\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\d8e8b3e0--cache-sigmund-1-0-0-package-tgz.lock
10155 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\lru-cache\2.5.0\package.tgz
10156 silly lockFile 64b5e268-minimatch-node-modules-lru-cache tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob\node_modules\minimatch\node_modules\lru-cache
10157 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob\node_modules\minimatch\node_modules\lru-cache C:\Users\Gaston\AppData\Roaming\npm-cache\64b5e268-minimatch-node-modules-lru-cache.lock
10158 silly lockFile 7ace0446-ache-lru-cache-2-5-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\lru-cache\2.5.0\package.tgz
10159 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\lru-cache\2.5.0\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\7ace0446-ache-lru-cache-2-5-0-package-tgz.lock
10160 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\sigmund\1.0.0\package.tgz
10161 silly lockFile 6d6d97f3-s-minimatch-node-modules-sigmund tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob\node_modules\minimatch\node_modules\sigmund
10162 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob\node_modules\minimatch\node_modules\sigmund C:\Users\Gaston\AppData\Roaming\npm-cache\6d6d97f3-s-minimatch-node-modules-sigmund.lock
10163 silly lockFile d8e8b3e0--cache-sigmund-1-0-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\sigmund\1.0.0\package.tgz
10164 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\sigmund\1.0.0\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\d8e8b3e0--cache-sigmund-1-0-0-package-tgz.lock
10165 silly gunzTarPerm modes [ '755', '644' ]
10166 silly gunzTarPerm modes [ '755', '644' ]
10167 silly gunzTarPerm extractEntry package.json
10168 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
10169 silly gunzTarPerm extractEntry README.md
10170 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
10171 silly gunzTarPerm extractEntry LICENSE
10172 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
10173 silly gunzTarPerm extractEntry bench.js
10174 silly gunzTarPerm modified mode [ 'bench.js', 438, 420 ]
10175 silly gunzTarPerm extractEntry sigmund.js
10176 silly gunzTarPerm modified mode [ 'sigmund.js', 438, 420 ]
10177 silly gunzTarPerm extractEntry test/basic.js
10178 silly gunzTarPerm modified mode [ 'test/basic.js', 438, 420 ]
10179 silly gunzTarPerm extractEntry package.json
10180 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
10181 silly gunzTarPerm extractEntry .npmignore
10182 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
10183 silly gunzTarPerm extractEntry README.md
10184 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
10185 silly gunzTarPerm extractEntry LICENSE
10186 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
10187 silly gunzTarPerm extractEntry CONTRIBUTORS
10188 silly gunzTarPerm modified mode [ 'CONTRIBUTORS', 438, 420 ]
10189 silly gunzTarPerm extractEntry lib/lru-cache.js
10190 silly gunzTarPerm modified mode [ 'lib/lru-cache.js', 438, 420 ]
10191 silly gunzTarPerm extractEntry test/basic.js
10192 silly gunzTarPerm modified mode [ 'test/basic.js', 438, 420 ]
10193 silly gunzTarPerm extractEntry test/foreach.js
10194 silly gunzTarPerm modified mode [ 'test/foreach.js', 438, 420 ]
10195 silly gunzTarPerm extractEntry test/memory-leak.js
10196 silly gunzTarPerm modified mode [ 'test/memory-leak.js', 438, 420 ]
10197 silly lockFile d986d616-s-minimatch-node-modules-sigmund tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\minimatch\node_modules\sigmund
10198 silly lockFile d986d616-s-minimatch-node-modules-sigmund tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\minimatch\node_modules\sigmund
10199 silly lockFile d8e8b3e0--cache-sigmund-1-0-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\sigmund\1.0.0\package.tgz
10200 silly lockFile d8e8b3e0--cache-sigmund-1-0-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\sigmund\1.0.0\package.tgz
10201 silly gunzTarPerm modes [ '755', '644' ]
10202 info preinstall sigmund@1.0.0
10203 silly gunzTarPerm extractEntry package.json
10204 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
10205 verbose readDependencies using package.json deps
10206 verbose readDependencies using package.json deps
10207 silly resolved []
10208 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\minimatch\node_modules\sigmund
10209 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\minimatch\node_modules\sigmund
10210 verbose linkStuff [ false,
10210 verbose linkStuff   false,
10210 verbose linkStuff   false,
10210 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\load-grunt-tasks\\node_modules\\globule\\node_modules\\minimatch\\node_modules' ]
10211 info linkStuff sigmund@1.0.0
10212 verbose linkBins sigmund@1.0.0
10213 verbose linkMans sigmund@1.0.0
10214 verbose rebuildBundles sigmund@1.0.0
10215 silly gunzTarPerm extractEntry README.md
10216 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
10217 silly gunzTarPerm extractEntry LICENSE
10218 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
10219 info install sigmund@1.0.0
10220 info postinstall sigmund@1.0.0
10221 silly gunzTarPerm extractEntry bench.js
10222 silly gunzTarPerm modified mode [ 'bench.js', 438, 420 ]
10223 silly gunzTarPerm extractEntry sigmund.js
10224 silly gunzTarPerm modified mode [ 'sigmund.js', 438, 420 ]
10225 silly gunzTarPerm extractEntry test/basic.js
10226 silly gunzTarPerm modified mode [ 'test/basic.js', 438, 420 ]
10227 silly lockFile 7d77ad4a-minimatch-node-modules-lru-cache tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\minimatch\node_modules\lru-cache
10228 silly lockFile 7d77ad4a-minimatch-node-modules-lru-cache tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\minimatch\node_modules\lru-cache
10229 silly lockFile 7ace0446-ache-lru-cache-2-5-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\lru-cache\2.5.0\package.tgz
10230 silly lockFile 7ace0446-ache-lru-cache-2-5-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\lru-cache\2.5.0\package.tgz
10231 info preinstall lru-cache@2.5.0
10232 verbose readDependencies using package.json deps
10233 verbose readDependencies using package.json deps
10234 silly resolved []
10235 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\minimatch\node_modules\lru-cache
10236 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\minimatch\node_modules\lru-cache
10237 verbose linkStuff [ false,
10237 verbose linkStuff   false,
10237 verbose linkStuff   false,
10237 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\load-grunt-tasks\\node_modules\\globule\\node_modules\\minimatch\\node_modules' ]
10238 info linkStuff lru-cache@2.5.0
10239 verbose linkBins lru-cache@2.5.0
10240 verbose linkMans lru-cache@2.5.0
10241 verbose rebuildBundles lru-cache@2.5.0
10242 info install lru-cache@2.5.0
10243 info postinstall lru-cache@2.5.0
10244 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\minimatch
10245 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule\node_modules\minimatch
10246 verbose linkStuff [ false,
10246 verbose linkStuff   false,
10246 verbose linkStuff   false,
10246 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\load-grunt-tasks\\node_modules\\globule\\node_modules' ]
10247 info linkStuff minimatch@0.2.14
10248 verbose linkBins minimatch@0.2.14
10249 verbose linkMans minimatch@0.2.14
10250 verbose rebuildBundles minimatch@0.2.14
10251 verbose rebuildBundles [ 'lru-cache', 'sigmund' ]
10252 info install minimatch@0.2.14
10253 info postinstall minimatch@0.2.14
10254 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule
10255 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\globule
10256 verbose linkStuff [ false,
10256 verbose linkStuff   false,
10256 verbose linkStuff   false,
10256 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\load-grunt-tasks\\node_modules' ]
10257 info linkStuff globule@0.1.0
10258 verbose linkBins globule@0.1.0
10259 verbose linkMans globule@0.1.0
10260 verbose rebuildBundles globule@0.1.0
10261 verbose rebuildBundles [ 'glob', 'lodash', 'minimatch' ]
10262 info install globule@0.1.0
10263 silly gunzTarPerm modes [ '755', '644' ]
10264 info postinstall globule@0.1.0
10265 silly lockFile 6d6d97f3-s-minimatch-node-modules-sigmund tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob\node_modules\minimatch\node_modules\sigmund
10266 silly lockFile 6d6d97f3-s-minimatch-node-modules-sigmund tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob\node_modules\minimatch\node_modules\sigmund
10267 silly lockFile d8e8b3e0--cache-sigmund-1-0-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\sigmund\1.0.0\package.tgz
10268 silly lockFile d8e8b3e0--cache-sigmund-1-0-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\sigmund\1.0.0\package.tgz
10269 silly gunzTarPerm extractEntry package.json
10270 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
10271 silly gunzTarPerm extractEntry .npmignore
10272 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
10273 silly gunzTarPerm extractEntry README.md
10274 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
10275 info preinstall sigmund@1.0.0
10276 verbose readDependencies using package.json deps
10277 verbose readDependencies using package.json deps
10278 silly resolved []
10279 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob\node_modules\minimatch\node_modules\sigmund
10280 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob\node_modules\minimatch\node_modules\sigmund
10281 verbose linkStuff [ false,
10281 verbose linkStuff   false,
10281 verbose linkStuff   false,
10281 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\load-grunt-tasks\\node_modules\\findup-sync\\node_modules\\glob\\node_modules\\minimatch\\node_modules' ]
10282 info linkStuff sigmund@1.0.0
10283 verbose linkBins sigmund@1.0.0
10284 verbose linkMans sigmund@1.0.0
10285 verbose rebuildBundles sigmund@1.0.0
10286 info install sigmund@1.0.0
10287 info postinstall sigmund@1.0.0
10288 silly gunzTarPerm extractEntry LICENSE
10289 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
10290 silly gunzTarPerm extractEntry CONTRIBUTORS
10291 silly gunzTarPerm modified mode [ 'CONTRIBUTORS', 438, 420 ]
10292 silly gunzTarPerm extractEntry lib/lru-cache.js
10293 silly gunzTarPerm modified mode [ 'lib/lru-cache.js', 438, 420 ]
10294 silly gunzTarPerm extractEntry test/basic.js
10295 silly gunzTarPerm modified mode [ 'test/basic.js', 438, 420 ]
10296 silly gunzTarPerm extractEntry test/foreach.js
10297 silly gunzTarPerm modified mode [ 'test/foreach.js', 438, 420 ]
10298 silly gunzTarPerm extractEntry test/memory-leak.js
10299 silly gunzTarPerm modified mode [ 'test/memory-leak.js', 438, 420 ]
10300 silly lockFile 64b5e268-minimatch-node-modules-lru-cache tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob\node_modules\minimatch\node_modules\lru-cache
10301 silly lockFile 64b5e268-minimatch-node-modules-lru-cache tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob\node_modules\minimatch\node_modules\lru-cache
10302 silly lockFile 7ace0446-ache-lru-cache-2-5-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\lru-cache\2.5.0\package.tgz
10303 silly lockFile 7ace0446-ache-lru-cache-2-5-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\lru-cache\2.5.0\package.tgz
10304 info preinstall lru-cache@2.5.0
10305 verbose readDependencies using package.json deps
10306 verbose readDependencies using package.json deps
10307 silly resolved []
10308 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob\node_modules\minimatch\node_modules\lru-cache
10309 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob\node_modules\minimatch\node_modules\lru-cache
10310 verbose linkStuff [ false,
10310 verbose linkStuff   false,
10310 verbose linkStuff   false,
10310 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\load-grunt-tasks\\node_modules\\findup-sync\\node_modules\\glob\\node_modules\\minimatch\\node_modules' ]
10311 info linkStuff lru-cache@2.5.0
10312 verbose linkBins lru-cache@2.5.0
10313 verbose linkMans lru-cache@2.5.0
10314 verbose rebuildBundles lru-cache@2.5.0
10315 info install lru-cache@2.5.0
10316 info postinstall lru-cache@2.5.0
10317 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob\node_modules\minimatch
10318 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob\node_modules\minimatch
10319 verbose linkStuff [ false,
10319 verbose linkStuff   false,
10319 verbose linkStuff   false,
10319 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\load-grunt-tasks\\node_modules\\findup-sync\\node_modules\\glob\\node_modules' ]
10320 info linkStuff minimatch@0.2.14
10321 verbose linkBins minimatch@0.2.14
10322 verbose linkMans minimatch@0.2.14
10323 verbose rebuildBundles minimatch@0.2.14
10324 verbose rebuildBundles [ 'lru-cache', 'sigmund' ]
10325 info install minimatch@0.2.14
10326 info postinstall minimatch@0.2.14
10327 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob
10328 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync\node_modules\glob
10329 verbose linkStuff [ false,
10329 verbose linkStuff   false,
10329 verbose linkStuff   false,
10329 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\load-grunt-tasks\\node_modules\\findup-sync\\node_modules' ]
10330 info linkStuff glob@3.1.21
10331 verbose linkBins glob@3.1.21
10332 verbose linkMans glob@3.1.21
10333 verbose rebuildBundles glob@3.1.21
10334 verbose rebuildBundles [ 'graceful-fs', 'inherits', 'minimatch' ]
10335 info install glob@3.1.21
10336 info postinstall glob@3.1.21
10337 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync
10338 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks\node_modules\findup-sync
10339 verbose linkStuff [ false,
10339 verbose linkStuff   false,
10339 verbose linkStuff   false,
10339 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\load-grunt-tasks\\node_modules' ]
10340 info linkStuff findup-sync@0.1.2
10341 verbose linkBins findup-sync@0.1.2
10342 verbose linkMans findup-sync@0.1.2
10343 verbose rebuildBundles findup-sync@0.1.2
10344 verbose rebuildBundles [ 'glob', 'lodash' ]
10345 info install findup-sync@0.1.2
10346 info postinstall findup-sync@0.1.2
10347 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks
10348 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\load-grunt-tasks
10349 verbose linkStuff [ false,
10349 verbose linkStuff   false,
10349 verbose linkStuff   false,
10349 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules' ]
10350 info linkStuff load-grunt-tasks@0.2.1
10351 verbose linkBins load-grunt-tasks@0.2.1
10352 verbose linkMans load-grunt-tasks@0.2.1
10353 verbose rebuildBundles load-grunt-tasks@0.2.1
10354 verbose rebuildBundles [ 'findup-sync', 'globule' ]
10355 info install load-grunt-tasks@0.2.1
10356 info postinstall load-grunt-tasks@0.2.1
10357 http 200 https://registry.npmjs.org/commander/-/commander-2.0.0.tgz
10358 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778001623-0.25608507031574845\tmp.tgz
10359 silly lockFile 19830004-1623-0-25608507031574845-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778001623-0.25608507031574845\package
10360 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778001623-0.25608507031574845\package C:\Users\Gaston\AppData\Roaming\npm-cache\19830004-1623-0-25608507031574845-package.lock
10361 silly lockFile bb8bf1cd-1623-0-25608507031574845-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778001623-0.25608507031574845\tmp.tgz
10362 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778001623-0.25608507031574845\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\bb8bf1cd-1623-0-25608507031574845-tmp-tgz.lock
10363 silly gunzTarPerm modes [ '755', '644' ]
10364 silly gunzTarPerm extractEntry package.json
10365 silly gunzTarPerm extractEntry index.js
10366 silly gunzTarPerm extractEntry History.md
10367 silly gunzTarPerm extractEntry Readme.md
10368 silly lockFile 19830004-1623-0-25608507031574845-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778001623-0.25608507031574845\package
10369 silly lockFile 19830004-1623-0-25608507031574845-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778001623-0.25608507031574845\package
10370 silly lockFile bb8bf1cd-1623-0-25608507031574845-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778001623-0.25608507031574845\tmp.tgz
10371 silly lockFile bb8bf1cd-1623-0-25608507031574845-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778001623-0.25608507031574845\tmp.tgz
10372 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\commander\\2.0.0\\package.tgz',
10372 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388778001623-0.25608507031574845\\package' ]
10373 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\commander\2.0.0\package.tgz
10374 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778001623-0.25608507031574845\package
10375 silly lockFile 19830004-1623-0-25608507031574845-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778001623-0.25608507031574845\package
10376 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778001623-0.25608507031574845\package C:\Users\Gaston\AppData\Roaming\npm-cache\19830004-1623-0-25608507031574845-package.lock
10377 silly lockFile 28ff84f3-ache-commander-2-0-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\commander\2.0.0\package.tgz
10378 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\commander\2.0.0\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\28ff84f3-ache-commander-2-0-0-package-tgz.lock
10379 silly lockFile 19830004-1623-0-25608507031574845-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778001623-0.25608507031574845\package
10380 silly lockFile 19830004-1623-0-25608507031574845-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778001623-0.25608507031574845\package
10381 silly lockFile 28ff84f3-ache-commander-2-0-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\commander\2.0.0\package.tgz
10382 silly lockFile 28ff84f3-ache-commander-2-0-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\commander\2.0.0\package.tgz
10383 silly lockFile 8fd04eef-pm-cache-commander-2-0-0-package C:\Users\Gaston\AppData\Roaming\npm-cache\commander\2.0.0\package
10384 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\commander\2.0.0\package C:\Users\Gaston\AppData\Roaming\npm-cache\8fd04eef-pm-cache-commander-2-0-0-package.lock
10385 silly lockFile 8fd04eef-pm-cache-commander-2-0-0-package C:\Users\Gaston\AppData\Roaming\npm-cache\commander\2.0.0\package
10386 silly lockFile 8fd04eef-pm-cache-commander-2-0-0-package C:\Users\Gaston\AppData\Roaming\npm-cache\commander\2.0.0\package
10387 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\commander\2.0.0\package.tgz
10388 silly lockFile 03aa5a12-pm-cache-commander-2-0-0-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\commander\2.0.0\package
10389 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\commander\2.0.0\package C:\Users\Gaston\AppData\Roaming\npm-cache\03aa5a12-pm-cache-commander-2-0-0-package.lock
10390 silly lockFile 28ff84f3-ache-commander-2-0-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\commander\2.0.0\package.tgz
10391 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\commander\2.0.0\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\28ff84f3-ache-commander-2-0-0-package-tgz.lock
10392 silly gunzTarPerm modes [ '755', '644' ]
10393 silly gunzTarPerm extractEntry package.json
10394 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
10395 silly gunzTarPerm extractEntry index.js
10396 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
10397 silly gunzTarPerm extractEntry History.md
10398 silly gunzTarPerm modified mode [ 'History.md', 438, 420 ]
10399 silly gunzTarPerm extractEntry Readme.md
10400 silly gunzTarPerm modified mode [ 'Readme.md', 438, 420 ]
10401 silly lockFile 03aa5a12-pm-cache-commander-2-0-0-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\commander\2.0.0\package
10402 silly lockFile 03aa5a12-pm-cache-commander-2-0-0-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\commander\2.0.0\package
10403 silly lockFile 28ff84f3-ache-commander-2-0-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\commander\2.0.0\package.tgz
10404 silly lockFile 28ff84f3-ache-commander-2-0-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\commander\2.0.0\package.tgz
10405 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\commander\2.0.0\package.tgz 644
10406 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\commander\2.0.0\package.tgz
10407 silly lockFile 420d0e3b-rg-commander-commander-2-0-0-tgz https://registry.npmjs.org/commander/-/commander-2.0.0.tgz
10408 silly lockFile 420d0e3b-rg-commander-commander-2-0-0-tgz https://registry.npmjs.org/commander/-/commander-2.0.0.tgz
10409 silly lockFile d5315eb7-commander-2-0-0 commander@2.0.0
10410 silly lockFile d5315eb7-commander-2-0-0 commander@2.0.0
10411 silly lockFile f7c90c0d-commander-2-0-x commander@2.0.x
10412 silly lockFile f7c90c0d-commander-2-0-x commander@2.0.x
10413 silly resolved [ { name: 'commander',
10413 silly resolved     version: '2.0.0',
10413 silly resolved     description: 'the complete solution for node.js command-line programs',
10413 silly resolved     keywords: [ 'command', 'option', 'parser', 'prompt', 'stdin' ],
10413 silly resolved     author: { name: 'TJ Holowaychuk', email: 'tj@vision-media.ca' },
10413 silly resolved     repository:
10413 silly resolved      { type: 'git',
10413 silly resolved        url: 'https://github.com/visionmedia/commander.js.git' },
10413 silly resolved     devDependencies: { should: '>= 0.0.1' },
10413 silly resolved     scripts: { test: 'make test' },
10413 silly resolved     main: 'index',
10413 silly resolved     engines: { node: '>= 0.6.x' },
10413 silly resolved     readme: '# Commander.js\n\n  The complete solution for [node.js](http://nodejs.org) command-line interfaces, inspired by Ruby\'s [commander](https://github.com/visionmedia/commander).\n\n [![Build Status](https://secure.travis-ci.org/visionmedia/commander.js.png)](http://travis-ci.org/visionmedia/commander.js)\n\n## Installation\n\n    $ npm install commander\n\n## Option parsing\n\n Options with commander are defined with the `.option()` method, also serving as documentation for the options. The example below parses args and options from `process.argv`, leaving remaining args as the `program.args` array which were not consumed by options.\n\n```js\n#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n\nvar program = require(\'commander\');\n\nprogram\n  .version(\'0.0.1\')\n  .option(\'-p, --peppers\', \'Add peppers\')\n  .option(\'-P, --pineapple\', \'Add pineapple\')\n  .option(\'-b, --bbq\', \'Add bbq sauce\')\n  .option(\'-c, --cheese [type]\', \'Add the specified type of cheese [marble]\', \'marble\')\n  .parse(process.argv);\n\nconsole.log(\'you ordered a pizza with:\');\nif (program.peppers) console.log(\'  - peppers\');\nif (program.pineapple) console.log(\'  - pineapple\');\nif (program.bbq) console.log(\'  - bbq\');\nconsole.log(\'  - %s cheese\', program.cheese);\n```\n\n Short flags may be passed as a single arg, for example `-abc` is equivalent to `-a -b -c`. Multi-word options such as "--template-engine" are camel-cased, becoming `program.templateEngine` etc.\n\n## Automated --help\n\n The help information is auto-generated based on the information commander already knows about your program, so the following `--help` info is for free:\n\n```  \n $ ./examples/pizza --help\n\n   Usage: pizza [options]\n\n   Options:\n\n     -V, --version        output the version number\n     -p, --peppers        Add peppers\n     -P, --pineapple      Add pineapple\n     -b, --bbq            Add bbq sauce\n     -c, --cheese <type>  Add the specified type of cheese [marble]\n     -h, --help           output usage information\n\n```\n\n## Coercion\n\n```js\nfunction range(val) {\n  return val.split(\'..\').map(Number);\n}\n\nfunction list(val) {\n  return val.split(\',\');\n}\n\nprogram\n  .version(\'0.0.1\')\n  .usage(\'[options] <file ...>\')\n  .option(\'-i, --integer <n>\', \'An integer argument\', parseInt)\n  .option(\'-f, --float <n>\', \'A float argument\', parseFloat)\n  .option(\'-r, --range <a>..<b>\', \'A range\', range)\n  .option(\'-l, --list <items>\', \'A list\', list)\n  .option(\'-o, --optional [value]\', \'An optional value\')\n  .parse(process.argv);\n\nconsole.log(\' int: %j\', program.integer);\nconsole.log(\' float: %j\', program.float);\nconsole.log(\' optional: %j\', program.optional);\nprogram.range = program.range || [];\nconsole.log(\' range: %j..%j\', program.range[0], program.range[1]);\nconsole.log(\' list: %j\', program.list);\nconsole.log(\' args: %j\', program.args);\n```\n\n## Custom help\n\n You can display arbitrary `-h, --help` information\n by listening for "--help". Commander will automatically\n exit once you are done so that the remainder of your program\n does not execute causing undesired behaviours, for example\n in the following executable "stuff" will not output when\n `--help` is used.\n\n```js\n#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n\nvar program = require(\'../\');\n\nfunction list(val) {\n  return val.split(\',\').map(Number);\n}\n\nprogram\n  .version(\'0.0.1\')\n  .option(\'-f, --foo\', \'enable some foo\')\n  .option(\'-b, --bar\', \'enable some bar\')\n  .option(\'-B, --baz\', \'enable some baz\');\n\n// must be before .parse() since\n// node\'s emit() is immediate\n\nprogram.on(\'--help\', function(){\n  console.log(\'  Examples:\');\n  console.log(\'\');\n  console.log(\'    $ custom-help --help\');\n  console.log(\'    $ custom-help -h\');\n  console.log(\'\');\n});\n\nprogram.parse(process.argv);\n\nconsole.log(\'stuff\');\n```\n\nyielding the following help output:\n\n```\n\nUsage: custom-help [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n  -f, --foo      enable some foo\n  -b, --bar      enable some bar\n  -B, --baz      enable some baz\n\nExamples:\n\n  $ custom-help --help\n  $ custom-help -h\n\n```\n\n## .outputHelp()\n\n  Output help information without exiting.\n\n## .help()\n\n  Output help information and exit immediately.\n\n## Links\n\n - [API documentation](http://visionmedia.github.com/commander.js/)\n - [ascii tables](https://github.com/LearnBoost/cli-table)\n - [progress bars](https://github.com/visionmedia/node-progress)\n - [more progress bars](https://github.com/substack/node-multimeter)\n - [examples](https://github.com/visionmedia/commander.js/tree/master/examples)\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2011 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n',
10413 silly resolved     readmeFilename: 'Readme.md',
10413 silly resolved     bugs: { url: 'https://github.com/visionmedia/commander.js/issues' },
10413 silly resolved     homepage: 'https://github.com/visionmedia/commander.js',
10413 silly resolved     _id: 'commander@2.0.0',
10413 silly resolved     dist: { shasum: 'bbff3b0751b211872731c823bf6629aa490fdcc0' },
10413 silly resolved     _from: 'commander@2.0.x',
10413 silly resolved     _resolved: 'https://registry.npmjs.org/commander/-/commander-2.0.0.tgz' } ]
10414 info install commander@2.0.0 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-cssmin\node_modules\clean-css
10415 info installOne commander@2.0.0
10416 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-cssmin\node_modules\clean-css\node_modules\commander unbuild
10417 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\commander\2.0.0\package.tgz
10418 silly lockFile 9905ff34-clean-css-node-modules-commander tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-cssmin\node_modules\clean-css\node_modules\commander
10419 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-cssmin\node_modules\clean-css\node_modules\commander C:\Users\Gaston\AppData\Roaming\npm-cache\9905ff34-clean-css-node-modules-commander.lock
10420 silly lockFile 28ff84f3-ache-commander-2-0-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\commander\2.0.0\package.tgz
10421 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\commander\2.0.0\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\28ff84f3-ache-commander-2-0-0-package-tgz.lock
10422 silly gunzTarPerm modes [ '755', '644' ]
10423 silly gunzTarPerm extractEntry package.json
10424 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
10425 silly gunzTarPerm extractEntry index.js
10426 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
10427 silly gunzTarPerm extractEntry History.md
10428 silly gunzTarPerm modified mode [ 'History.md', 438, 420 ]
10429 silly gunzTarPerm extractEntry Readme.md
10430 silly gunzTarPerm modified mode [ 'Readme.md', 438, 420 ]
10431 silly lockFile 9905ff34-clean-css-node-modules-commander tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-cssmin\node_modules\clean-css\node_modules\commander
10432 silly lockFile 9905ff34-clean-css-node-modules-commander tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-cssmin\node_modules\clean-css\node_modules\commander
10433 silly lockFile 28ff84f3-ache-commander-2-0-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\commander\2.0.0\package.tgz
10434 silly lockFile 28ff84f3-ache-commander-2-0-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\commander\2.0.0\package.tgz
10435 info preinstall commander@2.0.0
10436 verbose readDependencies using package.json deps
10437 verbose readDependencies using package.json deps
10438 silly resolved []
10439 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-cssmin\node_modules\clean-css\node_modules\commander
10440 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-cssmin\node_modules\clean-css\node_modules\commander
10441 verbose linkStuff [ false,
10441 verbose linkStuff   false,
10441 verbose linkStuff   false,
10441 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-contrib-cssmin\\node_modules\\clean-css\\node_modules' ]
10442 info linkStuff commander@2.0.0
10443 verbose linkBins commander@2.0.0
10444 verbose linkMans commander@2.0.0
10445 verbose rebuildBundles commander@2.0.0
10446 info install commander@2.0.0
10447 info postinstall commander@2.0.0
10448 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-cssmin\node_modules\clean-css
10449 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-cssmin\node_modules\clean-css
10450 verbose linkStuff [ false,
10450 verbose linkStuff   false,
10450 verbose linkStuff   false,
10450 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-contrib-cssmin\\node_modules' ]
10451 info linkStuff clean-css@2.0.5
10452 verbose linkBins clean-css@2.0.5
10453 verbose link bins [ { cleancss: './bin/cleancss' },
10453 verbose link bins   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-contrib-cssmin\\node_modules\\.bin',
10453 verbose link bins   false ]
10454 verbose linkMans clean-css@2.0.5
10455 verbose rebuildBundles clean-css@2.0.5
10456 verbose rebuildBundles [ 'commander' ]
10457 info install clean-css@2.0.5
10458 info postinstall clean-css@2.0.5
10459 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-cssmin
10460 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-cssmin
10461 verbose linkStuff [ false,
10461 verbose linkStuff   false,
10461 verbose linkStuff   false,
10461 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules' ]
10462 info linkStuff grunt-contrib-cssmin@0.7.0
10463 verbose linkBins grunt-contrib-cssmin@0.7.0
10464 verbose linkMans grunt-contrib-cssmin@0.7.0
10465 verbose rebuildBundles grunt-contrib-cssmin@0.7.0
10466 verbose rebuildBundles [ '.bin', 'clean-css', 'grunt-lib-contrib' ]
10467 info install grunt-contrib-cssmin@0.7.0
10468 info postinstall grunt-contrib-cssmin@0.7.0
10469 http 200 https://registry.npmjs.org/mime
10470 silly registry.get cb [ 200,
10470 silly registry.get   { date: 'Fri, 03 Jan 2014 19:39:02 GMT',
10470 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
10470 silly registry.get     etag: '"2TSXBVF2VDYNQKGTCX4Z3V5U1"',
10470 silly registry.get     'content-type': 'application/json',
10470 silly registry.get     'content-length': '26258',
10470 silly registry.get     'accept-ranges': 'bytes',
10470 silly registry.get     via: '1.1 varnish',
10470 silly registry.get     age: '531',
10470 silly registry.get     'x-served-by': 'cache-jfk1023-JFK',
10470 silly registry.get     'x-cache': 'HIT',
10470 silly registry.get     'x-cache-hits': '1',
10470 silly registry.get     'x-timer': 'S1388777942.933740377,VS0,VE54',
10470 silly registry.get     vary: 'Accept',
10470 silly registry.get     'keep-alive': 'timeout=10, max=41',
10470 silly registry.get     connection: 'Keep-Alive' } ]
10471 silly addNameRange number 2 { name: 'mime', range: '>=1.2.9-0 <1.3.0-0', hasData: true }
10472 silly addNameRange versions [ 'mime',
10472 silly addNameRange   [ '1.0.0',
10472 silly addNameRange     '1.1.0',
10472 silly addNameRange     '1.2.1',
10472 silly addNameRange     '1.2.2',
10472 silly addNameRange     '1.2.3',
10472 silly addNameRange     '1.2.4',
10472 silly addNameRange     '1.2.5',
10472 silly addNameRange     '1.2.6',
10472 silly addNameRange     '1.2.7',
10472 silly addNameRange     '1.2.8',
10472 silly addNameRange     '1.2.9',
10472 silly addNameRange     '1.2.10',
10472 silly addNameRange     '1.2.11' ] ]
10473 verbose addNamed [ 'mime', '1.2.11' ]
10474 verbose addNamed [ '1.2.11', '1.2.11' ]
10475 silly lockFile c4b0741f-mime-1-2-11 mime@1.2.11
10476 verbose lock mime@1.2.11 C:\Users\Gaston\AppData\Roaming\npm-cache\c4b0741f-mime-1-2-11.lock
10477 silly lockFile 98468155-y-npmjs-org-mime-mime-1-2-11-tgz https://registry.npmjs.org/mime/-/mime-1.2.11.tgz
10478 verbose lock https://registry.npmjs.org/mime/-/mime-1.2.11.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\98468155-y-npmjs-org-mime-mime-1-2-11-tgz.lock
10479 verbose addRemoteTarball [ 'https://registry.npmjs.org/mime/-/mime-1.2.11.tgz',
10479 verbose addRemoteTarball   '58203eed86e3a5ef17aed2b7d9ebd47f0a60dd10' ]
10480 info retry fetch attempt 1 at 16:40:05
10481 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778005921-0.9111243556253612\tmp.tgz
10482 http GET https://registry.npmjs.org/mime/-/mime-1.2.11.tgz
10483 http 200 https://registry.npmjs.org/range-parser/0.0.4
10484 silly registry.get cb [ 200,
10484 silly registry.get   { date: 'Fri, 03 Jan 2014 19:39:06 GMT',
10484 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
10484 silly registry.get     etag: '"2MK8Y8FGAQZOELTZ4AUJRI206"',
10484 silly registry.get     'content-type': 'application/json',
10484 silly registry.get     'content-length': '728',
10484 silly registry.get     'accept-ranges': 'bytes',
10484 silly registry.get     via: '1.1 varnish',
10484 silly registry.get     age: '36',
10484 silly registry.get     'x-served-by': 'cache-jfk1023-JFK',
10484 silly registry.get     'x-cache': 'HIT',
10484 silly registry.get     'x-cache-hits': '6',
10484 silly registry.get     'x-timer': 'S1388777946.877912045,VS0,VE0',
10484 silly registry.get     vary: 'Accept',
10484 silly registry.get     'keep-alive': 'timeout=10, max=40',
10484 silly registry.get     connection: 'Keep-Alive' } ]
10485 silly lockFile edd85cc6-ge-parser-range-parser-0-0-4-tgz https://registry.npmjs.org/range-parser/-/range-parser-0.0.4.tgz
10486 verbose lock https://registry.npmjs.org/range-parser/-/range-parser-0.0.4.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\edd85cc6-ge-parser-range-parser-0-0-4-tgz.lock
10487 verbose addRemoteTarball [ 'https://registry.npmjs.org/range-parser/-/range-parser-0.0.4.tgz',
10487 verbose addRemoteTarball   'c0427ffef51c10acba0782a46c9602e744ff620b' ]
10488 info retry fetch attempt 1 at 16:40:06
10489 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778006132-0.00827701622620225\tmp.tgz
10490 http GET https://registry.npmjs.org/range-parser/-/range-parser-0.0.4.tgz
10491 http 200 https://registry.npmjs.org/mime/-/mime-1.2.11.tgz
10492 http 200 https://registry.npmjs.org/fs-extra
10493 silly registry.get cb [ 200,
10493 silly registry.get   { date: 'Fri, 03 Jan 2014 19:38:38 GMT',
10493 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
10493 silly registry.get     etag: '"BD4N75QYIPX24RBXZR0JSMDXU"',
10493 silly registry.get     'content-type': 'application/json',
10493 silly registry.get     'content-length': '171934',
10493 silly registry.get     'accept-ranges': 'bytes',
10493 silly registry.get     via: '1.1 varnish',
10493 silly registry.get     age: '17399',
10493 silly registry.get     'x-served-by': 'cache-d64-DAL',
10493 silly registry.get     'x-cache': 'HIT',
10493 silly registry.get     'x-cache-hits': '1',
10493 silly registry.get     'x-timer': 'S1388777918.913951874,VS0,VE13',
10493 silly registry.get     vary: 'Accept',
10493 silly registry.get     'keep-alive': 'timeout=10, max=50',
10493 silly registry.get     connection: 'Keep-Alive' } ]
10494 http 200 https://registry.npmjs.org/range-parser/-/range-parser-0.0.4.tgz
10495 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778006132-0.00827701622620225\tmp.tgz
10496 silly lockFile 4d11a69a-6132-0-00827701622620225-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778006132-0.00827701622620225\package
10497 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778006132-0.00827701622620225\package C:\Users\Gaston\AppData\Roaming\npm-cache\4d11a69a-6132-0-00827701622620225-package.lock
10498 silly lockFile 24cf20e2-6132-0-00827701622620225-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778006132-0.00827701622620225\tmp.tgz
10499 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778006132-0.00827701622620225\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\24cf20e2-6132-0-00827701622620225-tmp-tgz.lock
10500 silly gunzTarPerm modes [ '755', '644' ]
10501 silly gunzTarPerm extractEntry package.json
10502 silly gunzTarPerm extractEntry .npmignore
10503 silly gunzTarPerm extractEntry index.js
10504 silly gunzTarPerm extractEntry History.md
10505 silly gunzTarPerm extractEntry Makefile
10506 silly gunzTarPerm extractEntry Readme.md
10507 silly lockFile 4d11a69a-6132-0-00827701622620225-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778006132-0.00827701622620225\package
10508 silly lockFile 4d11a69a-6132-0-00827701622620225-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778006132-0.00827701622620225\package
10509 silly lockFile 24cf20e2-6132-0-00827701622620225-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778006132-0.00827701622620225\tmp.tgz
10510 silly lockFile 24cf20e2-6132-0-00827701622620225-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778006132-0.00827701622620225\tmp.tgz
10511 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\range-parser\\0.0.4\\package.tgz',
10511 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388778006132-0.00827701622620225\\package' ]
10512 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\range-parser\0.0.4\package.tgz
10513 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778006132-0.00827701622620225\package
10514 silly lockFile 4d11a69a-6132-0-00827701622620225-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778006132-0.00827701622620225\package
10515 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778006132-0.00827701622620225\package C:\Users\Gaston\AppData\Roaming\npm-cache\4d11a69a-6132-0-00827701622620225-package.lock
10516 silly lockFile 49892915-e-range-parser-0-0-4-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\range-parser\0.0.4\package.tgz
10517 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\range-parser\0.0.4\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\49892915-e-range-parser-0-0-4-package-tgz.lock
10518 silly lockFile 4d11a69a-6132-0-00827701622620225-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778006132-0.00827701622620225\package
10519 silly lockFile 4d11a69a-6132-0-00827701622620225-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778006132-0.00827701622620225\package
10520 silly lockFile 49892915-e-range-parser-0-0-4-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\range-parser\0.0.4\package.tgz
10521 silly lockFile 49892915-e-range-parser-0-0-4-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\range-parser\0.0.4\package.tgz
10522 silly lockFile 88a58470-cache-range-parser-0-0-4-package C:\Users\Gaston\AppData\Roaming\npm-cache\range-parser\0.0.4\package
10523 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\range-parser\0.0.4\package C:\Users\Gaston\AppData\Roaming\npm-cache\88a58470-cache-range-parser-0-0-4-package.lock
10524 silly lockFile 88a58470-cache-range-parser-0-0-4-package C:\Users\Gaston\AppData\Roaming\npm-cache\range-parser\0.0.4\package
10525 silly lockFile 88a58470-cache-range-parser-0-0-4-package C:\Users\Gaston\AppData\Roaming\npm-cache\range-parser\0.0.4\package
10526 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\range-parser\0.0.4\package.tgz
10527 silly lockFile a029c686-cache-range-parser-0-0-4-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\range-parser\0.0.4\package
10528 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\range-parser\0.0.4\package C:\Users\Gaston\AppData\Roaming\npm-cache\a029c686-cache-range-parser-0-0-4-package.lock
10529 silly lockFile 49892915-e-range-parser-0-0-4-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\range-parser\0.0.4\package.tgz
10530 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\range-parser\0.0.4\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\49892915-e-range-parser-0-0-4-package-tgz.lock
10531 silly gunzTarPerm modes [ '755', '644' ]
10532 silly gunzTarPerm extractEntry package.json
10533 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
10534 silly gunzTarPerm extractEntry .npmignore
10535 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
10536 silly gunzTarPerm extractEntry index.js
10537 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
10538 silly gunzTarPerm extractEntry History.md
10539 silly gunzTarPerm modified mode [ 'History.md', 438, 420 ]
10540 silly gunzTarPerm extractEntry Makefile
10541 silly gunzTarPerm modified mode [ 'Makefile', 438, 420 ]
10542 silly gunzTarPerm extractEntry Readme.md
10543 silly gunzTarPerm modified mode [ 'Readme.md', 438, 420 ]
10544 silly lockFile a029c686-cache-range-parser-0-0-4-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\range-parser\0.0.4\package
10545 silly lockFile a029c686-cache-range-parser-0-0-4-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\range-parser\0.0.4\package
10546 silly lockFile 49892915-e-range-parser-0-0-4-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\range-parser\0.0.4\package.tgz
10547 silly lockFile 49892915-e-range-parser-0-0-4-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\range-parser\0.0.4\package.tgz
10548 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\range-parser\0.0.4\package.tgz 644
10549 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\range-parser\0.0.4\package.tgz
10550 silly addNameRange number 2 { name: 'fs-extra', range: '>=0.8.1-0 <0.9.0-0', hasData: true }
10551 silly addNameRange versions [ 'fs-extra',
10551 silly addNameRange   [ '0.0.1',
10551 silly addNameRange     '0.0.11',
10551 silly addNameRange     '0.0.3',
10551 silly addNameRange     '0.0.4',
10551 silly addNameRange     '0.1.0',
10551 silly addNameRange     '0.1.1',
10551 silly addNameRange     '0.1.2',
10551 silly addNameRange     '0.1.3',
10551 silly addNameRange     '0.2.0',
10551 silly addNameRange     '0.2.1',
10551 silly addNameRange     '0.3.0',
10551 silly addNameRange     '0.3.1',
10551 silly addNameRange     '0.3.2',
10551 silly addNameRange     '0.4.0',
10551 silly addNameRange     '0.5.0',
10551 silly addNameRange     '0.6.0',
10551 silly addNameRange     '0.6.1',
10551 silly addNameRange     '0.6.2',
10551 silly addNameRange     '0.6.3',
10551 silly addNameRange     '0.6.4',
10551 silly addNameRange     '0.7.0',
10551 silly addNameRange     '0.7.1',
10551 silly addNameRange     '0.8.0',
10551 silly addNameRange     '0.8.1' ] ]
10552 verbose addNamed [ 'fs-extra', '0.8.1' ]
10553 verbose addNamed [ '0.8.1', '0.8.1' ]
10554 silly lockFile a33ddd61-fs-extra-0-8-1 fs-extra@0.8.1
10555 verbose lock fs-extra@0.8.1 C:\Users\Gaston\AppData\Roaming\npm-cache\a33ddd61-fs-extra-0-8-1.lock
10556 silly lockFile edd85cc6-ge-parser-range-parser-0-0-4-tgz https://registry.npmjs.org/range-parser/-/range-parser-0.0.4.tgz
10557 silly lockFile edd85cc6-ge-parser-range-parser-0-0-4-tgz https://registry.npmjs.org/range-parser/-/range-parser-0.0.4.tgz
10558 silly lockFile 0760c556-range-parser-0-0-4 range-parser@0.0.4
10559 silly lockFile 0760c556-range-parser-0-0-4 range-parser@0.0.4
10560 silly lockFile 1c2abe16--org-fs-extra-fs-extra-0-8-1-tgz https://registry.npmjs.org/fs-extra/-/fs-extra-0.8.1.tgz
10561 verbose lock https://registry.npmjs.org/fs-extra/-/fs-extra-0.8.1.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\1c2abe16--org-fs-extra-fs-extra-0-8-1-tgz.lock
10562 verbose addRemoteTarball [ 'https://registry.npmjs.org/fs-extra/-/fs-extra-0.8.1.tgz',
10562 verbose addRemoteTarball   '0e5779ffbfedf511bc755595c7f03c06d4b43e8d' ]
10563 info retry fetch attempt 1 at 16:40:08
10564 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778008232-0.5523464931175113\tmp.tgz
10565 http GET https://registry.npmjs.org/fs-extra/-/fs-extra-0.8.1.tgz
10566 http 200 https://registry.npmjs.org/fs-extra/-/fs-extra-0.8.1.tgz
10567 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778008232-0.5523464931175113\tmp.tgz
10568 silly lockFile 4149c6c9-08232-0-5523464931175113-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778008232-0.5523464931175113\package
10569 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778008232-0.5523464931175113\package C:\Users\Gaston\AppData\Roaming\npm-cache\4149c6c9-08232-0-5523464931175113-package.lock
10570 silly lockFile 85756521-08232-0-5523464931175113-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778008232-0.5523464931175113\tmp.tgz
10571 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778008232-0.5523464931175113\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\85756521-08232-0-5523464931175113-tmp-tgz.lock
10572 silly gunzTarPerm modes [ '755', '644' ]
10573 silly gunzTarPerm extractEntry package.json
10574 silly gunzTarPerm extractEntry .npmignore
10575 silly gunzTarPerm extractEntry README.md
10576 silly gunzTarPerm extractEntry LICENSE
10577 silly gunzTarPerm extractEntry CHANGELOG.md
10578 silly gunzTarPerm extractEntry lib/copy.js
10579 silly gunzTarPerm extractEntry lib/create.js
10580 silly gunzTarPerm extractEntry lib/index.js
10581 silly gunzTarPerm extractEntry lib/json.js
10582 silly gunzTarPerm extractEntry lib/mkdir.js
10583 silly gunzTarPerm extractEntry lib/output.js
10584 silly gunzTarPerm extractEntry lib/remove.js
10585 silly lockFile 4149c6c9-08232-0-5523464931175113-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778008232-0.5523464931175113\package
10586 silly lockFile 4149c6c9-08232-0-5523464931175113-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778008232-0.5523464931175113\package
10587 silly lockFile 85756521-08232-0-5523464931175113-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778008232-0.5523464931175113\tmp.tgz
10588 silly lockFile 85756521-08232-0-5523464931175113-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778008232-0.5523464931175113\tmp.tgz
10589 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\fs-extra\\0.8.1\\package.tgz',
10589 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388778008232-0.5523464931175113\\package' ]
10590 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\fs-extra\0.8.1\package.tgz
10591 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778008232-0.5523464931175113\package
10592 silly lockFile 4149c6c9-08232-0-5523464931175113-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778008232-0.5523464931175113\package
10593 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778008232-0.5523464931175113\package C:\Users\Gaston\AppData\Roaming\npm-cache\4149c6c9-08232-0-5523464931175113-package.lock
10594 silly lockFile de620d8b-cache-fs-extra-0-8-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\fs-extra\0.8.1\package.tgz
10595 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\fs-extra\0.8.1\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\de620d8b-cache-fs-extra-0-8-1-package-tgz.lock
10596 silly lockFile 4149c6c9-08232-0-5523464931175113-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778008232-0.5523464931175113\package
10597 silly lockFile 4149c6c9-08232-0-5523464931175113-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778008232-0.5523464931175113\package
10598 silly lockFile de620d8b-cache-fs-extra-0-8-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\fs-extra\0.8.1\package.tgz
10599 silly lockFile de620d8b-cache-fs-extra-0-8-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\fs-extra\0.8.1\package.tgz
10600 silly lockFile 0e58706f-npm-cache-fs-extra-0-8-1-package C:\Users\Gaston\AppData\Roaming\npm-cache\fs-extra\0.8.1\package
10601 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\fs-extra\0.8.1\package C:\Users\Gaston\AppData\Roaming\npm-cache\0e58706f-npm-cache-fs-extra-0-8-1-package.lock
10602 silly lockFile 0e58706f-npm-cache-fs-extra-0-8-1-package C:\Users\Gaston\AppData\Roaming\npm-cache\fs-extra\0.8.1\package
10603 silly lockFile 0e58706f-npm-cache-fs-extra-0-8-1-package C:\Users\Gaston\AppData\Roaming\npm-cache\fs-extra\0.8.1\package
10604 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\fs-extra\0.8.1\package.tgz
10605 silly lockFile d09873da-npm-cache-fs-extra-0-8-1-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\fs-extra\0.8.1\package
10606 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\fs-extra\0.8.1\package C:\Users\Gaston\AppData\Roaming\npm-cache\d09873da-npm-cache-fs-extra-0-8-1-package.lock
10607 silly lockFile de620d8b-cache-fs-extra-0-8-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\fs-extra\0.8.1\package.tgz
10608 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\fs-extra\0.8.1\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\de620d8b-cache-fs-extra-0-8-1-package-tgz.lock
10609 silly gunzTarPerm modes [ '755', '644' ]
10610 silly gunzTarPerm extractEntry package.json
10611 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
10612 silly gunzTarPerm extractEntry .npmignore
10613 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
10614 silly gunzTarPerm extractEntry README.md
10615 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
10616 silly gunzTarPerm extractEntry LICENSE
10617 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
10618 silly gunzTarPerm extractEntry CHANGELOG.md
10619 silly gunzTarPerm modified mode [ 'CHANGELOG.md', 438, 420 ]
10620 silly gunzTarPerm extractEntry lib/copy.js
10621 silly gunzTarPerm modified mode [ 'lib/copy.js', 438, 420 ]
10622 silly gunzTarPerm extractEntry lib/create.js
10623 silly gunzTarPerm modified mode [ 'lib/create.js', 438, 420 ]
10624 silly gunzTarPerm extractEntry lib/index.js
10625 silly gunzTarPerm modified mode [ 'lib/index.js', 438, 420 ]
10626 silly gunzTarPerm extractEntry lib/json.js
10627 silly gunzTarPerm modified mode [ 'lib/json.js', 438, 420 ]
10628 silly gunzTarPerm extractEntry lib/mkdir.js
10629 silly gunzTarPerm modified mode [ 'lib/mkdir.js', 438, 420 ]
10630 silly gunzTarPerm extractEntry lib/output.js
10631 silly gunzTarPerm modified mode [ 'lib/output.js', 438, 420 ]
10632 silly gunzTarPerm extractEntry lib/remove.js
10633 silly gunzTarPerm modified mode [ 'lib/remove.js', 438, 420 ]
10634 silly lockFile d09873da-npm-cache-fs-extra-0-8-1-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\fs-extra\0.8.1\package
10635 silly lockFile d09873da-npm-cache-fs-extra-0-8-1-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\fs-extra\0.8.1\package
10636 silly lockFile de620d8b-cache-fs-extra-0-8-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\fs-extra\0.8.1\package.tgz
10637 silly lockFile de620d8b-cache-fs-extra-0-8-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\fs-extra\0.8.1\package.tgz
10638 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\fs-extra\0.8.1\package.tgz 644
10639 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\fs-extra\0.8.1\package.tgz
10640 silly lockFile 1c2abe16--org-fs-extra-fs-extra-0-8-1-tgz https://registry.npmjs.org/fs-extra/-/fs-extra-0.8.1.tgz
10641 silly lockFile 1c2abe16--org-fs-extra-fs-extra-0-8-1-tgz https://registry.npmjs.org/fs-extra/-/fs-extra-0.8.1.tgz
10642 silly lockFile a33ddd61-fs-extra-0-8-1 fs-extra@0.8.1
10643 silly lockFile a33ddd61-fs-extra-0-8-1 fs-extra@0.8.1
10644 silly lockFile d49a93e7-fs-extra-0-8-1 fs-extra@~0.8.1
10645 silly lockFile d49a93e7-fs-extra-0-8-1 fs-extra@~0.8.1
10646 silly resolved [ { name: 'postcss',
10646 silly resolved     version: '0.2.0',
10646 silly resolved     description: 'Framework for CSS postprocessors',
10646 silly resolved     keywords: [ 'css', 'parser', 'postproccessor' ],
10646 silly resolved     author: { name: 'Andrey Sitnik', email: 'andrey@sitnik.ru' },
10646 silly resolved     license: 'MIT',
10646 silly resolved     repository: { type: 'git', url: 'https://github.com/ai/postcss.git' },
10646 silly resolved     dependencies: { 'source-map': '*' },
10646 silly resolved     devDependencies:
10646 silly resolved      { 'coffee-script': '1.6.3',
10646 silly resolved        'fs-extra': '0.8.1',
10646 silly resolved        should: '2.1.1',
10646 silly resolved        mocha: '1.15.1' },
10646 silly resolved     main: 'lib/postcss',
10646 silly resolved     scripts: { test: 'mocha' },
10646 silly resolved     readme: '# PostCSS\n\nPostCSS is a framework for CSS postprocessors,\nto modify CSS by your JS function.\n\nIt takes care of most common CSS tool tasks:\n\n1. parses CSS;\n2. gives you usable JS API to edit CSS node tree;\n3. saves modified node tree to new CSS;\n4. generates (or modifies existent) source map for your changes;\n\nYou can use this framework to write you own:\n\n* CSS minifier or beautifizer.\n* Grunt plugin to generate sprites, include `data-uri` images\n  or any other works.\n* Text editor plugin to automate CSS routine.\n* Command-line CSS tool.\n\nSponsored by [Evil Martians](http://evilmartians.com/).\n\n## Build with PostCSS\n\n* [Autoprefixer](https://github.com/ai/autoprefixer)\n* [grunt-pixrem](https://github.com/robwierzbowski/grunt-pixrem)\n\n## Quick Example\n\nLet’s fix forgotten `content` property in `::before` and `::after`:\n\n```js\nvar postcss = require(\'postcss\');\n\nvar contenter = postcss(function (css) {\n    css.eachRule(function (rule) {\n        if ( rule.selector.match(/::(before|after)/) ) {\n            // In every ::before/::after rule\n\n            // Did we forget content property?\n            var good = rule.some(function (i) { return i.prop == \'content\'; });\n\n            if ( !good ) {\n                // Add content: \'\' if we forget it\n                rule.prepend({ prop: \'content\', value: \'""\' });\n            }\n\n        }\n    });\n});\n```\n\nAnd then CSS with forgotten `content`:\n\n```css\na::before {\n    width: 10px;\n    height: 10px\n}\n```\n\nwill be fixed by our new `contenter`:\n\n```js\nvar fixed = contenter.process(css).css;\n```\n\nto:\n\n```css\na::before {\n    content: "";\n    width: 10px;\n    height: 10px\n}\n```\n\n## Features\n\n### Source Map\n\nPostCSS generates source map for its transformations:\n\n```js\nresult = processor.process(css, { map: true, from: \'from.css\', to: \'to.css\' });\nresult.css // String with processed CSS\nresult.map // Source map\n```\n\nAnd modifies source map from previous step (like Sass preprocessor):\n\n```js\nvar sassMap = fs.readFileSync(\'from.sass.map\');\nprocessor.process(css, { map: sassMap, from: \'from.sass.css\', to: \'to.css\' });\n```\n\n### Preserves code formatting and indentations\n\nPostCSS will not change any byte of rule if you don\'t modify node:\n\n```js\npostcss(function (css) { }).process(css).css == css;\n```\n\nAnd when you modify CSS nodes, PostCSS will try to copy coding style:\n\n```js\ncontenter.process("a::before{color: black}")\n// a::before{content: \'\';color: black}\n\ncontenter.process("a::before {\\n  color: black;\\n  }")\n// a::before {\n//   content: \'\';\n//   color: black;\n//   }\n```\n\n## Why PostCSS Better Than …\n\n### Preprocessors\n\nPreprocessors (like Sass or Stylus) give us special language with variables,\nmixins, statements and compile it to CSS. Compass, nib and other mixins\nlibraries use this languages to work with prefixes, sprites and inline images.\n\nBut Sass and Stylus languages were created to be syntax-sugar for CSS.\nWriting really complicated programs using preporcessor languages is very difficult.\n[Autoprefixer] is absolutely impossible on Sass.\n\nPostCSS gives you comfort and power of JS or CoffeeScript to working with CSS.\nYou can do really magic things with wide range of [npm] libraries.\n\nBut postprocessors are not enemies for preprocessors. Sass and Stylus is still\nthe best way to improve readability and add some syntax sugar to CSS. You can easily combine preprocessors and postprocessors.\n\n[Autoprefixer]: https://github.com/ai/autoprefixer\n[npm]:          https://npmjs.org/\n\n### RegExp\n\nSome Grunt plugins modify CSS with regular expressions. But CSS parser and\nnode tree are much safer way to edit CSS. Also regexps will break source maps\ngenerated by preprocessors.\n\n### CSS Parsers\n\nThere are a lot of good CSS parsers, like [Gonzales]. But they help you only\nwith first step.\n\nUnlike them PostCSS gives you useful high level API (for example,\nsafe iterators) and changes source map generator (or modifier for existing\nsource map from preprocessors).\n\n[Gonzales]: https://github.com/css/gonzales\n\n### Rework\n\n[Rework] was a first CSS postprocessors framework. PostCSS is very similar\nto it.\n\nBut Rework has no high level API and rewrite your CSS code style\nand indentations. So it can’t be used in text editor plugins.\n\nUnlike it PostCSS preserves all spaces and code formatting.\nIf you don\'t change rule, output will be byte‑to‑byte equal.\n\n[Rework]: https://github.com/visionmedia/rework\n\n## Usage\n\n### Processor\n\nFunction `postcss(fn)` creates processor by your function:\n\n```js\nvar postcss = require(\'postcss\');\n\nvar processor = postcss(function (css) {\n    // Code to modify CSS\n});\n```\n\nIf you want to combine multiple processors (and parse CSS only once),\nyou can create empty processor and add several functions by `use(fn)` method:\n\n```js\nvar all = postcss().\n          use(prefixer).\n          use(minifing);\n```\n\nProcessor function can just change current CSS node tree:\n\n```js\npostcss(function (css) {\n    css.append( /* new rule */ )\n});\n```\n\nor create totally new CSS root and return it:\n\n```js\npostcss(function (css) {\n    var newCSS = postcss.root()\n    // Add rules and declarations\n    return newCSS;\n});\n```\n\nProcessor will transform some CSS by `process(css, opts)` method:\n\n```js\nvar doubler = postcss(function (css) {\n    // Clone each declaration\n    css.eachDecl(function (decl) {\n        decl.parent.prepend( decl.clone() );\n    });\n});\n\nvar css    = "a { color: black; }";\nvar result = processor.process(css);\n\nresult.css //=> "a { color: black; color: black; }"\n```\n\nYou can set original CSS filename by `from` options and make syntax error\nmessages much more helpful:\n\n```js\nvar wrong = "a {";\nprocessor.process(wrong, { from: \'main.css\' });\n//=> Can\'t parse CSS: Unclosed block at line 1:1 in main.css\n```\n### Source Map\n\nPostCSS will generate source map, if you set `map` option to `true`\nin `process(css, opts)` method.\n\nYou must set input and output CSS files paths (by `from` and `to` options)\nto generate correct map.\n\n```js\nvar result = processor.process(css, {\n    map:  true,\n    from: \'main.css\',\n    to:   \'main.out.css\'\n});\n\nresult.map //=> \'{"version":3,"file":"main.out.css","sources":["main.css"],"names":[],"mappings":"AAAA,KAAI"}\'\n\nfs.writeFileSync(\'main.out.map\', result.map);\n```\n\nPostCSS can also modify previous source map (for example, from Sass\ncompilation). So, if you compile: Sass to CSS and then minify CSS\nby postprocessor, final source map will contain mapping from Sass code\nto minified CSS.\n\nJust set original source map content (as string or JS object)\nto `map` option:\n\n```js\nvar result = minifier.process(css, {\n    map:   fs.readFileSync(\'main.sass.map\'),\n    from: \'main.sass.css\',\n    to:   \'main.min.css\'\n});\n\nresult.map //=> Source map from main.sass to main.min.css\n```\n\n### Nodes\n\nProcessor function will receive `Root` node with CSS node tree inside.\n\n```js\nvar processor = postcss(function (cssRoot) {\n});\n```\n\nThere are 3 types of child nodes: `AtRule`, `Rule` and `Declaration`.\nAll nodes contain `toString()` and `clone()` methods.\n\nYou can parse CSS and get `Root` node by `postcss.parse(css, opts)` method:\n\n```js\nvar postcss = require(\'postcss\');\n\nvar cssRoot = postcss.parse(\'a { }\');\n```\n\n### Node Source\n\nEvery node stores it origin file (if you set `from` option to `process`\nor `parse` method) and position at `source` property:\n\n```\nvar root = postcss.parse(css, { from: \'main.css\' });\nvar rule = root.rules[1];\n\nrule.source.file  //=> \'main.css\'\nrule.source.start //=> { line: 5,  position: 1 }\nrule.source.end   //=> { line: 10, position: 5 }\n```\n\n### Whitespaces\n\nAll nodes (exclude `Root`) have `before` property with all earlier spaces and comments.\n\nNodes with children (`Root`, `AtRule` and `Rule`) contain also `after` property\nwith spaces after last child and before `}` or end of file.\n\n```js\nvar root = postcss.parse("a {\\n  color: black;\\n}\\n");\n\nroot.after                    //=> "\\n" from end of file\nroot.rules[0].after           //=> "\\n" before }\nroot.rules[0].decls[0].before //=> "\\n  " before color: black\n```\n\nSo, the simplest way to minify CSS is to clean `before` and `after` properties:\n\n```js\nvar minifier = postcss(function (css) {\n    css.eachDecl(function (decl) {\n        decl.before = \'\';\n    });\n    css.eachRule(function (rule) {\n        rule.before = \'\';\n        rule.after  = \'\';\n    });\n    css.eachAtRule(function (atRule) {\n        atRule.before = \'\';\n        atRule.after  = \'\';\n    });\n});\n\nvar css = "a{\\n  color:black\\n}\\n";\nminifier.process(css).css //=> "a{color:black}"\n```\n\n### Raw Properties\n\nSome CSS values (like selectors, at-rule params and declaration values) can\ncontain comments. PostCSS will clean them for you:\n\n```js\nvar root = postcss.parse("a /**/ b {}");\nvar ab   = root.rules[0];\n\nab.selector //=> \'a  b\' trimmed and cleaned from comments\n```\n\nBut PostCSS saves raw content to stringify it to CSS, if you don’t\nset new value. As you can remember, PostCSS tries to save origin CSS\nbyte-to-byte, when it’s possible:\n\n```js\nab.toString() //=> \'a /**/ b {}\' with comment\n\nab.selector = \'.link b\';\nab.toString() //=> \'.link b\' you change value and magic was gone\n```\n\n### Containers\n\n`Root`, `AtRule` and `Rule` nodes can contain children in `rules` or `decls`\nproperty.\n\nThere are common method to work with children:\n\n* `append(newChild)` to add child at the end of children list.\n* `prepend(newChild)` to add child at the beginning of children list.\n* `insertBefore(existsChild, newChild)` to insert new child before some\n   existent children.\n* `insertAfter(existsChild, newChild)` to insert new child after some\n   existent children.\n* `remove(child)` to remove child.\n* `index(child)` to return child index.\n* `some(fn)` to return true if `fn` return true on any child.\n* `every(fn)` to return true if `fn` return true on all children.\n\nMethods `insertBefore`, `insertAfter` and `remove` can receive child node\nor child index number as existent child argument.\nHave in mind that `index` works much faster.\n\n### Children\n\n`AtRule`, `Rule` and `Declaration` nodes should be wrapped in other nodes.\n\nAll children contain `parent` property with parent node:\n\n```js\nrule.decls[0].parent == rule;\n```\n\nAll children has `removeSelf()` method:\n\n```js\nrule.decls[0].removeSelf();\n```\n\nBut `remove(index)` in parent with child index is much faster:\n\n```js\nrule.each(function (decl, i) {\n    rule.remove(i);\n});\n```\n\n### Iterators\n\nAll parent nodes have `each` method to iterate through children nodes:\n\n```js\nroot = postcss.parse(\'a { color: black; display: none }\');\n\nroot.each(function (rule, i) {\n    console.log(rule.selector, i); // Will log "a 0"\n});\n\nroot.rules[0].each(function (decl, i) {\n    console.log(decl.prop, i); // Will log "color 0" and "display 1"\n});\n```\n\nInstead of simple `for` or `Array#forEach()` this iterator is safe.\nYou can change children inside iteration and it will fix current index:\n\n```js\nrule.rules.forEach(function (decl, i) {\n    rule.prepend( decl.clone() );\n    // Will be infinity cycle, because on prepend current declaration become\n    // second and next index will go to current declaration again\n});\n\nrule.each(function (decl, i) {\n    rule.prepend( decl.clone() );\n    // Will work correct (once clone each declaration), because after prepend\n    // iterator index will be recalculated\n});\n```\n\nBecause CSS is nested structure, PostCSS contains recursive iterator\nby node type:\n\n```js\nroot.eachDecl(function (decl, i) {\n    // Each declaration inside root\n});\n\nroot.eachRule(function (rule, i) {\n    // Each rule inside root and any nested at-rules\n});\n\nroot.eachAtRule(function (atRule, i) {\n    // Each at-rule inside root and any nested at-rules\n});\n```\n\n### Root Node\n\n`Root` node contains all CSS tree. Its children can be only `AtRule` or `Rule`\nnodes in `rules` property.\n\nYou can create new root by shortcut:\n\n```js\nvar root = postcss.root();\n```\n\nMethod `toString()` will stringify all current CSS:\n\n```js\nroot = postcss.parse(css);\nroot.toString() == css;\n```\n\n### AtRule Node\n\n```css\n@charset \'utf-8\';\n\n@font-face {\n    font-family: \'Cool\'\n}\n\n@media print {\n    img { display: none }\n}\n```\n\n`AtRule` has two own properties: `name` and `params`.\n\nAs you see, some at-rules don’t contain any children (like `@charset`\nor `@import`), some of at-rules can contain only declarations\n(like `@font-face` or `@page`), but most of them can contain rules\nand nested at-rules (like `@media`, `@keyframes` and others).\n\nParser select `AtRule` content type by its name. If you create `AtRule`\nnode manually, it will detect own content type with new child type on first\n`append` or other add method call:\n\n```js\nvar atRule = postcss.atRule({ name: \'-x-animations\' });\natRule.rules        //=> undefined\natRule.decls        //=> undefined\n\natRule.append( postcss.rule({ selector: \'from\' }) );\natRule.rules.length //=> 1\natRule.decls        //=> undefined\n```\n\nYou can create new at-rule by shortcut:\n\n```js\nvar atRule = postcss.atRule({ name: \'charset\', params: \'utf-8\' });\n```\n\n### Rule Node\n\n```css\na {\n    color: black;\n}\n```\n\n`Rule` node has `selector` property and contains `Declaration` children\nin `decls` property.\n\nYou can miss `Declaration` constructor in `append` and other insert methods:\n\n```js\nrule.append({ prop: \'color\', value: \'black\' });\n```\n\nProperty `semicolon` marks does last declaration in rule has semicolon or not:\n\n```js\nvar root = postcss.parse(\'a { color: black }\');\nroot.rules[0].semicolon //=> false\n\nvar root = postcss.parse(\'a { color: black; }\');\nroot.rules[0].semicolon //=> true\n```\n\nYou can create new rule by shortcut:\n\n```js\nvar rule = postcss.rule({ selector: \'a\' });\n```\n\n### Declaration Node\n\n```css\ncolor: black\n```\n\n`Declaration` node has `prop` and `value` properties.\n\nYou can create new declaration by shortcut:\n\n```js\nvar decl = postcss.decl({ prop: \'color\', value: \'black\' });\n```\n\nOr use short form in `append()` and other add methods:\n\n```js\nrule.append({ prop: \'color\', value: \'black\' });\n```\n',
10646 silly resolved     readmeFilename: 'README.md',
10646 silly resolved     bugs: { url: 'https://github.com/ai/postcss/issues' },
10646 silly resolved     homepage: 'https://github.com/ai/postcss',
10646 silly resolved     _id: 'postcss@0.2.0',
10646 silly resolved     dist: { shasum: '0c16d03618541b771201ae14f63fed5083e18394' },
10646 silly resolved     _from: 'postcss@~0.2',
10646 silly resolved     _resolved: 'https://registry.npmjs.org/postcss/-/postcss-0.2.0.tgz' },
10646 silly resolved   { name: 'fs-extra',
10646 silly resolved     version: '0.8.1',
10646 silly resolved     description: 'fs-extra contains methods that aren\'t included in the vanilla Node.js fs package. Such as mkdir -p, cp -r, and rm -rf.',
10646 silly resolved     homepage: 'https://github.com/jprichardson/node-fs-extra',
10646 silly resolved     repository:
10646 silly resolved      { type: 'git',
10646 silly resolved        url: 'https://github.com/jprichardson/node-fs-extra' },
10646 silly resolved     keywords:
10646 silly resolved      [ 'fs',
10646 silly resolved        'file',
10646 silly resolved        'file system',
10646 silly resolved        'copy',
10646 silly resolved        'directory',
10646 silly resolved        'extra',
10646 silly resolved        'mkdirp',
10646 silly resolved        'mkdir',
10646 silly resolved        'mkdirs',
10646 silly resolved        'recursive',
10646 silly resolved        'json',
10646 silly resolved        'read',
10646 silly resolved        'write',
10646 silly resolved        'extra',
10646 silly resolved        'delete',
10646 silly resolved        'remove',
10646 silly resolved        'touch',
10646 silly resolved        'create',
10646 silly resolved        'text',
10646 silly resolved        'output' ],
10646 silly resolved     author: { name: 'JP Richardson', email: 'jprichardson@gmail.com' },
10646 silly resolved     licenses: [ [Object] ],
10646 silly resolved     dependencies:
10646 silly resolved      { ncp: '~0.4.2',
10646 silly resolved        mkdirp: '0.3.x',
10646 silly resolved        jsonfile: '~1.1.0',
10646 silly resolved        rimraf: '~2.2.0' },
10646 silly resolved     devDependencies: { mocha: '*', 'path-extra': '0.0.x', testutil: '~0.5.0' },
10646 silly resolved     main: './lib/index',
10646 silly resolved     scripts: { test: 'mocha test' },
10646 silly resolved     readme: '\nNode.js: fs-extra\n=================\n\n[![build status](https://secure.travis-ci.org/jprichardson/node-fs-extra.png)](http://travis-ci.org/jprichardson/node-fs-extra)\n\nThis module adds a few extra file system methods that aren\'t included in the native `fs` module. It is a drop in replacement for `fs`.\n\n\n\nWhy?\n----\n\nI got tired of including `mkdirp`, `rimraf`, and `cp -r` in most of my projects. \n\n\n\n\nInstallation\n------------\n\n    npm install --save fs-extra\n\n\n\nUsage\n-----\n\n`fs-extra` is a drop in replacement for native `fs`. All methods in `fs` are unmodified and attached to `fs-extra`.\n\nYou don\'t ever need to include the original `fs` module again:\n\n```javascript\nvar fs = require(\'fs\') //this is no longer necessary\n```\n\nyou can now do this:\n\n```javascript\nvar fs = require(\'fs-extra\'); //var fs = require(\'fs\')\n```\n\nor if you prefer to make it clear that you\'re using `fs-extra` and not `fs`, you may want \nto do this:\n\n```javascript\n//var fs = require(\'fs\')\nvar fse = require(\'fs-extra\')\n```\n\nyou can also keep, both, but it\'s redundant:\n\n```javascript\nvar fs = require(\'fs\')\n  , fse = require(\'fs-extra\')\n```\n\n\n\nMethods\n-------\n\n**NOTE:** You can still use the native Node.js methods. They are copied over to `fs-extra`.\n\n\n### copy(src, dest, [filter], callback)\n\nCopy a file or directory. The directory can have contents. Like `cp -r`. There isn\'t a synchronous version implemented yet.\n\nSync: `copySync()`\n\n\nExamples:\n\n```javascript\nvar fs = require(\'fs-extra\');\n\nfs.copy(\'/tmp/myfile\', \'/tmp/mynewfile\', function(err){\n  if (err) return console.error(err);\n\n  console.log("success!")\n}); //copies file\n\nfs.copy(\'/tmp/mydir\', \'/tmp/mynewdir\', function(err){\n  if (err) return console.error(err);\n  \n  console.log("success!")\n}); //copies directory, even if it has subdirectories or files\n```\n\n\n### createFile(file, callback) \n\nCreates a file. If the file that is requested to be created is in directories that do not exist, these directories are created. If the file already exists, it is **NOT MODIFIED**.\n\nSync: `createFileSync()`\n\n\nExample:\n\n```javascript\nvar fs = require(\'fs-extra\')\n\nvar file = \'/tmp/this/path/does/not/exist/file.txt\'\n\nfs.createFile(file, function(err) {\n  console.log(err); //null\n  //file has now been created, including the directory it is to be placed in\n})\n```\n\n\n\n### mkdirs(dir, callback) \n\nCreates a directory. If the parent hierarchy doesn\'t exist, it\'s created. Like `mkdir -p`.\n\nAlias: `mkdirp()`\n\nSync: `mkdirsSync()` / `mkdirpSync()`\n\n\nExamples:\n\n```javascript\nvar fs = require(\'fs-extra\');\n\nfs.mkdirs(\'/tmp/some/long/path/that/prob/doesnt/exist\', function(err){\n  if (err) return console.error(err);\n  \n  console.log("success!")\n});\n\nfs.mkdirsSync(\'/tmp/another/path\');\n```\n\n\n### outputFile(file, data, callback)\n\nAlmost the same as `writeFile`, except that if the directory does not exist, it\'s created.\n\nSync: `outputFileSync()`\n\n\nExample:\n\n```javascript\nvar fs = require(\'fs-extra\')\nvar file = \'/tmp/this/path/does/not/exist/file.txt\'\n\nfs.outputFile(file, \'hello!\', function(err) {\n  console.log(err); //null\n\n  fs.readFile(file, \'utf8\', function(err, data) {\n    console.log(data); //hello!\n  })\n})\n```\n\n\n\n### outputJson(file, data, callback)\n\nAlmost the same as `writeJson`, except that if the directory does not exist, it\'s created.\n\nAlias: `outputJSON()\n\nSync: `outputJsonSync()`, `outputJSONSync()`\n\n\nExample:\n\n```javascript\nvar fs = require(\'fs-extra\')\nvar file = \'/tmp/this/path/does/not/exist/file.txt\'\n\nfs.outputJson(file, {name: \'JP\'}, function(err) {\n  console.log(err); //null\n\n  fs.readJson(file, function(err, data) {\n    console.log(data.name); //\'JP\n  })\n})\n```\n\n\n\n### readJson(file, [options], callback) \n\nReads a JSON file and then parses it into an object. `options` are the same that you\'d pass to `fs.readFile`.\n\nAlias: `readJSON()`\n\nSync: `readJsonSync()`, `readJSONSync()`\n\n\nExample:\n\n```javascript\nvar fs = require(\'fs-extra\');\n\nfs.readJson(\'./package.json\', function(err, packageObj) {\n  console.log(packageObj.version); //0.1.3\n});\n```\n\n\n### remove(dir, callback)\n\nRemoves a file or directory. The directory can have contents. Like `rm -rf`.\n\nAlias: `delete()`\n\nSync: `removeSync()` / `deleteSync()`\n\n\nExamples:\n\n```javascript\nvar fs = require(\'fs-extra\');\n\nfs.remove(\'/tmp/myfile\', function(err){\n  if (err) return console.error(err);\n  \n  console.log("success!")\n});\n\nfs.removeSync(\'/home/jprichardson\'); //I just deleted my entire HOME directory. \n```\n\n\n\n### writeJson(file, object, [options], callback) \n\nWrites an object to a JSON file. `options` are the same that you\'d pass to `fs.readFile`.\n\nAlias: `writeJSON()`\n\nSync: `writeJsonSync()`, `writeJSONSync()`\n\nExample:\n\n```javascript\nvar fs = require(\'fs-extra\');\nfs.writeJson(\'./package.json\', {name: \'fs-extra\'}, function(err){\n  console.log(err);\n});\n```\n\n\n\nRoadmap to 1.0.0\n-----------------\n\nThis contains items that I\'m considering doing. I\'d love community feedback.\n\n* File system walker. I really like this one: https://github.com/daaku/nodejs-walker ... this might be adding too much. Thoughts?\n* File/directory tree watcher. There are quite a few. ... this also might be adding too much. I like this one: https://github.com/paulmillr/chokidar but I don\'t like that it\'s written in CoffeeScript. Thoughts?\n* Method to move files.\n* Thinking about moving `rimraf`, `ncp`, and `mkdirps` code into this library. I\'d like fs-extra to be a stable library that module authors\ncan depend upon. A bunch of other dependencies kinda sucks for modules/libraries. (I\'m leaning against this now.)\n* Change documentation to use the `fse` prefix instead of `fs`. This may encourage people to start using `fse` as a prefix and hence make their code clearer that they\'re not using the native `fs`. I\'m very undecided on this one since `fs-extra` is a drop in replacement for the native `fs`. (I\'m leaning against this now.)\n\n\n\nNaming\n------\n\nI put a lot of thought into the naming of these functions. Inspired by @coolaj86\'s request. So he deserves much of the credit for raising the issue. See discussion(s) here:\n\n* https://github.com/jprichardson/node-fs-extra/issues/2\n* https://github.com/flatiron/utile/issues/11\n* https://github.com/ryanmcgrath/wrench-js/issues/29\n* https://github.com/substack/node-mkdirp/issues/17\n\nFirst, I believe that in as many cases as possible, the [Node.js naming schemes](http://nodejs.org/api/fs.html) should be chosen. However, there are problems with the Node.js own naming schemes.\n\nFor example, `fs.readFile()` and `fs.readdir()`: the **F** is capitalized in *File* and the **d** is not capitalized in *dir*. Perhaps a bit pedantic, but they should still be consistent. Also, Node.js has chosen a lot of POSIX naming schemes, which I believe is great. See: `fs.mkdir()`, `fs.rmdir()`, `fs.chown()`, etc.\n\nWe have a dilemma though. How do you consistently name methods that perform the following POSIX commands: `cp`, `cp -r`, `mkdir -p`, and `rm -rf`?\n\nMy perspective: when in doubt, err on the side of simplicity. A directory is just a hierarchical grouping of directories and files. Consider that for a moment. So when you want to copy it or remove it, in most cases you\'ll want to copy or remove all of its contents. When you want to create a directory, if the directory that it\'s suppose to be contained in does not exist, then in most cases you\'ll want to create that too. \n\nSo, if you want to remove a file or a directory regardless of whether it has contents, just call `fs.remove(path)` or its alias `fs.delete(path)`. If you want to copy a file or a directory whether it has contents, just call `fs.copy(source, destination)`. If you want to create a directory regardless of whether its parent directories exist, just call `fs.mkdirs(path)` or `fs.mkdirp(path)`. \n\n\nCredit\n------\n\n`fs-extra` wouldn\'t be possible without using the modules from the following authors:\n\n- [Isaac Shlueter](https://github.com/isaacs)\n- [Charlie McConnel](https://github.com/avianflu)\n- [James Halliday](https://github.com/substack)\n\n\nContributions\n-------------\n\nIf you want to contribute, please add a test if you can. Also, don\'t change the version in `package.json`.\n\n\n### Contributors\n\n- [JP Richardson](https://github.com/jprichardson)\n- [Mike McNeil](https://github.com/mikermcneil)\n- [Ian Crowther](https://github.com/iancrowther)\n- [Stephen Mathieson](https://github.com/stephenmathieson)\n- [Srirangan](https://github.com/Srirangan)\n- [Uli Köhler](https://github.com/ulikoehler)\n- `<your name here>`\n\n\n\n\nLicense\n-------\n\n\nLicensed under MIT\n\nCopyright (c) 2011-2013 JP Richardson\n\n[1]: http://nodejs.org/docs/latest/api/fs.html \n\n\n[jsonfile]: https://github.com/jprichardson/node-jsonfile\n\n\n\n\n\n',
10646 silly resolved     readmeFilename: 'README.md',
10646 silly resolved     bugs: { url: 'https://github.com/jprichardson/node-fs-extra/issues' },
10646 silly resolved     _id: 'fs-extra@0.8.1',
10646 silly resolved     dist: { shasum: 'e96a836afdb5ef02a7613d47678ed2d770c00aaf' },
10646 silly resolved     _from: 'fs-extra@~0.8.1',
10646 silly resolved     _resolved: 'https://registry.npmjs.org/fs-extra/-/fs-extra-0.8.1.tgz' } ]
10647 info install postcss@0.2.0 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer
10648 info install fs-extra@0.8.1 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer
10649 info installOne postcss@0.2.0
10650 info installOne fs-extra@0.8.1
10651 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer\node_modules\postcss unbuild
10652 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer\node_modules\fs-extra unbuild
10653 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\postcss\0.2.0\package.tgz
10654 silly lockFile 4f8db876-utoprefixer-node-modules-postcss tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer\node_modules\postcss
10655 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer\node_modules\postcss C:\Users\Gaston\AppData\Roaming\npm-cache\4f8db876-utoprefixer-node-modules-postcss.lock
10656 silly lockFile 5ebcce83--cache-postcss-0-2-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\postcss\0.2.0\package.tgz
10657 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\postcss\0.2.0\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\5ebcce83--cache-postcss-0-2-0-package-tgz.lock
10658 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\fs-extra\0.8.1\package.tgz
10659 silly lockFile 7a98b8f9-toprefixer-node-modules-fs-extra tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer\node_modules\fs-extra
10660 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer\node_modules\fs-extra C:\Users\Gaston\AppData\Roaming\npm-cache\7a98b8f9-toprefixer-node-modules-fs-extra.lock
10661 silly lockFile de620d8b-cache-fs-extra-0-8-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\fs-extra\0.8.1\package.tgz
10662 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\fs-extra\0.8.1\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\de620d8b-cache-fs-extra-0-8-1-package-tgz.lock
10663 silly gunzTarPerm modes [ '755', '644' ]
10664 silly gunzTarPerm modes [ '755', '644' ]
10665 silly gunzTarPerm extractEntry package.json
10666 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
10667 silly gunzTarPerm extractEntry package.json
10668 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
10669 silly gunzTarPerm extractEntry .npmignore
10670 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
10671 silly gunzTarPerm extractEntry README.md
10672 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
10673 silly gunzTarPerm extractEntry README.md
10674 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
10675 silly gunzTarPerm extractEntry LICENSE
10676 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
10677 silly gunzTarPerm extractEntry ChangeLog.md
10678 silly gunzTarPerm modified mode [ 'ChangeLog.md', 438, 420 ]
10679 silly gunzTarPerm extractEntry lib/at-rule.js
10680 silly gunzTarPerm modified mode [ 'lib/at-rule.js', 438, 420 ]
10681 silly gunzTarPerm extractEntry lib/generate-map.js
10682 silly gunzTarPerm modified mode [ 'lib/generate-map.js', 438, 420 ]
10683 silly gunzTarPerm extractEntry lib/list.js
10684 silly gunzTarPerm modified mode [ 'lib/list.js', 438, 420 ]
10685 silly gunzTarPerm extractEntry lib/node.js
10686 silly gunzTarPerm modified mode [ 'lib/node.js', 438, 420 ]
10687 silly gunzTarPerm extractEntry lib/parse.js
10688 silly gunzTarPerm modified mode [ 'lib/parse.js', 438, 420 ]
10689 silly gunzTarPerm extractEntry lib/declaration.js
10690 silly gunzTarPerm modified mode [ 'lib/declaration.js', 438, 420 ]
10691 silly gunzTarPerm extractEntry lib/raw.js
10692 silly gunzTarPerm modified mode [ 'lib/raw.js', 438, 420 ]
10693 silly gunzTarPerm extractEntry lib/result.js
10694 silly gunzTarPerm modified mode [ 'lib/result.js', 438, 420 ]
10695 silly gunzTarPerm extractEntry lib/root.js
10696 silly gunzTarPerm modified mode [ 'lib/root.js', 438, 420 ]
10697 silly gunzTarPerm extractEntry lib/rule.js
10698 silly gunzTarPerm modified mode [ 'lib/rule.js', 438, 420 ]
10699 silly gunzTarPerm extractEntry lib/syntax-error.js
10700 silly gunzTarPerm modified mode [ 'lib/syntax-error.js', 438, 420 ]
10701 silly gunzTarPerm extractEntry lib/container.js
10702 silly gunzTarPerm modified mode [ 'lib/container.js', 438, 420 ]
10703 silly gunzTarPerm extractEntry lib/vendor.js
10704 silly gunzTarPerm modified mode [ 'lib/vendor.js', 438, 420 ]
10705 silly gunzTarPerm extractEntry lib/postcss.js
10706 silly gunzTarPerm modified mode [ 'lib/postcss.js', 438, 420 ]
10707 silly gunzTarPerm extractEntry LICENSE
10708 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
10709 silly gunzTarPerm extractEntry CHANGELOG.md
10710 silly gunzTarPerm modified mode [ 'CHANGELOG.md', 438, 420 ]
10711 silly gunzTarPerm extractEntry lib/copy.js
10712 silly gunzTarPerm modified mode [ 'lib/copy.js', 438, 420 ]
10713 silly gunzTarPerm extractEntry lib/create.js
10714 silly gunzTarPerm modified mode [ 'lib/create.js', 438, 420 ]
10715 silly gunzTarPerm extractEntry lib/index.js
10716 silly gunzTarPerm modified mode [ 'lib/index.js', 438, 420 ]
10717 silly gunzTarPerm extractEntry lib/json.js
10718 silly gunzTarPerm modified mode [ 'lib/json.js', 438, 420 ]
10719 silly gunzTarPerm extractEntry lib/mkdir.js
10720 silly gunzTarPerm modified mode [ 'lib/mkdir.js', 438, 420 ]
10721 silly gunzTarPerm extractEntry lib/output.js
10722 silly gunzTarPerm modified mode [ 'lib/output.js', 438, 420 ]
10723 silly gunzTarPerm extractEntry lib/remove.js
10724 silly gunzTarPerm modified mode [ 'lib/remove.js', 438, 420 ]
10725 silly lockFile 7a98b8f9-toprefixer-node-modules-fs-extra tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer\node_modules\fs-extra
10726 silly lockFile 7a98b8f9-toprefixer-node-modules-fs-extra tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer\node_modules\fs-extra
10727 silly lockFile de620d8b-cache-fs-extra-0-8-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\fs-extra\0.8.1\package.tgz
10728 silly lockFile de620d8b-cache-fs-extra-0-8-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\fs-extra\0.8.1\package.tgz
10729 info preinstall fs-extra@0.8.1
10730 verbose readDependencies using package.json deps
10731 verbose readDependencies using package.json deps
10732 verbose cache add [ 'ncp@~0.4.2', null ]
10733 verbose cache add name=undefined spec="ncp@~0.4.2" args=["ncp@~0.4.2",null]
10734 verbose parsed url { protocol: null,
10734 verbose parsed url   slashes: null,
10734 verbose parsed url   auth: null,
10734 verbose parsed url   host: null,
10734 verbose parsed url   port: null,
10734 verbose parsed url   hostname: null,
10734 verbose parsed url   hash: null,
10734 verbose parsed url   search: null,
10734 verbose parsed url   query: null,
10734 verbose parsed url   pathname: 'ncp@~0.4.2',
10734 verbose parsed url   path: 'ncp@~0.4.2',
10734 verbose parsed url   href: 'ncp@~0.4.2' }
10735 verbose cache add name="ncp" spec="~0.4.2" args=["ncp","~0.4.2"]
10736 verbose parsed url { protocol: null,
10736 verbose parsed url   slashes: null,
10736 verbose parsed url   auth: null,
10736 verbose parsed url   host: null,
10736 verbose parsed url   port: null,
10736 verbose parsed url   hostname: null,
10736 verbose parsed url   hash: null,
10736 verbose parsed url   search: null,
10736 verbose parsed url   query: null,
10736 verbose parsed url   pathname: '~0.4.2',
10736 verbose parsed url   path: '~0.4.2',
10736 verbose parsed url   href: '~0.4.2' }
10737 verbose addNamed [ 'ncp', '~0.4.2' ]
10738 verbose addNamed [ null, '>=0.4.2-0 <0.5.0-0' ]
10739 silly lockFile 1f31aeaa-ncp-0-4-2 ncp@~0.4.2
10740 verbose lock ncp@~0.4.2 C:\Users\Gaston\AppData\Roaming\npm-cache\1f31aeaa-ncp-0-4-2.lock
10741 verbose cache add [ 'mkdirp@0.3.x', null ]
10742 verbose cache add name=undefined spec="mkdirp@0.3.x" args=["mkdirp@0.3.x",null]
10743 verbose parsed url { protocol: null,
10743 verbose parsed url   slashes: null,
10743 verbose parsed url   auth: null,
10743 verbose parsed url   host: null,
10743 verbose parsed url   port: null,
10743 verbose parsed url   hostname: null,
10743 verbose parsed url   hash: null,
10743 verbose parsed url   search: null,
10743 verbose parsed url   query: null,
10743 verbose parsed url   pathname: 'mkdirp@0.3.x',
10743 verbose parsed url   path: 'mkdirp@0.3.x',
10743 verbose parsed url   href: 'mkdirp@0.3.x' }
10744 verbose cache add name="mkdirp" spec="0.3.x" args=["mkdirp","0.3.x"]
10745 verbose parsed url { protocol: null,
10745 verbose parsed url   slashes: null,
10745 verbose parsed url   auth: null,
10745 verbose parsed url   host: null,
10745 verbose parsed url   port: null,
10745 verbose parsed url   hostname: null,
10745 verbose parsed url   hash: null,
10745 verbose parsed url   search: null,
10745 verbose parsed url   query: null,
10745 verbose parsed url   pathname: '0.3.x',
10745 verbose parsed url   path: '0.3.x',
10745 verbose parsed url   href: '0.3.x' }
10746 verbose addNamed [ 'mkdirp', '0.3.x' ]
10747 verbose addNamed [ null, '>=0.3.0-0 <0.4.0-0' ]
10748 silly lockFile 6d3723ce-mkdirp-0-3-x mkdirp@0.3.x
10749 verbose lock mkdirp@0.3.x C:\Users\Gaston\AppData\Roaming\npm-cache\6d3723ce-mkdirp-0-3-x.lock
10750 verbose cache add [ 'jsonfile@~1.1.0', null ]
10751 verbose cache add name=undefined spec="jsonfile@~1.1.0" args=["jsonfile@~1.1.0",null]
10752 verbose parsed url { protocol: null,
10752 verbose parsed url   slashes: null,
10752 verbose parsed url   auth: null,
10752 verbose parsed url   host: null,
10752 verbose parsed url   port: null,
10752 verbose parsed url   hostname: null,
10752 verbose parsed url   hash: null,
10752 verbose parsed url   search: null,
10752 verbose parsed url   query: null,
10752 verbose parsed url   pathname: 'jsonfile@~1.1.0',
10752 verbose parsed url   path: 'jsonfile@~1.1.0',
10752 verbose parsed url   href: 'jsonfile@~1.1.0' }
10753 verbose cache add name="jsonfile" spec="~1.1.0" args=["jsonfile","~1.1.0"]
10754 verbose parsed url { protocol: null,
10754 verbose parsed url   slashes: null,
10754 verbose parsed url   auth: null,
10754 verbose parsed url   host: null,
10754 verbose parsed url   port: null,
10754 verbose parsed url   hostname: null,
10754 verbose parsed url   hash: null,
10754 verbose parsed url   search: null,
10754 verbose parsed url   query: null,
10754 verbose parsed url   pathname: '~1.1.0',
10754 verbose parsed url   path: '~1.1.0',
10754 verbose parsed url   href: '~1.1.0' }
10755 verbose addNamed [ 'jsonfile', '~1.1.0' ]
10756 verbose addNamed [ null, '>=1.1.0-0 <1.2.0-0' ]
10757 silly lockFile a43eb6bd-jsonfile-1-1-0 jsonfile@~1.1.0
10758 verbose lock jsonfile@~1.1.0 C:\Users\Gaston\AppData\Roaming\npm-cache\a43eb6bd-jsonfile-1-1-0.lock
10759 verbose cache add [ 'rimraf@~2.2.0', null ]
10760 verbose cache add name=undefined spec="rimraf@~2.2.0" args=["rimraf@~2.2.0",null]
10761 verbose parsed url { protocol: null,
10761 verbose parsed url   slashes: null,
10761 verbose parsed url   auth: null,
10761 verbose parsed url   host: null,
10761 verbose parsed url   port: null,
10761 verbose parsed url   hostname: null,
10761 verbose parsed url   hash: null,
10761 verbose parsed url   search: null,
10761 verbose parsed url   query: null,
10761 verbose parsed url   pathname: 'rimraf@~2.2.0',
10761 verbose parsed url   path: 'rimraf@~2.2.0',
10761 verbose parsed url   href: 'rimraf@~2.2.0' }
10762 verbose cache add name="rimraf" spec="~2.2.0" args=["rimraf","~2.2.0"]
10763 verbose parsed url { protocol: null,
10763 verbose parsed url   slashes: null,
10763 verbose parsed url   auth: null,
10763 verbose parsed url   host: null,
10763 verbose parsed url   port: null,
10763 verbose parsed url   hostname: null,
10763 verbose parsed url   hash: null,
10763 verbose parsed url   search: null,
10763 verbose parsed url   query: null,
10763 verbose parsed url   pathname: '~2.2.0',
10763 verbose parsed url   path: '~2.2.0',
10763 verbose parsed url   href: '~2.2.0' }
10764 verbose addNamed [ 'rimraf', '~2.2.0' ]
10765 verbose addNamed [ null, '>=2.2.0-0 <2.3.0-0' ]
10766 silly lockFile 69dbd68f-rimraf-2-2-0 rimraf@~2.2.0
10767 verbose lock rimraf@~2.2.0 C:\Users\Gaston\AppData\Roaming\npm-cache\69dbd68f-rimraf-2-2-0.lock
10768 silly addNameRange { name: 'ncp', range: '>=0.4.2-0 <0.5.0-0', hasData: false }
10769 silly addNameRange { name: 'mkdirp', range: '>=0.3.0-0 <0.4.0-0', hasData: false }
10770 silly addNameRange { name: 'jsonfile', range: '>=1.1.0-0 <1.2.0-0', hasData: false }
10771 verbose url raw ncp
10772 verbose url resolving [ 'https://registry.npmjs.org/', './ncp' ]
10773 verbose url resolved https://registry.npmjs.org/ncp
10774 info trying registry request attempt 1 at 16:40:09
10775 http GET https://registry.npmjs.org/ncp
10776 verbose url raw mkdirp
10777 verbose url resolving [ 'https://registry.npmjs.org/', './mkdirp' ]
10778 verbose url resolved https://registry.npmjs.org/mkdirp
10779 info trying registry request attempt 1 at 16:40:09
10780 http GET https://registry.npmjs.org/mkdirp
10781 verbose url raw jsonfile
10782 verbose url resolving [ 'https://registry.npmjs.org/', './jsonfile' ]
10783 verbose url resolved https://registry.npmjs.org/jsonfile
10784 info trying registry request attempt 1 at 16:40:09
10785 http GET https://registry.npmjs.org/jsonfile
10786 silly addNameRange { name: 'rimraf', range: '>=2.2.0-0 <2.3.0-0', hasData: false }
10787 verbose url raw rimraf
10788 verbose url resolving [ 'https://registry.npmjs.org/', './rimraf' ]
10789 verbose url resolved https://registry.npmjs.org/rimraf
10790 info trying registry request attempt 1 at 16:40:09
10791 verbose etag "A9IB7CO27T8QICS45GYZX0R85"
10792 http GET https://registry.npmjs.org/rimraf
10793 silly lockFile 4f8db876-utoprefixer-node-modules-postcss tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer\node_modules\postcss
10794 silly lockFile 4f8db876-utoprefixer-node-modules-postcss tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer\node_modules\postcss
10795 silly lockFile 5ebcce83--cache-postcss-0-2-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\postcss\0.2.0\package.tgz
10796 silly lockFile 5ebcce83--cache-postcss-0-2-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\postcss\0.2.0\package.tgz
10797 info preinstall postcss@0.2.0
10798 verbose readDependencies using package.json deps
10799 verbose readDependencies using package.json deps
10800 verbose cache add [ 'source-map@*', null ]
10801 verbose cache add name=undefined spec="source-map@*" args=["source-map@*",null]
10802 verbose parsed url { protocol: null,
10802 verbose parsed url   slashes: null,
10802 verbose parsed url   auth: null,
10802 verbose parsed url   host: null,
10802 verbose parsed url   port: null,
10802 verbose parsed url   hostname: null,
10802 verbose parsed url   hash: null,
10802 verbose parsed url   search: null,
10802 verbose parsed url   query: null,
10802 verbose parsed url   pathname: 'source-map@*',
10802 verbose parsed url   path: 'source-map@*',
10802 verbose parsed url   href: 'source-map@*' }
10803 verbose cache add name="source-map" spec="*" args=["source-map","*"]
10804 verbose parsed url { protocol: null,
10804 verbose parsed url   slashes: null,
10804 verbose parsed url   auth: null,
10804 verbose parsed url   host: null,
10804 verbose parsed url   port: null,
10804 verbose parsed url   hostname: null,
10804 verbose parsed url   hash: null,
10804 verbose parsed url   search: null,
10804 verbose parsed url   query: null,
10804 verbose parsed url   pathname: '*',
10804 verbose parsed url   path: '*',
10804 verbose parsed url   href: '*' }
10805 verbose addNamed [ 'source-map', '*' ]
10806 verbose addNamed [ null, '*' ]
10807 silly lockFile 5b0109e1-source-map source-map@*
10808 verbose lock source-map@* C:\Users\Gaston\AppData\Roaming\npm-cache\5b0109e1-source-map.lock
10809 silly addNameRange { name: 'source-map', range: '*', hasData: false }
10810 verbose url raw source-map
10811 verbose url resolving [ 'https://registry.npmjs.org/', './source-map' ]
10812 verbose url resolved https://registry.npmjs.org/source-map
10813 info trying registry request attempt 1 at 16:40:09
10814 http GET https://registry.npmjs.org/source-map
10815 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778005921-0.9111243556253612\tmp.tgz
10816 silly lockFile c41b7b05-05921-0-9111243556253612-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778005921-0.9111243556253612\package
10817 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778005921-0.9111243556253612\package C:\Users\Gaston\AppData\Roaming\npm-cache\c41b7b05-05921-0-9111243556253612-package.lock
10818 silly lockFile ba021451-05921-0-9111243556253612-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778005921-0.9111243556253612\tmp.tgz
10819 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778005921-0.9111243556253612\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\ba021451-05921-0-9111243556253612-tmp-tgz.lock
10820 silly gunzTarPerm modes [ '755', '644' ]
10821 silly gunzTarPerm extractEntry package.json
10822 silly gunzTarPerm extractEntry README.md
10823 silly gunzTarPerm extractEntry LICENSE
10824 silly gunzTarPerm extractEntry mime.js
10825 silly gunzTarPerm extractEntry test.js
10826 silly gunzTarPerm extractEntry types/mime.types
10827 silly gunzTarPerm extractEntry types/node.types
10828 silly lockFile c41b7b05-05921-0-9111243556253612-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778005921-0.9111243556253612\package
10829 silly lockFile c41b7b05-05921-0-9111243556253612-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778005921-0.9111243556253612\package
10830 silly lockFile ba021451-05921-0-9111243556253612-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778005921-0.9111243556253612\tmp.tgz
10831 silly lockFile ba021451-05921-0-9111243556253612-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778005921-0.9111243556253612\tmp.tgz
10832 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\mime\\1.2.11\\package.tgz',
10832 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388778005921-0.9111243556253612\\package' ]
10833 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\mime\1.2.11\package.tgz
10834 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778005921-0.9111243556253612\package
10835 silly lockFile c41b7b05-05921-0-9111243556253612-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778005921-0.9111243556253612\package
10836 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778005921-0.9111243556253612\package C:\Users\Gaston\AppData\Roaming\npm-cache\c41b7b05-05921-0-9111243556253612-package.lock
10837 silly lockFile 1950eeaf-pm-cache-mime-1-2-11-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\mime\1.2.11\package.tgz
10838 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\mime\1.2.11\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\1950eeaf-pm-cache-mime-1-2-11-package-tgz.lock
10839 silly lockFile c41b7b05-05921-0-9111243556253612-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778005921-0.9111243556253612\package
10840 silly lockFile c41b7b05-05921-0-9111243556253612-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778005921-0.9111243556253612\package
10841 silly lockFile 1950eeaf-pm-cache-mime-1-2-11-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\mime\1.2.11\package.tgz
10842 silly lockFile 1950eeaf-pm-cache-mime-1-2-11-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\mime\1.2.11\package.tgz
10843 silly lockFile ea24d767-ng-npm-cache-mime-1-2-11-package C:\Users\Gaston\AppData\Roaming\npm-cache\mime\1.2.11\package
10844 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\mime\1.2.11\package C:\Users\Gaston\AppData\Roaming\npm-cache\ea24d767-ng-npm-cache-mime-1-2-11-package.lock
10845 silly lockFile ea24d767-ng-npm-cache-mime-1-2-11-package C:\Users\Gaston\AppData\Roaming\npm-cache\mime\1.2.11\package
10846 silly lockFile ea24d767-ng-npm-cache-mime-1-2-11-package C:\Users\Gaston\AppData\Roaming\npm-cache\mime\1.2.11\package
10847 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\mime\1.2.11\package.tgz
10848 silly lockFile ae98dde9-ng-npm-cache-mime-1-2-11-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\mime\1.2.11\package
10849 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\mime\1.2.11\package C:\Users\Gaston\AppData\Roaming\npm-cache\ae98dde9-ng-npm-cache-mime-1-2-11-package.lock
10850 silly lockFile 1950eeaf-pm-cache-mime-1-2-11-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\mime\1.2.11\package.tgz
10851 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\mime\1.2.11\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\1950eeaf-pm-cache-mime-1-2-11-package-tgz.lock
10852 silly gunzTarPerm modes [ '755', '644' ]
10853 silly gunzTarPerm extractEntry package.json
10854 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
10855 silly gunzTarPerm extractEntry README.md
10856 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
10857 silly gunzTarPerm extractEntry LICENSE
10858 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
10859 silly gunzTarPerm extractEntry mime.js
10860 silly gunzTarPerm modified mode [ 'mime.js', 438, 420 ]
10861 silly gunzTarPerm extractEntry test.js
10862 silly gunzTarPerm modified mode [ 'test.js', 438, 420 ]
10863 silly gunzTarPerm extractEntry types/mime.types
10864 silly gunzTarPerm modified mode [ 'types/mime.types', 438, 420 ]
10865 silly gunzTarPerm extractEntry types/node.types
10866 silly gunzTarPerm modified mode [ 'types/node.types', 438, 420 ]
10867 silly lockFile ae98dde9-ng-npm-cache-mime-1-2-11-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\mime\1.2.11\package
10868 silly lockFile ae98dde9-ng-npm-cache-mime-1-2-11-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\mime\1.2.11\package
10869 silly lockFile 1950eeaf-pm-cache-mime-1-2-11-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\mime\1.2.11\package.tgz
10870 silly lockFile 1950eeaf-pm-cache-mime-1-2-11-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\mime\1.2.11\package.tgz
10871 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\mime\1.2.11\package.tgz 644
10872 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\mime\1.2.11\package.tgz
10873 silly lockFile 98468155-y-npmjs-org-mime-mime-1-2-11-tgz https://registry.npmjs.org/mime/-/mime-1.2.11.tgz
10874 silly lockFile 98468155-y-npmjs-org-mime-mime-1-2-11-tgz https://registry.npmjs.org/mime/-/mime-1.2.11.tgz
10875 silly lockFile c4b0741f-mime-1-2-11 mime@1.2.11
10876 silly lockFile c4b0741f-mime-1-2-11 mime@1.2.11
10877 silly lockFile ccf24a67-mime-1-2-9 mime@~1.2.9
10878 silly lockFile ccf24a67-mime-1-2-9 mime@~1.2.9
10879 silly resolved [ { name: 'range-parser',
10879 silly resolved     author:
10879 silly resolved      { name: 'TJ Holowaychuk',
10879 silly resolved        email: 'tj@vision-media.ca',
10879 silly resolved        url: 'http://tjholowaychuk.com' },
10879 silly resolved     description: 'Range header field string parser',
10879 silly resolved     version: '0.0.4',
10879 silly resolved     main: 'index.js',
10879 silly resolved     dependencies: {},
10879 silly resolved     devDependencies: { mocha: '*', should: '*' },
10879 silly resolved     readme: '\n# node-range-parser\n\n  Range header field parser.\n\n## Example:\n\n```js\nassert(-1 == parse(200, \'bytes=500-20\'));\nassert(-2 == parse(200, \'bytes=malformed\'));\nparse(200, \'bytes=0-499\').should.eql(arr(\'bytes\', [{ start: 0, end: 199 }]));\nparse(1000, \'bytes=0-499\').should.eql(arr(\'bytes\', [{ start: 0, end: 499 }]));\nparse(1000, \'bytes=40-80\').should.eql(arr(\'bytes\', [{ start: 40, end: 80 }]));\nparse(1000, \'bytes=-500\').should.eql(arr(\'bytes\', [{ start: 500, end: 999 }]));\nparse(1000, \'bytes=-400\').should.eql(arr(\'bytes\', [{ start: 600, end: 999 }]));\nparse(1000, \'bytes=500-\').should.eql(arr(\'bytes\', [{ start: 500, end: 999 }]));\nparse(1000, \'bytes=400-\').should.eql(arr(\'bytes\', [{ start: 400, end: 999 }]));\nparse(1000, \'bytes=0-0\').should.eql(arr(\'bytes\', [{ start: 0, end: 0 }]));\nparse(1000, \'bytes=-1\').should.eql(arr(\'bytes\', [{ start: 999, end: 999 }]));\nparse(1000, \'items=0-5\').should.eql(arr(\'items\', [{ start: 0, end: 5 }]));\nparse(1000, \'bytes=40-80,-1\').should.eql(arr(\'bytes\', [{ start: 40, end: 80 }, { start: 999, end: 999 }]));\n```\n\n## Installation\n\n```\n$ npm install range-parser\n```',
10879 silly resolved     readmeFilename: 'Readme.md',
10879 silly resolved     _id: 'range-parser@0.0.4',
10879 silly resolved     dist: { shasum: 'e723a50fe71621f043c9e9d1db665b7cab2ab207' },
10879 silly resolved     _from: 'range-parser@0.0.4',
10879 silly resolved     _resolved: 'https://registry.npmjs.org/range-parser/-/range-parser-0.0.4.tgz' },
10879 silly resolved   { author:
10879 silly resolved      { name: 'Robert Kieffer',
10879 silly resolved        email: 'robert@broofa.com',
10879 silly resolved        url: 'http://github.com/broofa' },
10879 silly resolved     contributors: [ [Object] ],
10879 silly resolved     dependencies: {},
10879 silly resolved     description: 'A comprehensive library for mime-type mapping',
10879 silly resolved     devDependencies: {},
10879 silly resolved     keywords: [ 'util', 'mime' ],
10879 silly resolved     main: 'mime.js',
10879 silly resolved     name: 'mime',
10879 silly resolved     repository: { url: 'https://github.com/broofa/node-mime', type: 'git' },
10879 silly resolved     version: '1.2.11',
10879 silly resolved     readme: '# mime\n\nComprehensive MIME type mapping API. Includes all 600+ types and 800+ extensions defined by the Apache project, plus additional types submitted by the node.js community.\n\n## Install\n\nInstall with [npm](http://github.com/isaacs/npm):\n\n    npm install mime\n\n## API - Queries\n\n### mime.lookup(path)\nGet the mime type associated with a file, if no mime type is found `application/octet-stream` is returned. Performs a case-insensitive lookup using the extension in `path` (the substring after the last \'/\' or \'.\').  E.g.\n\n    var mime = require(\'mime\');\n\n    mime.lookup(\'/path/to/file.txt\');         // => \'text/plain\'\n    mime.lookup(\'file.txt\');                  // => \'text/plain\'\n    mime.lookup(\'.TXT\');                      // => \'text/plain\'\n    mime.lookup(\'htm\');                       // => \'text/html\'\n\n### mime.default_type\nSets the mime type returned when `mime.lookup` fails to find the extension searched for. (Default is `application/octet-stream`.)\n\n### mime.extension(type)\nGet the default extension for `type`\n\n    mime.extension(\'text/html\');                 // => \'html\'\n    mime.extension(\'application/octet-stream\');  // => \'bin\'\n\n### mime.charsets.lookup()\n\nMap mime-type to charset\n\n    mime.charsets.lookup(\'text/plain\');        // => \'UTF-8\'\n\n(The logic for charset lookups is pretty rudimentary.  Feel free to suggest improvements.)\n\n## API - Defining Custom Types\n\nThe following APIs allow you to add your own type mappings within your project.  If you feel a type should be included as part of node-mime, see [requesting new types](https://github.com/broofa/node-mime/wiki/Requesting-New-Types).\n\n### mime.define()\n\nAdd custom mime/extension mappings\n\n    mime.define({\n        \'text/x-some-format\': [\'x-sf\', \'x-sft\', \'x-sfml\'],\n        \'application/x-my-type\': [\'x-mt\', \'x-mtt\'],\n        // etc ...\n    });\n\n    mime.lookup(\'x-sft\');                 // => \'text/x-some-format\'\n\nThe first entry in the extensions array is returned by `mime.extension()`. E.g.\n\n    mime.extension(\'text/x-some-format\'); // => \'x-sf\'\n\n### mime.load(filepath)\n\nLoad mappings from an Apache ".types" format file\n\n    mime.load(\'./my_project.types\');\n\nThe .types file format is simple -  See the `types` dir for examples.\n',
10879 silly resolved     readmeFilename: 'README.md',
10879 silly resolved     bugs: { url: 'https://github.com/broofa/node-mime/issues' },
10879 silly resolved     homepage: 'https://github.com/broofa/node-mime',
10879 silly resolved     _id: 'mime@1.2.11',
10879 silly resolved     dist: { shasum: 'bfcdb99352d1164ff21f4cdeda65786badda7f5b' },
10879 silly resolved     _from: 'mime@~1.2.9',
10879 silly resolved     _resolved: 'https://registry.npmjs.org/mime/-/mime-1.2.11.tgz' } ]
10880 info install range-parser@0.0.4 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\send
10881 info install mime@1.2.11 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\send
10882 info installOne range-parser@0.0.4
10883 info installOne mime@1.2.11
10884 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\send\node_modules\range-parser unbuild
10885 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\send\node_modules\mime unbuild
10886 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\range-parser\0.0.4\package.tgz
10887 silly lockFile 9191b634-s-send-node-modules-range-parser tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\send\node_modules\range-parser
10888 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\send\node_modules\range-parser C:\Users\Gaston\AppData\Roaming\npm-cache\9191b634-s-send-node-modules-range-parser.lock
10889 silly lockFile 49892915-e-range-parser-0-0-4-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\range-parser\0.0.4\package.tgz
10890 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\range-parser\0.0.4\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\49892915-e-range-parser-0-0-4-package-tgz.lock
10891 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\mime\1.2.11\package.tgz
10892 silly lockFile 1c5896df-e-modules-send-node-modules-mime tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\send\node_modules\mime
10893 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\send\node_modules\mime C:\Users\Gaston\AppData\Roaming\npm-cache\1c5896df-e-modules-send-node-modules-mime.lock
10894 silly lockFile 1950eeaf-pm-cache-mime-1-2-11-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\mime\1.2.11\package.tgz
10895 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\mime\1.2.11\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\1950eeaf-pm-cache-mime-1-2-11-package-tgz.lock
10896 silly gunzTarPerm modes [ '755', '644' ]
10897 silly gunzTarPerm modes [ '755', '644' ]
10898 silly gunzTarPerm extractEntry package.json
10899 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
10900 silly gunzTarPerm extractEntry package.json
10901 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
10902 silly gunzTarPerm extractEntry README.md
10903 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
10904 silly gunzTarPerm extractEntry LICENSE
10905 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
10906 silly gunzTarPerm extractEntry .npmignore
10907 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
10908 silly gunzTarPerm extractEntry index.js
10909 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
10910 silly gunzTarPerm extractEntry mime.js
10911 silly gunzTarPerm modified mode [ 'mime.js', 438, 420 ]
10912 silly gunzTarPerm extractEntry test.js
10913 silly gunzTarPerm modified mode [ 'test.js', 438, 420 ]
10914 silly gunzTarPerm extractEntry History.md
10915 silly gunzTarPerm modified mode [ 'History.md', 438, 420 ]
10916 silly gunzTarPerm extractEntry Makefile
10917 silly gunzTarPerm modified mode [ 'Makefile', 438, 420 ]
10918 silly gunzTarPerm extractEntry types/mime.types
10919 silly gunzTarPerm modified mode [ 'types/mime.types', 438, 420 ]
10920 silly gunzTarPerm extractEntry types/node.types
10921 silly gunzTarPerm modified mode [ 'types/node.types', 438, 420 ]
10922 silly gunzTarPerm extractEntry Readme.md
10923 silly gunzTarPerm modified mode [ 'Readme.md', 438, 420 ]
10924 silly lockFile 9191b634-s-send-node-modules-range-parser tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\send\node_modules\range-parser
10925 silly lockFile 9191b634-s-send-node-modules-range-parser tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\send\node_modules\range-parser
10926 silly lockFile 49892915-e-range-parser-0-0-4-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\range-parser\0.0.4\package.tgz
10927 silly lockFile 49892915-e-range-parser-0-0-4-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\range-parser\0.0.4\package.tgz
10928 info preinstall range-parser@0.0.4
10929 verbose readDependencies using package.json deps
10930 verbose readDependencies using package.json deps
10931 silly resolved []
10932 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\send\node_modules\range-parser
10933 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\send\node_modules\range-parser
10934 verbose linkStuff [ false,
10934 verbose linkStuff   false,
10934 verbose linkStuff   false,
10934 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-contrib-connect\\node_modules\\connect\\node_modules\\send\\node_modules' ]
10935 info linkStuff range-parser@0.0.4
10936 verbose linkBins range-parser@0.0.4
10937 verbose linkMans range-parser@0.0.4
10938 verbose rebuildBundles range-parser@0.0.4
10939 info install range-parser@0.0.4
10940 info postinstall range-parser@0.0.4
10941 silly lockFile 1c5896df-e-modules-send-node-modules-mime tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\send\node_modules\mime
10942 silly lockFile 1c5896df-e-modules-send-node-modules-mime tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\send\node_modules\mime
10943 silly lockFile 1950eeaf-pm-cache-mime-1-2-11-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\mime\1.2.11\package.tgz
10944 silly lockFile 1950eeaf-pm-cache-mime-1-2-11-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\mime\1.2.11\package.tgz
10945 info preinstall mime@1.2.11
10946 verbose readDependencies using package.json deps
10947 verbose readDependencies using package.json deps
10948 silly resolved []
10949 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\send\node_modules\mime
10950 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\send\node_modules\mime
10951 verbose linkStuff [ false,
10951 verbose linkStuff   false,
10951 verbose linkStuff   false,
10951 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-contrib-connect\\node_modules\\connect\\node_modules\\send\\node_modules' ]
10952 info linkStuff mime@1.2.11
10953 verbose linkBins mime@1.2.11
10954 verbose linkMans mime@1.2.11
10955 verbose rebuildBundles mime@1.2.11
10956 info install mime@1.2.11
10957 info postinstall mime@1.2.11
10958 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\send
10959 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect\node_modules\send
10960 verbose linkStuff [ false,
10960 verbose linkStuff   false,
10960 verbose linkStuff   false,
10960 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-contrib-connect\\node_modules\\connect\\node_modules' ]
10961 info linkStuff send@0.1.1
10962 verbose linkBins send@0.1.1
10963 verbose linkMans send@0.1.1
10964 verbose rebuildBundles send@0.1.1
10965 verbose rebuildBundles [ 'mime', 'range-parser' ]
10966 info install send@0.1.1
10967 info postinstall send@0.1.1
10968 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect
10969 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect\node_modules\connect
10970 verbose linkStuff [ false,
10970 verbose linkStuff   false,
10970 verbose linkStuff   false,
10970 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-contrib-connect\\node_modules' ]
10971 info linkStuff connect@2.7.11
10972 verbose linkBins connect@2.7.11
10973 verbose linkMans connect@2.7.11
10974 verbose rebuildBundles connect@2.7.11
10975 verbose rebuildBundles [ 'buffer-crc32',
10975 verbose rebuildBundles   'bytes',
10975 verbose rebuildBundles   'cookie',
10975 verbose rebuildBundles   'cookie-signature',
10975 verbose rebuildBundles   'debug',
10975 verbose rebuildBundles   'formidable',
10975 verbose rebuildBundles   'fresh',
10975 verbose rebuildBundles   'pause',
10975 verbose rebuildBundles   'qs',
10975 verbose rebuildBundles   'send' ]
10976 info install connect@2.7.11
10977 info postinstall connect@2.7.11
10978 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect
10979 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-connect
10980 verbose linkStuff [ false,
10980 verbose linkStuff   false,
10980 verbose linkStuff   false,
10980 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules' ]
10981 info linkStuff grunt-contrib-connect@0.5.0
10982 verbose linkBins grunt-contrib-connect@0.5.0
10983 verbose linkMans grunt-contrib-connect@0.5.0
10984 verbose rebuildBundles grunt-contrib-connect@0.5.0
10985 verbose rebuildBundles [ 'connect', 'connect-livereload', 'open' ]
10986 info install grunt-contrib-connect@0.5.0
10987 info postinstall grunt-contrib-connect@0.5.0
10988 http 200 https://registry.npmjs.org/qs
10989 silly registry.get cb [ 200,
10989 silly registry.get   { date: 'Fri, 03 Jan 2014 19:39:07 GMT',
10989 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
10989 silly registry.get     etag: '"8W5B994EWB3J3QL358YHNQJKP"',
10989 silly registry.get     'content-type': 'application/json',
10989 silly registry.get     'content-length': '54008',
10989 silly registry.get     'accept-ranges': 'bytes',
10989 silly registry.get     via: '1.1 varnish',
10989 silly registry.get     age: '1716',
10989 silly registry.get     'x-served-by': 'cache-jfk1023-JFK',
10989 silly registry.get     'x-cache': 'HIT',
10989 silly registry.get     'x-cache-hits': '1',
10989 silly registry.get     'x-timer': 'S1388777947.109962463,VS0,VE53',
10989 silly registry.get     vary: 'Accept',
10989 silly registry.get     'keep-alive': 'timeout=10, max=39',
10989 silly registry.get     connection: 'Keep-Alive' } ]
10990 silly addNameRange number 2 { name: 'qs', range: '>=0.5.2-0 <0.6.0-0', hasData: true }
10991 silly addNameRange versions [ 'qs',
10991 silly addNameRange   [ '0.0.1',
10991 silly addNameRange     '0.0.2',
10991 silly addNameRange     '0.0.3',
10991 silly addNameRange     '0.0.4',
10991 silly addNameRange     '0.0.5',
10991 silly addNameRange     '0.0.6',
10991 silly addNameRange     '0.0.7',
10991 silly addNameRange     '0.1.0',
10991 silly addNameRange     '0.2.0',
10991 silly addNameRange     '0.3.0',
10991 silly addNameRange     '0.3.1',
10991 silly addNameRange     '0.3.2',
10991 silly addNameRange     '0.4.0',
10991 silly addNameRange     '0.4.1',
10991 silly addNameRange     '0.4.2',
10991 silly addNameRange     '0.5.0',
10991 silly addNameRange     '0.5.1',
10991 silly addNameRange     '0.5.2',
10991 silly addNameRange     '0.5.3',
10991 silly addNameRange     '0.5.4',
10991 silly addNameRange     '0.5.5',
10991 silly addNameRange     '0.5.6',
10991 silly addNameRange     '0.6.0',
10991 silly addNameRange     '0.6.1',
10991 silly addNameRange     '0.6.2',
10991 silly addNameRange     '0.6.3',
10991 silly addNameRange     '0.6.4',
10991 silly addNameRange     '0.6.5',
10991 silly addNameRange     '0.6.6' ] ]
10992 verbose addNamed [ 'qs', '0.5.6' ]
10993 verbose addNamed [ '0.5.6', '0.5.6' ]
10994 silly lockFile 84168241-qs-0-5-6 qs@0.5.6
10995 verbose lock qs@0.5.6 C:\Users\Gaston\AppData\Roaming\npm-cache\84168241-qs-0-5-6.lock
10996 silly lockFile d8d3c682-gistry-npmjs-org-qs-qs-0-5-6-tgz https://registry.npmjs.org/qs/-/qs-0.5.6.tgz
10997 verbose lock https://registry.npmjs.org/qs/-/qs-0.5.6.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\d8d3c682-gistry-npmjs-org-qs-qs-0-5-6-tgz.lock
10998 verbose addRemoteTarball [ 'https://registry.npmjs.org/qs/-/qs-0.5.6.tgz',
10998 verbose addRemoteTarball   '31b1ad058567651c526921506b9a8793911a0384' ]
10999 info retry fetch attempt 1 at 16:40:13
11000 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778013145-0.7841842789202929\tmp.tgz
11001 http GET https://registry.npmjs.org/qs/-/qs-0.5.6.tgz
11002 http 200 https://registry.npmjs.org/noptify
11003 silly registry.get cb [ 200,
11003 silly registry.get   { date: 'Fri, 03 Jan 2014 19:39:14 GMT',
11003 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
11003 silly registry.get     etag: '"5FHCM2G5WYT89MTR4WAJQYF0G"',
11003 silly registry.get     'content-type': 'application/json',
11003 silly registry.get     'content-length': '9440',
11003 silly registry.get     'accept-ranges': 'bytes',
11003 silly registry.get     via: '1.1 varnish',
11003 silly registry.get     age: '67769',
11003 silly registry.get     'x-served-by': 'cache-jfk1023-JFK',
11003 silly registry.get     'x-cache': 'HIT',
11003 silly registry.get     'x-cache-hits': '1',
11003 silly registry.get     'x-timer': 'S1388777954.070688725,VS0,VE53',
11003 silly registry.get     vary: 'Accept',
11003 silly registry.get     'keep-alive': 'timeout=10, max=38',
11003 silly registry.get     connection: 'Keep-Alive' } ]
11004 verbose addNamed [ 'noptify', '0.0.3' ]
11005 verbose addNamed [ '0.0.3', '0.0.3' ]
11006 silly lockFile d8f631c4-noptify-0-0-3 noptify@0.0.3
11007 verbose lock noptify@0.0.3 C:\Users\Gaston\AppData\Roaming\npm-cache\d8f631c4-noptify-0-0-3.lock
11008 silly lockFile 061f616a-js-org-noptify-noptify-0-0-3-tgz https://registry.npmjs.org/noptify/-/noptify-0.0.3.tgz
11009 verbose lock https://registry.npmjs.org/noptify/-/noptify-0.0.3.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\061f616a-js-org-noptify-noptify-0-0-3-tgz.lock
11010 verbose addRemoteTarball [ 'https://registry.npmjs.org/noptify/-/noptify-0.0.3.tgz',
11010 verbose addRemoteTarball   '58f654a73d9753df0c51d9686dc92104a67f4bbb' ]
11011 info retry fetch attempt 1 at 16:40:14
11012 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778014913-0.10808372823521495\tmp.tgz
11013 http GET https://registry.npmjs.org/noptify/-/noptify-0.0.3.tgz
11014 http 304 https://registry.npmjs.org/debug
11015 silly registry.get cb [ 304,
11015 silly registry.get   { date: 'Fri, 03 Jan 2014 19:39:15 GMT',
11015 silly registry.get     server: 'Apache',
11015 silly registry.get     connection: 'Keep-Alive',
11015 silly registry.get     'keep-alive': 'timeout=10, max=37',
11015 silly registry.get     etag: '"D3KJHAZTCKQ35NYLNYQDEN7JN"',
11015 silly registry.get     vary: 'Accept' } ]
11016 verbose etag debug from cache
11017 silly addNameRange number 2 { name: 'debug', range: '>=0.7.0-0 <0.8.0-0', hasData: true }
11018 silly addNameRange versions [ 'debug',
11018 silly addNameRange   [ '0.0.1',
11018 silly addNameRange     '0.1.0',
11018 silly addNameRange     '0.2.0',
11018 silly addNameRange     '0.3.0',
11018 silly addNameRange     '0.4.0',
11018 silly addNameRange     '0.4.1',
11018 silly addNameRange     '0.5.0',
11018 silly addNameRange     '0.6.0',
11018 silly addNameRange     '0.7.0',
11018 silly addNameRange     '0.7.1',
11018 silly addNameRange     '0.7.2',
11018 silly addNameRange     '0.7.3',
11018 silly addNameRange     '0.7.4' ] ]
11019 verbose addNamed [ 'debug', '0.7.4' ]
11020 verbose addNamed [ '0.7.4', '0.7.4' ]
11021 silly lockFile 16160008-debug-0-7-4 debug@0.7.4
11022 verbose lock debug@0.7.4 C:\Users\Gaston\AppData\Roaming\npm-cache\16160008-debug-0-7-4.lock
11023 silly lockFile 16160008-debug-0-7-4 debug@0.7.4
11024 silly lockFile 16160008-debug-0-7-4 debug@0.7.4
11025 silly lockFile 88a35dfc-debug-0-7-0 debug@~0.7.0
11026 silly lockFile 88a35dfc-debug-0-7-0 debug@~0.7.0
11027 http 304 https://registry.npmjs.org/globule
11028 silly registry.get cb [ 304,
11028 silly registry.get   { date: 'Fri, 03 Jan 2014 19:39:16 GMT',
11028 silly registry.get     server: 'Apache',
11028 silly registry.get     connection: 'Keep-Alive',
11028 silly registry.get     'keep-alive': 'timeout=10, max=36',
11028 silly registry.get     etag: '"5S2LVP7WVZ0S3OX44PA9AA8M5"',
11028 silly registry.get     vary: 'Accept' } ]
11029 verbose etag globule from cache
11030 silly addNameRange number 2 { name: 'globule', range: '>=0.1.0-0 <0.2.0-0', hasData: true }
11031 silly addNameRange versions [ 'globule', [ '0.1.0' ] ]
11032 verbose addNamed [ 'globule', '0.1.0' ]
11033 verbose addNamed [ '0.1.0', '0.1.0' ]
11034 silly lockFile 4277c43c-globule-0-1-0 globule@0.1.0
11035 verbose lock globule@0.1.0 C:\Users\Gaston\AppData\Roaming\npm-cache\4277c43c-globule-0-1-0.lock
11036 silly lockFile 4277c43c-globule-0-1-0 globule@0.1.0
11037 silly lockFile 4277c43c-globule-0-1-0 globule@0.1.0
11038 silly lockFile 95d0eb0c-globule-0-1-0 globule@~0.1.0
11039 silly lockFile 95d0eb0c-globule-0-1-0 globule@~0.1.0
11040 silly resolved [ { name: 'globule',
11040 silly resolved     description: 'An easy-to-use wildcard globbing library.',
11040 silly resolved     version: '0.1.0',
11040 silly resolved     homepage: 'https://github.com/cowboy/node-globule',
11040 silly resolved     author: { name: '"Cowboy" Ben Alman', url: 'http://benalman.com/' },
11040 silly resolved     repository: { type: 'git', url: 'git://github.com/cowboy/node-globule.git' },
11040 silly resolved     bugs: { url: 'https://github.com/cowboy/node-globule/issues' },
11040 silly resolved     licenses: [ [Object] ],
11040 silly resolved     main: 'lib/globule',
11040 silly resolved     engines: { node: '>= 0.8.0' },
11040 silly resolved     scripts: { test: 'grunt nodeunit' },
11040 silly resolved     devDependencies:
11040 silly resolved      { 'grunt-contrib-jshint': '~0.1.1',
11040 silly resolved        'grunt-contrib-nodeunit': '~0.1.2',
11040 silly resolved        'grunt-contrib-watch': '~0.2.0',
11040 silly resolved        grunt: '~0.4.1' },
11040 silly resolved     keywords:
11040 silly resolved      [ 'glob',
11040 silly resolved        'file',
11040 silly resolved        'match',
11040 silly resolved        'mapping',
11040 silly resolved        'expand',
11040 silly resolved        'wildcard',
11040 silly resolved        'pattern',
11040 silly resolved        'sync',
11040 silly resolved        'awesome' ],
11040 silly resolved     dependencies: { lodash: '~1.0.1', glob: '~3.1.21', minimatch: '~0.2.11' },
11040 silly resolved     readme: '# globule [![Build Status](https://secure.travis-ci.org/cowboy/node-globule.png?branch=master)](http://travis-ci.org/cowboy/node-globule)\n\nAn easy-to-use wildcard globbing library.\n\n## Getting Started\nInstall the module with: `npm install globule`\n\n```javascript\nvar globule = require(\'globule\');\nvar filepaths = globule.find(\'**/*.js\');\n```\n\n## Documentation\n\n### globule.find\nReturns a unique array of all file or directory paths that match the given globbing pattern(s). This method accepts either comma separated globbing patterns or an array of globbing patterns. Paths matching patterns that begin with `!` will be excluded from the returned array. Patterns are processed in order, so inclusion and exclusion order is significant.\n\n```js\nglobule.find(patterns [, options])\n```\n\nThe `options` object supports all [glob][] library options, along with a few extras. These are the most commonly used:\n\n* `filter` Either a valid [fs.Stats method name](http://nodejs.org/docs/latest/api/fs.html#fs_class_fs_stats) or a function that will be passed the matched `src` filepath and `options` object as arguments. This function should return a `Boolean` value.\n* `nonull` Retain globbing patterns in result set even if they fail to match files.\n* `matchBase` Patterns without slashes will match just the basename part. Eg. this makes `*.js` work like `**/*.js`.\n* `srcBase` Patterns will be matched relative to the specified path instead of the current working directory. This is a synonym for `cwd`.\n* `prefixBase` Any specified `srcBase` will be prefixed to all returned filepaths.\n\n[glob]: https://github.com/isaacs/node-glob\n\n### globule.match\nMatch one or more globbing patterns against one or more file paths. Returns a uniqued array of all file paths that match any of the specified globbing patterns. Both the `patterns` and `filepaths` arguments can be a single string or array of strings. Paths matching patterns that begin with `!` will be excluded from the returned array. Patterns are processed in order, so inclusion and exclusion order is significant.\n\n```js\ngrunt.file.match(patterns, filepaths [, options])\n```\n\n### globule.isMatch\nThis method contains the same signature and logic as the `globule.match` method, but returns `true` if any files were matched, otherwise `false`.\n\n```js\ngrunt.file.isMatch(patterns, filepaths [, options])\n```\n\n### globule.mapping\nGiven a set of source file paths, returns an array of src-dest file mapping objects. Both src and dest paths may be renamed, depending on the options specified.\n\n```js\nglobule.mapping(filepaths [, options])\n```\n\nIn addition to the options the `globule.find` method supports, the options object also supports these properties:\n\n* `srcBase` The directory from which patterns are matched. Any string specified as `srcBase` is effectively stripped from the beginning of all matched paths.\n* `destBase` The specified path is prefixed to all `dest` filepaths.\n* `ext` Remove anything after (and including) the first `.` in the destination path, then append this value.\n* `extDot` Change the behavior of `ext`, `"first"` and `"last"` will remove anything after the first or last `.` in the destination filename, respectively. Defaults to `"first"`.\n* `flatten` Remove the path component from all matched src files. The src file path is still joined to the specified destBase.\n* `rename` If specified, this function will be responsible for returning the final `dest` filepath. By default, it flattens paths (if specified), changes extensions (if specified) and joins the matched path to the `destBase`.\n\n### globule.findMapping\nThis method is a convenience wrapper around the `globule.find` and `globule.mapping` methods.\n\n```js\nglobule.findMapping(patterns [, options])\n```\n\n\n## Examples\n\nGiven the files `foo/a.js` and `foo/b.js`:\n\n### srcBase and destBase\n\n```js\nglobule.find("foo/*.js")\n// ["foo/a.js", "foo/b.js"]\n\nglobule.find("*.js", {srcBase: "foo"})\n// ["a.js", "b.js"]\n\nglobule.find("*.js", {srcBase: "foo", prefixBase: true})\n// ["foo/a.js", "foo/b.js"]\n```\n\n```js\nglobule.findMapping("foo/*.js")\n// [{src: "foo/a.js", dest: "foo/a.js"}, {src: "foo/b.js", dest: "foo/b.js"}]\n\nglobule.findMapping("foo/*.js", {destBase: "bar"})\n// [{src: "foo/a.js", dest: "bar/foo/a.js"}, {src: "foo/b.js", dest: "bar/foo/b.js"}]\n\nglobule.findMapping("*.js", {srcBase: "foo", destBase: "bar"})\n// [{src: "foo/a.js", dest: "bar/a.js"}, {src: "foo/b.js", dest: "bar/b.js"}]\n```\n\n```js\nglobule.mapping(["foo/a.js", "foo/b.js"])\n// [{src: "foo/a.js", dest: "foo/a.js"}, {src: "foo/b.js", dest: "foo/b.js"}]\n\nglobule.mapping(["foo/a.js", "foo/b.js"], {destBase: "bar"})\n// [{src: "foo/a.js", dest: "bar/foo/a.js"}, {src: "foo/b.js", dest: "bar/foo/b.js"}]\n\nglobule.mapping(["a.js", "b.js"], {srcBase: "foo", destBase: "bar"})\n// [{src: "foo/a.js", dest: "bar/a.js"}, {src: "foo/b.js", dest: "bar/b.js"}]\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n_(Nothing yet)_\n\n## License\nCopyright (c) 2013 "Cowboy" Ben Alman  \nLicensed under the MIT license.\n',
11040 silly resolved     readmeFilename: 'README.md',
11040 silly resolved     _id: 'globule@0.1.0',
11040 silly resolved     dist: { shasum: '8b5f6be233e4aedede382503abfb00379459410a' },
11040 silly resolved     _from: 'globule@~0.1.0',
11040 silly resolved     _resolved: 'https://registry.npmjs.org/globule/-/globule-0.1.0.tgz' } ]
11041 info install globule@0.1.0 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze
11042 info installOne globule@0.1.0
11043 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule unbuild
11044 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\globule\0.1.0\package.tgz
11045 silly lockFile 3feb00d2-odules-gaze-node-modules-globule tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule
11046 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule C:\Users\Gaston\AppData\Roaming\npm-cache\3feb00d2-odules-gaze-node-modules-globule.lock
11047 silly lockFile c592a165--cache-globule-0-1-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\globule\0.1.0\package.tgz
11048 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\globule\0.1.0\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\c592a165--cache-globule-0-1-0-package-tgz.lock
11049 silly gunzTarPerm modes [ '755', '644' ]
11050 silly gunzTarPerm extractEntry package.json
11051 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
11052 silly gunzTarPerm extractEntry .npmignore
11053 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
11054 silly gunzTarPerm extractEntry README.md
11055 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
11056 silly gunzTarPerm extractEntry Gruntfile.js
11057 silly gunzTarPerm modified mode [ 'Gruntfile.js', 438, 420 ]
11058 silly gunzTarPerm extractEntry .jshintrc
11059 silly gunzTarPerm modified mode [ '.jshintrc', 438, 420 ]
11060 silly gunzTarPerm extractEntry .travis.yml
11061 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]
11062 silly gunzTarPerm extractEntry lib/globule.js
11063 silly gunzTarPerm modified mode [ 'lib/globule.js', 438, 420 ]
11064 silly gunzTarPerm extractEntry LICENSE-MIT
11065 silly gunzTarPerm modified mode [ 'LICENSE-MIT', 438, 420 ]
11066 silly gunzTarPerm extractEntry test/globule_test.js
11067 silly gunzTarPerm modified mode [ 'test/globule_test.js', 438, 420 ]
11068 silly gunzTarPerm extractEntry test/fixtures/expand/README.md
11069 silly gunzTarPerm modified mode [ 'test/fixtures/expand/README.md', 438, 420 ]
11070 silly gunzTarPerm extractEntry test/fixtures/expand/css/baz.css
11071 silly gunzTarPerm modified mode [ 'test/fixtures/expand/css/baz.css', 438, 420 ]
11072 silly gunzTarPerm extractEntry test/fixtures/expand/css/qux.css
11073 silly gunzTarPerm modified mode [ 'test/fixtures/expand/css/qux.css', 438, 420 ]
11074 silly gunzTarPerm extractEntry test/fixtures/expand/deep/deep.txt
11075 silly gunzTarPerm modified mode [ 'test/fixtures/expand/deep/deep.txt', 438, 420 ]
11076 silly gunzTarPerm extractEntry test/fixtures/expand/deep/deeper/deeper.txt
11077 silly gunzTarPerm modified mode [ 'test/fixtures/expand/deep/deeper/deeper.txt', 438, 420 ]
11078 silly gunzTarPerm extractEntry test/fixtures/expand/deep/deeper/deepest/deepest.txt
11079 silly gunzTarPerm modified mode [ 'test/fixtures/expand/deep/deeper/deepest/deepest.txt',
11079 silly gunzTarPerm   438,
11079 silly gunzTarPerm   420 ]
11080 silly gunzTarPerm extractEntry test/fixtures/expand/js/bar.js
11081 silly gunzTarPerm modified mode [ 'test/fixtures/expand/js/bar.js', 438, 420 ]
11082 silly gunzTarPerm extractEntry test/fixtures/expand/js/foo.js
11083 silly gunzTarPerm modified mode [ 'test/fixtures/expand/js/foo.js', 438, 420 ]
11084 silly lockFile 3feb00d2-odules-gaze-node-modules-globule tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule
11085 silly lockFile 3feb00d2-odules-gaze-node-modules-globule tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule
11086 silly lockFile c592a165--cache-globule-0-1-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\globule\0.1.0\package.tgz
11087 silly lockFile c592a165--cache-globule-0-1-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\globule\0.1.0\package.tgz
11088 info preinstall globule@0.1.0
11089 verbose readDependencies using package.json deps
11090 verbose readDependencies using package.json deps
11091 verbose cache add [ 'lodash@~1.0.1', null ]
11092 verbose cache add name=undefined spec="lodash@~1.0.1" args=["lodash@~1.0.1",null]
11093 verbose parsed url { protocol: null,
11093 verbose parsed url   slashes: null,
11093 verbose parsed url   auth: null,
11093 verbose parsed url   host: null,
11093 verbose parsed url   port: null,
11093 verbose parsed url   hostname: null,
11093 verbose parsed url   hash: null,
11093 verbose parsed url   search: null,
11093 verbose parsed url   query: null,
11093 verbose parsed url   pathname: 'lodash@~1.0.1',
11093 verbose parsed url   path: 'lodash@~1.0.1',
11093 verbose parsed url   href: 'lodash@~1.0.1' }
11094 verbose cache add name="lodash" spec="~1.0.1" args=["lodash","~1.0.1"]
11095 verbose parsed url { protocol: null,
11095 verbose parsed url   slashes: null,
11095 verbose parsed url   auth: null,
11095 verbose parsed url   host: null,
11095 verbose parsed url   port: null,
11095 verbose parsed url   hostname: null,
11095 verbose parsed url   hash: null,
11095 verbose parsed url   search: null,
11095 verbose parsed url   query: null,
11095 verbose parsed url   pathname: '~1.0.1',
11095 verbose parsed url   path: '~1.0.1',
11095 verbose parsed url   href: '~1.0.1' }
11096 verbose addNamed [ 'lodash', '~1.0.1' ]
11097 verbose addNamed [ null, '>=1.0.1-0 <1.1.0-0' ]
11098 silly lockFile 7309cd5e-lodash-1-0-1 lodash@~1.0.1
11099 verbose lock lodash@~1.0.1 C:\Users\Gaston\AppData\Roaming\npm-cache\7309cd5e-lodash-1-0-1.lock
11100 verbose cache add [ 'glob@~3.1.21', null ]
11101 verbose cache add name=undefined spec="glob@~3.1.21" args=["glob@~3.1.21",null]
11102 verbose parsed url { protocol: null,
11102 verbose parsed url   slashes: null,
11102 verbose parsed url   auth: null,
11102 verbose parsed url   host: null,
11102 verbose parsed url   port: null,
11102 verbose parsed url   hostname: null,
11102 verbose parsed url   hash: null,
11102 verbose parsed url   search: null,
11102 verbose parsed url   query: null,
11102 verbose parsed url   pathname: 'glob@~3.1.21',
11102 verbose parsed url   path: 'glob@~3.1.21',
11102 verbose parsed url   href: 'glob@~3.1.21' }
11103 verbose cache add name="glob" spec="~3.1.21" args=["glob","~3.1.21"]
11104 verbose parsed url { protocol: null,
11104 verbose parsed url   slashes: null,
11104 verbose parsed url   auth: null,
11104 verbose parsed url   host: null,
11104 verbose parsed url   port: null,
11104 verbose parsed url   hostname: null,
11104 verbose parsed url   hash: null,
11104 verbose parsed url   search: null,
11104 verbose parsed url   query: null,
11104 verbose parsed url   pathname: '~3.1.21',
11104 verbose parsed url   path: '~3.1.21',
11104 verbose parsed url   href: '~3.1.21' }
11105 verbose addNamed [ 'glob', '~3.1.21' ]
11106 verbose addNamed [ null, '>=3.1.21-0 <3.2.0-0' ]
11107 silly lockFile b5074ddc-glob-3-1-21 glob@~3.1.21
11108 verbose lock glob@~3.1.21 C:\Users\Gaston\AppData\Roaming\npm-cache\b5074ddc-glob-3-1-21.lock
11109 verbose cache add [ 'minimatch@~0.2.11', null ]
11110 verbose cache add name=undefined spec="minimatch@~0.2.11" args=["minimatch@~0.2.11",null]
11111 verbose parsed url { protocol: null,
11111 verbose parsed url   slashes: null,
11111 verbose parsed url   auth: null,
11111 verbose parsed url   host: null,
11111 verbose parsed url   port: null,
11111 verbose parsed url   hostname: null,
11111 verbose parsed url   hash: null,
11111 verbose parsed url   search: null,
11111 verbose parsed url   query: null,
11111 verbose parsed url   pathname: 'minimatch@~0.2.11',
11111 verbose parsed url   path: 'minimatch@~0.2.11',
11111 verbose parsed url   href: 'minimatch@~0.2.11' }
11112 verbose cache add name="minimatch" spec="~0.2.11" args=["minimatch","~0.2.11"]
11113 verbose parsed url { protocol: null,
11113 verbose parsed url   slashes: null,
11113 verbose parsed url   auth: null,
11113 verbose parsed url   host: null,
11113 verbose parsed url   port: null,
11113 verbose parsed url   hostname: null,
11113 verbose parsed url   hash: null,
11113 verbose parsed url   search: null,
11113 verbose parsed url   query: null,
11113 verbose parsed url   pathname: '~0.2.11',
11113 verbose parsed url   path: '~0.2.11',
11113 verbose parsed url   href: '~0.2.11' }
11114 verbose addNamed [ 'minimatch', '~0.2.11' ]
11115 verbose addNamed [ null, '>=0.2.11-0 <0.3.0-0' ]
11116 silly lockFile 94473efb-minimatch-0-2-11 minimatch@~0.2.11
11117 verbose lock minimatch@~0.2.11 C:\Users\Gaston\AppData\Roaming\npm-cache\94473efb-minimatch-0-2-11.lock
11118 silly addNameRange { name: 'glob', range: '>=3.1.21-0 <3.2.0-0', hasData: false }
11119 silly addNameRange { name: 'lodash', range: '>=1.0.1-0 <1.1.0-0', hasData: false }
11120 silly addNameRange { name: 'minimatch',
11120 silly addNameRange   range: '>=0.2.11-0 <0.3.0-0',
11120 silly addNameRange   hasData: false }
11121 verbose url raw glob
11122 verbose url resolving [ 'https://registry.npmjs.org/', './glob' ]
11123 verbose url resolved https://registry.npmjs.org/glob
11124 info trying registry request attempt 1 at 16:40:19
11125 verbose etag "3PHU6ZLK0XRBOWDW0GE8Z2RX4"
11126 http GET https://registry.npmjs.org/glob
11127 verbose url raw lodash
11128 verbose url resolving [ 'https://registry.npmjs.org/', './lodash' ]
11129 verbose url resolved https://registry.npmjs.org/lodash
11130 info trying registry request attempt 1 at 16:40:19
11131 verbose etag "48RYE9MT28KTYXAU02IDQRC7Q"
11132 http GET https://registry.npmjs.org/lodash
11133 verbose url raw minimatch
11134 verbose url resolving [ 'https://registry.npmjs.org/', './minimatch' ]
11135 verbose url resolved https://registry.npmjs.org/minimatch
11136 info trying registry request attempt 1 at 16:40:19
11137 verbose etag "ENY6937TKFXIJARH44KNW9ZPF"
11138 http GET https://registry.npmjs.org/minimatch
11139 http 200 https://registry.npmjs.org/noptify/-/noptify-0.0.3.tgz
11140 http 200 https://registry.npmjs.org/qs/-/qs-0.5.6.tgz
11141 http 200 https://registry.npmjs.org/faye-websocket
11142 silly registry.get cb [ 200,
11142 silly registry.get   { date: 'Fri, 03 Jan 2014 19:39:09 GMT',
11142 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
11142 silly registry.get     etag: '"A4VXVXA99KNUG3ENW016AKTFV"',
11142 silly registry.get     'content-type': 'application/json',
11142 silly registry.get     'content-length': '126200',
11142 silly registry.get     'accept-ranges': 'bytes',
11142 silly registry.get     via: '1.1 varnish',
11142 silly registry.get     age: '211700',
11142 silly registry.get     'x-served-by': 'cache-d64-DAL',
11142 silly registry.get     'x-cache': 'HIT',
11142 silly registry.get     'x-cache-hits': '1',
11142 silly registry.get     'x-timer': 'S1388777948.974427938,VS0,VE37',
11142 silly registry.get     vary: 'Accept',
11142 silly registry.get     'keep-alive': 'timeout=10, max=49',
11142 silly registry.get     connection: 'Keep-Alive' } ]
11143 silly addNameRange number 2 { name: 'faye-websocket',
11143 silly addNameRange   range: '>=0.4.3-0 <0.5.0-0',
11143 silly addNameRange   hasData: true }
11144 silly addNameRange versions [ 'faye-websocket',
11144 silly addNameRange   [ '0.1.0',
11144 silly addNameRange     '0.1.1',
11144 silly addNameRange     '0.1.2',
11144 silly addNameRange     '0.2.0',
11144 silly addNameRange     '0.3.0',
11144 silly addNameRange     '0.3.1',
11144 silly addNameRange     '0.4.0',
11144 silly addNameRange     '0.4.1',
11144 silly addNameRange     '0.4.2',
11144 silly addNameRange     '0.4.3',
11144 silly addNameRange     '0.4.4',
11144 silly addNameRange     '0.5.0',
11144 silly addNameRange     '0.6.0',
11144 silly addNameRange     '0.6.1',
11144 silly addNameRange     '0.7.0',
11144 silly addNameRange     '0.7.1',
11144 silly addNameRange     '0.7.2' ] ]
11145 verbose addNamed [ 'faye-websocket', '0.4.4' ]
11146 verbose addNamed [ '0.4.4', '0.4.4' ]
11147 silly lockFile f9b80149-faye-websocket-0-4-4 faye-websocket@0.4.4
11148 verbose lock faye-websocket@0.4.4 C:\Users\Gaston\AppData\Roaming\npm-cache\f9b80149-faye-websocket-0-4-4.lock
11149 silly lockFile 336a028c-bsocket-faye-websocket-0-4-4-tgz https://registry.npmjs.org/faye-websocket/-/faye-websocket-0.4.4.tgz
11150 verbose lock https://registry.npmjs.org/faye-websocket/-/faye-websocket-0.4.4.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\336a028c-bsocket-faye-websocket-0-4-4-tgz.lock
11151 verbose addRemoteTarball [ 'https://registry.npmjs.org/faye-websocket/-/faye-websocket-0.4.4.tgz',
11151 verbose addRemoteTarball   'c14c5b3bf14d7417ffbfd990c0a7495cd9f337bc' ]
11152 info retry fetch attempt 1 at 16:40:21
11153 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778021682-0.36127168498933315\tmp.tgz
11154 http GET https://registry.npmjs.org/faye-websocket/-/faye-websocket-0.4.4.tgz
11155 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778014913-0.10808372823521495\tmp.tgz
11156 silly lockFile d462bea8-4913-0-10808372823521495-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778014913-0.10808372823521495\package
11157 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778014913-0.10808372823521495\package C:\Users\Gaston\AppData\Roaming\npm-cache\d462bea8-4913-0-10808372823521495-package.lock
11158 silly lockFile 13ebe0c4-4913-0-10808372823521495-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778014913-0.10808372823521495\tmp.tgz
11159 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778014913-0.10808372823521495\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\13ebe0c4-4913-0-10808372823521495-tmp-tgz.lock
11160 silly gunzTarPerm modes [ '755', '644' ]
11161 silly gunzTarPerm extractEntry package.json
11162 silly gunzTarPerm extractEntry .npmignore
11163 silly gunzTarPerm extractEntry index.js
11164 silly gunzTarPerm extractEntry actions/collectable.js
11165 silly gunzTarPerm extractEntry actions/commandable.js
11166 silly gunzTarPerm extractEntry readme.md
11167 silly gunzTarPerm extractEntry test/api.js
11168 silly gunzTarPerm extractEntry test/collectable.js
11169 silly gunzTarPerm extractEntry test/commandable.js
11170 silly gunzTarPerm extractEntry test/fixtures/a.js
11171 silly gunzTarPerm extractEntry test/fixtures/b.js
11172 silly gunzTarPerm extractEntry util/extend.js
11173 silly gunzTarPerm extractEntry util/index.js
11174 silly lockFile d462bea8-4913-0-10808372823521495-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778014913-0.10808372823521495\package
11175 silly lockFile d462bea8-4913-0-10808372823521495-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778014913-0.10808372823521495\package
11176 silly lockFile 13ebe0c4-4913-0-10808372823521495-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778014913-0.10808372823521495\tmp.tgz
11177 silly lockFile 13ebe0c4-4913-0-10808372823521495-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778014913-0.10808372823521495\tmp.tgz
11178 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\noptify\\0.0.3\\package.tgz',
11178 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388778014913-0.10808372823521495\\package' ]
11179 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\noptify\0.0.3\package.tgz
11180 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778014913-0.10808372823521495\package
11181 silly lockFile d462bea8-4913-0-10808372823521495-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778014913-0.10808372823521495\package
11182 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778014913-0.10808372823521495\package C:\Users\Gaston\AppData\Roaming\npm-cache\d462bea8-4913-0-10808372823521495-package.lock
11183 silly lockFile 5736e0d5--cache-noptify-0-0-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\noptify\0.0.3\package.tgz
11184 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\noptify\0.0.3\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\5736e0d5--cache-noptify-0-0-3-package-tgz.lock
11185 silly lockFile d462bea8-4913-0-10808372823521495-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778014913-0.10808372823521495\package
11186 silly lockFile d462bea8-4913-0-10808372823521495-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778014913-0.10808372823521495\package
11187 silly lockFile 5736e0d5--cache-noptify-0-0-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\noptify\0.0.3\package.tgz
11188 silly lockFile 5736e0d5--cache-noptify-0-0-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\noptify\0.0.3\package.tgz
11189 silly lockFile 92df19b3--npm-cache-noptify-0-0-3-package C:\Users\Gaston\AppData\Roaming\npm-cache\noptify\0.0.3\package
11190 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\noptify\0.0.3\package C:\Users\Gaston\AppData\Roaming\npm-cache\92df19b3--npm-cache-noptify-0-0-3-package.lock
11191 http 200 https://registry.npmjs.org/faye-websocket/-/faye-websocket-0.4.4.tgz
11192 silly lockFile 92df19b3--npm-cache-noptify-0-0-3-package C:\Users\Gaston\AppData\Roaming\npm-cache\noptify\0.0.3\package
11193 silly lockFile 92df19b3--npm-cache-noptify-0-0-3-package C:\Users\Gaston\AppData\Roaming\npm-cache\noptify\0.0.3\package
11194 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\noptify\0.0.3\package.tgz
11195 silly lockFile fdf3099e--npm-cache-noptify-0-0-3-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\noptify\0.0.3\package
11196 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\noptify\0.0.3\package C:\Users\Gaston\AppData\Roaming\npm-cache\fdf3099e--npm-cache-noptify-0-0-3-package.lock
11197 silly lockFile 5736e0d5--cache-noptify-0-0-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\noptify\0.0.3\package.tgz
11198 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\noptify\0.0.3\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\5736e0d5--cache-noptify-0-0-3-package-tgz.lock
11199 silly gunzTarPerm modes [ '755', '644' ]
11200 silly gunzTarPerm extractEntry package.json
11201 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
11202 silly gunzTarPerm extractEntry .npmignore
11203 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
11204 silly gunzTarPerm extractEntry index.js
11205 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
11206 silly gunzTarPerm extractEntry actions/collectable.js
11207 silly gunzTarPerm modified mode [ 'actions/collectable.js', 438, 420 ]
11208 silly gunzTarPerm extractEntry actions/commandable.js
11209 silly gunzTarPerm modified mode [ 'actions/commandable.js', 438, 420 ]
11210 silly gunzTarPerm extractEntry readme.md
11211 silly gunzTarPerm modified mode [ 'readme.md', 438, 420 ]
11212 silly gunzTarPerm extractEntry test/api.js
11213 silly gunzTarPerm modified mode [ 'test/api.js', 438, 420 ]
11214 silly gunzTarPerm extractEntry test/collectable.js
11215 silly gunzTarPerm modified mode [ 'test/collectable.js', 438, 420 ]
11216 silly gunzTarPerm extractEntry test/commandable.js
11217 silly gunzTarPerm modified mode [ 'test/commandable.js', 438, 420 ]
11218 silly gunzTarPerm extractEntry test/fixtures/a.js
11219 silly gunzTarPerm modified mode [ 'test/fixtures/a.js', 438, 420 ]
11220 silly gunzTarPerm extractEntry test/fixtures/b.js
11221 silly gunzTarPerm modified mode [ 'test/fixtures/b.js', 438, 420 ]
11222 silly gunzTarPerm extractEntry util/extend.js
11223 silly gunzTarPerm modified mode [ 'util/extend.js', 438, 420 ]
11224 silly gunzTarPerm extractEntry util/index.js
11225 silly gunzTarPerm modified mode [ 'util/index.js', 438, 420 ]
11226 http 200 https://registry.npmjs.org/mkdirp
11227 silly registry.get cb [ 200,
11227 silly registry.get   { date: 'Fri, 03 Jan 2014 19:39:22 GMT',
11227 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
11227 silly registry.get     etag: '"DBC495601MPJBLUZWFOLO6F6N"',
11227 silly registry.get     'content-type': 'application/json',
11227 silly registry.get     'content-length': '18014',
11227 silly registry.get     'accept-ranges': 'bytes',
11227 silly registry.get     via: '1.1 varnish',
11227 silly registry.get     age: '17426',
11227 silly registry.get     'x-served-by': 'cache-d64-DAL',
11227 silly registry.get     'x-cache': 'HIT',
11227 silly registry.get     'x-cache-hits': '1',
11227 silly registry.get     'x-timer': 'S1388777962.497919083,VS0,VE14',
11227 silly registry.get     vary: 'Accept',
11227 silly registry.get     'keep-alive': 'timeout=10, max=48',
11227 silly registry.get     connection: 'Keep-Alive' } ]
11228 silly addNameRange number 2 { name: 'mkdirp', range: '>=0.3.0-0 <0.4.0-0', hasData: true }
11229 silly addNameRange versions [ 'mkdirp',
11229 silly addNameRange   [ '0.0.1',
11229 silly addNameRange     '0.0.2',
11229 silly addNameRange     '0.0.3',
11229 silly addNameRange     '0.0.4',
11229 silly addNameRange     '0.0.5',
11229 silly addNameRange     '0.0.6',
11229 silly addNameRange     '0.0.7',
11229 silly addNameRange     '0.1.0',
11229 silly addNameRange     '0.2.0',
11229 silly addNameRange     '0.2.1',
11229 silly addNameRange     '0.2.2',
11229 silly addNameRange     '0.3.0',
11229 silly addNameRange     '0.3.1',
11229 silly addNameRange     '0.3.2',
11229 silly addNameRange     '0.3.3',
11229 silly addNameRange     '0.3.4',
11229 silly addNameRange     '0.3.5' ] ]
11230 verbose addNamed [ 'mkdirp', '0.3.5' ]
11231 verbose addNamed [ '0.3.5', '0.3.5' ]
11232 silly lockFile 67d2df2a-mkdirp-0-3-5 mkdirp@0.3.5
11233 verbose lock mkdirp@0.3.5 C:\Users\Gaston\AppData\Roaming\npm-cache\67d2df2a-mkdirp-0-3-5.lock
11234 silly lockFile fdf3099e--npm-cache-noptify-0-0-3-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\noptify\0.0.3\package
11235 silly lockFile fdf3099e--npm-cache-noptify-0-0-3-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\noptify\0.0.3\package
11236 silly lockFile 5736e0d5--cache-noptify-0-0-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\noptify\0.0.3\package.tgz
11237 silly lockFile 5736e0d5--cache-noptify-0-0-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\noptify\0.0.3\package.tgz
11238 silly lockFile 7b2ebe55-pmjs-org-mkdirp-mkdirp-0-3-5-tgz https://registry.npmjs.org/mkdirp/-/mkdirp-0.3.5.tgz
11239 verbose lock https://registry.npmjs.org/mkdirp/-/mkdirp-0.3.5.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\7b2ebe55-pmjs-org-mkdirp-mkdirp-0-3-5-tgz.lock
11240 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\noptify\0.0.3\package.tgz 644
11241 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\noptify\0.0.3\package.tgz
11242 verbose addRemoteTarball [ 'https://registry.npmjs.org/mkdirp/-/mkdirp-0.3.5.tgz',
11242 verbose addRemoteTarball   'de3e5f8961c88c787ee1368df849ac4413eca8d7' ]
11243 silly lockFile 061f616a-js-org-noptify-noptify-0-0-3-tgz https://registry.npmjs.org/noptify/-/noptify-0.0.3.tgz
11244 silly lockFile 061f616a-js-org-noptify-noptify-0-0-3-tgz https://registry.npmjs.org/noptify/-/noptify-0.0.3.tgz
11245 silly lockFile d8f631c4-noptify-0-0-3 noptify@0.0.3
11246 silly lockFile d8f631c4-noptify-0-0-3 noptify@0.0.3
11247 info retry fetch attempt 1 at 16:40:22
11248 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778022862-0.09757205005735159\tmp.tgz
11249 silly lockFile ca287262-noptify-latest noptify@latest
11250 silly lockFile ca287262-noptify-latest noptify@latest
11251 http GET https://registry.npmjs.org/mkdirp/-/mkdirp-0.3.5.tgz
11252 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778021682-0.36127168498933315\tmp.tgz
11253 silly lockFile 112c97a8-1682-0-36127168498933315-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778021682-0.36127168498933315\package
11254 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778021682-0.36127168498933315\package C:\Users\Gaston\AppData\Roaming\npm-cache\112c97a8-1682-0-36127168498933315-package.lock
11255 silly lockFile d1137a54-1682-0-36127168498933315-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778021682-0.36127168498933315\tmp.tgz
11256 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778021682-0.36127168498933315\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\d1137a54-1682-0-36127168498933315-tmp-tgz.lock
11257 silly gunzTarPerm modes [ '755', '644' ]
11258 silly gunzTarPerm extractEntry package.json
11259 silly gunzTarPerm extractEntry CHANGELOG.txt
11260 silly gunzTarPerm extractEntry examples/autobahn_client.js
11261 silly gunzTarPerm extractEntry examples/client.js
11262 silly gunzTarPerm extractEntry examples/server.js
11263 silly gunzTarPerm extractEntry examples/haproxy.conf
11264 silly gunzTarPerm extractEntry examples/sse.html
11265 silly gunzTarPerm extractEntry examples/ws.html
11266 silly gunzTarPerm extractEntry lib/faye/eventsource.js
11267 silly gunzTarPerm extractEntry lib/faye/websocket.js
11268 silly gunzTarPerm extractEntry lib/faye/websocket/api.js
11269 silly gunzTarPerm extractEntry lib/faye/websocket/client.js
11270 silly gunzTarPerm extractEntry lib/faye/websocket/draft75_parser.js
11271 silly gunzTarPerm extractEntry lib/faye/websocket/draft76_parser.js
11272 silly gunzTarPerm extractEntry lib/faye/websocket/hybi_parser.js
11273 silly gunzTarPerm extractEntry lib/faye/websocket/api/event.js
11274 silly gunzTarPerm extractEntry lib/faye/websocket/api/event_target.js
11275 silly gunzTarPerm extractEntry lib/faye/websocket/hybi_parser/handshake.js
11276 silly gunzTarPerm extractEntry lib/faye/websocket/hybi_parser/stream_reader.js
11277 silly gunzTarPerm extractEntry README.markdown
11278 silly gunzTarPerm extractEntry spec/runner.js
11279 silly gunzTarPerm extractEntry spec/faye/websocket/client_spec.js
11280 silly gunzTarPerm extractEntry spec/faye/websocket/draft75parser_spec.js
11281 silly gunzTarPerm extractEntry spec/faye/websocket/draft76parser_spec.js
11282 silly gunzTarPerm extractEntry spec/faye/websocket/hybi_parser_spec.js
11283 silly gunzTarPerm extractEntry spec/server.crt
11284 silly gunzTarPerm extractEntry spec/server.key
11285 silly lockFile 112c97a8-1682-0-36127168498933315-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778021682-0.36127168498933315\package
11286 silly lockFile 112c97a8-1682-0-36127168498933315-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778021682-0.36127168498933315\package
11287 silly lockFile d1137a54-1682-0-36127168498933315-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778021682-0.36127168498933315\tmp.tgz
11288 silly lockFile d1137a54-1682-0-36127168498933315-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778021682-0.36127168498933315\tmp.tgz
11289 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\faye-websocket\\0.4.4\\package.tgz',
11289 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388778021682-0.36127168498933315\\package' ]
11290 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\faye-websocket\0.4.4\package.tgz
11291 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778021682-0.36127168498933315\package
11292 silly lockFile 112c97a8-1682-0-36127168498933315-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778021682-0.36127168498933315\package
11293 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778021682-0.36127168498933315\package C:\Users\Gaston\AppData\Roaming\npm-cache\112c97a8-1682-0-36127168498933315-package.lock
11294 silly lockFile cf2155b7-faye-websocket-0-4-4-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\faye-websocket\0.4.4\package.tgz
11295 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\faye-websocket\0.4.4\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\cf2155b7-faye-websocket-0-4-4-package-tgz.lock
11296 http 200 https://registry.npmjs.org/ncp
11297 silly registry.get cb [ 200,
11297 silly registry.get   { date: 'Fri, 03 Jan 2014 19:39:19 GMT',
11297 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
11297 silly registry.get     etag: '"CLXK9CXYYAPFJR27S0MA6WSJW"',
11297 silly registry.get     'content-type': 'application/json',
11297 silly registry.get     'content-length': '41214',
11297 silly registry.get     'accept-ranges': 'bytes',
11297 silly registry.get     via: '1.1 varnish',
11297 silly registry.get     age: '705',
11297 silly registry.get     'x-served-by': 'cache-jfk1023-JFK',
11297 silly registry.get     'x-cache': 'HIT',
11297 silly registry.get     'x-cache-hits': '1',
11297 silly registry.get     'x-timer': 'S1388777959.953568220,VS0,VE46',
11297 silly registry.get     vary: 'Accept',
11297 silly registry.get     'keep-alive': 'timeout=10, max=35',
11297 silly registry.get     connection: 'Keep-Alive' } ]
11298 silly lockFile 112c97a8-1682-0-36127168498933315-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778021682-0.36127168498933315\package
11299 silly lockFile 112c97a8-1682-0-36127168498933315-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778021682-0.36127168498933315\package
11300 silly lockFile cf2155b7-faye-websocket-0-4-4-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\faye-websocket\0.4.4\package.tgz
11301 silly lockFile cf2155b7-faye-websocket-0-4-4-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\faye-websocket\0.4.4\package.tgz
11302 silly lockFile 866567e6-che-faye-websocket-0-4-4-package C:\Users\Gaston\AppData\Roaming\npm-cache\faye-websocket\0.4.4\package
11303 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\faye-websocket\0.4.4\package C:\Users\Gaston\AppData\Roaming\npm-cache\866567e6-che-faye-websocket-0-4-4-package.lock
11304 silly lockFile 866567e6-che-faye-websocket-0-4-4-package C:\Users\Gaston\AppData\Roaming\npm-cache\faye-websocket\0.4.4\package
11305 silly lockFile 866567e6-che-faye-websocket-0-4-4-package C:\Users\Gaston\AppData\Roaming\npm-cache\faye-websocket\0.4.4\package
11306 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\faye-websocket\0.4.4\package.tgz
11307 silly lockFile 1cff9e5f-che-faye-websocket-0-4-4-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\faye-websocket\0.4.4\package
11308 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\faye-websocket\0.4.4\package C:\Users\Gaston\AppData\Roaming\npm-cache\1cff9e5f-che-faye-websocket-0-4-4-package.lock
11309 silly lockFile cf2155b7-faye-websocket-0-4-4-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\faye-websocket\0.4.4\package.tgz
11310 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\faye-websocket\0.4.4\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\cf2155b7-faye-websocket-0-4-4-package-tgz.lock
11311 silly addNameRange number 2 { name: 'ncp', range: '>=0.4.2-0 <0.5.0-0', hasData: true }
11312 silly addNameRange versions [ 'ncp',
11312 silly addNameRange   [ '0.0.0',
11312 silly addNameRange     '0.0.1',
11312 silly addNameRange     '0.0.2',
11312 silly addNameRange     '0.1.0',
11312 silly addNameRange     '0.1.1',
11312 silly addNameRange     '0.1.2',
11312 silly addNameRange     '0.2.0',
11312 silly addNameRange     '0.2.1',
11312 silly addNameRange     '0.2.2',
11312 silly addNameRange     '0.2.3',
11312 silly addNameRange     '0.2.4',
11312 silly addNameRange     '0.2.5',
11312 silly addNameRange     '0.2.6',
11312 silly addNameRange     '0.3.0',
11312 silly addNameRange     '0.4.0',
11312 silly addNameRange     '0.2.7',
11312 silly addNameRange     '0.4.1',
11312 silly addNameRange     '0.4.2',
11312 silly addNameRange     '0.5.0' ] ]
11313 verbose addNamed [ 'ncp', '0.4.2' ]
11314 verbose addNamed [ '0.4.2', '0.4.2' ]
11315 silly lockFile e43cb36a-ncp-0-4-2 ncp@0.4.2
11316 verbose lock ncp@0.4.2 C:\Users\Gaston\AppData\Roaming\npm-cache\e43cb36a-ncp-0-4-2.lock
11317 silly gunzTarPerm modes [ '755', '644' ]
11318 silly lockFile b3172d45-stry-npmjs-org-ncp-ncp-0-4-2-tgz https://registry.npmjs.org/ncp/-/ncp-0.4.2.tgz
11319 verbose lock https://registry.npmjs.org/ncp/-/ncp-0.4.2.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\b3172d45-stry-npmjs-org-ncp-ncp-0-4-2-tgz.lock
11320 silly gunzTarPerm extractEntry package.json
11321 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
11322 verbose addRemoteTarball [ 'https://registry.npmjs.org/ncp/-/ncp-0.4.2.tgz',
11322 verbose addRemoteTarball   'abcc6cbd3ec2ed2a729ff6e7c1fa8f01784a8574' ]
11323 info retry fetch attempt 1 at 16:40:23
11324 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778023751-0.8012961626518518\tmp.tgz
11325 silly gunzTarPerm extractEntry CHANGELOG.txt
11326 silly gunzTarPerm modified mode [ 'CHANGELOG.txt', 438, 420 ]
11327 silly gunzTarPerm extractEntry examples/autobahn_client.js
11328 silly gunzTarPerm modified mode [ 'examples/autobahn_client.js', 438, 420 ]
11329 http GET https://registry.npmjs.org/ncp/-/ncp-0.4.2.tgz
11330 silly gunzTarPerm extractEntry examples/client.js
11331 silly gunzTarPerm modified mode [ 'examples/client.js', 438, 420 ]
11332 silly gunzTarPerm extractEntry examples/server.js
11333 silly gunzTarPerm modified mode [ 'examples/server.js', 438, 420 ]
11334 silly gunzTarPerm extractEntry examples/haproxy.conf
11335 silly gunzTarPerm modified mode [ 'examples/haproxy.conf', 438, 420 ]
11336 silly gunzTarPerm extractEntry examples/sse.html
11337 silly gunzTarPerm modified mode [ 'examples/sse.html', 438, 420 ]
11338 silly gunzTarPerm extractEntry examples/ws.html
11339 silly gunzTarPerm modified mode [ 'examples/ws.html', 438, 420 ]
11340 silly gunzTarPerm extractEntry lib/faye/eventsource.js
11341 silly gunzTarPerm modified mode [ 'lib/faye/eventsource.js', 438, 420 ]
11342 silly gunzTarPerm extractEntry lib/faye/websocket.js
11343 silly gunzTarPerm modified mode [ 'lib/faye/websocket.js', 438, 420 ]
11344 silly gunzTarPerm extractEntry lib/faye/websocket/api.js
11345 silly gunzTarPerm modified mode [ 'lib/faye/websocket/api.js', 438, 420 ]
11346 silly gunzTarPerm extractEntry lib/faye/websocket/client.js
11347 silly gunzTarPerm modified mode [ 'lib/faye/websocket/client.js', 438, 420 ]
11348 http 200 https://registry.npmjs.org/mkdirp/-/mkdirp-0.3.5.tgz
11349 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778022862-0.09757205005735159\tmp.tgz
11350 silly lockFile 4e938f8e-2862-0-09757205005735159-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778022862-0.09757205005735159\package
11351 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778022862-0.09757205005735159\package C:\Users\Gaston\AppData\Roaming\npm-cache\4e938f8e-2862-0-09757205005735159-package.lock
11352 silly lockFile 9fdbee96-2862-0-09757205005735159-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778022862-0.09757205005735159\tmp.tgz
11353 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778022862-0.09757205005735159\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\9fdbee96-2862-0-09757205005735159-tmp-tgz.lock
11354 silly gunzTarPerm modes [ '755', '644' ]
11355 silly gunzTarPerm extractEntry package.json
11356 silly gunzTarPerm extractEntry .npmignore
11357 silly gunzTarPerm extractEntry LICENSE
11358 silly gunzTarPerm extractEntry index.js
11359 silly gunzTarPerm extractEntry examples/pow.js
11360 silly gunzTarPerm extractEntry lib/faye/websocket/draft75_parser.js
11361 silly gunzTarPerm modified mode [ 'lib/faye/websocket/draft75_parser.js', 438, 420 ]
11362 silly gunzTarPerm extractEntry lib/faye/websocket/draft76_parser.js
11363 silly gunzTarPerm modified mode [ 'lib/faye/websocket/draft76_parser.js', 438, 420 ]
11364 silly gunzTarPerm extractEntry readme.markdown
11365 silly gunzTarPerm extractEntry test/perm.js
11366 silly gunzTarPerm extractEntry lib/faye/websocket/hybi_parser.js
11367 silly gunzTarPerm modified mode [ 'lib/faye/websocket/hybi_parser.js', 438, 420 ]
11368 silly gunzTarPerm extractEntry lib/faye/websocket/api/event.js
11369 silly gunzTarPerm modified mode [ 'lib/faye/websocket/api/event.js', 438, 420 ]
11370 silly gunzTarPerm extractEntry test/perm_sync.js
11371 silly gunzTarPerm extractEntry test/race.js
11372 silly gunzTarPerm extractEntry lib/faye/websocket/api/event_target.js
11373 silly gunzTarPerm modified mode [ 'lib/faye/websocket/api/event_target.js', 438, 420 ]
11374 silly gunzTarPerm extractEntry lib/faye/websocket/hybi_parser/handshake.js
11375 silly gunzTarPerm modified mode [ 'lib/faye/websocket/hybi_parser/handshake.js', 438, 420 ]
11376 silly gunzTarPerm extractEntry test/rel.js
11377 silly gunzTarPerm extractEntry lib/faye/websocket/hybi_parser/stream_reader.js
11378 silly gunzTarPerm modified mode [ 'lib/faye/websocket/hybi_parser/stream_reader.js', 438, 420 ]
11379 silly gunzTarPerm extractEntry README.markdown
11380 silly gunzTarPerm modified mode [ 'README.markdown', 438, 420 ]
11381 http 304 https://registry.npmjs.org/rimraf
11382 silly registry.get cb [ 304,
11382 silly registry.get   { date: 'Fri, 03 Jan 2014 19:39:24 GMT',
11382 silly registry.get     server: 'Apache',
11382 silly registry.get     connection: 'Keep-Alive',
11382 silly registry.get     'keep-alive': 'timeout=10, max=34',
11382 silly registry.get     etag: '"A9IB7CO27T8QICS45GYZX0R85"',
11382 silly registry.get     vary: 'Accept' } ]
11383 verbose etag rimraf from cache
11384 silly gunzTarPerm extractEntry test/return.js
11385 silly gunzTarPerm extractEntry test/clobber.js
11386 silly gunzTarPerm extractEntry test/root.js
11387 silly gunzTarPerm extractEntry test/umask.js
11388 silly gunzTarPerm extractEntry spec/runner.js
11389 silly gunzTarPerm modified mode [ 'spec/runner.js', 438, 420 ]
11390 silly gunzTarPerm extractEntry spec/faye/websocket/client_spec.js
11391 silly gunzTarPerm modified mode [ 'spec/faye/websocket/client_spec.js', 438, 420 ]
11392 silly gunzTarPerm extractEntry test/sync.js
11393 silly gunzTarPerm extractEntry test/chmod.js
11394 http 200 https://registry.npmjs.org/jsonfile
11395 silly registry.get cb [ 200,
11395 silly registry.get   { date: 'Fri, 03 Jan 2014 19:39:23 GMT',
11395 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
11395 silly registry.get     etag: '"E3TSL3VKXLBC9NQHCZAOTY57S"',
11395 silly registry.get     'content-type': 'application/json',
11395 silly registry.get     'content-length': '17132',
11395 silly registry.get     'accept-ranges': 'bytes',
11395 silly registry.get     via: '1.1 varnish',
11395 silly registry.get     age: '141649',
11395 silly registry.get     'x-served-by': 'cache-d64-DAL',
11395 silly registry.get     'x-cache': 'HIT',
11395 silly registry.get     'x-cache-hits': '1',
11395 silly registry.get     'x-timer': 'S1388777963.793409109,VS0,VE12',
11395 silly registry.get     vary: 'Accept',
11395 silly registry.get     'keep-alive': 'timeout=10, max=47',
11395 silly registry.get     connection: 'Keep-Alive' } ]
11396 silly addNameRange number 2 { name: 'rimraf', range: '>=2.2.0-0 <2.3.0-0', hasData: true }
11397 silly addNameRange versions [ 'rimraf',
11397 silly addNameRange   [ '1.0.0',
11397 silly addNameRange     '1.0.1',
11397 silly addNameRange     '1.0.2',
11397 silly addNameRange     '1.0.4',
11397 silly addNameRange     '1.0.5',
11397 silly addNameRange     '1.0.6',
11397 silly addNameRange     '1.0.7',
11397 silly addNameRange     '1.0.8',
11397 silly addNameRange     '1.0.9',
11397 silly addNameRange     '2.0.0',
11397 silly addNameRange     '2.0.1',
11397 silly addNameRange     '2.0.2',
11397 silly addNameRange     '2.0.3',
11397 silly addNameRange     '2.1.0',
11397 silly addNameRange     '2.1.1',
11397 silly addNameRange     '2.1.2',
11397 silly addNameRange     '2.1.3',
11397 silly addNameRange     '2.1.4',
11397 silly addNameRange     '2.2.0',
11397 silly addNameRange     '2.2.1',
11397 silly addNameRange     '2.2.2',
11397 silly addNameRange     '2.2.3',
11397 silly addNameRange     '2.2.4',
11397 silly addNameRange     '2.2.5' ] ]
11398 verbose addNamed [ 'rimraf', '2.2.5' ]
11399 verbose addNamed [ '2.2.5', '2.2.5' ]
11400 silly lockFile 26564256-rimraf-2-2-5 rimraf@2.2.5
11401 verbose lock rimraf@2.2.5 C:\Users\Gaston\AppData\Roaming\npm-cache\26564256-rimraf-2-2-5.lock
11402 silly gunzTarPerm extractEntry test/umask_sync.js
11403 silly gunzTarPerm extractEntry test/return_sync.js
11404 silly gunzTarPerm extractEntry spec/faye/websocket/draft75parser_spec.js
11405 silly gunzTarPerm modified mode [ 'spec/faye/websocket/draft75parser_spec.js', 438, 420 ]
11406 silly gunzTarPerm extractEntry spec/faye/websocket/draft76parser_spec.js
11407 silly gunzTarPerm modified mode [ 'spec/faye/websocket/draft76parser_spec.js', 438, 420 ]
11408 silly lockFile 26564256-rimraf-2-2-5 rimraf@2.2.5
11409 silly lockFile 26564256-rimraf-2-2-5 rimraf@2.2.5
11410 silly lockFile 69dbd68f-rimraf-2-2-0 rimraf@~2.2.0
11411 silly lockFile 69dbd68f-rimraf-2-2-0 rimraf@~2.2.0
11412 silly gunzTarPerm extractEntry test/mkdirp.js
11413 silly gunzTarPerm extractEntry .travis.yml
11414 silly addNameRange number 2 { name: 'jsonfile', range: '>=1.1.0-0 <1.2.0-0', hasData: true }
11415 silly addNameRange versions [ 'jsonfile', [ '0.0.1', '1.0.0', '1.0.1', '1.1.0', '1.1.1' ] ]
11416 verbose addNamed [ 'jsonfile', '1.1.1' ]
11417 verbose addNamed [ '1.1.1', '1.1.1' ]
11418 silly lockFile 34a085d2-jsonfile-1-1-1 jsonfile@1.1.1
11419 verbose lock jsonfile@1.1.1 C:\Users\Gaston\AppData\Roaming\npm-cache\34a085d2-jsonfile-1-1-1.lock
11420 silly gunzTarPerm extractEntry spec/faye/websocket/hybi_parser_spec.js
11421 silly gunzTarPerm modified mode [ 'spec/faye/websocket/hybi_parser_spec.js', 438, 420 ]
11422 silly gunzTarPerm extractEntry spec/server.crt
11423 silly gunzTarPerm modified mode [ 'spec/server.crt', 438, 420 ]
11424 silly lockFile 5a3b0338--org-jsonfile-jsonfile-1-1-1-tgz https://registry.npmjs.org/jsonfile/-/jsonfile-1.1.1.tgz
11425 verbose lock https://registry.npmjs.org/jsonfile/-/jsonfile-1.1.1.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\5a3b0338--org-jsonfile-jsonfile-1-1-1-tgz.lock
11426 verbose addRemoteTarball [ 'https://registry.npmjs.org/jsonfile/-/jsonfile-1.1.1.tgz',
11426 verbose addRemoteTarball   'da4fd6ad77f1a255203ea63c7bc32dc31ef64433' ]
11427 info retry fetch attempt 1 at 16:40:24
11428 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778024110-0.30490630795247853\tmp.tgz
11429 http GET https://registry.npmjs.org/jsonfile/-/jsonfile-1.1.1.tgz
11430 silly gunzTarPerm extractEntry spec/server.key
11431 silly gunzTarPerm modified mode [ 'spec/server.key', 438, 420 ]
11432 http 304 https://registry.npmjs.org/glob
11433 silly registry.get cb [ 304,
11433 silly registry.get   { date: 'Fri, 03 Jan 2014 19:39:25 GMT',
11433 silly registry.get     server: 'Apache',
11433 silly registry.get     connection: 'Keep-Alive',
11433 silly registry.get     'keep-alive': 'timeout=10, max=46',
11433 silly registry.get     etag: '"3PHU6ZLK0XRBOWDW0GE8Z2RX4"',
11433 silly registry.get     vary: 'Accept' } ]
11434 verbose etag glob from cache
11435 silly lockFile 4e938f8e-2862-0-09757205005735159-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778022862-0.09757205005735159\package
11436 silly lockFile 4e938f8e-2862-0-09757205005735159-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778022862-0.09757205005735159\package
11437 silly lockFile 9fdbee96-2862-0-09757205005735159-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778022862-0.09757205005735159\tmp.tgz
11438 silly lockFile 9fdbee96-2862-0-09757205005735159-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778022862-0.09757205005735159\tmp.tgz
11439 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\mkdirp\\0.3.5\\package.tgz',
11439 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388778022862-0.09757205005735159\\package' ]
11440 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\mkdirp\0.3.5\package.tgz
11441 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778022862-0.09757205005735159\package
11442 silly lockFile 4e938f8e-2862-0-09757205005735159-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778022862-0.09757205005735159\package
11443 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778022862-0.09757205005735159\package C:\Users\Gaston\AppData\Roaming\npm-cache\4e938f8e-2862-0-09757205005735159-package.lock
11444 silly lockFile 06224dfa-m-cache-mkdirp-0-3-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\mkdirp\0.3.5\package.tgz
11445 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\mkdirp\0.3.5\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\06224dfa-m-cache-mkdirp-0-3-5-package-tgz.lock
11446 silly lockFile 4e938f8e-2862-0-09757205005735159-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778022862-0.09757205005735159\package
11447 silly lockFile 4e938f8e-2862-0-09757205005735159-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778022862-0.09757205005735159\package
11448 silly lockFile 06224dfa-m-cache-mkdirp-0-3-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\mkdirp\0.3.5\package.tgz
11449 silly lockFile 06224dfa-m-cache-mkdirp-0-3-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\mkdirp\0.3.5\package.tgz
11450 silly lockFile 612c329c-g-npm-cache-mkdirp-0-3-5-package C:\Users\Gaston\AppData\Roaming\npm-cache\mkdirp\0.3.5\package
11451 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\mkdirp\0.3.5\package C:\Users\Gaston\AppData\Roaming\npm-cache\612c329c-g-npm-cache-mkdirp-0-3-5-package.lock
11452 silly lockFile 612c329c-g-npm-cache-mkdirp-0-3-5-package C:\Users\Gaston\AppData\Roaming\npm-cache\mkdirp\0.3.5\package
11453 silly lockFile 612c329c-g-npm-cache-mkdirp-0-3-5-package C:\Users\Gaston\AppData\Roaming\npm-cache\mkdirp\0.3.5\package
11454 silly lockFile 1cff9e5f-che-faye-websocket-0-4-4-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\faye-websocket\0.4.4\package
11455 silly lockFile 1cff9e5f-che-faye-websocket-0-4-4-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\faye-websocket\0.4.4\package
11456 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\mkdirp\0.3.5\package.tgz
11457 silly lockFile 1fbf97e1-g-npm-cache-mkdirp-0-3-5-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\mkdirp\0.3.5\package
11458 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\mkdirp\0.3.5\package C:\Users\Gaston\AppData\Roaming\npm-cache\1fbf97e1-g-npm-cache-mkdirp-0-3-5-package.lock
11459 silly lockFile 06224dfa-m-cache-mkdirp-0-3-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\mkdirp\0.3.5\package.tgz
11460 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\mkdirp\0.3.5\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\06224dfa-m-cache-mkdirp-0-3-5-package-tgz.lock
11461 silly lockFile cf2155b7-faye-websocket-0-4-4-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\faye-websocket\0.4.4\package.tgz
11462 silly lockFile cf2155b7-faye-websocket-0-4-4-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\faye-websocket\0.4.4\package.tgz
11463 silly gunzTarPerm modes [ '755', '644' ]
11464 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\faye-websocket\0.4.4\package.tgz 644
11465 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\faye-websocket\0.4.4\package.tgz
11466 silly lockFile 336a028c-bsocket-faye-websocket-0-4-4-tgz https://registry.npmjs.org/faye-websocket/-/faye-websocket-0.4.4.tgz
11467 silly lockFile 336a028c-bsocket-faye-websocket-0-4-4-tgz https://registry.npmjs.org/faye-websocket/-/faye-websocket-0.4.4.tgz
11468 silly lockFile f9b80149-faye-websocket-0-4-4 faye-websocket@0.4.4
11469 silly lockFile f9b80149-faye-websocket-0-4-4 faye-websocket@0.4.4
11470 silly lockFile 20d63c72-faye-websocket-0-4-3 faye-websocket@~0.4.3
11471 silly lockFile 20d63c72-faye-websocket-0-4-3 faye-websocket@~0.4.3
11472 silly gunzTarPerm extractEntry package.json
11473 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
11474 silly gunzTarPerm extractEntry .npmignore
11475 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
11476 silly gunzTarPerm extractEntry LICENSE
11477 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
11478 silly gunzTarPerm extractEntry index.js
11479 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
11480 silly gunzTarPerm extractEntry .travis.yml
11481 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]
11482 silly gunzTarPerm extractEntry examples/pow.js
11483 silly gunzTarPerm modified mode [ 'examples/pow.js', 438, 420 ]
11484 silly gunzTarPerm extractEntry readme.markdown
11485 silly gunzTarPerm modified mode [ 'readme.markdown', 438, 420 ]
11486 silly gunzTarPerm extractEntry test/chmod.js
11487 silly gunzTarPerm modified mode [ 'test/chmod.js', 438, 420 ]
11488 silly gunzTarPerm extractEntry test/perm.js
11489 silly gunzTarPerm modified mode [ 'test/perm.js', 438, 420 ]
11490 silly addNameRange number 2 { name: 'glob', range: '>=3.1.21-0 <3.2.0-0', hasData: true }
11491 silly addNameRange versions [ 'glob',
11491 silly addNameRange   [ '1.1.0',
11491 silly addNameRange     '2.0.9',
11491 silly addNameRange     '2.0.8',
11491 silly addNameRange     '2.0.7',
11491 silly addNameRange     '2.1.0',
11491 silly addNameRange     '3.0.0',
11491 silly addNameRange     '3.0.1',
11491 silly addNameRange     '3.1.0',
11491 silly addNameRange     '3.1.1',
11491 silly addNameRange     '3.1.2',
11491 silly addNameRange     '3.1.3',
11491 silly addNameRange     '3.1.4',
11491 silly addNameRange     '3.1.5',
11491 silly addNameRange     '3.1.6',
11491 silly addNameRange     '3.1.7',
11491 silly addNameRange     '3.1.9',
11491 silly addNameRange     '3.1.10',
11491 silly addNameRange     '3.1.11',
11491 silly addNameRange     '3.1.12',
11491 silly addNameRange     '3.1.13',
11491 silly addNameRange     '3.1.14',
11491 silly addNameRange     '3.1.15',
11491 silly addNameRange     '3.1.16',
11491 silly addNameRange     '3.1.17',
11491 silly addNameRange     '3.1.18',
11491 silly addNameRange     '3.1.19',
11491 silly addNameRange     '3.1.20',
11491 silly addNameRange     '3.1.21',
11491 silly addNameRange     '3.2.0',
11491 silly addNameRange     '3.2.1',
11491 silly addNameRange     '3.2.3',
11491 silly addNameRange     '3.2.4',
11491 silly addNameRange     '3.2.5',
11491 silly addNameRange     '3.2.6',
11491 silly addNameRange     '3.2.7' ] ]
11492 verbose addNamed [ 'glob', '3.1.21' ]
11493 verbose addNamed [ '3.1.21', '3.1.21' ]
11494 silly lockFile ab465912-glob-3-1-21 glob@3.1.21
11495 verbose lock glob@3.1.21 C:\Users\Gaston\AppData\Roaming\npm-cache\ab465912-glob-3-1-21.lock
11496 silly gunzTarPerm extractEntry test/perm_sync.js
11497 silly gunzTarPerm modified mode [ 'test/perm_sync.js', 438, 420 ]
11498 silly gunzTarPerm extractEntry test/race.js
11499 silly gunzTarPerm modified mode [ 'test/race.js', 438, 420 ]
11500 silly gunzTarPerm extractEntry test/mkdirp.js
11501 silly gunzTarPerm modified mode [ 'test/mkdirp.js', 438, 420 ]
11502 silly gunzTarPerm extractEntry test/return.js
11503 silly gunzTarPerm modified mode [ 'test/return.js', 438, 420 ]
11504 silly gunzTarPerm extractEntry test/return_sync.js
11505 silly gunzTarPerm modified mode [ 'test/return_sync.js', 438, 420 ]
11506 silly gunzTarPerm extractEntry test/root.js
11507 silly gunzTarPerm modified mode [ 'test/root.js', 438, 420 ]
11508 silly gunzTarPerm extractEntry test/sync.js
11509 silly gunzTarPerm modified mode [ 'test/sync.js', 438, 420 ]
11510 silly gunzTarPerm extractEntry test/umask.js
11511 silly gunzTarPerm modified mode [ 'test/umask.js', 438, 420 ]
11512 silly gunzTarPerm extractEntry test/clobber.js
11513 silly gunzTarPerm modified mode [ 'test/clobber.js', 438, 420 ]
11514 silly gunzTarPerm extractEntry test/umask_sync.js
11515 silly gunzTarPerm modified mode [ 'test/umask_sync.js', 438, 420 ]
11516 silly gunzTarPerm extractEntry test/rel.js
11517 silly gunzTarPerm modified mode [ 'test/rel.js', 438, 420 ]
11518 silly lockFile ab465912-glob-3-1-21 glob@3.1.21
11519 silly lockFile ab465912-glob-3-1-21 glob@3.1.21
11520 silly lockFile b5074ddc-glob-3-1-21 glob@~3.1.21
11521 silly lockFile b5074ddc-glob-3-1-21 glob@~3.1.21
11522 silly lockFile 1fbf97e1-g-npm-cache-mkdirp-0-3-5-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\mkdirp\0.3.5\package
11523 silly lockFile 1fbf97e1-g-npm-cache-mkdirp-0-3-5-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\mkdirp\0.3.5\package
11524 silly lockFile 06224dfa-m-cache-mkdirp-0-3-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\mkdirp\0.3.5\package.tgz
11525 silly lockFile 06224dfa-m-cache-mkdirp-0-3-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\mkdirp\0.3.5\package.tgz
11526 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\mkdirp\0.3.5\package.tgz 644
11527 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\mkdirp\0.3.5\package.tgz
11528 silly lockFile 7b2ebe55-pmjs-org-mkdirp-mkdirp-0-3-5-tgz https://registry.npmjs.org/mkdirp/-/mkdirp-0.3.5.tgz
11529 silly lockFile 7b2ebe55-pmjs-org-mkdirp-mkdirp-0-3-5-tgz https://registry.npmjs.org/mkdirp/-/mkdirp-0.3.5.tgz
11530 silly lockFile 67d2df2a-mkdirp-0-3-5 mkdirp@0.3.5
11531 silly lockFile 67d2df2a-mkdirp-0-3-5 mkdirp@0.3.5
11532 silly lockFile 6d3723ce-mkdirp-0-3-x mkdirp@0.3.x
11533 silly lockFile 6d3723ce-mkdirp-0-3-x mkdirp@0.3.x
11534 http 304 https://registry.npmjs.org/lodash
11535 silly registry.get cb [ 304,
11535 silly registry.get   { date: 'Fri, 03 Jan 2014 19:39:25 GMT',
11535 silly registry.get     server: 'Apache',
11535 silly registry.get     connection: 'Keep-Alive',
11535 silly registry.get     'keep-alive': 'timeout=10, max=45',
11535 silly registry.get     etag: '"48RYE9MT28KTYXAU02IDQRC7Q"',
11535 silly registry.get     vary: 'Accept' } ]
11536 verbose etag lodash from cache
11537 http 200 https://registry.npmjs.org/ncp/-/ncp-0.4.2.tgz
11538 http 304 https://registry.npmjs.org/minimatch
11539 silly registry.get cb [ 304,
11539 silly registry.get   { date: 'Fri, 03 Jan 2014 19:39:26 GMT',
11539 silly registry.get     server: 'Apache',
11539 silly registry.get     connection: 'Keep-Alive',
11539 silly registry.get     'keep-alive': 'timeout=10, max=44',
11539 silly registry.get     etag: '"ENY6937TKFXIJARH44KNW9ZPF"',
11539 silly registry.get     vary: 'Accept' } ]
11540 verbose etag minimatch from cache
11541 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778023751-0.8012961626518518\tmp.tgz
11542 silly lockFile dab11e68-23751-0-8012961626518518-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778023751-0.8012961626518518\package
11543 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778023751-0.8012961626518518\package C:\Users\Gaston\AppData\Roaming\npm-cache\dab11e68-23751-0-8012961626518518-package.lock
11544 silly lockFile 28fdaaee-23751-0-8012961626518518-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778023751-0.8012961626518518\tmp.tgz
11545 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778023751-0.8012961626518518\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\28fdaaee-23751-0-8012961626518518-tmp-tgz.lock
11546 silly gunzTarPerm modes [ '755', '644' ]
11547 silly addNameRange number 2 { name: 'minimatch',
11547 silly addNameRange   range: '>=0.2.11-0 <0.3.0-0',
11547 silly addNameRange   hasData: true }
11548 silly addNameRange versions [ 'minimatch',
11548 silly addNameRange   [ '0.0.1',
11548 silly addNameRange     '0.0.2',
11548 silly addNameRange     '0.0.4',
11548 silly addNameRange     '0.0.5',
11548 silly addNameRange     '0.1.1',
11548 silly addNameRange     '0.1.2',
11548 silly addNameRange     '0.1.3',
11548 silly addNameRange     '0.1.4',
11548 silly addNameRange     '0.1.5',
11548 silly addNameRange     '0.2.0',
11548 silly addNameRange     '0.2.2',
11548 silly addNameRange     '0.2.3',
11548 silly addNameRange     '0.2.4',
11548 silly addNameRange     '0.2.5',
11548 silly addNameRange     '0.2.6',
11548 silly addNameRange     '0.2.7',
11548 silly addNameRange     '0.2.8',
11548 silly addNameRange     '0.2.9',
11548 silly addNameRange     '0.2.10',
11548 silly addNameRange     '0.2.11',
11548 silly addNameRange     '0.2.12',
11548 silly addNameRange     '0.2.13',
11548 silly addNameRange     '0.2.14' ] ]
11549 verbose addNamed [ 'minimatch', '0.2.14' ]
11550 verbose addNamed [ '0.2.14', '0.2.14' ]
11551 silly lockFile a72880d0-minimatch-0-2-14 minimatch@0.2.14
11552 verbose lock minimatch@0.2.14 C:\Users\Gaston\AppData\Roaming\npm-cache\a72880d0-minimatch-0-2-14.lock
11553 silly gunzTarPerm extractEntry package.json
11554 silly lockFile a72880d0-minimatch-0-2-14 minimatch@0.2.14
11555 silly lockFile a72880d0-minimatch-0-2-14 minimatch@0.2.14
11556 silly lockFile 94473efb-minimatch-0-2-11 minimatch@~0.2.11
11557 silly lockFile 94473efb-minimatch-0-2-11 minimatch@~0.2.11
11558 silly gunzTarPerm extractEntry .npmignore
11559 silly gunzTarPerm extractEntry README.md
11560 silly gunzTarPerm extractEntry .travis.yml
11561 silly gunzTarPerm extractEntry bin/ncp
11562 silly gunzTarPerm extractEntry lib/ncp.js
11563 silly gunzTarPerm extractEntry LICENSE.md
11564 silly gunzTarPerm extractEntry test/ncp-test.js
11565 silly gunzTarPerm extractEntry test/fixtures/src/a
11566 silly gunzTarPerm extractEntry test/fixtures/src/b
11567 silly gunzTarPerm extractEntry test/fixtures/src/c
11568 silly gunzTarPerm extractEntry test/fixtures/src/d
11569 silly gunzTarPerm extractEntry test/fixtures/src/e
11570 silly gunzTarPerm extractEntry test/fixtures/src/f
11571 silly gunzTarPerm extractEntry test/fixtures/src/sub/a
11572 silly gunzTarPerm extractEntry test/fixtures/src/sub/b
11573 silly addNameRange number 2 { name: 'lodash', range: '>=1.0.1-0 <1.1.0-0', hasData: true }
11574 silly addNameRange versions [ 'lodash',
11574 silly addNameRange   [ '0.1.0',
11574 silly addNameRange     '0.2.0',
11574 silly addNameRange     '0.2.1',
11574 silly addNameRange     '0.2.2',
11574 silly addNameRange     '0.3.0',
11574 silly addNameRange     '0.3.1',
11574 silly addNameRange     '0.3.2',
11574 silly addNameRange     '0.4.0',
11574 silly addNameRange     '0.4.1',
11574 silly addNameRange     '0.4.2',
11574 silly addNameRange     '0.5.0-rc.1',
11574 silly addNameRange     '0.5.0',
11574 silly addNameRange     '0.5.1',
11574 silly addNameRange     '0.5.2',
11574 silly addNameRange     '0.6.0',
11574 silly addNameRange     '0.6.1',
11574 silly addNameRange     '0.7.0',
11574 silly addNameRange     '0.8.0',
11574 silly addNameRange     '0.8.1',
11574 silly addNameRange     '0.8.2',
11574 silly addNameRange     '0.9.0',
11574 silly addNameRange     '0.9.1',
11574 silly addNameRange     '0.9.2',
11574 silly addNameRange     '0.10.0',
11574 silly addNameRange     '1.0.0-rc.1',
11574 silly addNameRange     '1.0.0-rc.2',
11574 silly addNameRange     '1.0.0-rc.3',
11574 silly addNameRange     '1.0.0',
11574 silly addNameRange     '1.0.1',
11574 silly addNameRange     '1.1.0',
11574 silly addNameRange     '1.1.1',
11574 silly addNameRange     '1.2.0',
11574 silly addNameRange     '1.2.1',
11574 silly addNameRange     '1.3.0',
11574 silly addNameRange     '1.3.1',
11574 silly addNameRange     '2.0.0',
11574 silly addNameRange     '2.1.0',
11574 silly addNameRange     '2.2.0',
11574 silly addNameRange     '2.2.1',
11574 silly addNameRange     '2.3.0',
11574 silly addNameRange     '2.4.0',
11574 silly addNameRange     '2.4.1' ] ]
11575 verbose addNamed [ 'lodash', '1.0.1' ]
11576 verbose addNamed [ '1.0.1', '1.0.1' ]
11577 silly lockFile e2e1e8db-lodash-1-0-1 lodash@1.0.1
11578 verbose lock lodash@1.0.1 C:\Users\Gaston\AppData\Roaming\npm-cache\e2e1e8db-lodash-1-0-1.lock
11579 silly lockFile e2e1e8db-lodash-1-0-1 lodash@1.0.1
11580 silly lockFile e2e1e8db-lodash-1-0-1 lodash@1.0.1
11581 silly lockFile 7309cd5e-lodash-1-0-1 lodash@~1.0.1
11582 silly lockFile 7309cd5e-lodash-1-0-1 lodash@~1.0.1
11583 silly resolved [ { author:
11583 silly resolved      { name: 'Isaac Z. Schlueter',
11583 silly resolved        email: 'i@izs.me',
11583 silly resolved        url: 'http://blog.izs.me/' },
11583 silly resolved     name: 'glob',
11583 silly resolved     description: 'a little globber',
11583 silly resolved     version: '3.1.21',
11583 silly resolved     repository: { type: 'git', url: 'git://github.com/isaacs/node-glob.git' },
11583 silly resolved     main: 'glob.js',
11583 silly resolved     engines: { node: '*' },
11583 silly resolved     dependencies: { minimatch: '~0.2.11', 'graceful-fs': '~1.2.0', inherits: '1' },
11583 silly resolved     devDependencies: { tap: '~0.4.0', mkdirp: '0', rimraf: '1' },
11583 silly resolved     scripts: { test: 'tap test/*.js' },
11583 silly resolved     license: 'BSD',
11583 silly resolved     readme: '# Glob\n\nThis is a glob implementation in JavaScript.  It uses the `minimatch`\nlibrary to do its matching.\n\n## Attention: node-glob users!\n\nThe API has changed dramatically between 2.x and 3.x. This library is\nnow 100% JavaScript, and the integer flags have been replaced with an\noptions object.\n\nAlso, there\'s an event emitter class, proper tests, and all the other\nthings you\'ve come to expect from node modules.\n\nAnd best of all, no compilation!\n\n## Usage\n\n```javascript\nvar glob = require("glob")\n\n// options is optional\nglob("**/*.js", options, function (er, files) {\n  // files is an array of filenames.\n  // If the `nonull` option is set, and nothing\n  // was found, then files is ["**/*.js"]\n  // er is an error object or null.\n})\n```\n\n## Features\n\nPlease see the [minimatch\ndocumentation](https://github.com/isaacs/minimatch) for more details.\n\nSupports these glob features:\n\n* Brace Expansion\n* Extended glob matching\n* "Globstar" `**` matching\n\nSee:\n\n* `man sh`\n* `man bash`\n* `man 3 fnmatch`\n* `man 5 gitignore`\n* [minimatch documentation](https://github.com/isaacs/minimatch)\n\n## glob(pattern, [options], cb)\n\n* `pattern` {String} Pattern to be matched\n* `options` {Object}\n* `cb` {Function}\n  * `err` {Error | null}\n  * `matches` {Array<String>} filenames found matching the pattern\n\nPerform an asynchronous glob search.\n\n## glob.sync(pattern, [options]\n\n* `pattern` {String} Pattern to be matched\n* `options` {Object}\n* return: {Array<String>} filenames found matching the pattern\n\nPerform a synchronous glob search.\n\n## Class: glob.Glob\n\nCreate a Glob object by instanting the `glob.Glob` class.\n\n```javascript\nvar Glob = require("glob").Glob\nvar mg = new Glob(pattern, options, cb)\n```\n\nIt\'s an EventEmitter, and starts walking the filesystem to find matches\nimmediately.\n\n### new glob.Glob(pattern, [options], [cb])\n\n* `pattern` {String} pattern to search for\n* `options` {Object}\n* `cb` {Function} Called when an error occurs, or matches are found\n  * `err` {Error | null}\n  * `matches` {Array<String>} filenames found matching the pattern\n\nNote that if the `sync` flag is set in the options, then matches will\nbe immediately available on the `g.found` member.\n\n### Properties\n\n* `minimatch` The minimatch object that the glob uses.\n* `options` The options object passed in.\n* `error` The error encountered.  When an error is encountered, the\n  glob object is in an undefined state, and should be discarded.\n* `aborted` Boolean which is set to true when calling `abort()`.  There\n  is no way at this time to continue a glob search after aborting, but\n  you can re-use the statCache to avoid having to duplicate syscalls.\n\n### Events\n\n* `end` When the matching is finished, this is emitted with all the\n  matches found.  If the `nonull` option is set, and no match was found,\n  then the `matches` list contains the original pattern.  The matches\n  are sorted, unless the `nosort` flag is set.\n* `match` Every time a match is found, this is emitted with the matched.\n* `error` Emitted when an unexpected error is encountered, or whenever\n  any fs error occurs if `options.strict` is set.\n* `abort` When `abort()` is called, this event is raised.\n\n### Methods\n\n* `abort` Stop the search.\n\n### Options\n\nAll the options that can be passed to Minimatch can also be passed to\nGlob to change pattern matching behavior.  Also, some have been added,\nor have glob-specific ramifications.\n\nAll options are false by default, unless otherwise noted.\n\nAll options are added to the glob object, as well.\n\n* `cwd` The current working directory in which to search.  Defaults\n  to `process.cwd()`.\n* `root` The place where patterns starting with `/` will be mounted\n  onto.  Defaults to `path.resolve(options.cwd, "/")` (`/` on Unix\n  systems, and `C:\\` or some such on Windows.)\n* `nomount` By default, a pattern starting with a forward-slash will be\n  "mounted" onto the root setting, so that a valid filesystem path is\n  returned.  Set this flag to disable that behavior.\n* `mark` Add a `/` character to directory matches.  Note that this\n  requires additional stat calls.\n* `nosort` Don\'t sort the results.\n* `stat` Set to true to stat *all* results.  This reduces performance\n  somewhat, and is completely unnecessary, unless `readdir` is presumed\n  to be an untrustworthy indicator of file existence.  It will cause\n  ELOOP to be triggered one level sooner in the case of cyclical\n  symbolic links.\n* `silent` When an unusual error is encountered\n  when attempting to read a directory, a warning will be printed to\n  stderr.  Set the `silent` option to true to suppress these warnings.\n* `strict` When an unusual error is encountered\n  when attempting to read a directory, the process will just continue on\n  in search of other matches.  Set the `strict` option to raise an error\n  in these cases.\n* `statCache` A cache of results of filesystem information, to prevent\n  unnecessary stat calls.  While it should not normally be necessary to\n  set this, you may pass the statCache from one glob() call to the\n  options object of another, if you know that the filesystem will not\n  change between calls.  (See "Race Conditions" below.)\n* `sync` Perform a synchronous glob search.\n* `nounique` In some cases, brace-expanded patterns can result in the\n  same file showing up multiple times in the result set.  By default,\n  this implementation prevents duplicates in the result set.\n  Set this flag to disable that behavior.\n* `nonull` Set to never return an empty set, instead returning a set\n  containing the pattern itself.  This is the default in glob(3).\n* `nocase` Perform a case-insensitive match.  Note that case-insensitive\n  filesystems will sometimes result in glob returning results that are\n  case-insensitively matched anyway, since readdir and stat will not\n  raise an error.\n* `debug` Set to enable debug logging in minimatch and glob.\n* `globDebug` Set to enable debug logging in glob, but not minimatch.\n\n## Comparisons to other fnmatch/glob implementations\n\nWhile strict compliance with the existing standards is a worthwhile\ngoal, some discrepancies exist between node-glob and other\nimplementations, and are intentional.\n\nIf the pattern starts with a `!` character, then it is negated.  Set the\n`nonegate` flag to suppress this behavior, and treat leading `!`\ncharacters normally.  This is perhaps relevant if you wish to start the\npattern with a negative extglob pattern like `!(a|B)`.  Multiple `!`\ncharacters at the start of a pattern will negate the pattern multiple\ntimes.\n\nIf a pattern starts with `#`, then it is treated as a comment, and\nwill not match anything.  Use `\\#` to match a literal `#` at the\nstart of a line, or set the `nocomment` flag to suppress this behavior.\n\nThe double-star character `**` is supported by default, unless the\n`noglobstar` flag is set.  This is supported in the manner of bsdglob\nand bash 4.1, where `**` only has special significance if it is the only\nthing in a path part.  That is, `a/**/b` will match `a/x/y/b`, but\n`a/**b` will not.  **Note that this is different from the way that `**` is\nhandled by ruby\'s `Dir` class.**\n\nIf an escaped pattern has no matches, and the `nonull` flag is set,\nthen glob returns the pattern as-provided, rather than\ninterpreting the character escapes.  For example,\n`glob.match([], "\\\\*a\\\\?")` will return `"\\\\*a\\\\?"` rather than\n`"*a?"`.  This is akin to setting the `nullglob` option in bash, except\nthat it does not resolve escaped pattern characters.\n\nIf brace expansion is not disabled, then it is performed before any\nother interpretation of the glob pattern.  Thus, a pattern like\n`+(a|{b),c)}`, which would not be valid in bash or zsh, is expanded\n**first** into the set of `+(a|b)` and `+(a|c)`, and those patterns are\nchecked for validity.  Since those two are valid, matching proceeds.\n\n## Windows\n\n**Please only use forward-slashes in glob expressions.**\n\nThough windows uses either `/` or `\\` as its path separator, only `/`\ncharacters are used by this glob implementation.  You must use\nforward-slashes **only** in glob expressions.  Back-slashes will always\nbe interpreted as escape characters, not path separators.\n\nResults from absolute patterns such as `/foo/*` are mounted onto the\nroot setting using `path.join`.  On windows, this will by default result\nin `/foo/*` matching `C:\\foo\\bar.txt`.\n\n## Race Conditions\n\nGlob searching, by its very nature, is susceptible to race conditions,\nsince it relies on directory walking and such.\n\nAs a result, it is possible that a file that exists when glob looks for\nit may have been deleted or modified by the time it returns the result.\n\nAs part of its internal implementation, this program caches all stat\nand readdir calls that it makes, in order to cut down on system\noverhead.  However, this also makes it even more susceptible to races,\nespecially if the statCache object is reused between glob calls.\n\nUsers are thus advised not to use a glob result as a\nguarantee of filesystem state in the face of rapid changes.\nFor the vast majority of operations, this is never a problem.\n',
11583 silly resolved     readmeFilename: 'README.md',
11583 silly resolved     bugs: { url: 'https://github.com/isaacs/node-glob/issues' },
11583 silly resolved     homepage: 'https://github.com/isaacs/node-glob',
11583 silly resolved     _id: 'glob@3.1.21',
11583 silly resolved     _from: 'glob@~3.1.21' },
11583 silly resolved   { author:
11583 silly resolved      { name: 'Isaac Z. Schlueter',
11583 silly resolved        email: 'i@izs.me',
11583 silly resolved        url: 'http://blog.izs.me' },
11583 silly resolved     name: 'minimatch',
11583 silly resolved     description: 'a glob matcher in javascript',
11583 silly resolved     version: '0.2.14',
11583 silly resolved     repository: { type: 'git', url: 'git://github.com/isaacs/minimatch.git' },
11583 silly resolved     main: 'minimatch.js',
11583 silly resolved     scripts: { test: 'tap test/*.js' },
11583 silly resolved     engines: { node: '*' },
11583 silly resolved     dependencies: { 'lru-cache': '2', sigmund: '~1.0.0' },
11583 silly resolved     devDependencies: { tap: '' },
11583 silly resolved     license:
11583 silly resolved      { type: 'MIT',
11583 silly resolved        url: 'http://github.com/isaacs/minimatch/raw/master/LICENSE' },
11583 silly resolved     readme: '# minimatch\n\nA minimal matching utility.\n\n[![Build Status](https://secure.travis-ci.org/isaacs/minimatch.png)](http://travis-ci.org/isaacs/minimatch)\n\n\nThis is the matching library used internally by npm.\n\nEventually, it will replace the C binding in node-glob.\n\nIt works by converting glob expressions into JavaScript `RegExp`\nobjects.\n\n## Usage\n\n```javascript\nvar minimatch = require("minimatch")\n\nminimatch("bar.foo", "*.foo") // true!\nminimatch("bar.foo", "*.bar") // false!\nminimatch("bar.foo", "*.+(bar|foo)", { debug: true }) // true, and noisy!\n```\n\n## Features\n\nSupports these glob features:\n\n* Brace Expansion\n* Extended glob matching\n* "Globstar" `**` matching\n\nSee:\n\n* `man sh`\n* `man bash`\n* `man 3 fnmatch`\n* `man 5 gitignore`\n\n## Minimatch Class\n\nCreate a minimatch object by instanting the `minimatch.Minimatch` class.\n\n```javascript\nvar Minimatch = require("minimatch").Minimatch\nvar mm = new Minimatch(pattern, options)\n```\n\n### Properties\n\n* `pattern` The original pattern the minimatch object represents.\n* `options` The options supplied to the constructor.\n* `set` A 2-dimensional array of regexp or string expressions.\n  Each row in the\n  array corresponds to a brace-expanded pattern.  Each item in the row\n  corresponds to a single path-part.  For example, the pattern\n  `{a,b/c}/d` would expand to a set of patterns like:\n\n        [ [ a, d ]\n        , [ b, c, d ] ]\n\n    If a portion of the pattern doesn\'t have any "magic" in it\n    (that is, it\'s something like `"foo"` rather than `fo*o?`), then it\n    will be left as a string rather than converted to a regular\n    expression.\n\n* `regexp` Created by the `makeRe` method.  A single regular expression\n  expressing the entire pattern.  This is useful in cases where you wish\n  to use the pattern somewhat like `fnmatch(3)` with `FNM_PATH` enabled.\n* `negate` True if the pattern is negated.\n* `comment` True if the pattern is a comment.\n* `empty` True if the pattern is `""`.\n\n### Methods\n\n* `makeRe` Generate the `regexp` member if necessary, and return it.\n  Will return `false` if the pattern is invalid.\n* `match(fname)` Return true if the filename matches the pattern, or\n  false otherwise.\n* `matchOne(fileArray, patternArray, partial)` Take a `/`-split\n  filename, and match it against a single row in the `regExpSet`.  This\n  method is mainly for internal use, but is exposed so that it can be\n  used by a glob-walker that needs to avoid excessive filesystem calls.\n\nAll other methods are internal, and will be called as necessary.\n\n## Functions\n\nThe top-level exported function has a `cache` property, which is an LRU\ncache set to store 100 items.  So, calling these methods repeatedly\nwith the same pattern and options will use the same Minimatch object,\nsaving the cost of parsing it multiple times.\n\n### minimatch(path, pattern, options)\n\nMain export.  Tests a path against the pattern using the options.\n\n```javascript\nvar isJS = minimatch(file, "*.js", { matchBase: true })\n```\n\n### minimatch.filter(pattern, options)\n\nReturns a function that tests its\nsupplied argument, suitable for use with `Array.filter`.  Example:\n\n```javascript\nvar javascripts = fileList.filter(minimatch.filter("*.js", {matchBase: true}))\n```\n\n### minimatch.match(list, pattern, options)\n\nMatch against the list of\nfiles, in the style of fnmatch or glob.  If nothing is matched, and\noptions.nonull is set, then return a list containing the pattern itself.\n\n```javascript\nvar javascripts = minimatch.match(fileList, "*.js", {matchBase: true}))\n```\n\n### minimatch.makeRe(pattern, options)\n\nMake a regular expression object from the pattern.\n\n## Options\n\nAll options are `false` by default.\n\n### debug\n\nDump a ton of stuff to stderr.\n\n### nobrace\n\nDo not expand `{a,b}` and `{1..3}` brace sets.\n\n### noglobstar\n\nDisable `**` matching against multiple folder names.\n\n### dot\n\nAllow patterns to match filenames starting with a period, even if\nthe pattern does not explicitly have a period in that spot.\n\nNote that by default, `a/**/b` will **not** match `a/.d/b`, unless `dot`\nis set.\n\n### noext\n\nDisable "extglob" style patterns like `+(a|b)`.\n\n### nocase\n\nPerform a case-insensitive match.\n\n### nonull\n\nWhen a match is not found by `minimatch.match`, return a list containing\nthe pattern itself.  When set, an empty list is returned if there are\nno matches.\n\n### matchBase\n\nIf set, then patterns without slashes will be matched\nagainst the basename of the path if it contains slashes.  For example,\n`a?b` would match the path `/xyz/123/acb`, but not `/xyz/acb/123`.\n\n### nocomment\n\nSuppress the behavior of treating `#` at the start of a pattern as a\ncomment.\n\n### nonegate\n\nSuppress the behavior of treating a leading `!` character as negation.\n\n### flipNegate\n\nReturns from negate expressions the same as if they were not negated.\n(Ie, true on a hit, false on a miss.)\n\n\n## Comparisons to other fnmatch/glob implementations\n\nWhile strict compliance with the existing standards is a worthwhile\ngoal, some discrepancies exist between minimatch and other\nimplementations, and are intentional.\n\nIf the pattern starts with a `!` character, then it is negated.  Set the\n`nonegate` flag to suppress this behavior, and treat leading `!`\ncharacters normally.  This is perhaps relevant if you wish to start the\npattern with a negative extglob pattern like `!(a|B)`.  Multiple `!`\ncharacters at the start of a pattern will negate the pattern multiple\ntimes.\n\nIf a pattern starts with `#`, then it is treated as a comment, and\nwill not match anything.  Use `\\#` to match a literal `#` at the\nstart of a line, or set the `nocomment` flag to suppress this behavior.\n\nThe double-star character `**` is supported by default, unless the\n`noglobstar` flag is set.  This is supported in the manner of bsdglob\nand bash 4.1, where `**` only has special significance if it is the only\nthing in a path part.  That is, `a/**/b` will match `a/x/y/b`, but\n`a/**b` will not.\n\nIf an escaped pattern has no matches, and the `nonull` flag is set,\nthen minimatch.match returns the pattern as-provided, rather than\ninterpreting the character escapes.  For example,\n`minimatch.match([], "\\\\*a\\\\?")` will return `"\\\\*a\\\\?"` rather than\n`"*a?"`.  This is akin to setting the `nullglob` option in bash, except\nthat it does not resolve escaped pattern characters.\n\nIf brace expansion is not disabled, then it is performed before any\nother interpretation of the glob pattern.  Thus, a pattern like\n`+(a|{b),c)}`, which would not be valid in bash or zsh, is expanded\n**first** into the set of `+(a|b)` and `+(a|c)`, and those patterns are\nchecked for validity.  Since those two are valid, matching proceeds.\n',
11583 silly resolved     readmeFilename: 'README.md',
11583 silly resolved     bugs: { url: 'https://github.com/isaacs/minimatch/issues' },
11583 silly resolved     homepage: 'https://github.com/isaacs/minimatch',
11583 silly resolved     _id: 'minimatch@0.2.14',
11583 silly resolved     _from: 'minimatch@~0.2.11' },
11583 silly resolved   { name: 'lodash',
11583 silly resolved     version: '1.0.1',
11583 silly resolved     description: 'A utility library delivering consistency, customization, performance, and extras.',
11583 silly resolved     homepage: 'http://lodash.com/',
11583 silly resolved     license: 'MIT',
11583 silly resolved     main: './dist/lodash.js',
11583 silly resolved     keywords:
11583 silly resolved      [ 'browser',
11583 silly resolved        'client',
11583 silly resolved        'functional',
11583 silly resolved        'performance',
11583 silly resolved        'server',
11583 silly resolved        'speed',
11583 silly resolved        'util' ],
11583 silly resolved     author:
11583 silly resolved      { name: 'John-David Dalton',
11583 silly resolved        email: 'john.david.dalton@gmail.com',
11583 silly resolved        url: 'http://allyoucanleet.com/' },
11583 silly resolved     contributors: [ [Object], [Object], [Object], [Object] ],
11583 silly resolved     bugs: { url: 'https://github.com/lodash/lodash/issues' },
11583 silly resolved     repository: { type: 'git', url: 'https://github.com/lodash/lodash.git' },
11583 silly resolved     engines: [ 'node', 'rhino' ],
11583 silly resolved     jam: { main: './dist/lodash.compat.js' },
11583 silly resolved     readme: '# Lo-Dash v1.0.1\n\nA utility library delivering consistency, [customization](http://lodash.com/custom-builds), [performance](http://lodash.com/benchmarks), & [extras](http://lodash.com/#features).\n\n## Download\n\n* Lo-Dash builds (for modern environments):<br>\n[Development](https://raw.github.com/lodash/lodash/v1.0.1/dist/lodash.js) and\n[Production](https://raw.github.com/lodash/lodash/v1.0.1/dist/lodash.min.js)\n\n* Lo-Dash compatibility builds (for legacy and modern environments):<br>\n[Development](https://raw.github.com/lodash/lodash/v1.0.1/dist/lodash.compat.js) and\n[Production](https://raw.github.com/lodash/lodash/v1.0.1/dist/lodash.compat.min.js)\n\n* Underscore compatibility builds:<br>\n[Development](https://raw.github.com/lodash/lodash/v1.0.1/dist/lodash.underscore.js) and\n[Production](https://raw.github.com/lodash/lodash/v1.0.1/dist/lodash.underscore.min.js)\n\n* CDN copies of ≤ v1.0.1’s builds are available on [cdnjs](http://cdnjs.com/) thanks to [CloudFlare](http://www.cloudflare.com/):<br>\n[Lo-Dash dev](http://cdnjs.cloudflare.com/ajax/libs/lodash.js/1.0.1/lodash.js),\n[Lo-Dash prod](http://cdnjs.cloudflare.com/ajax/libs/lodash.js/1.0.1/lodash.min.js),<br>\n[Lo-Dash compat-dev](http://cdnjs.cloudflare.com/ajax/libs/lodash.js/1.0.1/lodash.compat.js),\n[Lo-Dash compat-prod](http://cdnjs.cloudflare.com/ajax/libs/lodash.js/1.0.1/lodash.compat.min.js),<br>\n[Underscore compat-dev](http://cdnjs.cloudflare.com/ajax/libs/lodash.js/1.0.1/lodash.underscore.js), and\n[Underscore compat-prod](http://cdnjs.cloudflare.com/ajax/libs/lodash.js/1.0.1/lodash.underscore.min.js)\n\n* For optimal file size, [create a custom build](http://lodash.com/custom-builds) with only the features you need\n\n## Dive in\n\nWe’ve got [API docs](http://lodash.com/docs), [benchmarks](http://lodash.com/benchmarks), and [unit tests](http://lodash.com/tests).\n\nFor a list of upcoming features, check out our [roadmap](https://github.com/lodash/lodash/wiki/Roadmap).\n\n## Resources\n\nFor more information check out these articles, screencasts, and other videos over Lo-Dash:\n\n * Posts\n  - [Say “Hello” to Lo-Dash](http://kitcambridge.be/blog/say-hello-to-lo-dash/)\n\n * Videos\n  - [Introducing Lo-Dash](https://vimeo.com/44154599)\n  - [Lo-Dash optimizations and custom builds](https://vimeo.com/44154601)\n  - [Lo-Dash’s origin and why it’s a better utility belt](https://vimeo.com/44154600)\n  - [Unit testing in Lo-Dash](https://vimeo.com/45865290)\n  - [Lo-Dash’s approach to native method use](https://vimeo.com/48576012)\n  - [CascadiaJS: Lo-Dash for a better utility belt](http://www.youtube.com/watch?v=dpPy4f_SeEk)\n\n## Features\n\n * AMD loader support ([RequireJS](http://requirejs.org/), [curl.js](https://github.com/cujojs/curl), etc.)\n * [_(…)](http://lodash.com/docs#_) supports intuitive chaining\n * [_.at](http://lodash.com/docs#at) for cherry-picking collection values\n * [_.bindKey](http://lodash.com/docs#bindKey) for binding [*“lazy”* defined](http://michaux.ca/articles/lazy-function-definition-pattern) methods\n * [_.cloneDeep](http://lodash.com/docs#cloneDeep) for deep cloning arrays and objects\n * [_.contains](http://lodash.com/docs#contains) accepts a `fromIndex` argument\n * [_.forEach](http://lodash.com/docs#forEach) is chainable and supports exiting iteration early\n * [_.forIn](http://lodash.com/docs#forIn) for iterating over an object’s own and inherited properties\n * [_.forOwn](http://lodash.com/docs#forOwn) for iterating over an object’s own properties\n * [_.isPlainObject](http://lodash.com/docs#isPlainObject) checks if values are created by the `Object` constructor\n * [_.merge](http://lodash.com/docs#merge) for a deep [_.extend](http://lodash.com/docs#extend)\n * [_.partial](http://lodash.com/docs#partial) and [_.partialRight](http://lodash.com/docs#partialRight) for partial application without `this` binding\n * [_.template](http://lodash.com/docs#template) supports [*“imports”* options](http://lodash.com/docs#templateSettings_imports), [ES6 template delimiters](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-7.8.6), and [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\n * [_.where](http://lodash.com/docs#where) supports deep object comparisons\n * [_.clone](http://lodash.com/docs#clone), [_.omit](http://lodash.com/docs#omit), [_.pick](http://lodash.com/docs#pick),\n   [and more…](http://lodash.com/docs "_.assign, _.cloneDeep, _.first, _.initial, _.isEqual, _.last, _.merge, _.rest") accept `callback` and `thisArg` arguments\n * [_.contains](http://lodash.com/docs#contains), [_.size](http://lodash.com/docs#size), [_.toArray](http://lodash.com/docs#toArray),\n   [and more…](http://lodash.com/docs "_.at, _.countBy, _.every, _.filter, _.find, _.forEach, _.groupBy, _.invoke, _.map, _.max, _.min, _.pluck, _.reduce, _.reduceRight, _.reject, _.shuffle, _.some, _.sortBy, _.where") accept strings\n * [_.filter](http://lodash.com/docs#filter), [_.find](http://lodash.com/docs#find), [_.map](http://lodash.com/docs#map),\n   [and more…](http://lodash.com/docs "_.countBy, _.every, _.first, _.groupBy, _.initial, _.last, _.max, _.min, _.reject, _.rest, _.some, _.sortBy, _.sortedIndex, _.uniq") support *“_.pluck”* and *“_.where”* `callback` shorthands\n\n## Support\n\nLo-Dash has been tested in at least Chrome 5~24, Firefox 1~18, IE 6-10, Opera 9.25-12, Safari 3-6, Node.js 0.4.8-0.8.20, Narwhal 0.3.2, PhantomJS 1.8.1, RingoJS 0.9, and Rhino 1.7RC5.\n\n## Installation and usage\n\nIn browsers:\n\n```html\n<script src="lodash.js"></script>\n```\n\nUsing [`npm`](http://npmjs.org/):\n\n```bash\nnpm install lodash\n\nnpm install -g lodash\nnpm link lodash\n```\n\nTo avoid potential issues, update `npm` before installing Lo-Dash:\n\n```bash\nnpm install npm -g\n```\n\nIn [Node.js](http://nodejs.org/) and [RingoJS v0.8.0+](http://ringojs.org/):\n\n```js\nvar _ = require(\'lodash\');\n\n// or as a drop-in replacement for Underscore\nvar _ = require(\'lodash/lodash.underscore\');\n```\n\n**Note:** If Lo-Dash is installed globally, run [`npm link lodash`](http://blog.nodejs.org/2011/03/23/npm-1-0-global-vs-local-installation/) in your project’s root directory before requiring it.\n\nIn [RingoJS v0.7.0-](http://ringojs.org/):\n\n```js\nvar _ = require(\'lodash\')._;\n```\n\nIn [Rhino](http://www.mozilla.org/rhino/):\n\n```js\nload(\'lodash.js\');\n```\n\nIn an AMD loader like [RequireJS](http://requirejs.org/):\n\n```js\nrequire({\n  \'paths\': {\n    \'underscore\': \'path/to/lodash\'\n  }\n},\n[\'underscore\'], function(_) {\n  console.log(_.VERSION);\n});\n```\n\n## Release Notes\n\n### <sup>v1.0.1</sup>\n\n * Add support for specifying source map URLs in `-p`/`--source-map` build options\n * Ensured the second argument passed to `_.assign` is not treated as a `callback`\n * Ensured `-p`/`--source-map` build options correctly set the `sourceMappingURL`\n * Made `-p`/`--source-map` build options set source map *“sources”* keys based on the builds performed\n * Made `_.defer` use `setImmediate`, in Node.js, when available\n * Made `_.where` search arrays for values regardless of their index position\n * Removed dead code from `_.template`\n\nThe full changelog is available [here](https://github.com/lodash/lodash/wiki/Changelog).\n\n## BestieJS\n\nLo-Dash is part of the [BestieJS](https://github.com/bestiejs) *“Best in Class”* module collection. This means we promote solid browser/environment support, ES5 precedents, unit testing, and plenty of documentation.\n\n## Author\n\n| [![twitter/jdalton](http://gravatar.com/avatar/299a3d891ff1920b69c364d061007043?s=70)](http://twitter.com/jdalton "Follow @jdalton on Twitter") |\n|---|\n| [John-David Dalton](http://allyoucanleet.com/) |\n\n## Contributors\n\n| [![twitter/blainebublitz](http://gravatar.com/avatar/ac1c67fd906c9fecd823ce302283b4c1?s=70)](http://twitter.com/blainebublitz "Follow @BlaineBublitz on Twitter") | [![twitter/kitcambridge](http://gravatar.com/avatar/6662a1d02f351b5ef2f8b4d815804661?s=70)](https://twitter.com/kitcambridge "Follow @kitcambridge on Twitter") | [![twitter/mathias](http://gravatar.com/avatar/24e08a9ea84deb17ae121074d0f17125?s=70)](http://twitter.com/mathias "Follow @mathias on Twitter") |\n|---|---|---|\n| [Blaine Bublitz](http://iceddev.com/) | [Kit Cambridge](http://kitcambridge.github.io/) | [Mathias Bynens](http://mathiasbynens.be/) |\n',
11583 silly resolved     readmeFilename: 'README.md',
11583 silly resolved     _id: 'lodash@1.0.1',
11583 silly resolved     _from: 'lodash@~1.0.1',
11583 silly resolved     scripts: {} } ]
11584 info install glob@3.1.21 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule
11585 info install minimatch@0.2.14 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule
11586 info install lodash@1.0.1 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule
11587 info installOne glob@3.1.21
11588 info installOne minimatch@0.2.14
11589 info installOne lodash@1.0.1
11590 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\glob unbuild
11591 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\minimatch unbuild
11592 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\lodash unbuild
11593 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\glob\3.1.21\package.tgz
11594 silly lockFile 4254456a-odules-globule-node-modules-glob tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\glob
11595 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\glob C:\Users\Gaston\AppData\Roaming\npm-cache\4254456a-odules-globule-node-modules-glob.lock
11596 silly lockFile e5ccf26d-pm-cache-glob-3-1-21-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\glob\3.1.21\package.tgz
11597 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\glob\3.1.21\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\e5ccf26d-pm-cache-glob-3-1-21-package-tgz.lock
11598 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\minimatch\0.2.14\package.tgz
11599 silly lockFile 44cfc880-s-globule-node-modules-minimatch tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\minimatch
11600 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\minimatch C:\Users\Gaston\AppData\Roaming\npm-cache\44cfc880-s-globule-node-modules-minimatch.lock
11601 silly lockFile 327a09ae-che-minimatch-0-2-14-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\minimatch\0.2.14\package.tgz
11602 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\minimatch\0.2.14\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\327a09ae-che-minimatch-0-2-14-package-tgz.lock
11603 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\lodash\1.0.1\package.tgz
11604 silly lockFile 8169deca-ules-globule-node-modules-lodash tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\lodash
11605 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\lodash C:\Users\Gaston\AppData\Roaming\npm-cache\8169deca-ules-globule-node-modules-lodash.lock
11606 silly lockFile f5ae224a-m-cache-lodash-1-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\lodash\1.0.1\package.tgz
11607 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\lodash\1.0.1\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\f5ae224a-m-cache-lodash-1-0-1-package-tgz.lock
11608 silly gunzTarPerm modes [ '755', '644' ]
11609 silly gunzTarPerm modes [ '755', '644' ]
11610 silly gunzTarPerm modes [ '755', '644' ]
11611 silly gunzTarPerm extractEntry package.json
11612 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
11613 silly gunzTarPerm extractEntry package.json
11614 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
11615 silly gunzTarPerm extractEntry package.json
11616 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
11617 silly gunzTarPerm extractEntry .npmignore
11618 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
11619 silly gunzTarPerm extractEntry README.md
11620 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
11621 silly gunzTarPerm extractEntry .npmignore
11622 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
11623 silly gunzTarPerm extractEntry README.md
11624 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
11625 silly gunzTarPerm extractEntry README.md
11626 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
11627 silly gunzTarPerm extractEntry dist/lodash.compat.js
11628 silly gunzTarPerm modified mode [ 'dist/lodash.compat.js', 438, 420 ]
11629 silly gunzTarPerm extractEntry LICENSE
11630 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
11631 silly gunzTarPerm extractEntry glob.js
11632 silly gunzTarPerm modified mode [ 'glob.js', 438, 420 ]
11633 silly gunzTarPerm extractEntry LICENSE
11634 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
11635 silly gunzTarPerm extractEntry minimatch.js
11636 silly gunzTarPerm modified mode [ 'minimatch.js', 438, 420 ]
11637 silly gunzTarPerm extractEntry dist/lodash.compat.min.js
11638 silly gunzTarPerm modified mode [ 'dist/lodash.compat.min.js', 438, 420 ]
11639 http 200 https://registry.npmjs.org/uglify-js
11640 silly registry.get cb [ 200,
11640 silly registry.get   { date: 'Fri, 03 Jan 2014 19:37:42 GMT',
11640 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
11640 silly registry.get     etag: '"28XG0Y37OZX0NPZG6TAQNNRYH"',
11640 silly registry.get     'content-type': 'application/json',
11640 silly registry.get     'content-length': '689079',
11640 silly registry.get     'accept-ranges': 'bytes',
11640 silly registry.get     via: '1.1 varnish',
11640 silly registry.get     age: '127',
11640 silly registry.get     'x-served-by': 'cache-jfk1024-JFK',
11640 silly registry.get     'x-cache': 'HIT',
11640 silly registry.get     'x-cache-hits': '1',
11640 silly registry.get     'x-timer': 'S1388777862.809481382,VS0,VE66',
11640 silly registry.get     vary: 'Accept',
11640 silly registry.get     'keep-alive': 'timeout=10, max=40',
11640 silly registry.get     connection: 'Keep-Alive' } ]
11641 silly gunzTarPerm extractEntry .travis.yml
11642 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]
11643 silly gunzTarPerm extractEntry test/basic.js
11644 silly gunzTarPerm modified mode [ 'test/basic.js', 438, 420 ]
11645 silly gunzTarPerm extractEntry dist/lodash.js
11646 silly gunzTarPerm modified mode [ 'dist/lodash.js', 438, 420 ]
11647 silly gunzTarPerm extractEntry dist/lodash.min.js
11648 silly gunzTarPerm modified mode [ 'dist/lodash.min.js', 438, 420 ]
11649 silly gunzTarPerm extractEntry dist/lodash.underscore.js
11650 silly gunzTarPerm modified mode [ 'dist/lodash.underscore.js', 438, 420 ]
11651 silly gunzTarPerm extractEntry dist/lodash.underscore.min.js
11652 silly gunzTarPerm modified mode [ 'dist/lodash.underscore.min.js', 438, 420 ]
11653 silly gunzTarPerm extractEntry test/brace-expand.js
11654 silly gunzTarPerm modified mode [ 'test/brace-expand.js', 438, 420 ]
11655 silly gunzTarPerm extractEntry test/caching.js
11656 silly gunzTarPerm modified mode [ 'test/caching.js', 438, 420 ]
11657 silly gunzTarPerm extractEntry examples/g.js
11658 silly gunzTarPerm modified mode [ 'examples/g.js', 438, 420 ]
11659 silly gunzTarPerm extractEntry examples/usr-local.js
11660 silly gunzTarPerm modified mode [ 'examples/usr-local.js', 438, 420 ]
11661 silly gunzTarPerm extractEntry test/defaults.js
11662 silly gunzTarPerm modified mode [ 'test/defaults.js', 438, 420 ]
11663 silly gunzTarPerm extractEntry test/extglob-ending-with-state-char.js
11664 silly gunzTarPerm modified mode [ 'test/extglob-ending-with-state-char.js', 438, 420 ]
11665 silly gunzTarPerm extractEntry test/00-setup.js
11666 silly gunzTarPerm modified mode [ 'test/00-setup.js', 438, 420 ]
11667 silly gunzTarPerm extractEntry test/bash-comparison.js
11668 silly gunzTarPerm modified mode [ 'test/bash-comparison.js', 438, 420 ]
11669 http 200 https://registry.npmjs.org/jsonfile/-/jsonfile-1.1.1.tgz
11670 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778024110-0.30490630795247853\tmp.tgz
11671 silly lockFile ca2d09f3-4110-0-30490630795247853-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778024110-0.30490630795247853\package
11672 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778024110-0.30490630795247853\package C:\Users\Gaston\AppData\Roaming\npm-cache\ca2d09f3-4110-0-30490630795247853-package.lock
11673 silly lockFile 87d596ca-4110-0-30490630795247853-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778024110-0.30490630795247853\tmp.tgz
11674 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778024110-0.30490630795247853\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\87d596ca-4110-0-30490630795247853-tmp-tgz.lock
11675 silly gunzTarPerm modes [ '755', '644' ]
11676 silly gunzTarPerm extractEntry package.json
11677 silly gunzTarPerm extractEntry .npmignore
11678 silly gunzTarPerm extractEntry README.md
11679 silly gunzTarPerm extractEntry test/cwd-test.js
11680 silly gunzTarPerm modified mode [ 'test/cwd-test.js', 438, 420 ]
11681 silly gunzTarPerm extractEntry test/mark.js
11682 silly gunzTarPerm modified mode [ 'test/mark.js', 438, 420 ]
11683 silly gunzTarPerm extractEntry LICENSE
11684 silly gunzTarPerm extractEntry CHANGELOG.md
11685 silly gunzTarPerm extractEntry test/nocase-nomagic.js
11686 silly gunzTarPerm modified mode [ 'test/nocase-nomagic.js', 438, 420 ]
11687 silly gunzTarPerm extractEntry test/pause-resume.js
11688 silly gunzTarPerm modified mode [ 'test/pause-resume.js', 438, 420 ]
11689 silly lockFile dab11e68-23751-0-8012961626518518-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778023751-0.8012961626518518\package
11690 silly lockFile dab11e68-23751-0-8012961626518518-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778023751-0.8012961626518518\package
11691 silly lockFile 28fdaaee-23751-0-8012961626518518-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778023751-0.8012961626518518\tmp.tgz
11692 silly lockFile 28fdaaee-23751-0-8012961626518518-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778023751-0.8012961626518518\tmp.tgz
11693 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\ncp\\0.4.2\\package.tgz',
11693 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388778023751-0.8012961626518518\\package' ]
11694 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\ncp\0.4.2\package.tgz
11695 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778023751-0.8012961626518518\package
11696 silly lockFile dab11e68-23751-0-8012961626518518-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778023751-0.8012961626518518\package
11697 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778023751-0.8012961626518518\package C:\Users\Gaston\AppData\Roaming\npm-cache\dab11e68-23751-0-8012961626518518-package.lock
11698 silly lockFile f568b6a6--npm-cache-ncp-0-4-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\ncp\0.4.2\package.tgz
11699 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\ncp\0.4.2\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\f568b6a6--npm-cache-ncp-0-4-2-package-tgz.lock
11700 silly gunzTarPerm extractEntry lib/jsonfile.js
11701 silly gunzTarPerm extractEntry test/root-nomount.js
11702 silly gunzTarPerm modified mode [ 'test/root-nomount.js', 438, 420 ]
11703 silly gunzTarPerm extractEntry test/root.js
11704 silly gunzTarPerm modified mode [ 'test/root.js', 438, 420 ]
11705 silly gunzTarPerm extractEntry test/zz-cleanup.js
11706 silly gunzTarPerm modified mode [ 'test/zz-cleanup.js', 438, 420 ]
11707 silly gunzTarPerm extractEntry test/bash-results.json
11708 silly gunzTarPerm modified mode [ 'test/bash-results.json', 438, 420 ]
11709 silly lockFile ca2d09f3-4110-0-30490630795247853-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778024110-0.30490630795247853\package
11710 silly lockFile ca2d09f3-4110-0-30490630795247853-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778024110-0.30490630795247853\package
11711 silly lockFile 87d596ca-4110-0-30490630795247853-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778024110-0.30490630795247853\tmp.tgz
11712 silly lockFile 87d596ca-4110-0-30490630795247853-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778024110-0.30490630795247853\tmp.tgz
11713 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\jsonfile\\1.1.1\\package.tgz',
11713 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388778024110-0.30490630795247853\\package' ]
11714 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\jsonfile\1.1.1\package.tgz
11715 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778024110-0.30490630795247853\package
11716 silly lockFile ca2d09f3-4110-0-30490630795247853-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778024110-0.30490630795247853\package
11717 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778024110-0.30490630795247853\package C:\Users\Gaston\AppData\Roaming\npm-cache\ca2d09f3-4110-0-30490630795247853-package.lock
11718 silly lockFile 9765b059-cache-jsonfile-1-1-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\jsonfile\1.1.1\package.tgz
11719 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\jsonfile\1.1.1\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\9765b059-cache-jsonfile-1-1-1-package-tgz.lock
11720 silly lockFile 44cfc880-s-globule-node-modules-minimatch tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\minimatch
11721 silly lockFile 44cfc880-s-globule-node-modules-minimatch tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\minimatch
11722 silly lockFile 327a09ae-che-minimatch-0-2-14-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\minimatch\0.2.14\package.tgz
11723 silly lockFile 327a09ae-che-minimatch-0-2-14-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\minimatch\0.2.14\package.tgz
11724 silly lockFile ca2d09f3-4110-0-30490630795247853-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778024110-0.30490630795247853\package
11725 silly lockFile ca2d09f3-4110-0-30490630795247853-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778024110-0.30490630795247853\package
11726 silly lockFile 9765b059-cache-jsonfile-1-1-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\jsonfile\1.1.1\package.tgz
11727 silly lockFile 9765b059-cache-jsonfile-1-1-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\jsonfile\1.1.1\package.tgz
11728 silly lockFile bdd2bb25-npm-cache-jsonfile-1-1-1-package C:\Users\Gaston\AppData\Roaming\npm-cache\jsonfile\1.1.1\package
11729 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\jsonfile\1.1.1\package C:\Users\Gaston\AppData\Roaming\npm-cache\bdd2bb25-npm-cache-jsonfile-1-1-1-package.lock
11730 silly addNameRange number 2 { name: 'uglify-js', range: '>=2.4.0-0 <2.5.0-0', hasData: true }
11731 silly addNameRange versions [ 'uglify-js',
11731 silly addNameRange   [ '0.0.1',
11731 silly addNameRange     '0.0.2',
11731 silly addNameRange     '0.0.3',
11731 silly addNameRange     '0.0.4',
11731 silly addNameRange     '0.0.5',
11731 silly addNameRange     '1.0.1',
11731 silly addNameRange     '1.0.2',
11731 silly addNameRange     '1.0.3',
11731 silly addNameRange     '1.0.4',
11731 silly addNameRange     '1.0.5',
11731 silly addNameRange     '1.0.6',
11731 silly addNameRange     '1.0.7',
11731 silly addNameRange     '1.1.0',
11731 silly addNameRange     '1.1.1',
11731 silly addNameRange     '1.2.0',
11731 silly addNameRange     '1.2.1',
11731 silly addNameRange     '1.2.2',
11731 silly addNameRange     '1.2.3',
11731 silly addNameRange     '1.2.4',
11731 silly addNameRange     '1.2.5',
11731 silly addNameRange     '1.2.6',
11731 silly addNameRange     '1.3.0',
11731 silly addNameRange     '1.3.1',
11731 silly addNameRange     '1.3.2',
11731 silly addNameRange     '1.3.3',
11731 silly addNameRange     '1.3.4',
11731 silly addNameRange     '2.2.0',
11731 silly addNameRange     '2.2.1',
11731 silly addNameRange     '2.2.2',
11731 silly addNameRange     '2.2.3',
11731 silly addNameRange     '2.2.4',
11731 silly addNameRange     '2.2.5',
11731 silly addNameRange     '2.3.0',
11731 silly addNameRange     '2.3.1',
11731 silly addNameRange     '2.3.2',
11731 silly addNameRange     '2.3.3',
11731 silly addNameRange     '2.3.4',
11731 silly addNameRange     '2.3.5',
11731 silly addNameRange     '2.3.6',
11731 silly addNameRange     '1.3.5',
11731 silly addNameRange     '2.4.0',
11731 silly addNameRange     '2.4.1',
11731 silly addNameRange     '2.4.2',
11731 silly addNameRange     '2.4.3',
11731 silly addNameRange     '2.4.4',
11731 silly addNameRange     '2.4.5',
11731 silly addNameRange     '2.4.6',
11731 silly addNameRange     '2.4.7',
11731 silly addNameRange     '2.4.8' ] ]
11732 verbose addNamed [ 'uglify-js', '2.4.8' ]
11733 verbose addNamed [ '2.4.8', '2.4.8' ]
11734 silly lockFile 49153223-uglify-js-2-4-8 uglify-js@2.4.8
11735 verbose lock uglify-js@2.4.8 C:\Users\Gaston\AppData\Roaming\npm-cache\49153223-uglify-js-2-4-8.lock
11736 silly lockFile dab11e68-23751-0-8012961626518518-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778023751-0.8012961626518518\package
11737 silly lockFile dab11e68-23751-0-8012961626518518-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778023751-0.8012961626518518\package
11738 info preinstall minimatch@0.2.14
11739 silly lockFile bdd2bb25-npm-cache-jsonfile-1-1-1-package C:\Users\Gaston\AppData\Roaming\npm-cache\jsonfile\1.1.1\package
11740 silly lockFile bdd2bb25-npm-cache-jsonfile-1-1-1-package C:\Users\Gaston\AppData\Roaming\npm-cache\jsonfile\1.1.1\package
11741 silly lockFile f568b6a6--npm-cache-ncp-0-4-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\ncp\0.4.2\package.tgz
11742 silly lockFile f568b6a6--npm-cache-ncp-0-4-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\ncp\0.4.2\package.tgz
11743 silly lockFile f0d1c91e-rg-uglify-js-uglify-js-2-4-8-tgz https://registry.npmjs.org/uglify-js/-/uglify-js-2.4.8.tgz
11744 verbose lock https://registry.npmjs.org/uglify-js/-/uglify-js-2.4.8.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\f0d1c91e-rg-uglify-js-uglify-js-2-4-8-tgz.lock
11745 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\jsonfile\1.1.1\package.tgz
11746 silly lockFile 28584684-npm-cache-jsonfile-1-1-1-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\jsonfile\1.1.1\package
11747 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\jsonfile\1.1.1\package C:\Users\Gaston\AppData\Roaming\npm-cache\28584684-npm-cache-jsonfile-1-1-1-package.lock
11748 silly lockFile 9765b059-cache-jsonfile-1-1-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\jsonfile\1.1.1\package.tgz
11749 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\jsonfile\1.1.1\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\9765b059-cache-jsonfile-1-1-1-package-tgz.lock
11750 verbose readDependencies using package.json deps
11751 verbose readDependencies using package.json deps
11752 verbose addRemoteTarball [ 'https://registry.npmjs.org/uglify-js/-/uglify-js-2.4.8.tgz',
11752 verbose addRemoteTarball   '70e33bd9bce9a27b896fd4fead4c7da434fcca09' ]
11753 silly gunzTarPerm modes [ '755', '644' ]
11754 info retry fetch attempt 1 at 16:40:26
11755 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778026285-0.9591301339678466\tmp.tgz
11756 silly lockFile a32b2177-ming-npm-cache-ncp-0-4-2-package C:\Users\Gaston\AppData\Roaming\npm-cache\ncp\0.4.2\package
11757 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\ncp\0.4.2\package C:\Users\Gaston\AppData\Roaming\npm-cache\a32b2177-ming-npm-cache-ncp-0-4-2-package.lock
11758 verbose cache add [ 'lru-cache@2', null ]
11759 verbose cache add name=undefined spec="lru-cache@2" args=["lru-cache@2",null]
11760 verbose parsed url { protocol: null,
11760 verbose parsed url   slashes: null,
11760 verbose parsed url   auth: null,
11760 verbose parsed url   host: null,
11760 verbose parsed url   port: null,
11760 verbose parsed url   hostname: null,
11760 verbose parsed url   hash: null,
11760 verbose parsed url   search: null,
11760 verbose parsed url   query: null,
11760 verbose parsed url   pathname: 'lru-cache@2',
11760 verbose parsed url   path: 'lru-cache@2',
11760 verbose parsed url   href: 'lru-cache@2' }
11761 verbose cache add name="lru-cache" spec="2" args=["lru-cache","2"]
11762 verbose parsed url { protocol: null,
11762 verbose parsed url   slashes: null,
11762 verbose parsed url   auth: null,
11762 verbose parsed url   host: null,
11762 verbose parsed url   port: null,
11762 verbose parsed url   hostname: null,
11762 verbose parsed url   hash: null,
11762 verbose parsed url   search: null,
11762 verbose parsed url   query: null,
11762 verbose parsed url   pathname: '2',
11762 verbose parsed url   path: '2',
11762 verbose parsed url   href: '2' }
11763 verbose addNamed [ 'lru-cache', '2' ]
11764 verbose addNamed [ null, '>=2.0.0-0 <3.0.0-0' ]
11765 silly lockFile b4f9d1ff-lru-cache-2 lru-cache@2
11766 verbose lock lru-cache@2 C:\Users\Gaston\AppData\Roaming\npm-cache\b4f9d1ff-lru-cache-2.lock
11767 verbose cache add [ 'sigmund@~1.0.0', null ]
11768 verbose cache add name=undefined spec="sigmund@~1.0.0" args=["sigmund@~1.0.0",null]
11769 verbose parsed url { protocol: null,
11769 verbose parsed url   slashes: null,
11769 verbose parsed url   auth: null,
11769 verbose parsed url   host: null,
11769 verbose parsed url   port: null,
11769 verbose parsed url   hostname: null,
11769 verbose parsed url   hash: null,
11769 verbose parsed url   search: null,
11769 verbose parsed url   query: null,
11769 verbose parsed url   pathname: 'sigmund@~1.0.0',
11769 verbose parsed url   path: 'sigmund@~1.0.0',
11769 verbose parsed url   href: 'sigmund@~1.0.0' }
11770 verbose cache add name="sigmund" spec="~1.0.0" args=["sigmund","~1.0.0"]
11771 verbose parsed url { protocol: null,
11771 verbose parsed url   slashes: null,
11771 verbose parsed url   auth: null,
11771 verbose parsed url   host: null,
11771 verbose parsed url   port: null,
11771 verbose parsed url   hostname: null,
11771 verbose parsed url   hash: null,
11771 verbose parsed url   search: null,
11771 verbose parsed url   query: null,
11771 verbose parsed url   pathname: '~1.0.0',
11771 verbose parsed url   path: '~1.0.0',
11771 verbose parsed url   href: '~1.0.0' }
11772 verbose addNamed [ 'sigmund', '~1.0.0' ]
11773 verbose addNamed [ null, '>=1.0.0-0 <1.1.0-0' ]
11774 silly lockFile 584a4a05-sigmund-1-0-0 sigmund@~1.0.0
11775 verbose lock sigmund@~1.0.0 C:\Users\Gaston\AppData\Roaming\npm-cache\584a4a05-sigmund-1-0-0.lock
11776 http GET https://registry.npmjs.org/uglify-js/-/uglify-js-2.4.8.tgz
11777 silly addNameRange { name: 'lru-cache',
11777 silly addNameRange   range: '>=2.0.0-0 <3.0.0-0',
11777 silly addNameRange   hasData: false }
11778 silly addNameRange { name: 'sigmund', range: '>=1.0.0-0 <1.1.0-0', hasData: false }
11779 silly lockFile a32b2177-ming-npm-cache-ncp-0-4-2-package C:\Users\Gaston\AppData\Roaming\npm-cache\ncp\0.4.2\package
11780 silly lockFile a32b2177-ming-npm-cache-ncp-0-4-2-package C:\Users\Gaston\AppData\Roaming\npm-cache\ncp\0.4.2\package
11781 silly gunzTarPerm extractEntry package.json
11782 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
11783 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\ncp\0.4.2\package.tgz
11784 silly lockFile 26aa4ade-ming-npm-cache-ncp-0-4-2-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\ncp\0.4.2\package
11785 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\ncp\0.4.2\package C:\Users\Gaston\AppData\Roaming\npm-cache\26aa4ade-ming-npm-cache-ncp-0-4-2-package.lock
11786 silly lockFile f568b6a6--npm-cache-ncp-0-4-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\ncp\0.4.2\package.tgz
11787 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\ncp\0.4.2\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\f568b6a6--npm-cache-ncp-0-4-2-package-tgz.lock
11788 verbose url raw lru-cache
11789 verbose url resolving [ 'https://registry.npmjs.org/', './lru-cache' ]
11790 verbose url resolved https://registry.npmjs.org/lru-cache
11791 info trying registry request attempt 1 at 16:40:26
11792 verbose etag "8XDTEJTKCZVVQR8F38J9XBFW5"
11793 http GET https://registry.npmjs.org/lru-cache
11794 verbose url raw sigmund
11795 verbose url resolving [ 'https://registry.npmjs.org/', './sigmund' ]
11796 verbose url resolved https://registry.npmjs.org/sigmund
11797 info trying registry request attempt 1 at 16:40:26
11798 verbose etag "1HD6GNM8EKTGCPCRL66MZK2B4"
11799 http GET https://registry.npmjs.org/sigmund
11800 silly gunzTarPerm extractEntry .npmignore
11801 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
11802 silly gunzTarPerm extractEntry README.md
11803 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
11804 silly gunzTarPerm modes [ '755', '644' ]
11805 silly gunzTarPerm extractEntry package.json
11806 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
11807 silly gunzTarPerm extractEntry LICENSE
11808 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
11809 silly gunzTarPerm extractEntry CHANGELOG.md
11810 silly gunzTarPerm modified mode [ 'CHANGELOG.md', 438, 420 ]
11811 silly gunzTarPerm extractEntry .npmignore
11812 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
11813 silly gunzTarPerm extractEntry README.md
11814 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
11815 silly gunzTarPerm extractEntry lib/jsonfile.js
11816 silly gunzTarPerm modified mode [ 'lib/jsonfile.js', 438, 420 ]
11817 silly gunzTarPerm extractEntry .travis.yml
11818 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]
11819 silly gunzTarPerm extractEntry bin/ncp
11820 silly gunzTarPerm modified mode [ 'bin/ncp', 438, 420 ]
11821 silly gunzTarPerm extractEntry lib/ncp.js
11822 silly gunzTarPerm modified mode [ 'lib/ncp.js', 438, 420 ]
11823 silly gunzTarPerm extractEntry LICENSE.md
11824 silly gunzTarPerm modified mode [ 'LICENSE.md', 438, 420 ]
11825 silly gunzTarPerm extractEntry test/ncp-test.js
11826 silly gunzTarPerm modified mode [ 'test/ncp-test.js', 438, 420 ]
11827 silly gunzTarPerm extractEntry test/fixtures/src/a
11828 silly gunzTarPerm modified mode [ 'test/fixtures/src/a', 438, 420 ]
11829 silly gunzTarPerm extractEntry test/fixtures/src/b
11830 silly gunzTarPerm modified mode [ 'test/fixtures/src/b', 438, 420 ]
11831 silly gunzTarPerm extractEntry test/fixtures/src/c
11832 silly gunzTarPerm modified mode [ 'test/fixtures/src/c', 438, 420 ]
11833 silly gunzTarPerm extractEntry test/fixtures/src/d
11834 silly gunzTarPerm modified mode [ 'test/fixtures/src/d', 438, 420 ]
11835 silly gunzTarPerm extractEntry test/fixtures/src/e
11836 silly gunzTarPerm modified mode [ 'test/fixtures/src/e', 438, 420 ]
11837 silly gunzTarPerm extractEntry test/fixtures/src/f
11838 silly gunzTarPerm modified mode [ 'test/fixtures/src/f', 438, 420 ]
11839 silly gunzTarPerm extractEntry test/fixtures/src/sub/a
11840 silly gunzTarPerm modified mode [ 'test/fixtures/src/sub/a', 438, 420 ]
11841 silly gunzTarPerm extractEntry test/fixtures/src/sub/b
11842 silly gunzTarPerm modified mode [ 'test/fixtures/src/sub/b', 438, 420 ]
11843 silly lockFile 4254456a-odules-globule-node-modules-glob tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\glob
11844 silly lockFile 4254456a-odules-globule-node-modules-glob tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\glob
11845 silly lockFile e5ccf26d-pm-cache-glob-3-1-21-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\glob\3.1.21\package.tgz
11846 silly lockFile e5ccf26d-pm-cache-glob-3-1-21-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\glob\3.1.21\package.tgz
11847 silly lockFile 28584684-npm-cache-jsonfile-1-1-1-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\jsonfile\1.1.1\package
11848 silly lockFile 28584684-npm-cache-jsonfile-1-1-1-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\jsonfile\1.1.1\package
11849 silly lockFile 9765b059-cache-jsonfile-1-1-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\jsonfile\1.1.1\package.tgz
11850 silly lockFile 9765b059-cache-jsonfile-1-1-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\jsonfile\1.1.1\package.tgz
11851 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\jsonfile\1.1.1\package.tgz 644
11852 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\jsonfile\1.1.1\package.tgz
11853 silly lockFile 5a3b0338--org-jsonfile-jsonfile-1-1-1-tgz https://registry.npmjs.org/jsonfile/-/jsonfile-1.1.1.tgz
11854 silly lockFile 5a3b0338--org-jsonfile-jsonfile-1-1-1-tgz https://registry.npmjs.org/jsonfile/-/jsonfile-1.1.1.tgz
11855 silly lockFile 34a085d2-jsonfile-1-1-1 jsonfile@1.1.1
11856 silly lockFile 34a085d2-jsonfile-1-1-1 jsonfile@1.1.1
11857 silly lockFile a43eb6bd-jsonfile-1-1-0 jsonfile@~1.1.0
11858 silly lockFile a43eb6bd-jsonfile-1-1-0 jsonfile@~1.1.0
11859 info preinstall glob@3.1.21
11860 verbose readDependencies using package.json deps
11861 verbose readDependencies using package.json deps
11862 verbose cache add [ 'graceful-fs@~1.2.0', null ]
11863 verbose cache add name=undefined spec="graceful-fs@~1.2.0" args=["graceful-fs@~1.2.0",null]
11864 verbose parsed url { protocol: null,
11864 verbose parsed url   slashes: null,
11864 verbose parsed url   auth: null,
11864 verbose parsed url   host: null,
11864 verbose parsed url   port: null,
11864 verbose parsed url   hostname: null,
11864 verbose parsed url   hash: null,
11864 verbose parsed url   search: null,
11864 verbose parsed url   query: null,
11864 verbose parsed url   pathname: 'graceful-fs@~1.2.0',
11864 verbose parsed url   path: 'graceful-fs@~1.2.0',
11864 verbose parsed url   href: 'graceful-fs@~1.2.0' }
11865 verbose cache add name="graceful-fs" spec="~1.2.0" args=["graceful-fs","~1.2.0"]
11866 verbose parsed url { protocol: null,
11866 verbose parsed url   slashes: null,
11866 verbose parsed url   auth: null,
11866 verbose parsed url   host: null,
11866 verbose parsed url   port: null,
11866 verbose parsed url   hostname: null,
11866 verbose parsed url   hash: null,
11866 verbose parsed url   search: null,
11866 verbose parsed url   query: null,
11866 verbose parsed url   pathname: '~1.2.0',
11866 verbose parsed url   path: '~1.2.0',
11866 verbose parsed url   href: '~1.2.0' }
11867 verbose addNamed [ 'graceful-fs', '~1.2.0' ]
11868 verbose addNamed [ null, '>=1.2.0-0 <1.3.0-0' ]
11869 silly lockFile 9c0bb906-graceful-fs-1-2-0 graceful-fs@~1.2.0
11870 verbose lock graceful-fs@~1.2.0 C:\Users\Gaston\AppData\Roaming\npm-cache\9c0bb906-graceful-fs-1-2-0.lock
11871 verbose cache add [ 'inherits@1', null ]
11872 verbose cache add name=undefined spec="inherits@1" args=["inherits@1",null]
11873 verbose parsed url { protocol: null,
11873 verbose parsed url   slashes: null,
11873 verbose parsed url   auth: null,
11873 verbose parsed url   host: null,
11873 verbose parsed url   port: null,
11873 verbose parsed url   hostname: null,
11873 verbose parsed url   hash: null,
11873 verbose parsed url   search: null,
11873 verbose parsed url   query: null,
11873 verbose parsed url   pathname: 'inherits@1',
11873 verbose parsed url   path: 'inherits@1',
11873 verbose parsed url   href: 'inherits@1' }
11874 verbose cache add name="inherits" spec="1" args=["inherits","1"]
11875 verbose parsed url { protocol: null,
11875 verbose parsed url   slashes: null,
11875 verbose parsed url   auth: null,
11875 verbose parsed url   host: null,
11875 verbose parsed url   port: null,
11875 verbose parsed url   hostname: null,
11875 verbose parsed url   hash: null,
11875 verbose parsed url   search: null,
11875 verbose parsed url   query: null,
11875 verbose parsed url   pathname: '1',
11875 verbose parsed url   path: '1',
11875 verbose parsed url   href: '1' }
11876 verbose addNamed [ 'inherits', '1' ]
11877 verbose addNamed [ null, '>=1.0.0-0 <2.0.0-0' ]
11878 silly lockFile 4bca46d0-inherits-1 inherits@1
11879 verbose lock inherits@1 C:\Users\Gaston\AppData\Roaming\npm-cache\4bca46d0-inherits-1.lock
11880 silly addNameRange { name: 'graceful-fs',
11880 silly addNameRange   range: '>=1.2.0-0 <1.3.0-0',
11880 silly addNameRange   hasData: false }
11881 silly addNameRange { name: 'inherits', range: '>=1.0.0-0 <2.0.0-0', hasData: false }
11882 verbose url raw graceful-fs
11883 verbose url resolving [ 'https://registry.npmjs.org/', './graceful-fs' ]
11884 verbose url resolved https://registry.npmjs.org/graceful-fs
11885 info trying registry request attempt 1 at 16:40:26
11886 verbose etag "CD9PAXA6045JPCERIXC2VPOQH"
11887 http GET https://registry.npmjs.org/graceful-fs
11888 verbose url raw inherits
11889 verbose url resolving [ 'https://registry.npmjs.org/', './inherits' ]
11890 verbose url resolved https://registry.npmjs.org/inherits
11891 info trying registry request attempt 1 at 16:40:26
11892 verbose etag "6GND9JGNFJBVB470HZYXMNR4P"
11893 http GET https://registry.npmjs.org/inherits
11894 silly lockFile 26aa4ade-ming-npm-cache-ncp-0-4-2-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\ncp\0.4.2\package
11895 silly lockFile 26aa4ade-ming-npm-cache-ncp-0-4-2-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\ncp\0.4.2\package
11896 silly lockFile f568b6a6--npm-cache-ncp-0-4-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\ncp\0.4.2\package.tgz
11897 silly lockFile f568b6a6--npm-cache-ncp-0-4-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\ncp\0.4.2\package.tgz
11898 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\ncp\0.4.2\package.tgz 644
11899 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\ncp\0.4.2\package.tgz
11900 silly lockFile b3172d45-stry-npmjs-org-ncp-ncp-0-4-2-tgz https://registry.npmjs.org/ncp/-/ncp-0.4.2.tgz
11901 silly lockFile b3172d45-stry-npmjs-org-ncp-ncp-0-4-2-tgz https://registry.npmjs.org/ncp/-/ncp-0.4.2.tgz
11902 silly lockFile e43cb36a-ncp-0-4-2 ncp@0.4.2
11903 silly lockFile e43cb36a-ncp-0-4-2 ncp@0.4.2
11904 silly lockFile 1f31aeaa-ncp-0-4-2 ncp@~0.4.2
11905 silly lockFile 1f31aeaa-ncp-0-4-2 ncp@~0.4.2
11906 silly resolved [ { name: 'rimraf',
11906 silly resolved     version: '2.2.5',
11906 silly resolved     main: 'rimraf.js',
11906 silly resolved     description: 'A deep deletion module for node (like `rm -rf`)',
11906 silly resolved     author:
11906 silly resolved      { name: 'Isaac Z. Schlueter',
11906 silly resolved        email: 'i@izs.me',
11906 silly resolved        url: 'http://blog.izs.me/' },
11906 silly resolved     license:
11906 silly resolved      { type: 'MIT',
11906 silly resolved        url: 'https://github.com/isaacs/rimraf/raw/master/LICENSE' },
11906 silly resolved     repository: { type: 'git', url: 'git://github.com/isaacs/rimraf.git' },
11906 silly resolved     scripts: { test: 'cd test && bash run.sh' },
11906 silly resolved     bin: { rimraf: './bin.js' },
11906 silly resolved     contributors: [ [Object], [Object], [Object], [Object], [Object] ],
11906 silly resolved     readme: '`rm -rf` for node.\n\nInstall with `npm install rimraf`, or just drop rimraf.js somewhere.\n\n## API\n\n`rimraf(f, callback)`\n\nThe callback will be called with an error if there is one.  Certain\nerrors are handled for you:\n\n* Windows: `EBUSY` and `ENOTEMPTY` - rimraf will back off a maximum of\n  `opts.maxBusyTries` times before giving up.\n* `ENOENT` - If the file doesn\'t exist, rimraf will return\n  successfully, since your desired outcome is already the case.\n\n## rimraf.sync\n\nIt can remove stuff synchronously, too.  But that\'s not so good.  Use\nthe async API.  It\'s better.\n\n## CLI\n\nIf installed with `npm install rimraf -g` it can be used as a global\ncommand `rimraf <path>` which is useful for cross platform support.\n\n## mkdirp\n\nIf you need to create a directory recursively, check out\n[mkdirp](https://github.com/substack/node-mkdirp).\n',
11906 silly resolved     readmeFilename: 'README.md',
11906 silly resolved     bugs: { url: 'https://github.com/isaacs/rimraf/issues' },
11906 silly resolved     homepage: 'https://github.com/isaacs/rimraf',
11906 silly resolved     _id: 'rimraf@2.2.5',
11906 silly resolved     dist: { shasum: '582c3c3598be5e6d0ae9194178ab74b6115b6b0e' },
11906 silly resolved     _from: 'rimraf@~2.2.0',
11906 silly resolved     _resolved: 'https://registry.npmjs.org/rimraf/-/rimraf-2.2.5.tgz' },
11906 silly resolved   { name: 'mkdirp',
11906 silly resolved     description: 'Recursively mkdir, like `mkdir -p`',
11906 silly resolved     version: '0.3.5',
11906 silly resolved     author:
11906 silly resolved      { name: 'James Halliday',
11906 silly resolved        email: 'mail@substack.net',
11906 silly resolved        url: 'http://substack.net' },
11906 silly resolved     main: './index',
11906 silly resolved     keywords: [ 'mkdir', 'directory' ],
11906 silly resolved     repository:
11906 silly resolved      { type: 'git',
11906 silly resolved        url: 'http://github.com/substack/node-mkdirp.git' },
11906 silly resolved     scripts: { test: 'tap test/*.js' },
11906 silly resolved     devDependencies: { tap: '~0.4.0' },
11906 silly resolved     license: 'MIT',
11906 silly resolved     readme: '# mkdirp\n\nLike `mkdir -p`, but in node.js!\n\n[![build status](https://secure.travis-ci.org/substack/node-mkdirp.png)](http://travis-ci.org/substack/node-mkdirp)\n\n# example\n\n## pow.js\n\n```js\nvar mkdirp = require(\'mkdirp\');\n    \nmkdirp(\'/tmp/foo/bar/baz\', function (err) {\n    if (err) console.error(err)\n    else console.log(\'pow!\')\n});\n```\n\nOutput\n\n```\npow!\n```\n\nAnd now /tmp/foo/bar/baz exists, huzzah!\n\n# methods\n\n```js\nvar mkdirp = require(\'mkdirp\');\n```\n\n## mkdirp(dir, mode, cb)\n\nCreate a new directory and any necessary subdirectories at `dir` with octal\npermission string `mode`.\n\nIf `mode` isn\'t specified, it defaults to `0777 & (~process.umask())`.\n\n`cb(err, made)` fires with the error or the first directory `made`\nthat had to be created, if any.\n\n## mkdirp.sync(dir, mode)\n\nSynchronously create a new directory and any necessary subdirectories at `dir`\nwith octal permission string `mode`.\n\nIf `mode` isn\'t specified, it defaults to `0777 & (~process.umask())`.\n\nReturns the first directory that had to be created, if any.\n\n# install\n\nWith [npm](http://npmjs.org) do:\n\n```\nnpm install mkdirp\n```\n\n# license\n\nMIT\n',
11906 silly resolved     readmeFilename: 'readme.markdown',
11906 silly resolved     bugs: { url: 'https://github.com/substack/node-mkdirp/issues' },
11906 silly resolved     homepage: 'https://github.com/substack/node-mkdirp',
11906 silly resolved     _id: 'mkdirp@0.3.5',
11906 silly resolved     dist: { shasum: 'c44e0ec030424a5eceea433ab14e60a1354df627' },
11906 silly resolved     _from: 'mkdirp@0.3.x',
11906 silly resolved     _resolved: 'https://registry.npmjs.org/mkdirp/-/mkdirp-0.3.5.tgz' },
11906 silly resolved   { name: 'jsonfile',
11906 silly resolved     version: '1.1.1',
11906 silly resolved     description: 'Easily read/write JSON files.',
11906 silly resolved     repository:
11906 silly resolved      { type: 'git',
11906 silly resolved        url: 'git@github.com:jprichardson/node-jsonfile.git' },
11906 silly resolved     keywords: [ 'read', 'write', 'file', 'json' ],
11906 silly resolved     author: { name: 'JP Richardson', email: 'jprichardson@gmail.com' },
11906 silly resolved     licenses: [ [Object] ],
11906 silly resolved     dependencies: {},
11906 silly resolved     devDependencies: { testutil: '~0.5.1', mocha: '*' },
11906 silly resolved     main: './lib/jsonfile.js',
11906 silly resolved     scripts: { test: 'mocha test' },
11906 silly resolved     readme: '[![build status](https://secure.travis-ci.org/jprichardson/node-jsonfile.png)](http://travis-ci.org/jprichardson/node-jsonfile)\n\nNode.js - jsonfile\n================\n\nEasily read/write JSON files. \n\n\nWhy?\n----\n\nWriting `JSON.stringify()` and then `fs.writeFile()` and `JSON.parse()` with `fs.readFile()` enclosed in `try/catch` blocks became annoying.\n\n\n\nInstallation\n------------\n\n    npm install jsonfile --save\n\n\n\nAPI\n---\n\n### readFile(filename, [options], callback)\n\n```javascript\nvar jf = require(\'jsonfile\')\n  , util = require(\'util\');\n\nvar file = \'/tmp/data.json\';\njs.readFile(file, function(err, obj) {\n  console.log(util.inspect(obj)); \n});\n```\n\n\n### readFileSync(filename, [options])\n\n```javascript\nvar jf = require(\'jsonfile\')\n  , util = require(\'util\');\n\nvar file = \'/tmp/data.json\';\n\nconsole.log(util.inspect(jf.readFileSync(file)));\n```\n\n\n### writeFile(filename, [options], callback)\n\n```javascript\nvar jf = require(\'jsonfile\')\n\nvar file = \'/tmp/data.json\';\nvar obj = {name: \'JP\'};\n\njf.writeFile(file, obj, function(err) {\n  console.log(err);\n})\n```\n\n### writeFileSync(filename, [options])\n\n```javascript\nvar jf = require(\'jsonfile\')\n\nvar file = \'/tmp/data.json\';\nvar obj = {name: \'JP\'};\n\njf.writeFileSync(file, obj);\n```\n\n\n### spaces\n\nNumber of spaces to indent JSON files. \n\n**default:** 2\n\n```\nvar jf = require(\'jsonfile\');\n\njf.spaces = 4;\n\nvar file = \'/tmp/data.json\';\nvar obj = {name: \'JP\'};\n\njf.writeFile(file, obj, function(err) { //json file has four space indenting now\n  console.log(err);\n});\n```\n\n\nContributions\n-------------\n\nIf you contribute to this library, please don\'t change the version numbers in your pull request.\n\n\n### Contributors\n\n(You can add your name, or I\'ll add it if you forget)\n\n- [*] [JP Richardson](https://github.com/jprichardson)\n- [2] [Sean O\'Dell](https://github.com/seanodell)\n- [1] [Federico Fissore](https://github.com/ffissore)\n\n\nLicense\n-------\n\n(MIT License)\n\nCopyright 2012-2013, JP Richardson  <jprichardson@gmail.com>\n\n\n\n\n\n',
11906 silly resolved     readmeFilename: 'README.md',
11906 silly resolved     bugs: { url: 'https://github.com/jprichardson/node-jsonfile/issues' },
11906 silly resolved     homepage: 'https://github.com/jprichardson/node-jsonfile',
11906 silly resolved     _id: 'jsonfile@1.1.1',
11906 silly resolved     dist: { shasum: 'b8d1c7e4092731f1493d935d00431b9f823f6db0' },
11906 silly resolved     _from: 'jsonfile@~1.1.0',
11906 silly resolved     _resolved: 'https://registry.npmjs.org/jsonfile/-/jsonfile-1.1.1.tgz' },
11906 silly resolved   { name: 'ncp',
11906 silly resolved     version: '0.4.2',
11906 silly resolved     author: { name: 'AvianFlu', email: 'charlie@charlieistheman.com' },
11906 silly resolved     description: 'Asynchronous recursive file copy utility.',
11906 silly resolved     bin: { ncp: './bin/ncp' },
11906 silly resolved     devDependencies: { vows: '0.6.x', rimraf: '1.0.x', 'read-dir-files': '0.0.x' },
11906 silly resolved     main: './lib/ncp.js',
11906 silly resolved     repository: { type: 'git', url: 'https://github.com/AvianFlu/ncp.git' },
11906 silly resolved     keywords: [ 'cli', 'copy' ],
11906 silly resolved     license: 'MIT',
11906 silly resolved     engine: { node: '>=0.4' },
11906 silly resolved     scripts: { test: 'vows --isolate --spec' },
11906 silly resolved     readme: '# ncp - Asynchronous recursive file & directory copying\n\n[![Build Status](https://secure.travis-ci.org/AvianFlu/ncp.png)](http://travis-ci.org/AvianFlu/ncp)\n\nThink `cp -r`, but pure node, and asynchronous.  `ncp` can be used both as a CLI tool and programmatically.\n\n## Command Line usage\n\nUsage is simple: `ncp [source] [dest] [--limit=concurrency limit]\n[--filter=filter] --stopOnErr`\n\nThe \'filter\' is a Regular Expression - matched files will be copied.\n\nThe \'concurrency limit\' is an integer that represents how many pending file system requests `ncp` has at a time.\n\n\'stopOnErr\' is a boolean flag that will tell `ncp` to stop immediately if any\nerrors arise, rather than attempting to continue while logging errors.\n\nIf there are no errors, `ncp` will output `done.` when complete.  If there are errors, the error messages will be logged to `stdout` and to `./ncp-debug.log`, and the copy operation will attempt to continue.\n\n## Programmatic usage\n\nProgrammatic usage of `ncp` is just as simple.  The only argument to the completion callback is a possible error.  \n\n```javascript\nvar ncp = require(\'ncp\').ncp;\n\nncp.limit = 16;\n\nncp(source, destination, function (err) {\n if (err) {\n   return console.error(err);\n }\n console.log(\'done!\');\n});\n```\n\nYou can also call ncp like `ncp(source, destination, options, callback)`. \n`options` should be a dictionary. Currently, such options are available:\n\n  * `options.filter` - a `RegExp` instance, against which each file name is\n  tested to determine whether to copy it or not, or a function taking single\n  parameter: copied file name, returning `true` or `false`, determining\n  whether to copy file or not.\n\n  * `options.transform` - a function: `function (read, write) { read.pipe(write) }`\n  used to apply streaming transforms while copying.\n\n  * `options.clobber` - boolean=true. if set to false, `ncp` will not overwrite \n  destination files that already exist.\n\nPlease open an issue if any bugs arise.  As always, I accept (working) pull requests, and refunds are available at `/dev/null`.\n',
11906 silly resolved     readmeFilename: 'README.md',
11906 silly resolved     bugs: { url: 'https://github.com/AvianFlu/ncp/issues' },
11906 silly resolved     homepage: 'https://github.com/AvianFlu/ncp',
11906 silly resolved     _id: 'ncp@0.4.2',
11906 silly resolved     dist: { shasum: 'be0c19b88c7c0472ab40451c8fd43c79cd0c3848' },
11906 silly resolved     _from: 'ncp@~0.4.2',
11906 silly resolved     _resolved: 'https://registry.npmjs.org/ncp/-/ncp-0.4.2.tgz' } ]
11907 info install rimraf@2.2.5 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer\node_modules\fs-extra
11908 info install mkdirp@0.3.5 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer\node_modules\fs-extra
11909 info install jsonfile@1.1.1 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer\node_modules\fs-extra
11910 info install ncp@0.4.2 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer\node_modules\fs-extra
11911 info installOne rimraf@2.2.5
11912 info installOne mkdirp@0.3.5
11913 info installOne jsonfile@1.1.1
11914 info installOne ncp@0.4.2
11915 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer\node_modules\fs-extra\node_modules\rimraf unbuild
11916 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer\node_modules\fs-extra\node_modules\mkdirp unbuild
11917 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer\node_modules\fs-extra\node_modules\jsonfile unbuild
11918 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer\node_modules\fs-extra\node_modules\ncp unbuild
11919 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\rimraf\2.2.5\package.tgz
11920 silly lockFile 37a3a168-les-fs-extra-node-modules-rimraf tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer\node_modules\fs-extra\node_modules\rimraf
11921 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer\node_modules\fs-extra\node_modules\rimraf C:\Users\Gaston\AppData\Roaming\npm-cache\37a3a168-les-fs-extra-node-modules-rimraf.lock
11922 silly lockFile 15f2a533-m-cache-rimraf-2-2-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\rimraf\2.2.5\package.tgz
11923 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\rimraf\2.2.5\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\15f2a533-m-cache-rimraf-2-2-5-package-tgz.lock
11924 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\mkdirp\0.3.5\package.tgz
11925 silly lockFile ebfa4d88-les-fs-extra-node-modules-mkdirp tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer\node_modules\fs-extra\node_modules\mkdirp
11926 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer\node_modules\fs-extra\node_modules\mkdirp C:\Users\Gaston\AppData\Roaming\npm-cache\ebfa4d88-les-fs-extra-node-modules-mkdirp.lock
11927 silly lockFile 06224dfa-m-cache-mkdirp-0-3-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\mkdirp\0.3.5\package.tgz
11928 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\mkdirp\0.3.5\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\06224dfa-m-cache-mkdirp-0-3-5-package-tgz.lock
11929 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\jsonfile\1.1.1\package.tgz
11930 silly lockFile c71f0d23-s-fs-extra-node-modules-jsonfile tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer\node_modules\fs-extra\node_modules\jsonfile
11931 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer\node_modules\fs-extra\node_modules\jsonfile C:\Users\Gaston\AppData\Roaming\npm-cache\c71f0d23-s-fs-extra-node-modules-jsonfile.lock
11932 silly lockFile 9765b059-cache-jsonfile-1-1-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\jsonfile\1.1.1\package.tgz
11933 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\jsonfile\1.1.1\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\9765b059-cache-jsonfile-1-1-1-package-tgz.lock
11934 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\ncp\0.4.2\package.tgz
11935 silly lockFile 34315dc0-odules-fs-extra-node-modules-ncp tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer\node_modules\fs-extra\node_modules\ncp
11936 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer\node_modules\fs-extra\node_modules\ncp C:\Users\Gaston\AppData\Roaming\npm-cache\34315dc0-odules-fs-extra-node-modules-ncp.lock
11937 silly lockFile f568b6a6--npm-cache-ncp-0-4-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\ncp\0.4.2\package.tgz
11938 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\ncp\0.4.2\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\f568b6a6--npm-cache-ncp-0-4-2-package-tgz.lock
11939 silly gunzTarPerm modes [ '755', '644' ]
11940 silly gunzTarPerm modes [ '755', '644' ]
11941 silly gunzTarPerm modes [ '755', '644' ]
11942 silly gunzTarPerm modes [ '755', '644' ]
11943 silly gunzTarPerm extractEntry package.json
11944 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
11945 silly gunzTarPerm extractEntry package.json
11946 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
11947 silly gunzTarPerm extractEntry package.json
11948 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
11949 silly gunzTarPerm extractEntry package.json
11950 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
11951 silly gunzTarPerm extractEntry README.md
11952 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
11953 silly gunzTarPerm extractEntry LICENSE
11954 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
11955 silly gunzTarPerm extractEntry .npmignore
11956 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
11957 silly gunzTarPerm extractEntry README.md
11958 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
11959 silly gunzTarPerm extractEntry .npmignore
11960 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
11961 silly gunzTarPerm extractEntry LICENSE
11962 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
11963 silly gunzTarPerm extractEntry .npmignore
11964 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
11965 silly gunzTarPerm extractEntry README.md
11966 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
11967 silly gunzTarPerm extractEntry LICENSE
11968 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
11969 silly gunzTarPerm extractEntry CHANGELOG.md
11970 silly gunzTarPerm modified mode [ 'CHANGELOG.md', 438, 420 ]
11971 silly gunzTarPerm extractEntry index.js
11972 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
11973 silly gunzTarPerm extractEntry .travis.yml
11974 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]
11975 silly gunzTarPerm extractEntry bin.js
11976 silly gunzTarPerm modified mode [ 'bin.js', 438, 420 ]
11977 silly gunzTarPerm extractEntry rimraf.js
11978 silly gunzTarPerm modified mode [ 'rimraf.js', 438, 420 ]
11979 silly gunzTarPerm extractEntry .travis.yml
11980 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]
11981 silly gunzTarPerm extractEntry bin/ncp
11982 silly gunzTarPerm modified mode [ 'bin/ncp', 438, 420 ]
11983 silly gunzTarPerm extractEntry AUTHORS
11984 silly gunzTarPerm modified mode [ 'AUTHORS', 438, 420 ]
11985 silly gunzTarPerm extractEntry test/test-async.js
11986 silly gunzTarPerm modified mode [ 'test/test-async.js', 438, 420 ]
11987 silly gunzTarPerm extractEntry examples/pow.js
11988 silly gunzTarPerm modified mode [ 'examples/pow.js', 438, 420 ]
11989 silly gunzTarPerm extractEntry readme.markdown
11990 silly gunzTarPerm modified mode [ 'readme.markdown', 438, 420 ]
11991 silly gunzTarPerm extractEntry lib/jsonfile.js
11992 silly gunzTarPerm modified mode [ 'lib/jsonfile.js', 438, 420 ]
11993 silly gunzTarPerm extractEntry lib/ncp.js
11994 silly gunzTarPerm modified mode [ 'lib/ncp.js', 438, 420 ]
11995 silly gunzTarPerm extractEntry LICENSE.md
11996 silly gunzTarPerm modified mode [ 'LICENSE.md', 438, 420 ]
11997 silly gunzTarPerm extractEntry test/test-sync.js
11998 silly gunzTarPerm modified mode [ 'test/test-sync.js', 438, 420 ]
11999 silly gunzTarPerm extractEntry test/run.sh
12000 silly gunzTarPerm modified mode [ 'test/run.sh', 438, 420 ]
12001 silly gunzTarPerm extractEntry test/chmod.js
12002 silly gunzTarPerm modified mode [ 'test/chmod.js', 438, 420 ]
12003 silly gunzTarPerm extractEntry test/perm.js
12004 silly gunzTarPerm modified mode [ 'test/perm.js', 438, 420 ]
12005 silly gunzTarPerm extractEntry test/ncp-test.js
12006 silly gunzTarPerm modified mode [ 'test/ncp-test.js', 438, 420 ]
12007 silly gunzTarPerm extractEntry test/fixtures/src/a
12008 silly gunzTarPerm modified mode [ 'test/fixtures/src/a', 438, 420 ]
12009 silly gunzTarPerm extractEntry test/fixtures/src/b
12010 silly gunzTarPerm modified mode [ 'test/fixtures/src/b', 438, 420 ]
12011 silly gunzTarPerm extractEntry test/fixtures/src/c
12012 silly gunzTarPerm modified mode [ 'test/fixtures/src/c', 438, 420 ]
12013 silly gunzTarPerm extractEntry test/fixtures/src/d
12014 silly gunzTarPerm modified mode [ 'test/fixtures/src/d', 438, 420 ]
12015 silly gunzTarPerm extractEntry test/fixtures/src/e
12016 silly gunzTarPerm modified mode [ 'test/fixtures/src/e', 438, 420 ]
12017 silly gunzTarPerm extractEntry test/fixtures/src/f
12018 silly gunzTarPerm modified mode [ 'test/fixtures/src/f', 438, 420 ]
12019 silly gunzTarPerm extractEntry test/fixtures/src/sub/a
12020 silly gunzTarPerm modified mode [ 'test/fixtures/src/sub/a', 438, 420 ]
12021 silly gunzTarPerm extractEntry test/fixtures/src/sub/b
12022 silly gunzTarPerm modified mode [ 'test/fixtures/src/sub/b', 438, 420 ]
12023 silly gunzTarPerm extractEntry test/setup.sh
12024 silly gunzTarPerm modified mode [ 'test/setup.sh', 438, 420 ]
12025 silly gunzTarPerm extractEntry test/perm_sync.js
12026 silly gunzTarPerm modified mode [ 'test/perm_sync.js', 438, 420 ]
12027 silly gunzTarPerm extractEntry test/race.js
12028 silly gunzTarPerm modified mode [ 'test/race.js', 438, 420 ]
12029 silly gunzTarPerm extractEntry test/mkdirp.js
12030 silly gunzTarPerm modified mode [ 'test/mkdirp.js', 438, 420 ]
12031 silly gunzTarPerm extractEntry test/return.js
12032 silly gunzTarPerm modified mode [ 'test/return.js', 438, 420 ]
12033 silly gunzTarPerm extractEntry test/return_sync.js
12034 silly gunzTarPerm modified mode [ 'test/return_sync.js', 438, 420 ]
12035 silly gunzTarPerm extractEntry test/root.js
12036 silly gunzTarPerm modified mode [ 'test/root.js', 438, 420 ]
12037 silly gunzTarPerm extractEntry test/sync.js
12038 silly gunzTarPerm modified mode [ 'test/sync.js', 438, 420 ]
12039 silly gunzTarPerm extractEntry test/umask.js
12040 silly gunzTarPerm modified mode [ 'test/umask.js', 438, 420 ]
12041 silly gunzTarPerm extractEntry test/clobber.js
12042 silly gunzTarPerm modified mode [ 'test/clobber.js', 438, 420 ]
12043 silly gunzTarPerm extractEntry test/umask_sync.js
12044 silly gunzTarPerm modified mode [ 'test/umask_sync.js', 438, 420 ]
12045 silly gunzTarPerm extractEntry test/rel.js
12046 silly gunzTarPerm modified mode [ 'test/rel.js', 438, 420 ]
12047 silly lockFile c71f0d23-s-fs-extra-node-modules-jsonfile tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer\node_modules\fs-extra\node_modules\jsonfile
12048 silly lockFile c71f0d23-s-fs-extra-node-modules-jsonfile tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer\node_modules\fs-extra\node_modules\jsonfile
12049 silly lockFile 9765b059-cache-jsonfile-1-1-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\jsonfile\1.1.1\package.tgz
12050 silly lockFile 9765b059-cache-jsonfile-1-1-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\jsonfile\1.1.1\package.tgz
12051 info preinstall jsonfile@1.1.1
12052 verbose readDependencies using package.json deps
12053 verbose readDependencies using package.json deps
12054 silly resolved []
12055 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer\node_modules\fs-extra\node_modules\jsonfile
12056 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer\node_modules\fs-extra\node_modules\jsonfile
12057 verbose linkStuff [ false,
12057 verbose linkStuff   false,
12057 verbose linkStuff   false,
12057 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-autoprefixer\\node_modules\\autoprefixer\\node_modules\\fs-extra\\node_modules' ]
12058 info linkStuff jsonfile@1.1.1
12059 verbose linkBins jsonfile@1.1.1
12060 verbose linkMans jsonfile@1.1.1
12061 verbose rebuildBundles jsonfile@1.1.1
12062 info install jsonfile@1.1.1
12063 info postinstall jsonfile@1.1.1
12064 silly lockFile 37a3a168-les-fs-extra-node-modules-rimraf tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer\node_modules\fs-extra\node_modules\rimraf
12065 silly lockFile 37a3a168-les-fs-extra-node-modules-rimraf tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer\node_modules\fs-extra\node_modules\rimraf
12066 silly lockFile 15f2a533-m-cache-rimraf-2-2-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\rimraf\2.2.5\package.tgz
12067 silly lockFile 15f2a533-m-cache-rimraf-2-2-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\rimraf\2.2.5\package.tgz
12068 info preinstall rimraf@2.2.5
12069 verbose readDependencies using package.json deps
12070 verbose readDependencies using package.json deps
12071 silly resolved []
12072 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer\node_modules\fs-extra\node_modules\rimraf
12073 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer\node_modules\fs-extra\node_modules\rimraf
12074 verbose linkStuff [ false,
12074 verbose linkStuff   false,
12074 verbose linkStuff   false,
12074 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-autoprefixer\\node_modules\\autoprefixer\\node_modules\\fs-extra\\node_modules' ]
12075 info linkStuff rimraf@2.2.5
12076 verbose linkBins rimraf@2.2.5
12077 verbose link bins [ { rimraf: './bin.js' },
12077 verbose link bins   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-autoprefixer\\node_modules\\autoprefixer\\node_modules\\fs-extra\\node_modules\\.bin',
12077 verbose link bins   false ]
12078 verbose linkMans rimraf@2.2.5
12079 verbose rebuildBundles rimraf@2.2.5
12080 info install rimraf@2.2.5
12081 info postinstall rimraf@2.2.5
12082 silly lockFile 34315dc0-odules-fs-extra-node-modules-ncp tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer\node_modules\fs-extra\node_modules\ncp
12083 silly lockFile 34315dc0-odules-fs-extra-node-modules-ncp tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer\node_modules\fs-extra\node_modules\ncp
12084 silly lockFile f568b6a6--npm-cache-ncp-0-4-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\ncp\0.4.2\package.tgz
12085 silly lockFile f568b6a6--npm-cache-ncp-0-4-2-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\ncp\0.4.2\package.tgz
12086 info preinstall ncp@0.4.2
12087 verbose readDependencies using package.json deps
12088 verbose readDependencies using package.json deps
12089 silly resolved []
12090 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer\node_modules\fs-extra\node_modules\ncp
12091 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer\node_modules\fs-extra\node_modules\ncp
12092 verbose linkStuff [ false,
12092 verbose linkStuff   false,
12092 verbose linkStuff   false,
12092 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-autoprefixer\\node_modules\\autoprefixer\\node_modules\\fs-extra\\node_modules' ]
12093 info linkStuff ncp@0.4.2
12094 verbose linkBins ncp@0.4.2
12095 verbose link bins [ { ncp: './bin/ncp' },
12095 verbose link bins   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-autoprefixer\\node_modules\\autoprefixer\\node_modules\\fs-extra\\node_modules\\.bin',
12095 verbose link bins   false ]
12096 verbose linkMans ncp@0.4.2
12097 verbose rebuildBundles ncp@0.4.2
12098 info install ncp@0.4.2
12099 info postinstall ncp@0.4.2
12100 silly lockFile ebfa4d88-les-fs-extra-node-modules-mkdirp tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer\node_modules\fs-extra\node_modules\mkdirp
12101 silly lockFile ebfa4d88-les-fs-extra-node-modules-mkdirp tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer\node_modules\fs-extra\node_modules\mkdirp
12102 silly lockFile 06224dfa-m-cache-mkdirp-0-3-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\mkdirp\0.3.5\package.tgz
12103 silly lockFile 06224dfa-m-cache-mkdirp-0-3-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\mkdirp\0.3.5\package.tgz
12104 info preinstall mkdirp@0.3.5
12105 verbose readDependencies using package.json deps
12106 verbose readDependencies using package.json deps
12107 silly resolved []
12108 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer\node_modules\fs-extra\node_modules\mkdirp
12109 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer\node_modules\fs-extra\node_modules\mkdirp
12110 verbose linkStuff [ false,
12110 verbose linkStuff   false,
12110 verbose linkStuff   false,
12110 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-autoprefixer\\node_modules\\autoprefixer\\node_modules\\fs-extra\\node_modules' ]
12111 info linkStuff mkdirp@0.3.5
12112 verbose linkBins mkdirp@0.3.5
12113 verbose linkMans mkdirp@0.3.5
12114 verbose rebuildBundles mkdirp@0.3.5
12115 info install mkdirp@0.3.5
12116 info postinstall mkdirp@0.3.5
12117 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer\node_modules\fs-extra
12118 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-autoprefixer\node_modules\autoprefixer\node_modules\fs-extra
12119 verbose linkStuff [ false,
12119 verbose linkStuff   false,
12119 verbose linkStuff   false,
12119 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-autoprefixer\\node_modules\\autoprefixer\\node_modules' ]
12120 info linkStuff fs-extra@0.8.1
12121 verbose linkBins fs-extra@0.8.1
12122 verbose linkMans fs-extra@0.8.1
12123 verbose rebuildBundles fs-extra@0.8.1
12124 verbose rebuildBundles [ '.bin', 'jsonfile', 'mkdirp', 'ncp', 'rimraf' ]
12125 info install fs-extra@0.8.1
12126 info postinstall fs-extra@0.8.1
12127 http 304 https://registry.npmjs.org/lru-cache
12128 silly registry.get cb [ 304,
12128 silly registry.get   { date: 'Fri, 03 Jan 2014 19:39:28 GMT',
12128 silly registry.get     server: 'Apache',
12128 silly registry.get     connection: 'Keep-Alive',
12128 silly registry.get     'keep-alive': 'timeout=10, max=50',
12128 silly registry.get     etag: '"8XDTEJTKCZVVQR8F38J9XBFW5"',
12128 silly registry.get     vary: 'Accept' } ]
12129 verbose etag lru-cache from cache
12130 http 304 https://registry.npmjs.org/sigmund
12131 silly registry.get cb [ 304,
12131 silly registry.get   { date: 'Fri, 03 Jan 2014 19:39:28 GMT',
12131 silly registry.get     server: 'Apache',
12131 silly registry.get     connection: 'Keep-Alive',
12131 silly registry.get     'keep-alive': 'timeout=10, max=50',
12131 silly registry.get     etag: '"1HD6GNM8EKTGCPCRL66MZK2B4"',
12131 silly registry.get     vary: 'Accept' } ]
12132 verbose etag sigmund from cache
12133 silly addNameRange number 2 { name: 'sigmund', range: '>=1.0.0-0 <1.1.0-0', hasData: true }
12134 silly addNameRange versions [ 'sigmund', [ '1.0.0' ] ]
12135 verbose addNamed [ 'sigmund', '1.0.0' ]
12136 verbose addNamed [ '1.0.0', '1.0.0' ]
12137 silly lockFile 7b2d1244-sigmund-1-0-0 sigmund@1.0.0
12138 verbose lock sigmund@1.0.0 C:\Users\Gaston\AppData\Roaming\npm-cache\7b2d1244-sigmund-1-0-0.lock
12139 silly lockFile 7b2d1244-sigmund-1-0-0 sigmund@1.0.0
12140 silly lockFile 7b2d1244-sigmund-1-0-0 sigmund@1.0.0
12141 silly lockFile 584a4a05-sigmund-1-0-0 sigmund@~1.0.0
12142 silly lockFile 584a4a05-sigmund-1-0-0 sigmund@~1.0.0
12143 silly addNameRange number 2 { name: 'lru-cache', range: '>=2.0.0-0 <3.0.0-0', hasData: true }
12144 silly addNameRange versions [ 'lru-cache',
12144 silly addNameRange   [ '1.0.1',
12144 silly addNameRange     '1.0.2',
12144 silly addNameRange     '1.0.3',
12144 silly addNameRange     '1.0.4',
12144 silly addNameRange     '1.0.5',
12144 silly addNameRange     '1.0.6',
12144 silly addNameRange     '1.1.0',
12144 silly addNameRange     '1.1.1',
12144 silly addNameRange     '2.0.0',
12144 silly addNameRange     '2.0.1',
12144 silly addNameRange     '2.0.2',
12144 silly addNameRange     '2.0.3',
12144 silly addNameRange     '2.0.4',
12144 silly addNameRange     '2.1.0',
12144 silly addNameRange     '2.2.0',
12144 silly addNameRange     '2.2.1',
12144 silly addNameRange     '2.2.2',
12144 silly addNameRange     '2.2.4',
12144 silly addNameRange     '2.3.0',
12144 silly addNameRange     '2.3.1',
12144 silly addNameRange     '2.5.0' ] ]
12145 verbose addNamed [ 'lru-cache', '2.5.0' ]
12146 verbose addNamed [ '2.5.0', '2.5.0' ]
12147 silly lockFile 30aa630e-lru-cache-2-5-0 lru-cache@2.5.0
12148 verbose lock lru-cache@2.5.0 C:\Users\Gaston\AppData\Roaming\npm-cache\30aa630e-lru-cache-2-5-0.lock
12149 silly lockFile 30aa630e-lru-cache-2-5-0 lru-cache@2.5.0
12150 silly lockFile 30aa630e-lru-cache-2-5-0 lru-cache@2.5.0
12151 silly lockFile b4f9d1ff-lru-cache-2 lru-cache@2
12152 silly lockFile b4f9d1ff-lru-cache-2 lru-cache@2
12153 silly resolved [ { name: 'sigmund',
12153 silly resolved     version: '1.0.0',
12153 silly resolved     description: 'Quick and dirty signatures for Objects.',
12153 silly resolved     main: 'sigmund.js',
12153 silly resolved     directories: { test: 'test' },
12153 silly resolved     dependencies: {},
12153 silly resolved     devDependencies: { tap: '~0.3.0' },
12153 silly resolved     scripts: { test: 'tap test/*.js', bench: 'node bench.js' },
12153 silly resolved     repository: { type: 'git', url: 'git://github.com/isaacs/sigmund' },
12153 silly resolved     keywords: [ 'object', 'signature', 'key', 'data', 'psychoanalysis' ],
12153 silly resolved     author:
12153 silly resolved      { name: 'Isaac Z. Schlueter',
12153 silly resolved        email: 'i@izs.me',
12153 silly resolved        url: 'http://blog.izs.me/' },
12153 silly resolved     license: 'BSD',
12153 silly resolved     readme: '# sigmund\n\nQuick and dirty signatures for Objects.\n\nThis is like a much faster `deepEquals` comparison, which returns a\nstring key suitable for caches and the like.\n\n## Usage\n\n```javascript\nfunction doSomething (someObj) {\n  var key = sigmund(someObj, maxDepth) // max depth defaults to 10\n  var cached = cache.get(key)\n  if (cached) return cached)\n\n  var result = expensiveCalculation(someObj)\n  cache.set(key, result)\n  return result\n}\n```\n\nThe resulting key will be as unique and reproducible as calling\n`JSON.stringify` or `util.inspect` on the object, but is much faster.\nIn order to achieve this speed, some differences are glossed over.\nFor example, the object `{0:\'foo\'}` will be treated identically to the\narray `[\'foo\']`.\n\nAlso, just as there is no way to summon the soul from the scribblings\nof a cocain-addled psychoanalyst, there is no way to revive the object\nfrom the signature string that sigmund gives you.  In fact, it\'s\nbarely even readable.\n\nAs with `sys.inspect` and `JSON.stringify`, larger objects will\nproduce larger signature strings.\n\nBecause sigmund is a bit less strict than the more thorough\nalternatives, the strings will be shorter, and also there is a\nslightly higher chance for collisions.  For example, these objects\nhave the same signature:\n\n    var obj1 = {a:\'b\',c:/def/,g:[\'h\',\'i\',{j:\'\',k:\'l\'}]}\n    var obj2 = {a:\'b\',c:\'/def/\',g:[\'h\',\'i\',\'{jkl\']}\n\nLike a good Freudian, sigmund is most effective when you already have\nsome understanding of what you\'re looking for.  It can help you help\nyourself, but you must be willing to do some work as well.\n\nCycles are handled, and cyclical objects are silently omitted (though\nthe key is included in the signature output.)\n\nThe second argument is the maximum depth, which defaults to 10,\nbecause that is the maximum object traversal depth covered by most\ninsurance carriers.\n',
12153 silly resolved     readmeFilename: 'README.md',
12153 silly resolved     bugs: { url: 'https://github.com/isaacs/sigmund/issues' },
12153 silly resolved     homepage: 'https://github.com/isaacs/sigmund',
12153 silly resolved     _id: 'sigmund@1.0.0',
12153 silly resolved     _from: 'sigmund@~1.0.0' },
12153 silly resolved   { name: 'lru-cache',
12153 silly resolved     description: 'A cache object that deletes the least-recently-used items.',
12153 silly resolved     version: '2.5.0',
12153 silly resolved     author: { name: 'Isaac Z. Schlueter', email: 'i@izs.me' },
12153 silly resolved     scripts: { test: 'tap test --gc' },
12153 silly resolved     main: 'lib/lru-cache.js',
12153 silly resolved     repository:
12153 silly resolved      { type: 'git',
12153 silly resolved        url: 'git://github.com/isaacs/node-lru-cache.git' },
12153 silly resolved     devDependencies: { tap: '', weak: '' },
12153 silly resolved     license:
12153 silly resolved      { type: 'MIT',
12153 silly resolved        url: 'http://github.com/isaacs/node-lru-cache/raw/master/LICENSE' },
12153 silly resolved     readme: '# lru cache\n\nA cache object that deletes the least-recently-used items.\n\n## Usage:\n\n```javascript\nvar LRU = require("lru-cache")\n  , options = { max: 500\n              , length: function (n) { return n * 2 }\n              , dispose: function (key, n) { n.close() }\n              , maxAge: 1000 * 60 * 60 }\n  , cache = LRU(options)\n  , otherCache = LRU(50) // sets just the max size\n\ncache.set("key", "value")\ncache.get("key") // "value"\n\ncache.reset()    // empty the cache\n```\n\nIf you put more stuff in it, then items will fall out.\n\nIf you try to put an oversized thing in it, then it\'ll fall out right\naway.\n\n## Options\n\n* `max` The maximum size of the cache, checked by applying the length\n  function to all values in the cache.  Not setting this is kind of\n  silly, since that\'s the whole purpose of this lib, but it defaults\n  to `Infinity`.\n* `maxAge` Maximum age in ms.  Items are not pro-actively pruned out\n  as they age, but if you try to get an item that is too old, it\'ll\n  drop it and return undefined instead of giving it to you.\n* `length` Function that is used to calculate the length of stored\n  items.  If you\'re storing strings or buffers, then you probably want\n  to do something like `function(n){return n.length}`.  The default is\n  `function(n){return 1}`, which is fine if you want to store `n`\n  like-sized things.\n* `dispose` Function that is called on items when they are dropped\n  from the cache.  This can be handy if you want to close file\n  descriptors or do other cleanup tasks when items are no longer\n  accessible.  Called with `key, value`.  It\'s called *before*\n  actually removing the item from the internal cache, so if you want\n  to immediately put it back in, you\'ll have to do that in a\n  `nextTick` or `setTimeout` callback or it won\'t do anything.\n* `stale` By default, if you set a `maxAge`, it\'ll only actually pull\n  stale items out of the cache when you `get(key)`.  (That is, it\'s\n  not pre-emptively doing a `setTimeout` or anything.)  If you set\n  `stale:true`, it\'ll return the stale value before deleting it.  If\n  you don\'t set this, then it\'ll return `undefined` when you try to\n  get a stale entry, as if it had already been deleted.\n\n## API\n\n* `set(key, value)`\n* `get(key) => value`\n\n    Both of these will update the "recently used"-ness of the key.\n    They do what you think.\n\n* `peek(key)`\n\n    Returns the key value (or `undefined` if not found) without\n    updating the "recently used"-ness of the key.\n\n    (If you find yourself using this a lot, you *might* be using the\n    wrong sort of data structure, but there are some use cases where\n    it\'s handy.)\n\n* `del(key)`\n\n    Deletes a key out of the cache.\n\n* `reset()`\n\n    Clear the cache entirely, throwing away all values.\n\n* `has(key)`\n\n    Check if a key is in the cache, without updating the recent-ness\n    or deleting it for being stale.\n\n* `forEach(function(value,key,cache), [thisp])`\n\n    Just like `Array.prototype.forEach`.  Iterates over all the keys\n    in the cache, in order of recent-ness.  (Ie, more recently used\n    items are iterated over first.)\n\n* `keys()`\n\n    Return an array of the keys in the cache.\n\n* `values()`\n\n    Return an array of the values in the cache.\n',
12153 silly resolved     readmeFilename: 'README.md',
12153 silly resolved     bugs: { url: 'https://github.com/isaacs/node-lru-cache/issues' },
12153 silly resolved     homepage: 'https://github.com/isaacs/node-lru-cache',
12153 silly resolved     _id: 'lru-cache@2.5.0',
12153 silly resolved     _from: 'lru-cache@2' } ]
12154 info install sigmund@1.0.0 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\minimatch
12155 info install lru-cache@2.5.0 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\minimatch
12156 info installOne sigmund@1.0.0
12157 info installOne lru-cache@2.5.0
12158 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\minimatch\node_modules\sigmund unbuild
12159 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\minimatch\node_modules\lru-cache unbuild
12160 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\sigmund\1.0.0\package.tgz
12161 silly lockFile c0b70e1a-s-minimatch-node-modules-sigmund tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\minimatch\node_modules\sigmund
12162 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\minimatch\node_modules\sigmund C:\Users\Gaston\AppData\Roaming\npm-cache\c0b70e1a-s-minimatch-node-modules-sigmund.lock
12163 silly lockFile d8e8b3e0--cache-sigmund-1-0-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\sigmund\1.0.0\package.tgz
12164 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\sigmund\1.0.0\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\d8e8b3e0--cache-sigmund-1-0-0-package-tgz.lock
12165 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\lru-cache\2.5.0\package.tgz
12166 silly lockFile 051b27c1-minimatch-node-modules-lru-cache tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\minimatch\node_modules\lru-cache
12167 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\minimatch\node_modules\lru-cache C:\Users\Gaston\AppData\Roaming\npm-cache\051b27c1-minimatch-node-modules-lru-cache.lock
12168 silly lockFile 7ace0446-ache-lru-cache-2-5-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\lru-cache\2.5.0\package.tgz
12169 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\lru-cache\2.5.0\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\7ace0446-ache-lru-cache-2-5-0-package-tgz.lock
12170 silly gunzTarPerm modes [ '755', '644' ]
12171 silly gunzTarPerm modes [ '755', '644' ]
12172 silly gunzTarPerm extractEntry package.json
12173 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
12174 silly gunzTarPerm extractEntry package.json
12175 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
12176 silly gunzTarPerm extractEntry README.md
12177 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
12178 silly gunzTarPerm extractEntry LICENSE
12179 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
12180 silly gunzTarPerm extractEntry .npmignore
12181 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
12182 silly gunzTarPerm extractEntry README.md
12183 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
12184 silly gunzTarPerm extractEntry bench.js
12185 silly gunzTarPerm modified mode [ 'bench.js', 438, 420 ]
12186 silly gunzTarPerm extractEntry sigmund.js
12187 silly gunzTarPerm modified mode [ 'sigmund.js', 438, 420 ]
12188 silly gunzTarPerm extractEntry LICENSE
12189 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
12190 silly gunzTarPerm extractEntry CONTRIBUTORS
12191 silly gunzTarPerm modified mode [ 'CONTRIBUTORS', 438, 420 ]
12192 silly gunzTarPerm extractEntry lib/lru-cache.js
12193 silly gunzTarPerm modified mode [ 'lib/lru-cache.js', 438, 420 ]
12194 silly gunzTarPerm extractEntry test/basic.js
12195 silly gunzTarPerm modified mode [ 'test/basic.js', 438, 420 ]
12196 silly gunzTarPerm extractEntry test/foreach.js
12197 silly gunzTarPerm modified mode [ 'test/foreach.js', 438, 420 ]
12198 silly gunzTarPerm extractEntry test/memory-leak.js
12199 silly gunzTarPerm modified mode [ 'test/memory-leak.js', 438, 420 ]
12200 silly gunzTarPerm extractEntry test/basic.js
12201 silly gunzTarPerm modified mode [ 'test/basic.js', 438, 420 ]
12202 http 304 https://registry.npmjs.org/graceful-fs
12203 silly registry.get cb [ 304,
12203 silly registry.get   { date: 'Fri, 03 Jan 2014 19:39:28 GMT',
12203 silly registry.get     server: 'Apache',
12203 silly registry.get     connection: 'Keep-Alive',
12203 silly registry.get     'keep-alive': 'timeout=10, max=49',
12203 silly registry.get     etag: '"CD9PAXA6045JPCERIXC2VPOQH"',
12203 silly registry.get     vary: 'Accept' } ]
12204 verbose etag graceful-fs from cache
12205 silly lockFile c0b70e1a-s-minimatch-node-modules-sigmund tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\minimatch\node_modules\sigmund
12206 silly lockFile c0b70e1a-s-minimatch-node-modules-sigmund tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\minimatch\node_modules\sigmund
12207 silly lockFile d8e8b3e0--cache-sigmund-1-0-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\sigmund\1.0.0\package.tgz
12208 silly lockFile d8e8b3e0--cache-sigmund-1-0-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\sigmund\1.0.0\package.tgz
12209 info preinstall sigmund@1.0.0
12210 http 304 https://registry.npmjs.org/inherits
12211 silly registry.get cb [ 304,
12211 silly registry.get   { date: 'Fri, 03 Jan 2014 19:39:28 GMT',
12211 silly registry.get     server: 'Apache',
12211 silly registry.get     connection: 'Keep-Alive',
12211 silly registry.get     'keep-alive': 'timeout=10, max=49',
12211 silly registry.get     etag: '"6GND9JGNFJBVB470HZYXMNR4P"',
12211 silly registry.get     vary: 'Accept' } ]
12212 verbose etag inherits from cache
12213 verbose readDependencies using package.json deps
12214 verbose readDependencies using package.json deps
12215 silly resolved []
12216 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\minimatch\node_modules\sigmund
12217 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\minimatch\node_modules\sigmund
12218 verbose linkStuff [ false,
12218 verbose linkStuff   false,
12218 verbose linkStuff   false,
12218 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-contrib-watch\\node_modules\\gaze\\node_modules\\globule\\node_modules\\minimatch\\node_modules' ]
12219 info linkStuff sigmund@1.0.0
12220 verbose linkBins sigmund@1.0.0
12221 verbose linkMans sigmund@1.0.0
12222 verbose rebuildBundles sigmund@1.0.0
12223 info install sigmund@1.0.0
12224 info postinstall sigmund@1.0.0
12225 silly addNameRange number 2 { name: 'inherits', range: '>=1.0.0-0 <2.0.0-0', hasData: true }
12226 silly addNameRange versions [ 'inherits', [ '1.0.0', '2.0.0', '2.0.1' ] ]
12227 verbose addNamed [ 'inherits', '1.0.0' ]
12228 verbose addNamed [ '1.0.0', '1.0.0' ]
12229 silly lockFile 776fbe77-inherits-1-0-0 inherits@1.0.0
12230 verbose lock inherits@1.0.0 C:\Users\Gaston\AppData\Roaming\npm-cache\776fbe77-inherits-1-0-0.lock
12231 silly addNameRange number 2 { name: 'graceful-fs',
12231 silly addNameRange   range: '>=1.2.0-0 <1.3.0-0',
12231 silly addNameRange   hasData: true }
12232 silly addNameRange versions [ 'graceful-fs',
12232 silly addNameRange   [ '1.0.0',
12232 silly addNameRange     '1.0.1',
12232 silly addNameRange     '1.0.2',
12232 silly addNameRange     '1.1.0',
12232 silly addNameRange     '1.1.1',
12232 silly addNameRange     '1.1.2',
12232 silly addNameRange     '1.1.3',
12232 silly addNameRange     '1.1.4',
12232 silly addNameRange     '1.1.5',
12232 silly addNameRange     '1.1.6',
12232 silly addNameRange     '1.1.7',
12232 silly addNameRange     '1.1.8',
12232 silly addNameRange     '1.1.9',
12232 silly addNameRange     '1.1.10',
12232 silly addNameRange     '1.1.11',
12232 silly addNameRange     '1.1.12',
12232 silly addNameRange     '1.1.13',
12232 silly addNameRange     '1.1.14',
12232 silly addNameRange     '1.2.0',
12232 silly addNameRange     '1.2.1',
12232 silly addNameRange     '1.2.2',
12232 silly addNameRange     '1.2.3',
12232 silly addNameRange     '2.0.0',
12232 silly addNameRange     '2.0.1' ] ]
12233 verbose addNamed [ 'graceful-fs', '1.2.3' ]
12234 verbose addNamed [ '1.2.3', '1.2.3' ]
12235 silly lockFile 6c7102cf-graceful-fs-1-2-3 graceful-fs@1.2.3
12236 verbose lock graceful-fs@1.2.3 C:\Users\Gaston\AppData\Roaming\npm-cache\6c7102cf-graceful-fs-1-2-3.lock
12237 silly lockFile 776fbe77-inherits-1-0-0 inherits@1.0.0
12238 silly lockFile 776fbe77-inherits-1-0-0 inherits@1.0.0
12239 silly lockFile 4bca46d0-inherits-1 inherits@1
12240 silly lockFile 4bca46d0-inherits-1 inherits@1
12241 silly lockFile 6c7102cf-graceful-fs-1-2-3 graceful-fs@1.2.3
12242 silly lockFile 6c7102cf-graceful-fs-1-2-3 graceful-fs@1.2.3
12243 silly lockFile 9c0bb906-graceful-fs-1-2-0 graceful-fs@~1.2.0
12244 silly lockFile 9c0bb906-graceful-fs-1-2-0 graceful-fs@~1.2.0
12245 silly resolved [ { name: 'inherits',
12245 silly resolved     description: 'A tiny simple way to do classic inheritance in js',
12245 silly resolved     version: '1.0.0',
12245 silly resolved     keywords: [ 'inheritance', 'class', 'klass', 'oop', 'object-oriented' ],
12245 silly resolved     main: './inherits.js',
12245 silly resolved     repository: { type: 'git', url: 'https://github.com/isaacs/inherits' },
12245 silly resolved     author:
12245 silly resolved      { name: 'Isaac Z. Schlueter',
12245 silly resolved        email: 'i@izs.me',
12245 silly resolved        url: 'http://blog.izs.me/' },
12245 silly resolved     readme: 'A dead simple way to do inheritance in JS.\n\n    var inherits = require("inherits")\n\n    function Animal () {\n      this.alive = true\n    }\n    Animal.prototype.say = function (what) {\n      console.log(what)\n    }\n\n    inherits(Dog, Animal)\n    function Dog () {\n      Dog.super.apply(this)\n    }\n    Dog.prototype.sniff = function () {\n      this.say("sniff sniff")\n    }\n    Dog.prototype.bark = function () {\n      this.say("woof woof")\n    }\n\n    inherits(Chihuahua, Dog)\n    function Chihuahua () {\n      Chihuahua.super.apply(this)\n    }\n    Chihuahua.prototype.bark = function () {\n      this.say("yip yip")\n    }\n\n    // also works\n    function Cat () {\n      Cat.super.apply(this)\n    }\n    Cat.prototype.hiss = function () {\n      this.say("CHSKKSS!!")\n    }\n    inherits(Cat, Animal, {\n      meow: function () { this.say("miao miao") }\n    })\n    Cat.prototype.purr = function () {\n      this.say("purr purr")\n    }\n\n\n    var c = new Chihuahua\n    assert(c instanceof Chihuahua)\n    assert(c instanceof Dog)\n    assert(c instanceof Animal)\n\nThe actual function is laughably small.  10-lines small.\n',
12245 silly resolved     readmeFilename: 'README.md',
12245 silly resolved     bugs: { url: 'https://github.com/isaacs/inherits/issues' },
12245 silly resolved     homepage: 'https://github.com/isaacs/inherits',
12245 silly resolved     _id: 'inherits@1.0.0',
12245 silly resolved     _from: 'inherits@1',
12245 silly resolved     scripts: {} },
12245 silly resolved   { author:
12245 silly resolved      { name: 'Isaac Z. Schlueter',
12245 silly resolved        email: 'i@izs.me',
12245 silly resolved        url: 'http://blog.izs.me' },
12245 silly resolved     name: 'graceful-fs',
12245 silly resolved     description: 'A drop-in replacement for fs, making various improvements.',
12245 silly resolved     version: '1.2.3',
12245 silly resolved     repository:
12245 silly resolved      { type: 'git',
12245 silly resolved        url: 'git://github.com/isaacs/node-graceful-fs.git' },
12245 silly resolved     main: 'graceful-fs.js',
12245 silly resolved     engines: { node: '>=0.4.0' },
12245 silly resolved     directories: { test: 'test' },
12245 silly resolved     scripts: { test: 'tap test/*.js' },
12245 silly resolved     keywords:
12245 silly resolved      [ 'fs',
12245 silly resolved        'module',
12245 silly resolved        'reading',
12245 silly resolved        'retry',
12245 silly resolved        'retries',
12245 silly resolved        'queue',
12245 silly resolved        'error',
12245 silly resolved        'errors',
12245 silly resolved        'handling',
12245 silly resolved        'EMFILE',
12245 silly resolved        'EAGAIN',
12245 silly resolved        'EINVAL',
12245 silly resolved        'EPERM',
12245 silly resolved        'EACCESS' ],
12245 silly resolved     license: 'BSD',
12245 silly resolved     readme: '# graceful-fs\n\ngraceful-fs functions as a drop-in replacement for the fs module,\nmaking various improvements.\n\nThe improvements are meant to normalize behavior across different\nplatforms and environments, and to make filesystem access more\nresilient to errors.\n\n## Improvements over fs module\n\ngraceful-fs:\n\n* keeps track of how many file descriptors are open, and by default\n  limits this to 1024. Any further requests to open a file are put in a\n  queue until new slots become available. If 1024 turns out to be too\n  much, it decreases the limit further.\n* fixes `lchmod` for Node versions prior to 0.6.2.\n* implements `fs.lutimes` if possible. Otherwise it becomes a noop.\n* ignores `EINVAL` and `EPERM` errors in `chown`, `fchown` or\n  `lchown` if the user isn\'t root.\n* makes `lchmod` and `lchown` become noops, if not available.\n* retries reading a file if `read` results in EAGAIN error.\n\nOn Windows, it retries renaming a file for up to one second if `EACCESS`\nor `EPERM` error occurs, likely because antivirus software has locked\nthe directory.\n\n## Configuration\n\nThe maximum number of open file descriptors that graceful-fs manages may\nbe adjusted by setting `fs.MAX_OPEN` to a different number. The default\nis 1024.\n',
12245 silly resolved     readmeFilename: 'README.md',
12245 silly resolved     bugs: { url: 'https://github.com/isaacs/node-graceful-fs/issues' },
12245 silly resolved     homepage: 'https://github.com/isaacs/node-graceful-fs',
12245 silly resolved     _id: 'graceful-fs@1.2.3',
12245 silly resolved     _from: 'graceful-fs@~1.2.0' } ]
12246 info install inherits@1.0.0 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\glob
12247 info install graceful-fs@1.2.3 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\glob
12248 info installOne inherits@1.0.0
12249 info installOne graceful-fs@1.2.3
12250 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\glob\node_modules\inherits unbuild
12251 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\glob\node_modules\graceful-fs unbuild
12252 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\inherits\1.0.0\package.tgz
12253 silly lockFile 4e083ac5-dules-glob-node-modules-inherits tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\glob\node_modules\inherits
12254 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\glob\node_modules\inherits C:\Users\Gaston\AppData\Roaming\npm-cache\4e083ac5-dules-glob-node-modules-inherits.lock
12255 silly lockFile ce1a2c46-cache-inherits-1-0-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\inherits\1.0.0\package.tgz
12256 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\inherits\1.0.0\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\ce1a2c46-cache-inherits-1-0-0-package-tgz.lock
12257 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\graceful-fs\1.2.3\package.tgz
12258 silly lockFile a125b4bc-es-glob-node-modules-graceful-fs tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\glob\node_modules\graceful-fs
12259 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\glob\node_modules\graceful-fs C:\Users\Gaston\AppData\Roaming\npm-cache\a125b4bc-es-glob-node-modules-graceful-fs.lock
12260 silly lockFile 5425704d-he-graceful-fs-1-2-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\graceful-fs\1.2.3\package.tgz
12261 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\graceful-fs\1.2.3\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\5425704d-he-graceful-fs-1-2-3-package-tgz.lock
12262 silly gunzTarPerm modes [ '755', '644' ]
12263 silly gunzTarPerm modes [ '755', '644' ]
12264 silly gunzTarPerm extractEntry package.json
12265 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
12266 silly gunzTarPerm extractEntry package.json
12267 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
12268 silly gunzTarPerm extractEntry README.md
12269 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
12270 silly gunzTarPerm extractEntry inherits.js
12271 silly gunzTarPerm modified mode [ 'inherits.js', 438, 420 ]
12272 silly gunzTarPerm extractEntry .npmignore
12273 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
12274 silly gunzTarPerm extractEntry README.md
12275 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
12276 silly gunzTarPerm extractEntry LICENSE
12277 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
12278 silly gunzTarPerm extractEntry graceful-fs.js
12279 silly gunzTarPerm modified mode [ 'graceful-fs.js', 438, 420 ]
12280 silly gunzTarPerm extractEntry test/open.js
12281 silly gunzTarPerm modified mode [ 'test/open.js', 438, 420 ]
12282 silly gunzTarPerm extractEntry test/ulimit.js
12283 silly gunzTarPerm modified mode [ 'test/ulimit.js', 438, 420 ]
12284 silly lockFile 051b27c1-minimatch-node-modules-lru-cache tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\minimatch\node_modules\lru-cache
12285 silly lockFile 051b27c1-minimatch-node-modules-lru-cache tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\minimatch\node_modules\lru-cache
12286 silly lockFile 8169deca-ules-globule-node-modules-lodash tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\lodash
12287 silly lockFile 8169deca-ules-globule-node-modules-lodash tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\lodash
12288 silly lockFile 7ace0446-ache-lru-cache-2-5-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\lru-cache\2.5.0\package.tgz
12289 silly lockFile 7ace0446-ache-lru-cache-2-5-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\lru-cache\2.5.0\package.tgz
12290 silly lockFile f5ae224a-m-cache-lodash-1-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\lodash\1.0.1\package.tgz
12291 silly lockFile f5ae224a-m-cache-lodash-1-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\lodash\1.0.1\package.tgz
12292 silly lockFile 4e083ac5-dules-glob-node-modules-inherits tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\glob\node_modules\inherits
12293 silly lockFile 4e083ac5-dules-glob-node-modules-inherits tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\glob\node_modules\inherits
12294 silly lockFile ce1a2c46-cache-inherits-1-0-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\inherits\1.0.0\package.tgz
12295 silly lockFile ce1a2c46-cache-inherits-1-0-0-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\inherits\1.0.0\package.tgz
12296 info preinstall lru-cache@2.5.0
12297 info preinstall inherits@1.0.0
12298 info preinstall lodash@1.0.1
12299 verbose readDependencies using package.json deps
12300 verbose readDependencies using package.json deps
12301 silly resolved []
12302 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\minimatch\node_modules\lru-cache
12303 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\minimatch\node_modules\lru-cache
12304 verbose linkStuff [ false,
12304 verbose linkStuff   false,
12304 verbose linkStuff   false,
12304 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-contrib-watch\\node_modules\\gaze\\node_modules\\globule\\node_modules\\minimatch\\node_modules' ]
12305 info linkStuff lru-cache@2.5.0
12306 verbose linkBins lru-cache@2.5.0
12307 verbose linkMans lru-cache@2.5.0
12308 verbose rebuildBundles lru-cache@2.5.0
12309 verbose readDependencies using package.json deps
12310 verbose readDependencies using package.json deps
12311 info install lru-cache@2.5.0
12312 verbose readDependencies using package.json deps
12313 silly resolved []
12314 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\glob\node_modules\inherits
12315 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\glob\node_modules\inherits
12316 verbose linkStuff [ false,
12316 verbose linkStuff   false,
12316 verbose linkStuff   false,
12316 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-contrib-watch\\node_modules\\gaze\\node_modules\\globule\\node_modules\\glob\\node_modules' ]
12317 info linkStuff inherits@1.0.0
12318 verbose linkBins inherits@1.0.0
12319 verbose linkMans inherits@1.0.0
12320 verbose rebuildBundles inherits@1.0.0
12321 verbose readDependencies using package.json deps
12322 silly resolved []
12323 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\lodash
12324 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\lodash
12325 verbose linkStuff [ false,
12325 verbose linkStuff   false,
12325 verbose linkStuff   false,
12325 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-contrib-watch\\node_modules\\gaze\\node_modules\\globule\\node_modules' ]
12326 info linkStuff lodash@1.0.1
12327 verbose linkBins lodash@1.0.1
12328 verbose linkMans lodash@1.0.1
12329 verbose rebuildBundles lodash@1.0.1
12330 info install inherits@1.0.0
12331 info install lodash@1.0.1
12332 info postinstall lru-cache@2.5.0
12333 info postinstall inherits@1.0.0
12334 info postinstall lodash@1.0.1
12335 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\minimatch
12336 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\minimatch
12337 verbose linkStuff [ false,
12337 verbose linkStuff   false,
12337 verbose linkStuff   false,
12337 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-contrib-watch\\node_modules\\gaze\\node_modules\\globule\\node_modules' ]
12338 info linkStuff minimatch@0.2.14
12339 verbose linkBins minimatch@0.2.14
12340 verbose linkMans minimatch@0.2.14
12341 verbose rebuildBundles minimatch@0.2.14
12342 verbose rebuildBundles [ 'lru-cache', 'sigmund' ]
12343 info install minimatch@0.2.14
12344 info postinstall minimatch@0.2.14
12345 silly lockFile a125b4bc-es-glob-node-modules-graceful-fs tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\glob\node_modules\graceful-fs
12346 silly lockFile a125b4bc-es-glob-node-modules-graceful-fs tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\glob\node_modules\graceful-fs
12347 silly lockFile 5425704d-he-graceful-fs-1-2-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\graceful-fs\1.2.3\package.tgz
12348 silly lockFile 5425704d-he-graceful-fs-1-2-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\graceful-fs\1.2.3\package.tgz
12349 info preinstall graceful-fs@1.2.3
12350 verbose readDependencies using package.json deps
12351 verbose readDependencies using package.json deps
12352 silly resolved []
12353 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\glob\node_modules\graceful-fs
12354 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\glob\node_modules\graceful-fs
12355 verbose linkStuff [ false,
12355 verbose linkStuff   false,
12355 verbose linkStuff   false,
12355 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-contrib-watch\\node_modules\\gaze\\node_modules\\globule\\node_modules\\glob\\node_modules' ]
12356 info linkStuff graceful-fs@1.2.3
12357 verbose linkBins graceful-fs@1.2.3
12358 verbose linkMans graceful-fs@1.2.3
12359 verbose rebuildBundles graceful-fs@1.2.3
12360 info install graceful-fs@1.2.3
12361 info postinstall graceful-fs@1.2.3
12362 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\glob
12363 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule\node_modules\glob
12364 verbose linkStuff [ false,
12364 verbose linkStuff   false,
12364 verbose linkStuff   false,
12364 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-contrib-watch\\node_modules\\gaze\\node_modules\\globule\\node_modules' ]
12365 info linkStuff glob@3.1.21
12366 verbose linkBins glob@3.1.21
12367 verbose linkMans glob@3.1.21
12368 verbose rebuildBundles glob@3.1.21
12369 verbose rebuildBundles [ 'graceful-fs', 'inherits' ]
12370 info install glob@3.1.21
12371 info postinstall glob@3.1.21
12372 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule
12373 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze\node_modules\globule
12374 verbose linkStuff [ false,
12374 verbose linkStuff   false,
12374 verbose linkStuff   false,
12374 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-contrib-watch\\node_modules\\gaze\\node_modules' ]
12375 info linkStuff globule@0.1.0
12376 verbose linkBins globule@0.1.0
12377 verbose linkMans globule@0.1.0
12378 verbose rebuildBundles globule@0.1.0
12379 verbose rebuildBundles [ 'glob', 'lodash', 'minimatch' ]
12380 info install globule@0.1.0
12381 info postinstall globule@0.1.0
12382 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze
12383 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\gaze
12384 verbose linkStuff [ false,
12384 verbose linkStuff   false,
12384 verbose linkStuff   false,
12384 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-contrib-watch\\node_modules' ]
12385 info linkStuff gaze@0.4.3
12386 verbose linkBins gaze@0.4.3
12387 verbose linkMans gaze@0.4.3
12388 verbose rebuildBundles gaze@0.4.3
12389 verbose rebuildBundles [ 'globule' ]
12390 info install gaze@0.4.3
12391 info postinstall gaze@0.4.3
12392 http 200 https://registry.npmjs.org/uglify-js/-/uglify-js-2.4.8.tgz
12393 info retry fetch attempt 3 at 16:40:28
12394 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777934778-0.7069363200571388\tmp.tgz
12395 http GET https://registry.npmjs.org/js-yaml/-/js-yaml-2.0.5.tgz
12396 http 200 https://registry.npmjs.org/js-yaml/-/js-yaml-2.0.5.tgz
12397 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777934778-0.7069363200571388\tmp.tgz
12398 silly lockFile 70216ed7-34778-0-7069363200571388-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777934778-0.7069363200571388\package
12399 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777934778-0.7069363200571388\package C:\Users\Gaston\AppData\Roaming\npm-cache\70216ed7-34778-0-7069363200571388-package.lock
12400 silly lockFile eb2c58a5-34778-0-7069363200571388-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777934778-0.7069363200571388\tmp.tgz
12401 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777934778-0.7069363200571388\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\eb2c58a5-34778-0-7069363200571388-tmp-tgz.lock
12402 silly gunzTarPerm modes [ '755', '644' ]
12403 silly gunzTarPerm extractEntry package.json
12404 silly gunzTarPerm extractEntry README.md
12405 silly gunzTarPerm extractEntry LICENSE
12406 silly gunzTarPerm extractEntry index.js
12407 silly gunzTarPerm extractEntry bin/js-yaml.js
12408 silly gunzTarPerm extractEntry HISTORY.md
12409 silly gunzTarPerm extractEntry lib/js-yaml.js
12410 silly gunzTarPerm extractEntry lib/js-yaml/loader.js
12411 silly gunzTarPerm extractEntry lib/js-yaml/dumper.js
12412 silly gunzTarPerm extractEntry lib/js-yaml/schema.js
12413 silly gunzTarPerm extractEntry lib/js-yaml/common.js
12414 silly gunzTarPerm extractEntry lib/js-yaml/type.js
12415 silly gunzTarPerm extractEntry lib/js-yaml/exception.js
12416 silly gunzTarPerm extractEntry lib/js-yaml/require.js
12417 silly gunzTarPerm extractEntry lib/js-yaml/mark.js
12418 silly gunzTarPerm extractEntry lib/js-yaml/type/omap.js
12419 silly gunzTarPerm extractEntry lib/js-yaml/type/map.js
12420 silly gunzTarPerm extractEntry lib/js-yaml/type/binary.js
12421 silly gunzTarPerm extractEntry lib/js-yaml/type/timestamp.js
12422 silly gunzTarPerm extractEntry lib/js-yaml/type/pairs.js
12423 silly gunzTarPerm extractEntry lib/js-yaml/type/set.js
12424 silly gunzTarPerm extractEntry lib/js-yaml/type/seq.js
12425 silly gunzTarPerm extractEntry lib/js-yaml/type/null.js
12426 silly gunzTarPerm extractEntry lib/js-yaml/type/str.js
12427 silly gunzTarPerm extractEntry lib/js-yaml/type/int.js
12428 silly gunzTarPerm extractEntry lib/js-yaml/type/float.js
12429 silly gunzTarPerm extractEntry lib/js-yaml/type/bool.js
12430 silly gunzTarPerm extractEntry lib/js-yaml/type/merge.js
12431 silly gunzTarPerm extractEntry lib/js-yaml/type/js/regexp.js
12432 silly gunzTarPerm extractEntry lib/js-yaml/type/js/undefined.js
12433 silly gunzTarPerm extractEntry lib/js-yaml/type/js/function.js
12434 silly gunzTarPerm extractEntry lib/js-yaml/schema/safe.js
12435 silly gunzTarPerm extractEntry lib/js-yaml/schema/default.js
12436 silly gunzTarPerm extractEntry lib/js-yaml/schema/minimal.js
12437 silly gunzTarPerm extractEntry examples/dumper.js
12438 silly gunzTarPerm extractEntry examples/sample_document.js
12439 silly gunzTarPerm extractEntry examples/custom_types.js
12440 silly gunzTarPerm extractEntry examples/sample_document.yaml
12441 silly gunzTarPerm extractEntry examples/custom_types.yaml
12442 silly gunzTarPerm extractEntry examples/dumper.json
12443 silly lockFile 70216ed7-34778-0-7069363200571388-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777934778-0.7069363200571388\package
12444 silly lockFile 70216ed7-34778-0-7069363200571388-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777934778-0.7069363200571388\package
12445 silly lockFile eb2c58a5-34778-0-7069363200571388-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777934778-0.7069363200571388\tmp.tgz
12446 silly lockFile eb2c58a5-34778-0-7069363200571388-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777934778-0.7069363200571388\tmp.tgz
12447 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\js-yaml\\2.0.5\\package.tgz',
12447 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388777934778-0.7069363200571388\\package' ]
12448 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\js-yaml\2.0.5\package.tgz
12449 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777934778-0.7069363200571388\package
12450 silly lockFile 70216ed7-34778-0-7069363200571388-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777934778-0.7069363200571388\package
12451 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777934778-0.7069363200571388\package C:\Users\Gaston\AppData\Roaming\npm-cache\70216ed7-34778-0-7069363200571388-package.lock
12452 silly lockFile 8835378c--cache-js-yaml-2-0-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\js-yaml\2.0.5\package.tgz
12453 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\js-yaml\2.0.5\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\8835378c--cache-js-yaml-2-0-5-package-tgz.lock
12454 silly lockFile 70216ed7-34778-0-7069363200571388-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777934778-0.7069363200571388\package
12455 silly lockFile 70216ed7-34778-0-7069363200571388-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388777934778-0.7069363200571388\package
12456 silly lockFile 8835378c--cache-js-yaml-2-0-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\js-yaml\2.0.5\package.tgz
12457 silly lockFile 8835378c--cache-js-yaml-2-0-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\js-yaml\2.0.5\package.tgz
12458 silly lockFile 96d7c433--npm-cache-js-yaml-2-0-5-package C:\Users\Gaston\AppData\Roaming\npm-cache\js-yaml\2.0.5\package
12459 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\js-yaml\2.0.5\package C:\Users\Gaston\AppData\Roaming\npm-cache\96d7c433--npm-cache-js-yaml-2-0-5-package.lock
12460 silly lockFile 96d7c433--npm-cache-js-yaml-2-0-5-package C:\Users\Gaston\AppData\Roaming\npm-cache\js-yaml\2.0.5\package
12461 silly lockFile 96d7c433--npm-cache-js-yaml-2-0-5-package C:\Users\Gaston\AppData\Roaming\npm-cache\js-yaml\2.0.5\package
12462 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\js-yaml\2.0.5\package.tgz
12463 silly lockFile 473221b6--npm-cache-js-yaml-2-0-5-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\js-yaml\2.0.5\package
12464 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\js-yaml\2.0.5\package C:\Users\Gaston\AppData\Roaming\npm-cache\473221b6--npm-cache-js-yaml-2-0-5-package.lock
12465 silly lockFile 8835378c--cache-js-yaml-2-0-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\js-yaml\2.0.5\package.tgz
12466 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\js-yaml\2.0.5\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\8835378c--cache-js-yaml-2-0-5-package-tgz.lock
12467 silly gunzTarPerm modes [ '755', '644' ]
12468 silly gunzTarPerm extractEntry package.json
12469 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
12470 silly gunzTarPerm extractEntry README.md
12471 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
12472 silly gunzTarPerm extractEntry LICENSE
12473 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
12474 silly gunzTarPerm extractEntry index.js
12475 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
12476 silly gunzTarPerm extractEntry bin/js-yaml.js
12477 silly gunzTarPerm modified mode [ 'bin/js-yaml.js', 438, 420 ]
12478 silly gunzTarPerm extractEntry examples/custom_types.js
12479 silly gunzTarPerm modified mode [ 'examples/custom_types.js', 438, 420 ]
12480 silly gunzTarPerm extractEntry examples/dumper.js
12481 silly gunzTarPerm modified mode [ 'examples/dumper.js', 438, 420 ]
12482 silly gunzTarPerm extractEntry examples/sample_document.js
12483 silly gunzTarPerm modified mode [ 'examples/sample_document.js', 438, 420 ]
12484 silly gunzTarPerm extractEntry examples/custom_types.yaml
12485 silly gunzTarPerm modified mode [ 'examples/custom_types.yaml', 438, 420 ]
12486 silly gunzTarPerm extractEntry examples/dumper.json
12487 silly gunzTarPerm modified mode [ 'examples/dumper.json', 438, 420 ]
12488 silly gunzTarPerm extractEntry examples/sample_document.yaml
12489 silly gunzTarPerm modified mode [ 'examples/sample_document.yaml', 438, 420 ]
12490 silly gunzTarPerm extractEntry HISTORY.md
12491 silly gunzTarPerm modified mode [ 'HISTORY.md', 438, 420 ]
12492 silly gunzTarPerm extractEntry lib/js-yaml.js
12493 silly gunzTarPerm modified mode [ 'lib/js-yaml.js', 438, 420 ]
12494 silly gunzTarPerm extractEntry lib/js-yaml/common.js
12495 silly gunzTarPerm modified mode [ 'lib/js-yaml/common.js', 438, 420 ]
12496 silly gunzTarPerm extractEntry lib/js-yaml/dumper.js
12497 silly gunzTarPerm modified mode [ 'lib/js-yaml/dumper.js', 438, 420 ]
12498 silly gunzTarPerm extractEntry lib/js-yaml/exception.js
12499 silly gunzTarPerm modified mode [ 'lib/js-yaml/exception.js', 438, 420 ]
12500 silly gunzTarPerm extractEntry lib/js-yaml/loader.js
12501 silly gunzTarPerm modified mode [ 'lib/js-yaml/loader.js', 438, 420 ]
12502 silly gunzTarPerm extractEntry lib/js-yaml/mark.js
12503 silly gunzTarPerm modified mode [ 'lib/js-yaml/mark.js', 438, 420 ]
12504 silly gunzTarPerm extractEntry lib/js-yaml/require.js
12505 silly gunzTarPerm modified mode [ 'lib/js-yaml/require.js', 438, 420 ]
12506 silly gunzTarPerm extractEntry lib/js-yaml/schema.js
12507 silly gunzTarPerm modified mode [ 'lib/js-yaml/schema.js', 438, 420 ]
12508 silly gunzTarPerm extractEntry lib/js-yaml/type.js
12509 silly gunzTarPerm modified mode [ 'lib/js-yaml/type.js', 438, 420 ]
12510 silly gunzTarPerm extractEntry lib/js-yaml/schema/default.js
12511 silly gunzTarPerm modified mode [ 'lib/js-yaml/schema/default.js', 438, 420 ]
12512 silly gunzTarPerm extractEntry lib/js-yaml/schema/minimal.js
12513 silly gunzTarPerm modified mode [ 'lib/js-yaml/schema/minimal.js', 438, 420 ]
12514 silly gunzTarPerm extractEntry lib/js-yaml/schema/safe.js
12515 silly gunzTarPerm modified mode [ 'lib/js-yaml/schema/safe.js', 438, 420 ]
12516 silly gunzTarPerm extractEntry lib/js-yaml/type/binary.js
12517 silly gunzTarPerm modified mode [ 'lib/js-yaml/type/binary.js', 438, 420 ]
12518 silly gunzTarPerm extractEntry lib/js-yaml/type/int.js
12519 silly gunzTarPerm modified mode [ 'lib/js-yaml/type/int.js', 438, 420 ]
12520 silly gunzTarPerm extractEntry lib/js-yaml/type/str.js
12521 silly gunzTarPerm modified mode [ 'lib/js-yaml/type/str.js', 438, 420 ]
12522 silly gunzTarPerm extractEntry lib/js-yaml/type/map.js
12523 silly gunzTarPerm modified mode [ 'lib/js-yaml/type/map.js', 438, 420 ]
12524 silly gunzTarPerm extractEntry lib/js-yaml/type/float.js
12525 silly gunzTarPerm modified mode [ 'lib/js-yaml/type/float.js', 438, 420 ]
12526 silly gunzTarPerm extractEntry lib/js-yaml/type/bool.js
12527 silly gunzTarPerm modified mode [ 'lib/js-yaml/type/bool.js', 438, 420 ]
12528 silly gunzTarPerm extractEntry lib/js-yaml/type/omap.js
12529 silly gunzTarPerm modified mode [ 'lib/js-yaml/type/omap.js', 438, 420 ]
12530 silly gunzTarPerm extractEntry lib/js-yaml/type/pairs.js
12531 silly gunzTarPerm modified mode [ 'lib/js-yaml/type/pairs.js', 438, 420 ]
12532 silly gunzTarPerm extractEntry lib/js-yaml/type/seq.js
12533 silly gunzTarPerm modified mode [ 'lib/js-yaml/type/seq.js', 438, 420 ]
12534 silly gunzTarPerm extractEntry lib/js-yaml/type/set.js
12535 silly gunzTarPerm modified mode [ 'lib/js-yaml/type/set.js', 438, 420 ]
12536 silly gunzTarPerm extractEntry lib/js-yaml/type/merge.js
12537 silly gunzTarPerm modified mode [ 'lib/js-yaml/type/merge.js', 438, 420 ]
12538 silly gunzTarPerm extractEntry lib/js-yaml/type/timestamp.js
12539 silly gunzTarPerm modified mode [ 'lib/js-yaml/type/timestamp.js', 438, 420 ]
12540 silly gunzTarPerm extractEntry lib/js-yaml/type/null.js
12541 silly gunzTarPerm modified mode [ 'lib/js-yaml/type/null.js', 438, 420 ]
12542 silly gunzTarPerm extractEntry lib/js-yaml/type/js/function.js
12543 silly gunzTarPerm modified mode [ 'lib/js-yaml/type/js/function.js', 438, 420 ]
12544 silly gunzTarPerm extractEntry lib/js-yaml/type/js/regexp.js
12545 silly gunzTarPerm modified mode [ 'lib/js-yaml/type/js/regexp.js', 438, 420 ]
12546 silly gunzTarPerm extractEntry lib/js-yaml/type/js/undefined.js
12547 silly gunzTarPerm modified mode [ 'lib/js-yaml/type/js/undefined.js', 438, 420 ]
12548 silly lockFile 473221b6--npm-cache-js-yaml-2-0-5-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\js-yaml\2.0.5\package
12549 silly lockFile 473221b6--npm-cache-js-yaml-2-0-5-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\js-yaml\2.0.5\package
12550 silly lockFile 8835378c--cache-js-yaml-2-0-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\js-yaml\2.0.5\package.tgz
12551 silly lockFile 8835378c--cache-js-yaml-2-0-5-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\js-yaml\2.0.5\package.tgz
12552 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\js-yaml\2.0.5\package.tgz 644
12553 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\js-yaml\2.0.5\package.tgz
12554 silly lockFile eadff921-js-org-js-yaml-js-yaml-2-0-5-tgz https://registry.npmjs.org/js-yaml/-/js-yaml-2.0.5.tgz
12555 silly lockFile eadff921-js-org-js-yaml-js-yaml-2-0-5-tgz https://registry.npmjs.org/js-yaml/-/js-yaml-2.0.5.tgz
12556 silly lockFile 0aecb717-js-yaml-2-0-5 js-yaml@2.0.5
12557 silly lockFile 0aecb717-js-yaml-2-0-5 js-yaml@2.0.5
12558 silly lockFile f87c51d5-js-yaml-2-0-5 js-yaml@~2.0.5
12559 silly lockFile f87c51d5-js-yaml-2-0-5 js-yaml@~2.0.5
12560 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778026285-0.9591301339678466\tmp.tgz
12561 silly lockFile 21b1eaea-26285-0-9591301339678466-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778026285-0.9591301339678466\package
12562 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778026285-0.9591301339678466\package C:\Users\Gaston\AppData\Roaming\npm-cache\21b1eaea-26285-0-9591301339678466-package.lock
12563 silly lockFile a1bac3b8-26285-0-9591301339678466-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778026285-0.9591301339678466\tmp.tgz
12564 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778026285-0.9591301339678466\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\a1bac3b8-26285-0-9591301339678466-tmp-tgz.lock
12565 silly gunzTarPerm modes [ '755', '644' ]
12566 silly gunzTarPerm extractEntry package.json
12567 silly gunzTarPerm extractEntry .npmignore
12568 silly gunzTarPerm extractEntry README.md
12569 silly gunzTarPerm extractEntry LICENSE
12570 silly gunzTarPerm extractEntry .travis.yml
12571 silly gunzTarPerm extractEntry bin/uglifyjs
12572 silly gunzTarPerm extractEntry lib/ast.js
12573 silly gunzTarPerm extractEntry lib/compress.js
12574 silly gunzTarPerm extractEntry lib/mozilla-ast.js
12575 silly gunzTarPerm extractEntry lib/output.js
12576 silly gunzTarPerm extractEntry lib/parse.js
12577 silly gunzTarPerm extractEntry lib/scope.js
12578 silly gunzTarPerm extractEntry lib/sourcemap.js
12579 silly gunzTarPerm extractEntry lib/transform.js
12580 silly gunzTarPerm extractEntry lib/utils.js
12581 silly gunzTarPerm extractEntry test/run-tests.js
12582 silly gunzTarPerm extractEntry test/compress/arrays.js
12583 silly gunzTarPerm extractEntry test/compress/issue-12.js
12584 silly gunzTarPerm extractEntry test/compress/issue-126.js
12585 silly gunzTarPerm extractEntry test/compress/issue-143.js
12586 silly gunzTarPerm extractEntry test/compress/issue-105.js
12587 silly gunzTarPerm extractEntry test/compress/issue-267.js
12588 silly gunzTarPerm extractEntry test/compress/issue-269.js
12589 silly gunzTarPerm extractEntry test/compress/issue-44.js
12590 silly gunzTarPerm extractEntry test/compress/issue-59.js
12591 silly gunzTarPerm extractEntry test/compress/labels.js
12592 silly gunzTarPerm extractEntry test/compress/drop-unused.js
12593 silly gunzTarPerm extractEntry test/compress/loops.js
12594 silly gunzTarPerm extractEntry test/compress/debugger.js
12595 silly gunzTarPerm extractEntry test/compress/negate-iife.js
12596 silly gunzTarPerm extractEntry test/compress/dead-code.js
12597 silly gunzTarPerm extractEntry test/compress/properties.js
12598 silly gunzTarPerm extractEntry test/compress/conditionals.js
12599 silly gunzTarPerm extractEntry test/compress/sequences.js
12600 silly gunzTarPerm extractEntry test/compress/concat-strings.js
12601 silly gunzTarPerm extractEntry test/compress/switch.js
12602 silly gunzTarPerm extractEntry test/compress/blocks.js
12603 silly gunzTarPerm extractEntry test/compress/typeof.js
12604 silly gunzTarPerm extractEntry test/compress/issue-22.js
12605 silly gunzTarPerm extractEntry tools/node.js
12606 silly lockFile 21b1eaea-26285-0-9591301339678466-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778026285-0.9591301339678466\package
12607 silly lockFile 21b1eaea-26285-0-9591301339678466-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778026285-0.9591301339678466\package
12608 silly lockFile a1bac3b8-26285-0-9591301339678466-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778026285-0.9591301339678466\tmp.tgz
12609 silly lockFile a1bac3b8-26285-0-9591301339678466-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778026285-0.9591301339678466\tmp.tgz
12610 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\uglify-js\\2.4.8\\package.tgz',
12610 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388778026285-0.9591301339678466\\package' ]
12611 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-js\2.4.8\package.tgz
12612 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778026285-0.9591301339678466\package
12613 silly lockFile 21b1eaea-26285-0-9591301339678466-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778026285-0.9591301339678466\package
12614 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778026285-0.9591301339678466\package C:\Users\Gaston\AppData\Roaming\npm-cache\21b1eaea-26285-0-9591301339678466-package.lock
12615 silly lockFile 5661998d-ache-uglify-js-2-4-8-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-js\2.4.8\package.tgz
12616 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-js\2.4.8\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\5661998d-ache-uglify-js-2-4-8-package-tgz.lock
12617 silly lockFile 21b1eaea-26285-0-9591301339678466-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778026285-0.9591301339678466\package
12618 silly lockFile 21b1eaea-26285-0-9591301339678466-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778026285-0.9591301339678466\package
12619 silly lockFile 5661998d-ache-uglify-js-2-4-8-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-js\2.4.8\package.tgz
12620 silly lockFile 5661998d-ache-uglify-js-2-4-8-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-js\2.4.8\package.tgz
12621 silly lockFile e6d027bf-pm-cache-uglify-js-2-4-8-package C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-js\2.4.8\package
12622 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-js\2.4.8\package C:\Users\Gaston\AppData\Roaming\npm-cache\e6d027bf-pm-cache-uglify-js-2-4-8-package.lock
12623 silly lockFile e6d027bf-pm-cache-uglify-js-2-4-8-package C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-js\2.4.8\package
12624 silly lockFile e6d027bf-pm-cache-uglify-js-2-4-8-package C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-js\2.4.8\package
12625 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-js\2.4.8\package.tgz
12626 silly lockFile 332af0dc-pm-cache-uglify-js-2-4-8-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-js\2.4.8\package
12627 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-js\2.4.8\package C:\Users\Gaston\AppData\Roaming\npm-cache\332af0dc-pm-cache-uglify-js-2-4-8-package.lock
12628 silly lockFile 5661998d-ache-uglify-js-2-4-8-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-js\2.4.8\package.tgz
12629 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-js\2.4.8\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\5661998d-ache-uglify-js-2-4-8-package-tgz.lock
12630 silly gunzTarPerm modes [ '755', '644' ]
12631 silly gunzTarPerm extractEntry package.json
12632 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
12633 silly gunzTarPerm extractEntry .npmignore
12634 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
12635 silly gunzTarPerm extractEntry README.md
12636 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
12637 silly gunzTarPerm extractEntry LICENSE
12638 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
12639 silly gunzTarPerm extractEntry .travis.yml
12640 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]
12641 silly gunzTarPerm extractEntry bin/uglifyjs
12642 silly gunzTarPerm modified mode [ 'bin/uglifyjs', 438, 420 ]
12643 silly gunzTarPerm extractEntry lib/ast.js
12644 silly gunzTarPerm modified mode [ 'lib/ast.js', 438, 420 ]
12645 silly gunzTarPerm extractEntry lib/compress.js
12646 silly gunzTarPerm modified mode [ 'lib/compress.js', 438, 420 ]
12647 silly gunzTarPerm extractEntry lib/mozilla-ast.js
12648 silly gunzTarPerm modified mode [ 'lib/mozilla-ast.js', 438, 420 ]
12649 silly gunzTarPerm extractEntry lib/output.js
12650 silly gunzTarPerm modified mode [ 'lib/output.js', 438, 420 ]
12651 silly gunzTarPerm extractEntry lib/parse.js
12652 silly gunzTarPerm modified mode [ 'lib/parse.js', 438, 420 ]
12653 silly gunzTarPerm extractEntry lib/scope.js
12654 silly gunzTarPerm modified mode [ 'lib/scope.js', 438, 420 ]
12655 silly gunzTarPerm extractEntry lib/sourcemap.js
12656 silly gunzTarPerm modified mode [ 'lib/sourcemap.js', 438, 420 ]
12657 silly gunzTarPerm extractEntry lib/transform.js
12658 silly gunzTarPerm modified mode [ 'lib/transform.js', 438, 420 ]
12659 silly gunzTarPerm extractEntry lib/utils.js
12660 silly gunzTarPerm modified mode [ 'lib/utils.js', 438, 420 ]
12661 silly gunzTarPerm extractEntry test/run-tests.js
12662 silly gunzTarPerm modified mode [ 'test/run-tests.js', 438, 420 ]
12663 silly gunzTarPerm extractEntry test/compress/arrays.js
12664 silly gunzTarPerm modified mode [ 'test/compress/arrays.js', 438, 420 ]
12665 silly gunzTarPerm extractEntry test/compress/issue-12.js
12666 silly gunzTarPerm modified mode [ 'test/compress/issue-12.js', 438, 420 ]
12667 silly gunzTarPerm extractEntry test/compress/issue-126.js
12668 silly gunzTarPerm modified mode [ 'test/compress/issue-126.js', 438, 420 ]
12669 silly gunzTarPerm extractEntry test/compress/issue-143.js
12670 silly gunzTarPerm modified mode [ 'test/compress/issue-143.js', 438, 420 ]
12671 silly gunzTarPerm extractEntry test/compress/issue-105.js
12672 silly gunzTarPerm modified mode [ 'test/compress/issue-105.js', 438, 420 ]
12673 silly gunzTarPerm extractEntry test/compress/issue-267.js
12674 silly gunzTarPerm modified mode [ 'test/compress/issue-267.js', 438, 420 ]
12675 silly gunzTarPerm extractEntry test/compress/issue-269.js
12676 silly gunzTarPerm modified mode [ 'test/compress/issue-269.js', 438, 420 ]
12677 silly gunzTarPerm extractEntry test/compress/issue-44.js
12678 silly gunzTarPerm modified mode [ 'test/compress/issue-44.js', 438, 420 ]
12679 silly gunzTarPerm extractEntry test/compress/issue-59.js
12680 silly gunzTarPerm modified mode [ 'test/compress/issue-59.js', 438, 420 ]
12681 silly gunzTarPerm extractEntry test/compress/labels.js
12682 silly gunzTarPerm modified mode [ 'test/compress/labels.js', 438, 420 ]
12683 silly gunzTarPerm extractEntry test/compress/drop-unused.js
12684 silly gunzTarPerm modified mode [ 'test/compress/drop-unused.js', 438, 420 ]
12685 silly gunzTarPerm extractEntry test/compress/loops.js
12686 silly gunzTarPerm modified mode [ 'test/compress/loops.js', 438, 420 ]
12687 silly gunzTarPerm extractEntry test/compress/debugger.js
12688 silly gunzTarPerm modified mode [ 'test/compress/debugger.js', 438, 420 ]
12689 silly gunzTarPerm extractEntry test/compress/negate-iife.js
12690 silly gunzTarPerm modified mode [ 'test/compress/negate-iife.js', 438, 420 ]
12691 silly gunzTarPerm extractEntry test/compress/dead-code.js
12692 silly gunzTarPerm modified mode [ 'test/compress/dead-code.js', 438, 420 ]
12693 silly gunzTarPerm extractEntry test/compress/properties.js
12694 silly gunzTarPerm modified mode [ 'test/compress/properties.js', 438, 420 ]
12695 silly gunzTarPerm extractEntry test/compress/conditionals.js
12696 silly gunzTarPerm modified mode [ 'test/compress/conditionals.js', 438, 420 ]
12697 silly gunzTarPerm extractEntry test/compress/sequences.js
12698 silly gunzTarPerm modified mode [ 'test/compress/sequences.js', 438, 420 ]
12699 silly gunzTarPerm extractEntry test/compress/concat-strings.js
12700 silly gunzTarPerm modified mode [ 'test/compress/concat-strings.js', 438, 420 ]
12701 silly gunzTarPerm extractEntry test/compress/switch.js
12702 silly gunzTarPerm modified mode [ 'test/compress/switch.js', 438, 420 ]
12703 silly gunzTarPerm extractEntry test/compress/blocks.js
12704 silly gunzTarPerm modified mode [ 'test/compress/blocks.js', 438, 420 ]
12705 silly gunzTarPerm extractEntry test/compress/typeof.js
12706 silly gunzTarPerm modified mode [ 'test/compress/typeof.js', 438, 420 ]
12707 silly gunzTarPerm extractEntry test/compress/issue-22.js
12708 silly gunzTarPerm modified mode [ 'test/compress/issue-22.js', 438, 420 ]
12709 silly gunzTarPerm extractEntry tools/node.js
12710 silly gunzTarPerm modified mode [ 'tools/node.js', 438, 420 ]
12711 silly lockFile 332af0dc-pm-cache-uglify-js-2-4-8-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-js\2.4.8\package
12712 silly lockFile 332af0dc-pm-cache-uglify-js-2-4-8-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-js\2.4.8\package
12713 silly lockFile 5661998d-ache-uglify-js-2-4-8-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-js\2.4.8\package.tgz
12714 silly lockFile 5661998d-ache-uglify-js-2-4-8-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-js\2.4.8\package.tgz
12715 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-js\2.4.8\package.tgz 644
12716 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-js\2.4.8\package.tgz
12717 silly lockFile f0d1c91e-rg-uglify-js-uglify-js-2-4-8-tgz https://registry.npmjs.org/uglify-js/-/uglify-js-2.4.8.tgz
12718 silly lockFile f0d1c91e-rg-uglify-js-uglify-js-2-4-8-tgz https://registry.npmjs.org/uglify-js/-/uglify-js-2.4.8.tgz
12719 silly lockFile 49153223-uglify-js-2-4-8 uglify-js@2.4.8
12720 silly lockFile 49153223-uglify-js-2-4-8 uglify-js@2.4.8
12721 silly lockFile 1d881e0f-uglify-js-2-4-0 uglify-js@~2.4.0
12722 silly lockFile 1d881e0f-uglify-js-2-4-0 uglify-js@~2.4.0
12723 silly resolved [ { name: 'grunt-lib-contrib',
12723 silly resolved     description: 'Common functionality shared across grunt-contrib tasks.',
12723 silly resolved     version: '0.6.1',
12723 silly resolved     homepage: 'http://github.com/gruntjs/grunt-lib-contrib',
12723 silly resolved     author: { name: 'Grunt Team', url: 'http://gruntjs.com/' },
12723 silly resolved     repository:
12723 silly resolved      { type: 'git',
12723 silly resolved        url: 'git://github.com/gruntjs/grunt-lib-contrib.git' },
12723 silly resolved     bugs: { url: 'https://github.com/gruntjs/grunt-lib-contrib/issues' },
12723 silly resolved     licenses: [ [Object] ],
12723 silly resolved     engines: { node: '>= 0.8.0' },
12723 silly resolved     scripts: { test: 'grunt test' },
12723 silly resolved     devDependencies:
12723 silly resolved      { 'grunt-contrib-jshint': '~0.1.1',
12723 silly resolved        'grunt-contrib-nodeunit': '~0.1.2',
12723 silly resolved        grunt: '~0.4.0' },
12723 silly resolved     main: 'lib/contrib',
12723 silly resolved     dependencies: { 'zlib-browserify': '0.0.1' },
12723 silly resolved     contributors: [ [Object], [Object], [Object], [Object] ],
12723 silly resolved     readme: '# grunt-lib-contrib [![Build Status](https://secure.travis-ci.org/gruntjs/grunt-lib-contrib.png?branch=master)](http://travis-ci.org/gruntjs/grunt-lib-contrib)\n\n> Common functionality shared across grunt-contrib tasks.\n\nThe purpose of grunt-lib-contrib is to explore solutions to common problems task writers encounter, and to ease the upgrade path for contrib tasks.\n\n**These APIs should be considered highly unstable. Depend on them at your own risk!**\n\n_Over time, some of the functionality provided here may be incorporated directly into grunt for mainstream use. Until then, you may require `grunt-lib-contrib` as a dependency in your projects, but be very careful to specify an exact version number instead of a range, as backwards-incompatible changes are likely to be introduced._\n\n### Helper Functions\n\n#### getNamespaceDeclaration(ns)\n\nThis helper is used to build JS namespace declarations.\n\n#### optsToArgs(options)\n\nConvert an object to an array of CLI arguments, which can be used with `child_process.spawn()`.\n\n```js\n// Example\n{\n  fooBar: \'a\',        // [\'--foo-bar\', \'a\']\n  fooBar: 1,          // [\'--foo-bar\', \'1\']\n  fooBar: true,       // [\'--foo-bar\']\n  fooBar: false,      //\n  fooBar: [\'a\', \'b\']  // [\'--foo-bar\', \'a\', \'--foo-bar\', \'b\']\n}\n```\n\n#### stripPath(pth, strip)\n\nStrip a path from a path. normalize both paths for best results.\n\n#### minMaxInfo(min, max, report)\n\nHelper for logging compressed, uncompressed and gzipped sizes of strings.\n\n#### report\nChoices: `false`, `\'min\'`, `\'gzip\'`\nDefault: `false`\n\nEither do not report anything, report only minification result, or report minification and gzip results.\n\n**Important** Including `\'gzip\'` results can make this task 5-10x slower depending on the size of the file.\n\n\n```js\nvar max = grunt.file.read(\'max.js\');\nvar min = minify(max);\nminMaxInfo(min, max, \'gzip\');\n```\n\nWould print:\n\n```\nOriginal: 495 bytes.\nMinified: 396 bytes.\nGzipped: 36 bytes.\n```\n\n--\n\n*Lib submitted by [Tyler Kellen](https://goingslowly.com/).*',
12723 silly resolved     readmeFilename: 'README.md',
12723 silly resolved     _id: 'grunt-lib-contrib@0.6.1',
12723 silly resolved     dist: { shasum: '1b9b445dd14c2f70f6dc593e42449c06afe66472' },
12723 silly resolved     _from: 'grunt-lib-contrib@~0.6.1',
12723 silly resolved     _resolved: 'https://registry.npmjs.org/grunt-lib-contrib/-/grunt-lib-contrib-0.6.1.tgz' },
12723 silly resolved   { name: 'uglify-js',
12723 silly resolved     description: 'JavaScript parser, mangler/compressor and beautifier toolkit',
12723 silly resolved     homepage: 'http://lisperator.net/uglifyjs',
12723 silly resolved     main: 'tools/node.js',
12723 silly resolved     version: '2.4.8',
12723 silly resolved     engines: { node: '>=0.4.0' },
12723 silly resolved     maintainers: [ [Object] ],
12723 silly resolved     repository: { type: 'git', url: 'https://github.com/mishoo/UglifyJS2.git' },
12723 silly resolved     dependencies:
12723 silly resolved      { async: '~0.2.6',
12723 silly resolved        'source-map': '~0.1.7',
12723 silly resolved        optimist: '~0.3.5',
12723 silly resolved        'uglify-to-browserify': '~1.0.0' },
12723 silly resolved     browserify: { transform: [Object] },
12723 silly resolved     bin: { uglifyjs: 'bin/uglifyjs' },
12723 silly resolved     scripts: { test: 'node test/run-tests.js' },
12723 silly resolved     readme: 'UglifyJS 2\n==========\n[![Build Status](https://travis-ci.org/mishoo/UglifyJS2.png)](https://travis-ci.org/mishoo/UglifyJS2)\n\nUglifyJS is a JavaScript parser, minifier, compressor or beautifier toolkit.\n\nThis page documents the command line utility.  For\n[API and internals documentation see my website](http://lisperator.net/uglifyjs/).\nThere\'s also an\n[in-browser online demo](http://lisperator.net/uglifyjs/#demo) (for Firefox,\nChrome and probably Safari).\n\nInstall\n-------\n\nFirst make sure you have installed the latest version of [node.js](http://nodejs.org/)\n(You may need to restart your computer after this step).\n\nFrom NPM for use as a command line app:\n\n    npm install uglify-js -g\n\nFrom NPM for programmatic use:\n\n    npm install uglify-js\n\nFrom Git:\n\n    git clone git://github.com/mishoo/UglifyJS2.git\n    cd UglifyJS2\n    npm link .\n\nUsage\n-----\n\n    uglifyjs [input files] [options]\n\nUglifyJS2 can take multiple input files.  It\'s recommended that you pass the\ninput files first, then pass the options.  UglifyJS will parse input files\nin sequence and apply any compression options.  The files are parsed in the\nsame global scope, that is, a reference from a file to some\nvariable/function declared in another file will be matched properly.\n\nIf you want to read from STDIN instead, pass a single dash instead of input\nfiles.\n\nThe available options are:\n\n```\n  --source-map       Specify an output file where to generate source map.\n                                                                        [string]\n  --source-map-root  The path to the original source to be included in the\n                     source map.                                        [string]\n  --source-map-url   The path to the source map to be added in //#\n                     sourceMappingURL.  Defaults to the value passed with\n                     --source-map.                                      [string]\n  --in-source-map    Input source map, useful if you\'re compressing JS that was\n                     generated from some other original code.\n  --screw-ie8        Pass this flag if you don\'t care about full compliance\n                     with Internet Explorer 6-8 quirks (by default UglifyJS\n                     will try to be IE-proof).                         [boolean]\n  --expr             Parse a single expression, rather than a program (for\n                     parsing JSON)                                     [boolean]\n  -p, --prefix       Skip prefix for original filenames that appear in source\n                     maps. For example -p 3 will drop 3 directories from file\n                     names and ensure they are relative paths. You can also\n                     specify -p relative, which will make UglifyJS figure out\n                     itself the relative paths between original sources, the\n                     source map and the output file.                    [string]\n  -o, --output       Output file (default STDOUT).\n  -b, --beautify     Beautify output/specify output options.            [string]\n  -m, --mangle       Mangle names/pass mangler options.                 [string]\n  -r, --reserved     Reserved names to exclude from mangling.\n  -c, --compress     Enable compressor/pass compressor options. Pass options\n                     like -c hoist_vars=false,if_return=false. Use -c with no\n                     argument to use the default compression options.   [string]\n  -d, --define       Global definitions                                 [string]\n  -e, --enclose      Embed everything in a big function, with a configurable\n                     parameter/argument list.                           [string]\n  --comments         Preserve copyright comments in the output. By default this\n                     works like Google Closure, keeping JSDoc-style comments\n                     that contain "@license" or "@preserve". You can optionally\n                     pass one of the following arguments to this flag:\n                     - "all" to keep all comments\n                     - a valid JS regexp (needs to start with a slash) to keep\n                     only comments that match.\n                     Note that currently not *all* comments can be kept when\n                     compression is on, because of dead code removal or\n                     cascading statements into sequences.               [string]\n  --preamble         Preamble to prepend to the output.  You can use this to\n                     insert a comment, for example for licensing information.\n                     This will not be parsed, but the source map will adjust\n                     for its presence.\n  --stats            Display operations run time on STDERR.            [boolean]\n  --acorn            Use Acorn for parsing.                            [boolean]\n  --spidermonkey     Assume input files are SpiderMonkey AST format (as JSON).\n                                                                       [boolean]\n  --self             Build itself (UglifyJS2) as a library (implies\n                     --wrap=UglifyJS --export-all)                     [boolean]\n  --wrap             Embed everything in a big function, making the “exports”\n                     and “global” variables available. You need to pass an\n                     argument to this option to specify the name that your\n                     module will take when included in, say, a browser.\n                                                                        [string]\n  --export-all       Only used when --wrap, this tells UglifyJS to add code to\n                     automatically export all globals.                 [boolean]\n  --lint             Display some scope warnings                       [boolean]\n  -v, --verbose      Verbose                                           [boolean]\n  -V, --version      Print version number and exit.                    [boolean]\n```\n\nSpecify `--output` (`-o`) to declare the output file.  Otherwise the output\ngoes to STDOUT.\n\n## Source map options\n\nUglifyJS2 can generate a source map file, which is highly useful for\ndebugging your compressed JavaScript.  To get a source map, pass\n`--source-map output.js.map` (full path to the file where you want the\nsource map dumped).\n\nAdditionally you might need `--source-map-root` to pass the URL where the\noriginal files can be found.  In case you are passing full paths to input\nfiles to UglifyJS, you can use `--prefix` (`-p`) to specify the number of\ndirectories to drop from the path prefix when declaring files in the source\nmap.\n\nFor example:\n\n    uglifyjs /home/doe/work/foo/src/js/file1.js \\\n             /home/doe/work/foo/src/js/file2.js \\\n             -o foo.min.js \\\n             --source-map foo.min.js.map \\\n             --source-map-root http://foo.com/src \\\n             -p 5 -c -m\n\nThe above will compress and mangle `file1.js` and `file2.js`, will drop the\noutput in `foo.min.js` and the source map in `foo.min.js.map`.  The source\nmapping will refer to `http://foo.com/src/js/file1.js` and\n`http://foo.com/src/js/file2.js` (in fact it will list `http://foo.com/src`\nas the source map root, and the original files as `js/file1.js` and\n`js/file2.js`).\n\n### Composed source map\n\nWhen you\'re compressing JS code that was output by a compiler such as\nCoffeeScript, mapping to the JS code won\'t be too helpful.  Instead, you\'d\nlike to map back to the original code (i.e. CoffeeScript).  UglifyJS has an\noption to take an input source map.  Assuming you have a mapping from\nCoffeeScript → compiled JS, UglifyJS can generate a map from CoffeeScript →\ncompressed JS by mapping every token in the compiled JS to its original\nlocation.\n\nTo use this feature you need to pass `--in-source-map\n/path/to/input/source.map`.  Normally the input source map should also point\nto the file containing the generated JS, so if that\'s correct you can omit\ninput files from the command line.\n\n## Mangler options\n\nTo enable the mangler you need to pass `--mangle` (`-m`).  The following\n(comma-separated) options are supported:\n\n- `sort` — to assign shorter names to most frequently used variables.  This\n  saves a few hundred bytes on jQuery before gzip, but the output is\n  _bigger_ after gzip (and seems to happen for other libraries I tried it\n  on) therefore it\'s not enabled by default.\n\n- `toplevel` — mangle names declared in the toplevel scope (disabled by\n  default).\n\n- `eval` — mangle names visible in scopes where `eval` or `when` are used\n  (disabled by default).\n\nWhen mangling is enabled but you want to prevent certain names from being\nmangled, you can declare those names with `--reserved` (`-r`) — pass a\ncomma-separated list of names.  For example:\n\n    uglifyjs ... -m -r \'$,require,exports\'\n\nto prevent the `require`, `exports` and `$` names from being changed.\n\n## Compressor options\n\nYou need to pass `--compress` (`-c`) to enable the compressor.  Optionally\nyou can pass a comma-separated list of options.  Options are in the form\n`foo=bar`, or just `foo` (the latter implies a boolean option that you want\nto set `true`; it\'s effectively a shortcut for `foo=true`).\n\n- `sequences` -- join consecutive simple statements using the comma operator\n\n- `properties` -- rewrite property access using the dot notation, for\n  example `foo["bar"] → foo.bar`\n\n- `dead_code` -- remove unreachable code\n\n- `drop_debugger` -- remove `debugger;` statements\n\n- `unsafe` (default: false) -- apply "unsafe" transformations (discussion below)\n\n- `conditionals` -- apply optimizations for `if`-s and conditional\n  expressions\n\n- `comparisons` -- apply certain optimizations to binary nodes, for example:\n  `!(a <= b) → a > b` (only when `unsafe`), attempts to negate binary nodes,\n  e.g. `a = !b && !c && !d && !e → a=!(b||c||d||e)` etc.\n\n- `evaluate` -- attempt to evaluate constant expressions\n\n- `booleans` -- various optimizations for boolean context, for example `!!a\n  ? b : c → a ? b : c`\n\n- `loops` -- optimizations for `do`, `while` and `for` loops when we can\n  statically determine the condition\n\n- `unused` -- drop unreferenced functions and variables\n\n- `hoist_funs` -- hoist function declarations\n\n- `hoist_vars` (default: false) -- hoist `var` declarations (this is `false`\n  by default because it seems to increase the size of the output in general)\n\n- `if_return` -- optimizations for if/return and if/continue\n\n- `join_vars` -- join consecutive `var` statements\n\n- `cascade` -- small optimization for sequences, transform `x, x` into `x`\n  and `x = something(), x` into `x = something()`\n\n- `warnings` -- display warnings when dropping unreachable code or unused\n  declarations etc.\n\n- `negate_iife` -- negate "Immediately-Called Function Expressions"\n  where the return value is discarded, to avoid the parens that the\n  code generator would insert.\n\n- `pure_getters` -- the default is `false`.  If you pass `true` for\n  this, UglifyJS will assume that object property access\n  (e.g. `foo.bar` or `foo["bar"]`) doesn\'t have any side effects.\n\n- `pure_funcs` -- default `null`.  You can pass an array of names and\n  UglifyJS will assume that those functions do not produce side\n  effects.  DANGER: will not check if the name is redefined in scope.\n  An example case here, for instance `var q = Math.floor(a/b)`.  If\n  variable `q` is not used elsewhere, UglifyJS will drop it, but will\n  still keep the `Math.floor(a/b)`, not knowing what it does.  You can\n  pass `pure_funcs: [ \'Math.floor\' ]` to let it know that this\n  function won\'t produce any side effect, in which case the whole\n  statement would get discarded.  The current implementation adds some\n  overhead (compression will be slower).\n\n- `drop_console` -- default `false`.  Pass `true` to discard calls to\n  `console.*` functions.\n\n### The `unsafe` option\n\nIt enables some transformations that *might* break code logic in certain\ncontrived cases, but should be fine for most code.  You might want to try it\non your own code, it should reduce the minified size.  Here\'s what happens\nwhen this flag is on:\n\n- `new Array(1, 2, 3)` or `Array(1, 2, 3)` → `[1, 2, 3 ]`\n- `new Object()` → `{}`\n- `String(exp)` or `exp.toString()` → `"" + exp`\n- `new Object/RegExp/Function/Error/Array (...)` → we discard the `new`\n- `typeof foo == "undefined"` → `foo === void 0`\n- `void 0` → `undefined` (if there is a variable named "undefined" in\n  scope; we do it because the variable name will be mangled, typically\n  reduced to a single character).\n\n### Conditional compilation\n\nYou can use the `--define` (`-d`) switch in order to declare global\nvariables that UglifyJS will assume to be constants (unless defined in\nscope).  For example if you pass `--define DEBUG=false` then, coupled with\ndead code removal UglifyJS will discard the following from the output:\n```javascript\nif (DEBUG) {\n\tconsole.log("debug stuff");\n}\n```\n\nUglifyJS will warn about the condition being always false and about dropping\nunreachable code; for now there is no option to turn off only this specific\nwarning, you can pass `warnings=false` to turn off *all* warnings.\n\nAnother way of doing that is to declare your globals as constants in a\nseparate file and include it into the build.  For example you can have a\n`build/defines.js` file with the following:\n```javascript\nconst DEBUG = false;\nconst PRODUCTION = true;\n// etc.\n```\n\nand build your code like this:\n\n    uglifyjs build/defines.js js/foo.js js/bar.js... -c\n\nUglifyJS will notice the constants and, since they cannot be altered, it\nwill evaluate references to them to the value itself and drop unreachable\ncode as usual.  The possible downside of this approach is that the build\nwill contain the `const` declarations.\n\n<a name="codegen-options"></a>\n## Beautifier options\n\nThe code generator tries to output shortest code possible by default.  In\ncase you want beautified output, pass `--beautify` (`-b`).  Optionally you\ncan pass additional arguments that control the code output:\n\n- `beautify` (default `true`) -- whether to actually beautify the output.\n  Passing `-b` will set this to true, but you might need to pass `-b` even\n  when you want to generate minified code, in order to specify additional\n  arguments, so you can use `-b beautify=false` to override it.\n- `indent-level` (default 4)\n- `indent-start` (default 0) -- prefix all lines by that many spaces\n- `quote-keys` (default `false`) -- pass `true` to quote all keys in literal\n  objects\n- `space-colon` (default `true`) -- insert a space after the colon signs\n- `ascii-only` (default `false`) -- escape Unicode characters in strings and\n  regexps\n- `inline-script` (default `false`) -- escape the slash in occurrences of\n  `</script` in strings\n- `width` (default 80) -- only takes effect when beautification is on, this\n  specifies an (orientative) line width that the beautifier will try to\n  obey.  It refers to the width of the line text (excluding indentation).\n  It doesn\'t work very well currently, but it does make the code generated\n  by UglifyJS more readable.\n- `max-line-len` (default 32000) -- maximum line length (for uglified code)\n- `bracketize` (default `false`) -- always insert brackets in `if`, `for`,\n  `do`, `while` or `with` statements, even if their body is a single\n  statement.\n- `semicolons` (default `true`) -- separate statements with semicolons.  If\n  you pass `false` then whenever possible we will use a newline instead of a\n  semicolon, leading to more readable output of uglified code (size before\n  gzip could be smaller; size after gzip insignificantly larger).\n- `preamble` (default `null`) -- when passed it must be a string and\n  it will be prepended to the output literally.  The source map will\n  adjust for this text.  Can be used to insert a comment containing\n  licensing information, for example.\n\n### Keeping copyright notices or other comments\n\nYou can pass `--comments` to retain certain comments in the output.  By\ndefault it will keep JSDoc-style comments that contain "@preserve",\n"@license" or "@cc_on" (conditional compilation for IE).  You can pass\n`--comments all` to keep all the comments, or a valid JavaScript regexp to\nkeep only comments that match this regexp.  For example `--comments\n\'/foo|bar/\'` will keep only comments that contain "foo" or "bar".\n\nNote, however, that there might be situations where comments are lost.  For\nexample:\n```javascript\nfunction f() {\n\t/** @preserve Foo Bar */\n\tfunction g() {\n\t  // this function is never called\n\t}\n\treturn something();\n}\n```\n\nEven though it has "@preserve", the comment will be lost because the inner\nfunction `g` (which is the AST node to which the comment is attached to) is\ndiscarded by the compressor as not referenced.\n\nThe safest comments where to place copyright information (or other info that\nneeds to be kept in the output) are comments attached to toplevel nodes.\n\n## Support for the SpiderMonkey AST\n\nUglifyJS2 has its own abstract syntax tree format; for\n[practical reasons](http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/)\nwe can\'t easily change to using the SpiderMonkey AST internally.  However,\nUglifyJS now has a converter which can import a SpiderMonkey AST.\n\nFor example [Acorn][acorn] is a super-fast parser that produces a\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\nthe AST in JSON on the standard output.  To use UglifyJS to mangle and\ncompress that:\n\n    acorn file.js | uglifyjs --spidermonkey -m -c\n\nThe `--spidermonkey` option tells UglifyJS that all input files are not\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\ndon\'t use our own parser in this case, but just transform that AST into our\ninternal AST.\n\n### Use Acorn for parsing\n\nMore for fun, I added the `--acorn` option which will use Acorn to do all\nthe parsing.  If you pass this option, UglifyJS will `require("acorn")`.\n\nAcorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\nin total it\'s a bit more than just using UglifyJS\'s own parser.\n\nAPI Reference\n-------------\n\nAssuming installation via NPM, you can load UglifyJS in your application\nlike this:\n```javascript\nvar UglifyJS = require("uglify-js");\n```\n\nIt exports a lot of names, but I\'ll discuss here the basics that are needed\nfor parsing, mangling and compressing a piece of code.  The sequence is (1)\nparse, (2) compress, (3) mangle, (4) generate output code.\n\n### The simple way\n\nThere\'s a single toplevel function which combines all the steps.  If you\ndon\'t need additional customization, you might want to go with `minify`.\nExample:\n```javascript\nvar result = UglifyJS.minify("/path/to/file.js");\nconsole.log(result.code); // minified output\n// if you need to pass code instead of file name\nvar result = UglifyJS.minify("var b = function () {};", {fromString: true});\n```\n\nYou can also compress multiple files:\n```javascript\nvar result = UglifyJS.minify([ "file1.js", "file2.js", "file3.js" ]);\nconsole.log(result.code);\n```\n\nTo generate a source map:\n```javascript\nvar result = UglifyJS.minify([ "file1.js", "file2.js", "file3.js" ], {\n\toutSourceMap: "out.js.map"\n});\nconsole.log(result.code); // minified output\nconsole.log(result.map);\n```\n\nNote that the source map is not saved in a file, it\'s just returned in\n`result.map`.  The value passed for `outSourceMap` is only used to set the\n`file` attribute in the source map (see [the spec][sm-spec]).\n\nYou can also specify sourceRoot property to be included in source map:\n```javascript\nvar result = UglifyJS.minify([ "file1.js", "file2.js", "file3.js" ], {\n\toutSourceMap: "out.js.map",\n\tsourceRoot: "http://example.com/src"\n});\n```\n\nIf you\'re compressing compiled JavaScript and have a source map for it, you\ncan use the `inSourceMap` argument:\n```javascript\nvar result = UglifyJS.minify("compiled.js", {\n\tinSourceMap: "compiled.js.map",\n\toutSourceMap: "minified.js.map"\n});\n// same as before, it returns `code` and `map`\n```\n\nThe `inSourceMap` is only used if you also request `outSourceMap` (it makes\nno sense otherwise).\n\nOther options:\n\n- `warnings` (default `false`) — pass `true` to display compressor warnings.\n\n- `fromString` (default `false`) — if you pass `true` then you can pass\n  JavaScript source code, rather than file names.\n\n- `mangle` — pass `false` to skip mangling names.\n\n- `output` (default `null`) — pass an object if you wish to specify\n  additional [output options][codegen].  The defaults are optimized\n  for best compression.\n\n- `compress` (default `{}`) — pass `false` to skip compressing entirely.\n  Pass an object to specify custom [compressor options][compressor].\n\nWe could add more options to `UglifyJS.minify` — if you need additional\nfunctionality please suggest!\n\n### The hard way\n\nFollowing there\'s more detailed API info, in case the `minify` function is\ntoo simple for your needs.\n\n#### The parser\n```javascript\nvar toplevel_ast = UglifyJS.parse(code, options);\n```\n\n`options` is optional and if present it must be an object.  The following\nproperties are available:\n\n- `strict` — disable automatic semicolon insertion and support for trailing\n  comma in arrays and objects\n- `filename` — the name of the file where this code is coming from\n- `toplevel` — a `toplevel` node (as returned by a previous invocation of\n  `parse`)\n\nThe last two options are useful when you\'d like to minify multiple files and\nget a single file as the output and a proper source map.  Our CLI tool does\nsomething like this:\n```javascript\nvar toplevel = null;\nfiles.forEach(function(file){\n\tvar code = fs.readFileSync(file);\n\ttoplevel = UglifyJS.parse(code, {\n\t\tfilename: file,\n\t\ttoplevel: toplevel\n\t});\n});\n```\n\nAfter this, we have in `toplevel` a big AST containing all our files, with\neach token having proper information about where it came from.\n\n#### Scope information\n\nUglifyJS contains a scope analyzer that you need to call manually before\ncompressing or mangling.  Basically it augments various nodes in the AST\nwith information about where is a name defined, how many times is a name\nreferenced, if it is a global or not, if a function is using `eval` or the\n`with` statement etc.  I will discuss this some place else, for now what\'s\nimportant to know is that you need to call the following before doing\nanything with the tree:\n```javascript\ntoplevel.figure_out_scope()\n```\n\n#### Compression\n\nLike this:\n```javascript\nvar compressor = UglifyJS.Compressor(options);\nvar compressed_ast = toplevel.transform(compressor);\n```\n\nThe `options` can be missing.  Available options are discussed above in\n“Compressor options”.  Defaults should lead to best compression in most\nscripts.\n\nThe compressor is destructive, so don\'t rely that `toplevel` remains the\noriginal tree.\n\n#### Mangling\n\nAfter compression it is a good idea to call again `figure_out_scope` (since\nthe compressor might drop unused variables / unreachable code and this might\nchange the number of identifiers or their position).  Optionally, you can\ncall a trick that helps after Gzip (counting character frequency in\nnon-mangleable words).  Example:\n```javascript\ncompressed_ast.figure_out_scope();\ncompressed_ast.compute_char_frequency();\ncompressed_ast.mangle_names();\n```\n\n#### Generating output\n\nAST nodes have a `print` method that takes an output stream.  Essentially,\nto generate code you do this:\n```javascript\nvar stream = UglifyJS.OutputStream(options);\ncompressed_ast.print(stream);\nvar code = stream.toString(); // this is your minified code\n```\n\nor, for a shortcut you can do:\n```javascript\nvar code = compressed_ast.print_to_string(options);\n```\n\nAs usual, `options` is optional.  The output stream accepts a lot of otions,\nmost of them documented above in section “Beautifier options”.  The two\nwhich we care about here are `source_map` and `comments`.\n\n#### Keeping comments in the output\n\nIn order to keep certain comments in the output you need to pass the\n`comments` option.  Pass a RegExp or a function.  If you pass a RegExp, only\nthose comments whose body matches the regexp will be kept.  Note that body\nmeans without the initial `//` or `/*`.  If you pass a function, it will be\ncalled for every comment in the tree and will receive two arguments: the\nnode that the comment is attached to, and the comment token itself.\n\nThe comment token has these properties:\n\n- `type`: "comment1" for single-line comments or "comment2" for multi-line\n  comments\n- `value`: the comment body\n- `pos` and `endpos`: the start/end positions (zero-based indexes) in the\n  original code where this comment appears\n- `line` and `col`: the line and column where this comment appears in the\n  original code\n- `file` — the file name of the original file\n- `nlb` — true if there was a newline before this comment in the original\n  code, or if this comment contains a newline.\n\nYour function should return `true` to keep the comment, or a falsy value\notherwise.\n\n#### Generating a source mapping\n\nYou need to pass the `source_map` argument when calling `print`.  It needs\nto be a `SourceMap` object (which is a thin wrapper on top of the\n[source-map][source-map] library).\n\nExample:\n```javascript\nvar source_map = UglifyJS.SourceMap(source_map_options);\nvar stream = UglifyJS.OutputStream({\n\t...\n\tsource_map: source_map\n});\ncompressed_ast.print(stream);\n\nvar code = stream.toString();\nvar map = source_map.toString(); // json output for your source map\n```\n\nThe `source_map_options` (optional) can contain the following properties:\n\n- `file`: the name of the JavaScript output file that this mapping refers to\n- `root`: the `sourceRoot` property (see the [spec][sm-spec])\n- `orig`: the "original source map", handy when you compress generated JS\n  and want to map the minified output back to the original code where it\n  came from.  It can be simply a string in JSON, or a JSON object containing\n  the original source map.\n\n  [acorn]: https://github.com/marijnh/acorn\n  [source-map]: https://github.com/mozilla/source-map\n  [sm-spec]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\n  [codegen]: http://lisperator.net/uglifyjs/codegen\n  [compressor]: http://lisperator.net/uglifyjs/compress\n',
12723 silly resolved     readmeFilename: 'README.md',
12723 silly resolved     bugs: { url: 'https://github.com/mishoo/UglifyJS2/issues' },
12723 silly resolved     _id: 'uglify-js@2.4.8',
12723 silly resolved     dist: { shasum: '9207d02db4de385e6a6c266bbfbebe57e5b8f192' },
12723 silly resolved     _from: 'uglify-js@~2.4.0',
12723 silly resolved     _resolved: 'https://registry.npmjs.org/uglify-js/-/uglify-js-2.4.8.tgz' } ]
12724 info install grunt-lib-contrib@0.6.1 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-uglify
12725 info install uglify-js@2.4.8 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-uglify
12726 info installOne grunt-lib-contrib@0.6.1
12727 info installOne uglify-js@2.4.8
12728 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-uglify\node_modules\grunt-lib-contrib unbuild
12729 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-uglify\node_modules\uglify-js unbuild
12730 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\grunt-lib-contrib\0.6.1\package.tgz
12731 silly lockFile fe1aa139-y-node-modules-grunt-lib-contrib tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-uglify\node_modules\grunt-lib-contrib
12732 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-uglify\node_modules\grunt-lib-contrib C:\Users\Gaston\AppData\Roaming\npm-cache\fe1aa139-y-node-modules-grunt-lib-contrib.lock
12733 silly lockFile a27c0556-nt-lib-contrib-0-6-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\grunt-lib-contrib\0.6.1\package.tgz
12734 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\grunt-lib-contrib\0.6.1\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\a27c0556-nt-lib-contrib-0-6-1-package-tgz.lock
12735 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-js\2.4.8\package.tgz
12736 silly lockFile ed65d7a8-ib-uglify-node-modules-uglify-js tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-uglify\node_modules\uglify-js
12737 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-uglify\node_modules\uglify-js C:\Users\Gaston\AppData\Roaming\npm-cache\ed65d7a8-ib-uglify-node-modules-uglify-js.lock
12738 silly lockFile 5661998d-ache-uglify-js-2-4-8-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-js\2.4.8\package.tgz
12739 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-js\2.4.8\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\5661998d-ache-uglify-js-2-4-8-package-tgz.lock
12740 silly gunzTarPerm modes [ '755', '644' ]
12741 silly gunzTarPerm modes [ '755', '644' ]
12742 silly gunzTarPerm extractEntry package.json
12743 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
12744 silly gunzTarPerm extractEntry package.json
12745 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
12746 silly gunzTarPerm extractEntry .npmignore
12747 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
12748 silly gunzTarPerm extractEntry README.md
12749 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
12750 silly gunzTarPerm extractEntry .npmignore
12751 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
12752 silly gunzTarPerm extractEntry README.md
12753 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
12754 silly gunzTarPerm extractEntry Gruntfile.js
12755 silly gunzTarPerm modified mode [ 'Gruntfile.js', 438, 420 ]
12756 silly gunzTarPerm extractEntry AUTHORS
12757 silly gunzTarPerm modified mode [ 'AUTHORS', 438, 420 ]
12758 silly gunzTarPerm extractEntry LICENSE
12759 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
12760 silly gunzTarPerm extractEntry .travis.yml
12761 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]
12762 silly gunzTarPerm extractEntry bin/uglifyjs
12763 silly gunzTarPerm modified mode [ 'bin/uglifyjs', 438, 420 ]
12764 silly gunzTarPerm extractEntry CHANGELOG
12765 silly gunzTarPerm modified mode [ 'CHANGELOG', 438, 420 ]
12766 silly gunzTarPerm extractEntry .jshintrc
12767 silly gunzTarPerm modified mode [ '.jshintrc', 438, 420 ]
12768 silly gunzTarPerm extractEntry lib/contrib.js
12769 silly gunzTarPerm modified mode [ 'lib/contrib.js', 438, 420 ]
12770 silly gunzTarPerm extractEntry LICENSE-MIT
12771 silly gunzTarPerm modified mode [ 'LICENSE-MIT', 438, 420 ]
12772 silly gunzTarPerm extractEntry lib/ast.js
12773 silly gunzTarPerm modified mode [ 'lib/ast.js', 438, 420 ]
12774 silly gunzTarPerm extractEntry lib/compress.js
12775 silly gunzTarPerm modified mode [ 'lib/compress.js', 438, 420 ]
12776 silly gunzTarPerm extractEntry .gitattributes
12777 silly gunzTarPerm modified mode [ '.gitattributes', 438, 420 ]
12778 silly gunzTarPerm extractEntry lib/mozilla-ast.js
12779 silly gunzTarPerm modified mode [ 'lib/mozilla-ast.js', 438, 420 ]
12780 silly gunzTarPerm extractEntry lib/output.js
12781 silly gunzTarPerm modified mode [ 'lib/output.js', 438, 420 ]
12782 silly gunzTarPerm extractEntry .travis.yml
12783 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]
12784 silly gunzTarPerm extractEntry test/lib_test.js
12785 silly gunzTarPerm modified mode [ 'test/lib_test.js', 438, 420 ]
12786 silly gunzTarPerm extractEntry lib/parse.js
12787 silly gunzTarPerm modified mode [ 'lib/parse.js', 438, 420 ]
12788 silly gunzTarPerm extractEntry lib/scope.js
12789 silly gunzTarPerm modified mode [ 'lib/scope.js', 438, 420 ]
12790 silly gunzTarPerm extractEntry lib/sourcemap.js
12791 silly gunzTarPerm modified mode [ 'lib/sourcemap.js', 438, 420 ]
12792 silly gunzTarPerm extractEntry lib/transform.js
12793 silly gunzTarPerm modified mode [ 'lib/transform.js', 438, 420 ]
12794 silly gunzTarPerm extractEntry lib/utils.js
12795 silly gunzTarPerm modified mode [ 'lib/utils.js', 438, 420 ]
12796 silly gunzTarPerm extractEntry test/run-tests.js
12797 silly gunzTarPerm modified mode [ 'test/run-tests.js', 438, 420 ]
12798 silly gunzTarPerm extractEntry test/compress/arrays.js
12799 silly gunzTarPerm modified mode [ 'test/compress/arrays.js', 438, 420 ]
12800 silly gunzTarPerm extractEntry test/compress/issue-12.js
12801 silly gunzTarPerm modified mode [ 'test/compress/issue-12.js', 438, 420 ]
12802 silly gunzTarPerm extractEntry test/compress/issue-126.js
12803 silly gunzTarPerm modified mode [ 'test/compress/issue-126.js', 438, 420 ]
12804 silly gunzTarPerm extractEntry test/compress/issue-143.js
12805 silly gunzTarPerm modified mode [ 'test/compress/issue-143.js', 438, 420 ]
12806 silly gunzTarPerm extractEntry test/compress/issue-105.js
12807 silly gunzTarPerm modified mode [ 'test/compress/issue-105.js', 438, 420 ]
12808 silly gunzTarPerm extractEntry test/compress/issue-267.js
12809 silly gunzTarPerm modified mode [ 'test/compress/issue-267.js', 438, 420 ]
12810 silly gunzTarPerm extractEntry test/compress/issue-269.js
12811 silly gunzTarPerm modified mode [ 'test/compress/issue-269.js', 438, 420 ]
12812 silly gunzTarPerm extractEntry test/compress/issue-44.js
12813 silly gunzTarPerm modified mode [ 'test/compress/issue-44.js', 438, 420 ]
12814 silly gunzTarPerm extractEntry test/compress/issue-59.js
12815 silly gunzTarPerm modified mode [ 'test/compress/issue-59.js', 438, 420 ]
12816 silly gunzTarPerm extractEntry test/compress/labels.js
12817 silly gunzTarPerm modified mode [ 'test/compress/labels.js', 438, 420 ]
12818 silly gunzTarPerm extractEntry test/compress/drop-unused.js
12819 silly gunzTarPerm modified mode [ 'test/compress/drop-unused.js', 438, 420 ]
12820 silly gunzTarPerm extractEntry test/compress/loops.js
12821 silly gunzTarPerm modified mode [ 'test/compress/loops.js', 438, 420 ]
12822 silly gunzTarPerm extractEntry test/compress/debugger.js
12823 silly gunzTarPerm modified mode [ 'test/compress/debugger.js', 438, 420 ]
12824 silly gunzTarPerm extractEntry test/compress/negate-iife.js
12825 silly gunzTarPerm modified mode [ 'test/compress/negate-iife.js', 438, 420 ]
12826 silly gunzTarPerm extractEntry test/compress/dead-code.js
12827 silly gunzTarPerm modified mode [ 'test/compress/dead-code.js', 438, 420 ]
12828 silly gunzTarPerm extractEntry test/compress/properties.js
12829 silly gunzTarPerm modified mode [ 'test/compress/properties.js', 438, 420 ]
12830 silly gunzTarPerm extractEntry test/compress/conditionals.js
12831 silly gunzTarPerm modified mode [ 'test/compress/conditionals.js', 438, 420 ]
12832 silly gunzTarPerm extractEntry test/compress/sequences.js
12833 silly gunzTarPerm modified mode [ 'test/compress/sequences.js', 438, 420 ]
12834 silly gunzTarPerm extractEntry test/compress/concat-strings.js
12835 silly gunzTarPerm modified mode [ 'test/compress/concat-strings.js', 438, 420 ]
12836 silly gunzTarPerm extractEntry test/compress/switch.js
12837 silly gunzTarPerm modified mode [ 'test/compress/switch.js', 438, 420 ]
12838 silly gunzTarPerm extractEntry test/compress/blocks.js
12839 silly gunzTarPerm modified mode [ 'test/compress/blocks.js', 438, 420 ]
12840 silly gunzTarPerm extractEntry test/compress/typeof.js
12841 silly gunzTarPerm modified mode [ 'test/compress/typeof.js', 438, 420 ]
12842 silly gunzTarPerm extractEntry test/compress/issue-22.js
12843 silly gunzTarPerm modified mode [ 'test/compress/issue-22.js', 438, 420 ]
12844 silly gunzTarPerm extractEntry tools/node.js
12845 silly gunzTarPerm modified mode [ 'tools/node.js', 438, 420 ]
12846 silly lockFile fe1aa139-y-node-modules-grunt-lib-contrib tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-uglify\node_modules\grunt-lib-contrib
12847 silly lockFile fe1aa139-y-node-modules-grunt-lib-contrib tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-uglify\node_modules\grunt-lib-contrib
12848 silly lockFile a27c0556-nt-lib-contrib-0-6-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\grunt-lib-contrib\0.6.1\package.tgz
12849 silly lockFile a27c0556-nt-lib-contrib-0-6-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\grunt-lib-contrib\0.6.1\package.tgz
12850 info preinstall grunt-lib-contrib@0.6.1
12851 verbose readDependencies using package.json deps
12852 verbose readDependencies using package.json deps
12853 verbose cache add [ 'zlib-browserify@0.0.1', null ]
12854 verbose cache add name=undefined spec="zlib-browserify@0.0.1" args=["zlib-browserify@0.0.1",null]
12855 verbose parsed url { protocol: null,
12855 verbose parsed url   slashes: null,
12855 verbose parsed url   auth: null,
12855 verbose parsed url   host: null,
12855 verbose parsed url   port: null,
12855 verbose parsed url   hostname: null,
12855 verbose parsed url   hash: null,
12855 verbose parsed url   search: null,
12855 verbose parsed url   query: null,
12855 verbose parsed url   pathname: 'zlib-browserify@0.0.1',
12855 verbose parsed url   path: 'zlib-browserify@0.0.1',
12855 verbose parsed url   href: 'zlib-browserify@0.0.1' }
12856 verbose cache add name="zlib-browserify" spec="0.0.1" args=["zlib-browserify","0.0.1"]
12857 verbose parsed url { protocol: null,
12857 verbose parsed url   slashes: null,
12857 verbose parsed url   auth: null,
12857 verbose parsed url   host: null,
12857 verbose parsed url   port: null,
12857 verbose parsed url   hostname: null,
12857 verbose parsed url   hash: null,
12857 verbose parsed url   search: null,
12857 verbose parsed url   query: null,
12857 verbose parsed url   pathname: '0.0.1',
12857 verbose parsed url   path: '0.0.1',
12857 verbose parsed url   href: '0.0.1' }
12858 verbose addNamed [ 'zlib-browserify', '0.0.1' ]
12859 verbose addNamed [ '0.0.1', '0.0.1' ]
12860 silly lockFile 84e77944-zlib-browserify-0-0-1 zlib-browserify@0.0.1
12861 verbose lock zlib-browserify@0.0.1 C:\Users\Gaston\AppData\Roaming\npm-cache\84e77944-zlib-browserify-0-0-1.lock
12862 verbose url raw zlib-browserify/0.0.1
12863 verbose url resolving [ 'https://registry.npmjs.org/', './zlib-browserify/0.0.1' ]
12864 verbose url resolved https://registry.npmjs.org/zlib-browserify/0.0.1
12865 info trying registry request attempt 1 at 16:40:35
12866 verbose etag "ALMS128G5H5T8EXBCI8SD5OUT"
12867 http GET https://registry.npmjs.org/zlib-browserify/0.0.1
12868 silly lockFile ed65d7a8-ib-uglify-node-modules-uglify-js tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-uglify\node_modules\uglify-js
12869 silly lockFile ed65d7a8-ib-uglify-node-modules-uglify-js tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-uglify\node_modules\uglify-js
12870 silly lockFile 5661998d-ache-uglify-js-2-4-8-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-js\2.4.8\package.tgz
12871 silly lockFile 5661998d-ache-uglify-js-2-4-8-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-js\2.4.8\package.tgz
12872 info preinstall uglify-js@2.4.8
12873 verbose readDependencies using package.json deps
12874 verbose readDependencies using package.json deps
12875 verbose cache add [ 'async@~0.2.6', null ]
12876 verbose cache add name=undefined spec="async@~0.2.6" args=["async@~0.2.6",null]
12877 verbose parsed url { protocol: null,
12877 verbose parsed url   slashes: null,
12877 verbose parsed url   auth: null,
12877 verbose parsed url   host: null,
12877 verbose parsed url   port: null,
12877 verbose parsed url   hostname: null,
12877 verbose parsed url   hash: null,
12877 verbose parsed url   search: null,
12877 verbose parsed url   query: null,
12877 verbose parsed url   pathname: 'async@~0.2.6',
12877 verbose parsed url   path: 'async@~0.2.6',
12877 verbose parsed url   href: 'async@~0.2.6' }
12878 verbose cache add name="async" spec="~0.2.6" args=["async","~0.2.6"]
12879 verbose parsed url { protocol: null,
12879 verbose parsed url   slashes: null,
12879 verbose parsed url   auth: null,
12879 verbose parsed url   host: null,
12879 verbose parsed url   port: null,
12879 verbose parsed url   hostname: null,
12879 verbose parsed url   hash: null,
12879 verbose parsed url   search: null,
12879 verbose parsed url   query: null,
12879 verbose parsed url   pathname: '~0.2.6',
12879 verbose parsed url   path: '~0.2.6',
12879 verbose parsed url   href: '~0.2.6' }
12880 verbose addNamed [ 'async', '~0.2.6' ]
12881 verbose addNamed [ null, '>=0.2.6-0 <0.3.0-0' ]
12882 silly lockFile e00b1d77-async-0-2-6 async@~0.2.6
12883 verbose lock async@~0.2.6 C:\Users\Gaston\AppData\Roaming\npm-cache\e00b1d77-async-0-2-6.lock
12884 verbose cache add [ 'source-map@~0.1.7', null ]
12885 verbose cache add name=undefined spec="source-map@~0.1.7" args=["source-map@~0.1.7",null]
12886 verbose parsed url { protocol: null,
12886 verbose parsed url   slashes: null,
12886 verbose parsed url   auth: null,
12886 verbose parsed url   host: null,
12886 verbose parsed url   port: null,
12886 verbose parsed url   hostname: null,
12886 verbose parsed url   hash: null,
12886 verbose parsed url   search: null,
12886 verbose parsed url   query: null,
12886 verbose parsed url   pathname: 'source-map@~0.1.7',
12886 verbose parsed url   path: 'source-map@~0.1.7',
12886 verbose parsed url   href: 'source-map@~0.1.7' }
12887 verbose cache add name="source-map" spec="~0.1.7" args=["source-map","~0.1.7"]
12888 verbose parsed url { protocol: null,
12888 verbose parsed url   slashes: null,
12888 verbose parsed url   auth: null,
12888 verbose parsed url   host: null,
12888 verbose parsed url   port: null,
12888 verbose parsed url   hostname: null,
12888 verbose parsed url   hash: null,
12888 verbose parsed url   search: null,
12888 verbose parsed url   query: null,
12888 verbose parsed url   pathname: '~0.1.7',
12888 verbose parsed url   path: '~0.1.7',
12888 verbose parsed url   href: '~0.1.7' }
12889 verbose addNamed [ 'source-map', '~0.1.7' ]
12890 verbose addNamed [ null, '>=0.1.7-0 <0.2.0-0' ]
12891 silly lockFile 19b4245f-source-map-0-1-7 source-map@~0.1.7
12892 verbose lock source-map@~0.1.7 C:\Users\Gaston\AppData\Roaming\npm-cache\19b4245f-source-map-0-1-7.lock
12893 verbose cache add [ 'optimist@~0.3.5', null ]
12894 verbose cache add name=undefined spec="optimist@~0.3.5" args=["optimist@~0.3.5",null]
12895 verbose parsed url { protocol: null,
12895 verbose parsed url   slashes: null,
12895 verbose parsed url   auth: null,
12895 verbose parsed url   host: null,
12895 verbose parsed url   port: null,
12895 verbose parsed url   hostname: null,
12895 verbose parsed url   hash: null,
12895 verbose parsed url   search: null,
12895 verbose parsed url   query: null,
12895 verbose parsed url   pathname: 'optimist@~0.3.5',
12895 verbose parsed url   path: 'optimist@~0.3.5',
12895 verbose parsed url   href: 'optimist@~0.3.5' }
12896 verbose cache add name="optimist" spec="~0.3.5" args=["optimist","~0.3.5"]
12897 verbose parsed url { protocol: null,
12897 verbose parsed url   slashes: null,
12897 verbose parsed url   auth: null,
12897 verbose parsed url   host: null,
12897 verbose parsed url   port: null,
12897 verbose parsed url   hostname: null,
12897 verbose parsed url   hash: null,
12897 verbose parsed url   search: null,
12897 verbose parsed url   query: null,
12897 verbose parsed url   pathname: '~0.3.5',
12897 verbose parsed url   path: '~0.3.5',
12897 verbose parsed url   href: '~0.3.5' }
12898 verbose addNamed [ 'optimist', '~0.3.5' ]
12899 verbose addNamed [ null, '>=0.3.5-0 <0.4.0-0' ]
12900 silly lockFile a1f99b53-optimist-0-3-5 optimist@~0.3.5
12901 verbose lock optimist@~0.3.5 C:\Users\Gaston\AppData\Roaming\npm-cache\a1f99b53-optimist-0-3-5.lock
12902 verbose cache add [ 'uglify-to-browserify@~1.0.0', null ]
12903 verbose cache add name=undefined spec="uglify-to-browserify@~1.0.0" args=["uglify-to-browserify@~1.0.0",null]
12904 verbose parsed url { protocol: null,
12904 verbose parsed url   slashes: null,
12904 verbose parsed url   auth: null,
12904 verbose parsed url   host: null,
12904 verbose parsed url   port: null,
12904 verbose parsed url   hostname: null,
12904 verbose parsed url   hash: null,
12904 verbose parsed url   search: null,
12904 verbose parsed url   query: null,
12904 verbose parsed url   pathname: 'uglify-to-browserify@~1.0.0',
12904 verbose parsed url   path: 'uglify-to-browserify@~1.0.0',
12904 verbose parsed url   href: 'uglify-to-browserify@~1.0.0' }
12905 verbose cache add name="uglify-to-browserify" spec="~1.0.0" args=["uglify-to-browserify","~1.0.0"]
12906 verbose parsed url { protocol: null,
12906 verbose parsed url   slashes: null,
12906 verbose parsed url   auth: null,
12906 verbose parsed url   host: null,
12906 verbose parsed url   port: null,
12906 verbose parsed url   hostname: null,
12906 verbose parsed url   hash: null,
12906 verbose parsed url   search: null,
12906 verbose parsed url   query: null,
12906 verbose parsed url   pathname: '~1.0.0',
12906 verbose parsed url   path: '~1.0.0',
12906 verbose parsed url   href: '~1.0.0' }
12907 verbose addNamed [ 'uglify-to-browserify', '~1.0.0' ]
12908 verbose addNamed [ null, '>=1.0.0-0 <1.1.0-0' ]
12909 silly lockFile 8d4498e3-uglify-to-browserify-1-0-0 uglify-to-browserify@~1.0.0
12910 verbose lock uglify-to-browserify@~1.0.0 C:\Users\Gaston\AppData\Roaming\npm-cache\8d4498e3-uglify-to-browserify-1-0-0.lock
12911 silly addNameRange { name: 'async', range: '>=0.2.6-0 <0.3.0-0', hasData: false }
12912 silly addNameRange { name: 'source-map',
12912 silly addNameRange   range: '>=0.1.7-0 <0.2.0-0',
12912 silly addNameRange   hasData: false }
12913 silly addNameRange { name: 'optimist', range: '>=0.3.5-0 <0.4.0-0', hasData: false }
12914 verbose url raw source-map
12915 verbose url resolving [ 'https://registry.npmjs.org/', './source-map' ]
12916 verbose url resolved https://registry.npmjs.org/source-map
12917 info trying registry request attempt 1 at 16:40:36
12918 http GET https://registry.npmjs.org/source-map
12919 silly addNameRange { name: 'uglify-to-browserify',
12919 silly addNameRange   range: '>=1.0.0-0 <1.1.0-0',
12919 silly addNameRange   hasData: false }
12920 verbose url raw uglify-to-browserify
12921 verbose url resolving [ 'https://registry.npmjs.org/', './uglify-to-browserify' ]
12922 verbose url resolved https://registry.npmjs.org/uglify-to-browserify
12923 info trying registry request attempt 1 at 16:40:36
12924 http GET https://registry.npmjs.org/uglify-to-browserify
12925 verbose url raw optimist
12926 verbose url resolving [ 'https://registry.npmjs.org/', './optimist' ]
12927 verbose url resolved https://registry.npmjs.org/optimist
12928 info trying registry request attempt 1 at 16:40:36
12929 verbose etag "DZTRL468Y65IUZZ0CDYYH0ZX8"
12930 http GET https://registry.npmjs.org/optimist
12931 verbose url raw async
12932 verbose url resolving [ 'https://registry.npmjs.org/', './async' ]
12933 verbose url resolved https://registry.npmjs.org/async
12934 info trying registry request attempt 1 at 16:40:36
12935 verbose etag "1I9ZGRGBDL3K6MN9A9JI71HM6"
12936 http GET https://registry.npmjs.org/async
12937 http 304 https://registry.npmjs.org/zlib-browserify/0.0.1
12938 silly registry.get cb [ 304,
12938 silly registry.get   { date: 'Fri, 03 Jan 2014 19:39:38 GMT',
12938 silly registry.get     server: 'Apache',
12938 silly registry.get     connection: 'Keep-Alive',
12938 silly registry.get     'keep-alive': 'timeout=10, max=50',
12938 silly registry.get     etag: '"ALMS128G5H5T8EXBCI8SD5OUT"',
12938 silly registry.get     vary: 'Accept' } ]
12939 verbose etag zlib-browserify/0.0.1 from cache
12940 silly lockFile 84e77944-zlib-browserify-0-0-1 zlib-browserify@0.0.1
12941 silly lockFile 84e77944-zlib-browserify-0-0-1 zlib-browserify@0.0.1
12942 silly resolved [ { name: 'zlib-browserify',
12942 silly resolved     version: '0.0.1',
12942 silly resolved     description: 'Wrapper for zlib.js to allow for browserifyication',
12942 silly resolved     main: 'index.js',
12942 silly resolved     directories: { test: 'test' },
12942 silly resolved     dependencies: {},
12942 silly resolved     devDependencies: { tap: '~0.3.3' },
12942 silly resolved     scripts: { test: './node_modules/tap test/*.test.js' },
12942 silly resolved     repository:
12942 silly resolved      { type: 'git',
12942 silly resolved        url: 'git://github.com/brianloveswords/zlib-browserify.git' },
12942 silly resolved     keywords: [ 'zlib', 'browserify' ],
12942 silly resolved     author: { name: 'Brian J. Brennan' },
12942 silly resolved     license: 'MIT',
12942 silly resolved     gitHead: '4be9419f0e8e9dec9629c8a538b33a4efd7df17b',
12942 silly resolved     readmeFilename: 'readme.md',
12942 silly resolved     readme: 'Zlib in yo\' browser.\n',
12942 silly resolved     bugs: { url: 'https://github.com/brianloveswords/zlib-browserify/issues' },
12942 silly resolved     homepage: 'https://github.com/brianloveswords/zlib-browserify',
12942 silly resolved     _id: 'zlib-browserify@0.0.1',
12942 silly resolved     dist: { shasum: '1e602e866cf264fbc1aacf0d44b697c75c933e11' },
12942 silly resolved     _from: 'zlib-browserify@0.0.1',
12942 silly resolved     _resolved: 'https://registry.npmjs.org/zlib-browserify/-/zlib-browserify-0.0.1.tgz' } ]
12943 info install zlib-browserify@0.0.1 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-uglify\node_modules\grunt-lib-contrib
12944 info installOne zlib-browserify@0.0.1
12945 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-uglify\node_modules\grunt-lib-contrib\node_modules\zlib-browserify unbuild
12946 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\zlib-browserify\0.0.1\package.tgz
12947 silly lockFile e88e509b-rib-node-modules-zlib-browserify tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-uglify\node_modules\grunt-lib-contrib\node_modules\zlib-browserify
12948 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-uglify\node_modules\grunt-lib-contrib\node_modules\zlib-browserify C:\Users\Gaston\AppData\Roaming\npm-cache\e88e509b-rib-node-modules-zlib-browserify.lock
12949 silly lockFile d0a3ffe6-lib-browserify-0-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\zlib-browserify\0.0.1\package.tgz
12950 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\zlib-browserify\0.0.1\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\d0a3ffe6-lib-browserify-0-0-1-package-tgz.lock
12951 silly gunzTarPerm modes [ '755', '644' ]
12952 silly gunzTarPerm extractEntry package.json
12953 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
12954 silly gunzTarPerm extractEntry .npmignore
12955 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
12956 silly gunzTarPerm extractEntry index.js
12957 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
12958 silly gunzTarPerm extractEntry zlib.js
12959 silly gunzTarPerm modified mode [ 'zlib.js', 438, 420 ]
12960 silly gunzTarPerm extractEntry readme.md
12961 silly gunzTarPerm modified mode [ 'readme.md', 438, 420 ]
12962 silly gunzTarPerm extractEntry test/zlib.test.js
12963 silly gunzTarPerm modified mode [ 'test/zlib.test.js', 438, 420 ]
12964 silly lockFile e88e509b-rib-node-modules-zlib-browserify tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-uglify\node_modules\grunt-lib-contrib\node_modules\zlib-browserify
12965 silly lockFile e88e509b-rib-node-modules-zlib-browserify tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-uglify\node_modules\grunt-lib-contrib\node_modules\zlib-browserify
12966 silly lockFile d0a3ffe6-lib-browserify-0-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\zlib-browserify\0.0.1\package.tgz
12967 silly lockFile d0a3ffe6-lib-browserify-0-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\zlib-browserify\0.0.1\package.tgz
12968 info preinstall zlib-browserify@0.0.1
12969 verbose readDependencies using package.json deps
12970 verbose readDependencies using package.json deps
12971 silly resolved []
12972 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-uglify\node_modules\grunt-lib-contrib\node_modules\zlib-browserify
12973 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-uglify\node_modules\grunt-lib-contrib\node_modules\zlib-browserify
12974 verbose linkStuff [ false,
12974 verbose linkStuff   false,
12974 verbose linkStuff   false,
12974 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-contrib-uglify\\node_modules\\grunt-lib-contrib\\node_modules' ]
12975 info linkStuff zlib-browserify@0.0.1
12976 verbose linkBins zlib-browserify@0.0.1
12977 verbose linkMans zlib-browserify@0.0.1
12978 verbose rebuildBundles zlib-browserify@0.0.1
12979 info install zlib-browserify@0.0.1
12980 info postinstall zlib-browserify@0.0.1
12981 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-uglify\node_modules\grunt-lib-contrib
12982 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-uglify\node_modules\grunt-lib-contrib
12983 verbose linkStuff [ false,
12983 verbose linkStuff   false,
12983 verbose linkStuff   false,
12983 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-contrib-uglify\\node_modules' ]
12984 info linkStuff grunt-lib-contrib@0.6.1
12985 verbose linkBins grunt-lib-contrib@0.6.1
12986 verbose linkMans grunt-lib-contrib@0.6.1
12987 verbose rebuildBundles grunt-lib-contrib@0.6.1
12988 verbose rebuildBundles [ 'zlib-browserify' ]
12989 info install grunt-lib-contrib@0.6.1
12990 info postinstall grunt-lib-contrib@0.6.1
12991 http 200 https://registry.npmjs.org/uglify-to-browserify
12992 silly registry.get cb [ 200,
12992 silly registry.get   { date: 'Fri, 03 Jan 2014 19:39:38 GMT',
12992 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
12992 silly registry.get     etag: '"88L8TXFDN18O6IR0QCEW5YPPZ"',
12992 silly registry.get     'content-type': 'application/json',
12992 silly registry.get     'content-length': '6048',
12992 silly registry.get     'accept-ranges': 'bytes',
12992 silly registry.get     via: '1.1 varnish',
12992 silly registry.get     age: '85921',
12992 silly registry.get     'x-served-by': 'cache-d64-DAL',
12992 silly registry.get     'x-cache': 'HIT',
12992 silly registry.get     'x-cache-hits': '1',
12992 silly registry.get     'x-timer': 'S1388777978.902649879,VS0,VE18',
12992 silly registry.get     vary: 'Accept',
12992 silly registry.get     'keep-alive': 'timeout=10, max=49',
12992 silly registry.get     connection: 'Keep-Alive' } ]
12993 silly addNameRange number 2 { name: 'uglify-to-browserify',
12993 silly addNameRange   range: '>=1.0.0-0 <1.1.0-0',
12993 silly addNameRange   hasData: true }
12994 silly addNameRange versions [ 'uglify-to-browserify', [ '0.0.1', '1.0.0', '1.0.1' ] ]
12995 verbose addNamed [ 'uglify-to-browserify', '1.0.1' ]
12996 verbose addNamed [ '1.0.1', '1.0.1' ]
12997 silly lockFile 7ae28580-uglify-to-browserify-1-0-1 uglify-to-browserify@1.0.1
12998 verbose lock uglify-to-browserify@1.0.1 C:\Users\Gaston\AppData\Roaming\npm-cache\7ae28580-uglify-to-browserify-1-0-1.lock
12999 silly lockFile 1c860f2b-y-uglify-to-browserify-1-0-1-tgz https://registry.npmjs.org/uglify-to-browserify/-/uglify-to-browserify-1.0.1.tgz
13000 verbose lock https://registry.npmjs.org/uglify-to-browserify/-/uglify-to-browserify-1.0.1.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\1c860f2b-y-uglify-to-browserify-1-0-1-tgz.lock
13001 verbose addRemoteTarball [ 'https://registry.npmjs.org/uglify-to-browserify/-/uglify-to-browserify-1.0.1.tgz',
13001 verbose addRemoteTarball   '0e9ada5d4ca358a59a00bb33c8061e2f40ef97d2' ]
13002 info retry fetch attempt 1 at 16:40:40
13003 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778040367-0.5843432191759348\tmp.tgz
13004 http GET https://registry.npmjs.org/uglify-to-browserify/-/uglify-to-browserify-1.0.1.tgz
13005 http 200 https://registry.npmjs.org/uglify-to-browserify/-/uglify-to-browserify-1.0.1.tgz
13006 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778040367-0.5843432191759348\tmp.tgz
13007 silly lockFile e97146a9-40367-0-5843432191759348-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778040367-0.5843432191759348\package
13008 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778040367-0.5843432191759348\package C:\Users\Gaston\AppData\Roaming\npm-cache\e97146a9-40367-0-5843432191759348-package.lock
13009 silly lockFile bb02f735-40367-0-5843432191759348-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778040367-0.5843432191759348\tmp.tgz
13010 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778040367-0.5843432191759348\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\bb02f735-40367-0-5843432191759348-tmp-tgz.lock
13011 silly gunzTarPerm modes [ '755', '644' ]
13012 silly gunzTarPerm extractEntry package.json
13013 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
13014 silly gunzTarPerm extractEntry .npmignore
13015 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
13016 silly gunzTarPerm extractEntry README.md
13017 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
13018 silly gunzTarPerm extractEntry LICENSE
13019 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
13020 silly gunzTarPerm extractEntry index.js
13021 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
13022 silly gunzTarPerm extractEntry .travis.yml
13023 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]
13024 silly gunzTarPerm extractEntry test/index.js
13025 silly gunzTarPerm modified mode [ 'test/index.js', 438, 420 ]
13026 silly lockFile e97146a9-40367-0-5843432191759348-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778040367-0.5843432191759348\package
13027 silly lockFile e97146a9-40367-0-5843432191759348-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778040367-0.5843432191759348\package
13028 silly lockFile bb02f735-40367-0-5843432191759348-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778040367-0.5843432191759348\tmp.tgz
13029 silly lockFile bb02f735-40367-0-5843432191759348-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778040367-0.5843432191759348\tmp.tgz
13030 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\uglify-to-browserify\\1.0.1\\package.tgz',
13030 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388778040367-0.5843432191759348\\package' ]
13031 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-to-browserify\1.0.1\package.tgz
13032 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778040367-0.5843432191759348\package
13033 silly lockFile e97146a9-40367-0-5843432191759348-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778040367-0.5843432191759348\package
13034 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778040367-0.5843432191759348\package C:\Users\Gaston\AppData\Roaming\npm-cache\e97146a9-40367-0-5843432191759348-package.lock
13035 silly lockFile 326415d4--to-browserify-1-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-to-browserify\1.0.1\package.tgz
13036 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-to-browserify\1.0.1\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\326415d4--to-browserify-1-0-1-package-tgz.lock
13037 silly lockFile e97146a9-40367-0-5843432191759348-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778040367-0.5843432191759348\package
13038 silly lockFile e97146a9-40367-0-5843432191759348-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778040367-0.5843432191759348\package
13039 silly lockFile 326415d4--to-browserify-1-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-to-browserify\1.0.1\package.tgz
13040 silly lockFile 326415d4--to-browserify-1-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-to-browserify\1.0.1\package.tgz
13041 silly lockFile 4868e8ab-lify-to-browserify-1-0-1-package C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-to-browserify\1.0.1\package
13042 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-to-browserify\1.0.1\package C:\Users\Gaston\AppData\Roaming\npm-cache\4868e8ab-lify-to-browserify-1-0-1-package.lock
13043 silly lockFile 4868e8ab-lify-to-browserify-1-0-1-package C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-to-browserify\1.0.1\package
13044 silly lockFile 4868e8ab-lify-to-browserify-1-0-1-package C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-to-browserify\1.0.1\package
13045 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-to-browserify\1.0.1\package.tgz
13046 silly lockFile a4b57a5e-lify-to-browserify-1-0-1-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-to-browserify\1.0.1\package
13047 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-to-browserify\1.0.1\package C:\Users\Gaston\AppData\Roaming\npm-cache\a4b57a5e-lify-to-browserify-1-0-1-package.lock
13048 silly lockFile 326415d4--to-browserify-1-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-to-browserify\1.0.1\package.tgz
13049 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-to-browserify\1.0.1\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\326415d4--to-browserify-1-0-1-package-tgz.lock
13050 silly gunzTarPerm modes [ '755', '644' ]
13051 silly gunzTarPerm extractEntry package.json
13052 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
13053 silly gunzTarPerm extractEntry .npmignore
13054 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
13055 silly gunzTarPerm extractEntry README.md
13056 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
13057 silly gunzTarPerm extractEntry LICENSE
13058 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
13059 silly gunzTarPerm extractEntry index.js
13060 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
13061 silly gunzTarPerm extractEntry .travis.yml
13062 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]
13063 silly gunzTarPerm extractEntry test/index.js
13064 silly gunzTarPerm modified mode [ 'test/index.js', 438, 420 ]
13065 silly lockFile a4b57a5e-lify-to-browserify-1-0-1-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-to-browserify\1.0.1\package
13066 silly lockFile a4b57a5e-lify-to-browserify-1-0-1-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-to-browserify\1.0.1\package
13067 silly lockFile 326415d4--to-browserify-1-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-to-browserify\1.0.1\package.tgz
13068 silly lockFile 326415d4--to-browserify-1-0-1-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-to-browserify\1.0.1\package.tgz
13069 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-to-browserify\1.0.1\package.tgz 644
13070 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\uglify-to-browserify\1.0.1\package.tgz
13071 silly lockFile 1c860f2b-y-uglify-to-browserify-1-0-1-tgz https://registry.npmjs.org/uglify-to-browserify/-/uglify-to-browserify-1.0.1.tgz
13072 silly lockFile 1c860f2b-y-uglify-to-browserify-1-0-1-tgz https://registry.npmjs.org/uglify-to-browserify/-/uglify-to-browserify-1.0.1.tgz
13073 silly lockFile 7ae28580-uglify-to-browserify-1-0-1 uglify-to-browserify@1.0.1
13074 silly lockFile 7ae28580-uglify-to-browserify-1-0-1 uglify-to-browserify@1.0.1
13075 silly lockFile 8d4498e3-uglify-to-browserify-1-0-0 uglify-to-browserify@~1.0.0
13076 silly lockFile 8d4498e3-uglify-to-browserify-1-0-0 uglify-to-browserify@~1.0.0
13077 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778013145-0.7841842789202929\tmp.tgz
13078 silly lockFile 831cd342-13145-0-7841842789202929-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778013145-0.7841842789202929\package
13079 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778013145-0.7841842789202929\package C:\Users\Gaston\AppData\Roaming\npm-cache\831cd342-13145-0-7841842789202929-package.lock
13080 silly lockFile a1227db3-13145-0-7841842789202929-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778013145-0.7841842789202929\tmp.tgz
13081 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778013145-0.7841842789202929\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\a1227db3-13145-0-7841842789202929-tmp-tgz.lock
13082 silly gunzTarPerm modes [ '755', '644' ]
13083 silly gunzTarPerm extractEntry package.json
13084 silly gunzTarPerm extractEntry .npmignore
13085 silly gunzTarPerm extractEntry benchmark.js
13086 silly gunzTarPerm extractEntry examples.js
13087 silly gunzTarPerm extractEntry index.js
13088 silly gunzTarPerm extractEntry History.md
13089 silly gunzTarPerm extractEntry .gitmodules
13090 silly gunzTarPerm extractEntry component.json
13091 silly gunzTarPerm extractEntry Makefile
13092 silly gunzTarPerm extractEntry .travis.yml
13093 silly gunzTarPerm extractEntry Readme.md
13094 silly gunzTarPerm extractEntry test/parse.js
13095 silly gunzTarPerm extractEntry test/stringify.js
13096 silly gunzTarPerm extractEntry test/browser/expect.js
13097 silly gunzTarPerm extractEntry test/browser/jquery.js
13098 http 304 https://registry.npmjs.org/optimist
13099 silly registry.get cb [ 304,
13099 silly registry.get   { date: 'Fri, 03 Jan 2014 19:39:41 GMT',
13099 silly registry.get     server: 'Apache',
13099 silly registry.get     connection: 'Keep-Alive',
13099 silly registry.get     'keep-alive': 'timeout=10, max=48',
13099 silly registry.get     etag: '"DZTRL468Y65IUZZ0CDYYH0ZX8"',
13099 silly registry.get     vary: 'Accept' } ]
13100 verbose etag optimist from cache
13101 silly gunzTarPerm extractEntry test/browser/mocha.js
13102 silly gunzTarPerm extractEntry test/browser/qs.js
13103 silly gunzTarPerm extractEntry test/browser/index.html
13104 silly gunzTarPerm extractEntry test/browser/mocha.css
13105 silly gunzTarPerm extractEntry test/browser/qs.css
13106 silly addNameRange number 2 { name: 'optimist', range: '>=0.3.5-0 <0.4.0-0', hasData: true }
13107 silly addNameRange versions [ 'optimist',
13107 silly addNameRange   [ '0.0.1',
13107 silly addNameRange     '0.0.2',
13107 silly addNameRange     '0.0.4',
13107 silly addNameRange     '0.0.5',
13107 silly addNameRange     '0.0.6',
13107 silly addNameRange     '0.0.7',
13107 silly addNameRange     '0.1.0',
13107 silly addNameRange     '0.1.1',
13107 silly addNameRange     '0.1.2',
13107 silly addNameRange     '0.1.3',
13107 silly addNameRange     '0.1.4',
13107 silly addNameRange     '0.1.5',
13107 silly addNameRange     '0.1.6',
13107 silly addNameRange     '0.1.7',
13107 silly addNameRange     '0.1.8',
13107 silly addNameRange     '0.1.9',
13107 silly addNameRange     '0.0.3',
13107 silly addNameRange     '0.2.0',
13107 silly addNameRange     '0.2.1',
13107 silly addNameRange     '0.2.2',
13107 silly addNameRange     '0.2.3',
13107 silly addNameRange     '0.2.4',
13107 silly addNameRange     '0.2.5',
13107 silly addNameRange     '0.2.6',
13107 silly addNameRange     '0.2.7',
13107 silly addNameRange     '0.2.8',
13107 silly addNameRange     '0.3.0',
13107 silly addNameRange     '0.3.1',
13107 silly addNameRange     '0.3.3',
13107 silly addNameRange     '0.3.4',
13107 silly addNameRange     '0.3.5',
13107 silly addNameRange     '0.3.6',
13107 silly addNameRange     '0.3.7',
13107 silly addNameRange     '0.4.0',
13107 silly addNameRange     '0.5.0',
13107 silly addNameRange     '0.5.1',
13107 silly addNameRange     '0.5.2',
13107 silly addNameRange     '0.6.0' ] ]
13108 verbose addNamed [ 'optimist', '0.3.7' ]
13109 verbose addNamed [ '0.3.7', '0.3.7' ]
13110 silly lockFile 090e1d8d-optimist-0-3-7 optimist@0.3.7
13111 verbose lock optimist@0.3.7 C:\Users\Gaston\AppData\Roaming\npm-cache\090e1d8d-optimist-0-3-7.lock
13112 silly lockFile 03b2dd13--org-optimist-optimist-0-3-7-tgz https://registry.npmjs.org/optimist/-/optimist-0.3.7.tgz
13113 verbose lock https://registry.npmjs.org/optimist/-/optimist-0.3.7.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\03b2dd13--org-optimist-optimist-0-3-7-tgz.lock
13114 verbose addRemoteTarball [ 'https://registry.npmjs.org/optimist/-/optimist-0.3.7.tgz',
13114 verbose addRemoteTarball   'c90941ad59e4273328923074d2cf2e7cbc6ec0d9' ]
13115 info retry fetch attempt 1 at 16:40:45
13116 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778045918-0.7213810586836189\tmp.tgz
13117 http GET https://registry.npmjs.org/optimist/-/optimist-0.3.7.tgz
13118 http 304 https://registry.npmjs.org/async
13119 silly registry.get cb [ 304,
13119 silly registry.get   { date: 'Fri, 03 Jan 2014 19:39:46 GMT',
13119 silly registry.get     server: 'Apache',
13119 silly registry.get     connection: 'Keep-Alive',
13119 silly registry.get     'keep-alive': 'timeout=10, max=47',
13119 silly registry.get     etag: '"1I9ZGRGBDL3K6MN9A9JI71HM6"',
13119 silly registry.get     vary: 'Accept' } ]
13120 verbose etag async from cache
13121 silly addNameRange number 2 { name: 'async', range: '>=0.2.6-0 <0.3.0-0', hasData: true }
13122 silly addNameRange versions [ 'async',
13122 silly addNameRange   [ '0.1.0',
13122 silly addNameRange     '0.1.1',
13122 silly addNameRange     '0.1.2',
13122 silly addNameRange     '0.1.3',
13122 silly addNameRange     '0.1.4',
13122 silly addNameRange     '0.1.5',
13122 silly addNameRange     '0.1.6',
13122 silly addNameRange     '0.1.7',
13122 silly addNameRange     '0.1.8',
13122 silly addNameRange     '0.1.9',
13122 silly addNameRange     '0.1.10',
13122 silly addNameRange     '0.1.11',
13122 silly addNameRange     '0.1.12',
13122 silly addNameRange     '0.1.13',
13122 silly addNameRange     '0.1.14',
13122 silly addNameRange     '0.1.15',
13122 silly addNameRange     '0.1.16',
13122 silly addNameRange     '0.1.17',
13122 silly addNameRange     '0.1.18',
13122 silly addNameRange     '0.1.19',
13122 silly addNameRange     '0.1.20',
13122 silly addNameRange     '0.1.21',
13122 silly addNameRange     '0.1.22',
13122 silly addNameRange     '0.2.0',
13122 silly addNameRange     '0.2.1',
13122 silly addNameRange     '0.2.2',
13122 silly addNameRange     '0.2.3',
13122 silly addNameRange     '0.2.4',
13122 silly addNameRange     '0.2.5',
13122 silly addNameRange     '0.2.6',
13122 silly addNameRange     '0.2.7',
13122 silly addNameRange     '0.2.8',
13122 silly addNameRange     '0.2.9' ] ]
13123 verbose addNamed [ 'async', '0.2.9' ]
13124 verbose addNamed [ '0.2.9', '0.2.9' ]
13125 silly lockFile be62480b-async-0-2-9 async@0.2.9
13126 verbose lock async@0.2.9 C:\Users\Gaston\AppData\Roaming\npm-cache\be62480b-async-0-2-9.lock
13127 silly lockFile be62480b-async-0-2-9 async@0.2.9
13128 silly lockFile be62480b-async-0-2-9 async@0.2.9
13129 silly lockFile e00b1d77-async-0-2-6 async@~0.2.6
13130 silly lockFile e00b1d77-async-0-2-6 async@~0.2.6
13131 silly lockFile 831cd342-13145-0-7841842789202929-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778013145-0.7841842789202929\package
13132 silly lockFile 831cd342-13145-0-7841842789202929-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778013145-0.7841842789202929\package
13133 silly lockFile a1227db3-13145-0-7841842789202929-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778013145-0.7841842789202929\tmp.tgz
13134 silly lockFile a1227db3-13145-0-7841842789202929-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778013145-0.7841842789202929\tmp.tgz
13135 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\qs\\0.5.6\\package.tgz',
13135 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388778013145-0.7841842789202929\\package' ]
13136 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.5.6\package.tgz
13137 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778013145-0.7841842789202929\package
13138 silly lockFile 831cd342-13145-0-7841842789202929-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778013145-0.7841842789202929\package
13139 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778013145-0.7841842789202929\package C:\Users\Gaston\AppData\Roaming\npm-cache\831cd342-13145-0-7841842789202929-package.lock
13140 silly lockFile 4d7795de-g-npm-cache-qs-0-5-6-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.5.6\package.tgz
13141 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.5.6\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\4d7795de-g-npm-cache-qs-0-5-6-package-tgz.lock
13142 http 200 https://registry.npmjs.org/optimist/-/optimist-0.3.7.tgz
13143 silly lockFile 831cd342-13145-0-7841842789202929-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778013145-0.7841842789202929\package
13144 silly lockFile 831cd342-13145-0-7841842789202929-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778013145-0.7841842789202929\package
13145 silly lockFile 4d7795de-g-npm-cache-qs-0-5-6-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.5.6\package.tgz
13146 silly lockFile 4d7795de-g-npm-cache-qs-0-5-6-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.5.6\package.tgz
13147 silly lockFile 9ce67d91-aming-npm-cache-qs-0-5-6-package C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.5.6\package
13148 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.5.6\package C:\Users\Gaston\AppData\Roaming\npm-cache\9ce67d91-aming-npm-cache-qs-0-5-6-package.lock
13149 silly lockFile 9ce67d91-aming-npm-cache-qs-0-5-6-package C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.5.6\package
13150 silly lockFile 9ce67d91-aming-npm-cache-qs-0-5-6-package C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.5.6\package
13151 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.5.6\package.tgz
13152 silly lockFile 8b92bc11-aming-npm-cache-qs-0-5-6-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.5.6\package
13153 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.5.6\package C:\Users\Gaston\AppData\Roaming\npm-cache\8b92bc11-aming-npm-cache-qs-0-5-6-package.lock
13154 silly lockFile 4d7795de-g-npm-cache-qs-0-5-6-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.5.6\package.tgz
13155 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.5.6\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\4d7795de-g-npm-cache-qs-0-5-6-package-tgz.lock
13156 silly gunzTarPerm modes [ '755', '644' ]
13157 silly gunzTarPerm extractEntry package.json
13158 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
13159 silly gunzTarPerm extractEntry .npmignore
13160 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
13161 silly gunzTarPerm extractEntry benchmark.js
13162 silly gunzTarPerm modified mode [ 'benchmark.js', 438, 420 ]
13163 verbose tar unpack C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778045918-0.7213810586836189\tmp.tgz
13164 silly lockFile b9c0c786-45918-0-7213810586836189-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778045918-0.7213810586836189\package
13165 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778045918-0.7213810586836189\package C:\Users\Gaston\AppData\Roaming\npm-cache\b9c0c786-45918-0-7213810586836189-package.lock
13166 silly lockFile cfe5ffed-45918-0-7213810586836189-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778045918-0.7213810586836189\tmp.tgz
13167 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778045918-0.7213810586836189\tmp.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\cfe5ffed-45918-0-7213810586836189-tmp-tgz.lock
13168 silly gunzTarPerm modes [ '755', '644' ]
13169 silly gunzTarPerm extractEntry examples.js
13170 silly gunzTarPerm modified mode [ 'examples.js', 438, 420 ]
13171 silly gunzTarPerm extractEntry index.js
13172 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
13173 silly gunzTarPerm extractEntry package.json
13174 silly gunzTarPerm extractEntry History.md
13175 silly gunzTarPerm modified mode [ 'History.md', 438, 420 ]
13176 silly gunzTarPerm extractEntry .gitmodules
13177 silly gunzTarPerm modified mode [ '.gitmodules', 438, 420 ]
13178 silly gunzTarPerm extractEntry LICENSE
13179 silly gunzTarPerm extractEntry index.js
13180 silly gunzTarPerm extractEntry component.json
13181 silly gunzTarPerm modified mode [ 'component.json', 438, 420 ]
13182 silly gunzTarPerm extractEntry example/line_count_options.js
13183 silly gunzTarPerm extractEntry Makefile
13184 silly gunzTarPerm modified mode [ 'Makefile', 438, 420 ]
13185 silly gunzTarPerm extractEntry example/boolean_double.js
13186 silly gunzTarPerm extractEntry example/divide.js
13187 silly gunzTarPerm extractEntry .travis.yml
13188 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]
13189 silly gunzTarPerm extractEntry Readme.md
13190 silly gunzTarPerm modified mode [ 'Readme.md', 438, 420 ]
13191 silly gunzTarPerm extractEntry test/parse.js
13192 silly gunzTarPerm modified mode [ 'test/parse.js', 438, 420 ]
13193 silly gunzTarPerm extractEntry test/stringify.js
13194 silly gunzTarPerm modified mode [ 'test/stringify.js', 438, 420 ]
13195 silly gunzTarPerm extractEntry example/nonopt.js
13196 silly gunzTarPerm extractEntry example/string.js
13197 silly gunzTarPerm extractEntry test/browser/expect.js
13198 silly gunzTarPerm modified mode [ 'test/browser/expect.js', 438, 420 ]
13199 silly gunzTarPerm extractEntry test/browser/jquery.js
13200 silly gunzTarPerm modified mode [ 'test/browser/jquery.js', 438, 420 ]
13201 silly gunzTarPerm extractEntry test/browser/mocha.js
13202 silly gunzTarPerm modified mode [ 'test/browser/mocha.js', 438, 420 ]
13203 silly gunzTarPerm extractEntry example/default_hash.js
13204 silly gunzTarPerm extractEntry example/reflect.js
13205 silly gunzTarPerm extractEntry example/default_singles.js
13206 silly gunzTarPerm extractEntry example/usage-options.js
13207 silly gunzTarPerm extractEntry test/browser/qs.js
13208 silly gunzTarPerm modified mode [ 'test/browser/qs.js', 438, 420 ]
13209 silly gunzTarPerm extractEntry test/browser/index.html
13210 silly gunzTarPerm modified mode [ 'test/browser/index.html', 438, 420 ]
13211 silly gunzTarPerm extractEntry test/browser/mocha.css
13212 silly gunzTarPerm modified mode [ 'test/browser/mocha.css', 438, 420 ]
13213 silly gunzTarPerm extractEntry test/browser/qs.css
13214 silly gunzTarPerm modified mode [ 'test/browser/qs.css', 438, 420 ]
13215 silly gunzTarPerm extractEntry example/bool.js
13216 silly gunzTarPerm extractEntry example/short.js
13217 silly gunzTarPerm extractEntry example/xup.js
13218 silly gunzTarPerm extractEntry example/boolean_single.js
13219 silly gunzTarPerm extractEntry example/line_count_wrap.js
13220 silly gunzTarPerm extractEntry example/line_count.js
13221 silly gunzTarPerm extractEntry readme.markdown
13222 silly gunzTarPerm extractEntry test/parse.js
13223 silly gunzTarPerm extractEntry test/_.js
13224 silly gunzTarPerm extractEntry test/usage.js
13225 silly gunzTarPerm extractEntry test/_/bin.js
13226 silly gunzTarPerm extractEntry test/_/argv.js
13227 silly gunzTarPerm extractEntry .travis.yml
13228 silly lockFile b9c0c786-45918-0-7213810586836189-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778045918-0.7213810586836189\package
13229 silly lockFile b9c0c786-45918-0-7213810586836189-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778045918-0.7213810586836189\package
13230 silly lockFile cfe5ffed-45918-0-7213810586836189-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778045918-0.7213810586836189\tmp.tgz
13231 silly lockFile cfe5ffed-45918-0-7213810586836189-tmp-tgz tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778045918-0.7213810586836189\tmp.tgz
13232 verbose tar pack [ 'C:\\Users\\Gaston\\AppData\\Roaming\\npm-cache\\optimist\\0.3.7\\package.tgz',
13232 verbose tar pack   'C:\\Users\\Gaston\\AppData\\Local\\Temp\\npm-3168-WZdkTj4f\\1388778045918-0.7213810586836189\\package' ]
13233 verbose tarball C:\Users\Gaston\AppData\Roaming\npm-cache\optimist\0.3.7\package.tgz
13234 verbose folder C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778045918-0.7213810586836189\package
13235 silly lockFile b9c0c786-45918-0-7213810586836189-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778045918-0.7213810586836189\package
13236 verbose lock tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778045918-0.7213810586836189\package C:\Users\Gaston\AppData\Roaming\npm-cache\b9c0c786-45918-0-7213810586836189-package.lock
13237 silly lockFile ea85e693-cache-optimist-0-3-7-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\optimist\0.3.7\package.tgz
13238 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\optimist\0.3.7\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\ea85e693-cache-optimist-0-3-7-package-tgz.lock
13239 silly lockFile b9c0c786-45918-0-7213810586836189-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778045918-0.7213810586836189\package
13240 silly lockFile b9c0c786-45918-0-7213810586836189-package tar://C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778045918-0.7213810586836189\package
13241 silly lockFile ea85e693-cache-optimist-0-3-7-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\optimist\0.3.7\package.tgz
13242 silly lockFile ea85e693-cache-optimist-0-3-7-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\optimist\0.3.7\package.tgz
13243 silly lockFile 07196399-npm-cache-optimist-0-3-7-package C:\Users\Gaston\AppData\Roaming\npm-cache\optimist\0.3.7\package
13244 verbose lock C:\Users\Gaston\AppData\Roaming\npm-cache\optimist\0.3.7\package C:\Users\Gaston\AppData\Roaming\npm-cache\07196399-npm-cache-optimist-0-3-7-package.lock
13245 silly lockFile 07196399-npm-cache-optimist-0-3-7-package C:\Users\Gaston\AppData\Roaming\npm-cache\optimist\0.3.7\package
13246 silly lockFile 07196399-npm-cache-optimist-0-3-7-package C:\Users\Gaston\AppData\Roaming\npm-cache\optimist\0.3.7\package
13247 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\optimist\0.3.7\package.tgz
13248 silly lockFile b54cf2cb-npm-cache-optimist-0-3-7-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\optimist\0.3.7\package
13249 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\optimist\0.3.7\package C:\Users\Gaston\AppData\Roaming\npm-cache\b54cf2cb-npm-cache-optimist-0-3-7-package.lock
13250 silly lockFile ea85e693-cache-optimist-0-3-7-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\optimist\0.3.7\package.tgz
13251 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\optimist\0.3.7\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\ea85e693-cache-optimist-0-3-7-package-tgz.lock
13252 silly gunzTarPerm modes [ '755', '644' ]
13253 silly gunzTarPerm extractEntry package.json
13254 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
13255 silly gunzTarPerm extractEntry LICENSE
13256 silly gunzTarPerm modified mode [ 'LICENSE', 438, 420 ]
13257 silly gunzTarPerm extractEntry index.js
13258 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
13259 silly gunzTarPerm extractEntry .travis.yml
13260 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]
13261 silly gunzTarPerm extractEntry example/bool.js
13262 silly gunzTarPerm modified mode [ 'example/bool.js', 438, 420 ]
13263 silly gunzTarPerm extractEntry example/default_singles.js
13264 silly gunzTarPerm modified mode [ 'example/default_singles.js', 438, 420 ]
13265 silly gunzTarPerm extractEntry example/divide.js
13266 silly gunzTarPerm modified mode [ 'example/divide.js', 438, 420 ]
13267 silly gunzTarPerm extractEntry example/line_count.js
13268 silly gunzTarPerm modified mode [ 'example/line_count.js', 438, 420 ]
13269 silly gunzTarPerm extractEntry example/default_hash.js
13270 silly gunzTarPerm modified mode [ 'example/default_hash.js', 438, 420 ]
13271 silly gunzTarPerm extractEntry example/line_count_wrap.js
13272 silly gunzTarPerm modified mode [ 'example/line_count_wrap.js', 438, 420 ]
13273 silly gunzTarPerm extractEntry example/nonopt.js
13274 silly gunzTarPerm modified mode [ 'example/nonopt.js', 438, 420 ]
13275 silly gunzTarPerm extractEntry example/reflect.js
13276 silly gunzTarPerm modified mode [ 'example/reflect.js', 438, 420 ]
13277 silly gunzTarPerm extractEntry example/short.js
13278 silly gunzTarPerm modified mode [ 'example/short.js', 438, 420 ]
13279 silly gunzTarPerm extractEntry example/string.js
13280 silly gunzTarPerm modified mode [ 'example/string.js', 438, 420 ]
13281 silly gunzTarPerm extractEntry example/boolean_single.js
13282 silly gunzTarPerm modified mode [ 'example/boolean_single.js', 438, 420 ]
13283 silly gunzTarPerm extractEntry example/usage-options.js
13284 silly gunzTarPerm modified mode [ 'example/usage-options.js', 438, 420 ]
13285 silly gunzTarPerm extractEntry example/boolean_double.js
13286 silly gunzTarPerm modified mode [ 'example/boolean_double.js', 438, 420 ]
13287 silly gunzTarPerm extractEntry example/xup.js
13288 silly gunzTarPerm modified mode [ 'example/xup.js', 438, 420 ]
13289 silly gunzTarPerm extractEntry example/line_count_options.js
13290 silly gunzTarPerm modified mode [ 'example/line_count_options.js', 438, 420 ]
13291 silly gunzTarPerm extractEntry readme.markdown
13292 silly gunzTarPerm modified mode [ 'readme.markdown', 438, 420 ]
13293 silly gunzTarPerm extractEntry test/parse.js
13294 silly gunzTarPerm modified mode [ 'test/parse.js', 438, 420 ]
13295 silly gunzTarPerm extractEntry test/usage.js
13296 silly gunzTarPerm modified mode [ 'test/usage.js', 438, 420 ]
13297 silly gunzTarPerm extractEntry test/_.js
13298 silly gunzTarPerm modified mode [ 'test/_.js', 438, 420 ]
13299 silly gunzTarPerm extractEntry test/_/argv.js
13300 silly gunzTarPerm modified mode [ 'test/_/argv.js', 438, 420 ]
13301 silly gunzTarPerm extractEntry test/_/bin.js
13302 silly gunzTarPerm modified mode [ 'test/_/bin.js', 438, 420 ]
13303 silly lockFile b54cf2cb-npm-cache-optimist-0-3-7-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\optimist\0.3.7\package
13304 silly lockFile b54cf2cb-npm-cache-optimist-0-3-7-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\optimist\0.3.7\package
13305 silly lockFile ea85e693-cache-optimist-0-3-7-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\optimist\0.3.7\package.tgz
13306 silly lockFile ea85e693-cache-optimist-0-3-7-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\optimist\0.3.7\package.tgz
13307 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\optimist\0.3.7\package.tgz 644
13308 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\optimist\0.3.7\package.tgz
13309 silly lockFile 03b2dd13--org-optimist-optimist-0-3-7-tgz https://registry.npmjs.org/optimist/-/optimist-0.3.7.tgz
13310 silly lockFile 03b2dd13--org-optimist-optimist-0-3-7-tgz https://registry.npmjs.org/optimist/-/optimist-0.3.7.tgz
13311 silly lockFile 090e1d8d-optimist-0-3-7 optimist@0.3.7
13312 silly lockFile 090e1d8d-optimist-0-3-7 optimist@0.3.7
13313 silly lockFile a1f99b53-optimist-0-3-5 optimist@~0.3.5
13314 silly lockFile a1f99b53-optimist-0-3-5 optimist@~0.3.5
13315 silly lockFile 8b92bc11-aming-npm-cache-qs-0-5-6-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.5.6\package
13316 silly lockFile 8b92bc11-aming-npm-cache-qs-0-5-6-package tar://C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.5.6\package
13317 silly lockFile 4d7795de-g-npm-cache-qs-0-5-6-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.5.6\package.tgz
13318 silly lockFile 4d7795de-g-npm-cache-qs-0-5-6-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.5.6\package.tgz
13319 verbose chmod C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.5.6\package.tgz 644
13320 silly chown skipping for windows C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.5.6\package.tgz
13321 silly lockFile d8d3c682-gistry-npmjs-org-qs-qs-0-5-6-tgz https://registry.npmjs.org/qs/-/qs-0.5.6.tgz
13322 silly lockFile d8d3c682-gistry-npmjs-org-qs-qs-0-5-6-tgz https://registry.npmjs.org/qs/-/qs-0.5.6.tgz
13323 silly lockFile 84168241-qs-0-5-6 qs@0.5.6
13324 silly lockFile 84168241-qs-0-5-6 qs@0.5.6
13325 silly lockFile 60f93a07-qs-0-5-2 qs@~0.5.2
13326 silly lockFile 60f93a07-qs-0-5-2 qs@~0.5.2
13327 silly resolved [ { name: 'debug',
13327 silly resolved     version: '0.7.4',
13327 silly resolved     repository: { type: 'git', url: 'git://github.com/visionmedia/debug.git' },
13327 silly resolved     description: 'small debugging utility',
13327 silly resolved     keywords: [ 'debug', 'log', 'debugger' ],
13327 silly resolved     author: { name: 'TJ Holowaychuk', email: 'tj@vision-media.ca' },
13327 silly resolved     dependencies: {},
13327 silly resolved     devDependencies: { mocha: '*' },
13327 silly resolved     main: 'lib/debug.js',
13327 silly resolved     browser: './debug.js',
13327 silly resolved     engines: { node: '*' },
13327 silly resolved     files: [ 'lib/debug.js', 'debug.js', 'index.js' ],
13327 silly resolved     component: { scripts: [Object] },
13327 silly resolved     readme: '# debug\n\n  tiny node.js debugging utility modelled after node core\'s debugging technique.\n\n## Installation\n\n```\n$ npm install debug\n```\n\n## Usage\n\n With `debug` you simply invoke the exported function to generate your debug function, passing it a name which will determine if a noop function is returned, or a decorated `console.error`, so all of the `console` format string goodies you\'re used to work fine. A unique color is selected per-function for visibility.\n \nExample _app.js_:\n\n```js\nvar debug = require(\'debug\')(\'http\')\n  , http = require(\'http\')\n  , name = \'My App\';\n\n// fake app\n\ndebug(\'booting %s\', name);\n\nhttp.createServer(function(req, res){\n  debug(req.method + \' \' + req.url);\n  res.end(\'hello\\n\');\n}).listen(3000, function(){\n  debug(\'listening\');\n});\n\n// fake worker of some kind\n\nrequire(\'./worker\');\n```\n\nExample _worker.js_:\n\n```js\nvar debug = require(\'debug\')(\'worker\');\n\nsetInterval(function(){\n  debug(\'doing some work\');\n}, 1000);\n```\n\n The __DEBUG__ environment variable is then used to enable these based on space or comma-delimited names. Here are some examples:\n\n  ![debug http and worker](http://f.cl.ly/items/18471z1H402O24072r1J/Screenshot.png)\n\n  ![debug worker](http://f.cl.ly/items/1X413v1a3M0d3C2c1E0i/Screenshot.png)\n\n## Millisecond diff\n\n  When actively developing an application it can be useful to see when the time spent between one `debug()` call and the next. Suppose for example you invoke `debug()` before requesting a resource, and after as well, the "+NNNms" will show you how much time was spent between calls.\n\n  ![](http://f.cl.ly/items/2i3h1d3t121M2Z1A3Q0N/Screenshot.png)\n\n  When stderr is not a TTY, `Date#toUTCString()` is used, making it more useful for logging the debug information as shown below:\n  _(NOTE: Debug now uses stderr instead of stdout, so the correct shell command for this example is actually `DEBUG=* node example/worker 2> out &`)_\n  \n  ![](http://f.cl.ly/items/112H3i0e0o0P0a2Q2r11/Screenshot.png)\n  \n## Conventions\n\n If you\'re using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use ":" to separate features. For example "bodyParser" from Connect would then be "connect:bodyParser". \n\n## Wildcards\n\n  The "*" character may be used as a wildcard. Suppose for example your library has debuggers named "connect:bodyParser", "connect:compress", "connect:session", instead of listing all three with `DEBUG=connect:bodyParser,connect.compress,connect:session`, you may simply do `DEBUG=connect:*`, or to run everything using this module simply use `DEBUG=*`.\n\n  You can also exclude specific debuggers by prefixing them with a "-" character.  For example, `DEBUG=* -connect:*` would include all debuggers except those starting with "connect:".\n\n## Browser support\n\n Debug works in the browser as well, currently persisted by `localStorage`. For example if you have `worker:a` and `worker:b` as shown below, and wish to debug both type `debug.enable(\'worker:*\')` in the console and refresh the page, this will remain until you disable with `debug.disable()`. \n\n```js\na = debug(\'worker:a\');\nb = debug(\'worker:b\');\n\nsetInterval(function(){\n  a(\'doing some work\');\n}, 1000);\n\nsetInterval(function(){\n  a(\'doing some work\');\n}, 1200);\n```\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2011 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n',
13327 silly resolved     readmeFilename: 'Readme.md',
13327 silly resolved     bugs: { url: 'https://github.com/visionmedia/debug/issues' },
13327 silly resolved     homepage: 'https://github.com/visionmedia/debug',
13327 silly resolved     _id: 'debug@0.7.4',
13327 silly resolved     dist: { shasum: '6dcec064d296d006c65b76b54e887dd138fcd4d0' },
13327 silly resolved     _from: 'debug@~0.7.0',
13327 silly resolved     _resolved: 'https://registry.npmjs.org/debug/-/debug-0.7.4.tgz',
13327 silly resolved     scripts: {} },
13327 silly resolved   { author: { name: 'mklabs' },
13327 silly resolved     name: 'noptify',
13327 silly resolved     description: 'nopt wrapper with commander-like API',
13327 silly resolved     version: '0.0.3',
13327 silly resolved     repository: { type: 'git', url: 'git://github.com/mklabs/noptify.git' },
13327 silly resolved     dependencies: { nopt: '~2.0.0' },
13327 silly resolved     devDependencies: { mocha: '~1.8.1' },
13327 silly resolved     scripts: { test: 'mocha --reporter spec' },
13327 silly resolved     readme: '### noptify\n\nnoptify is a little wrapper around `nopt` module adding a more expressive,\ncommander-like, API and few helpers.\n\nExamples\n\n     var program = noptify(process.argv, { program: \'name\' })\n       .version(\'0.0.1\')\n       .option(\'port\', \'-p\', \'Port to listen on (default: 35729)\', Number)\n       .option(\'pid\', \'Path to the generated PID file\', String)\n\n     var opts = program.parse();\n\nReturns an instance of `Noptify`\n\n### Noptify\n\nNoptify provides the API to parse out option, shorthands and generate the\nproper generic help output.\n\n- args     - The Array of arguments to parse (default: `process.argv`);\n- options  - An hash of options with the following properties\n  - program - The program name to use in usage output\n\nEvery noptify instance is created with two options, `-h, --help` and `-v,\n--version`.\n\n### Noptify#parse\n\nParse the provided options and shorthands, pass them through `nopt` and\nreturn the result.\n\nWhen `opts.help` is set, the help output is displayed and `help`\nevent is emitted. The process exists with `0` status, the help output is\nautomatically displayed and the `help` event is emitted.\n\nExamples\n\n    var program = noptify([\'foo\', \'--help\'])\n      .on(\'help\', function() {\n        console.log(\'Examples\');\n        console.log(\'\');\n        console.log(\'  foo bar --baz > foo.txt\');\n      });\n\n    var opts = program.parse();\n    // ... Help output ...\n    // ... Custom help output ...\n    // ... Exit ...\n\n\n\n### Noptify#version\n\nDefine the program version.\n\n### Noptify#option\n\nDefine `name` option with optional shorthands, optional description and optional type.\n\n### Noptify#help\n\nSimply output to stdout the Usage and Help output.\n\n---\n\n*Mocha generated documentation*\n\n- [API](#api)\n- [Collectable](#collectable)\n- [Commandable](#commandable)\n  - [Parses remaining arguments and route to the appropriate command](#commandable-parses-remaining-arguments-and-route-to-the-appropriate-command)\n\n<a name=""></a>\n\n<a name="api"></a>\n## API\nreturns an instanceof Noptify.\n\n```js\nassert.ok(noptify() instanceof noptify.Noptify);\n```\n\nis typically used like so.\n\n```js\nvar program = noptify([\'node\', \'file.js\', \'-d\', \'--dirname\', \'./\', \'-p\', \'3000\', \'app.js\', \'base.js\'])\n  .option(\'debug\', \'-d\', \'Enabled debug output\', Boolean)\n  .option(\'dirname\', \'The path to the output directory\')\n  .option(\'port\', \'-p\', \'The port you wish to listen on\', Number)\n\n// opts => nopt result\nvar opts = program.parse();\n\nassert.deepEqual(opts, {\n  port: 3000,\n  debug: true,\n  dirname: \'./\',\n  argv: {\n    remain: [\'app.js\', \'base.js\'],\n    cooked: [\'--debug\', \'--dirname\', \'./\', \'--port\', \'3000\', \'app.js\', \'base.js\'],\n    original: [\'-d\', \'--dirname\', \'./\', \'-p\', \'3000\', \'app.js\', \'base.js\']\n  }\n});\n```\n\nallows definitiion of shorthands separately.\n\n```js\nvar opts = noptify([\'node\', \'file.js\', \'-lc\'])\n  .option(\'line-comment\', \'Ouputs with debugging information\', Boolean)\n  .shorthand(\'lc\', \'--line-comment\')\n  .parse();\n\nassert.equal(opts[\'line-comment\'], true);\n```\n\n<a name="collectable"></a>\n## Collectable\nprovides the helper method to read from stdin.\n\n```js\nvar program = noptify();\nassert.ok(typeof program.stdin === \'function\', \'stdin defined\');\n```\n\nis invoked only when .parse() is called.\n\n```js\nvar program = noptify([\'\', \'\']);\nvar str = \'testing out stdin helper\';\nprogram.stdin(function(err, res) {\n  assert.equal(res, str);\n  done();\n});\n\nprogram.parse();\n\nprocess.nextTick(function() {\n  process.stdin.emit(\'data\', str);\n  process.stdin.emit(\'end\');\n});\n```\n\n<a name="commandable"></a>\n## Commandable\nprovides the .command() utility.\n\n```js\nassert.ok(typeof noptify().command === \'function\');\n```\n\n<a name="commandable-parses-remaining-arguments-and-route-to-the-appropriate-command"></a>\n## Parses remaining arguments and route to the appropriate command\ncan be a simple function.\n\n```js\nvar program = noptify([\'\', \'\', \'init\', \'--debug\', \'foo\']).option(\'debug\', \'an option\');\n\nprogram.command(\'init\', function(args, opts) {\n  // args ==> sliced args at command position\n  // opts ==> nopt parsed object\n  assert.deepEqual(args, [\'--debug\', \'foo\']);\n  assert.equal(opts.debug, true);\n  assert.equal(opts.argv.remain[0], \'foo\');\n  done();\n});\n\nprogram.parse();\n```\n\nor another program, an Noptify instance.\n\n```js\nvar args = [\'\', \'\', \'init\', \'--debug\', \'myapp\', \'foo\'];\n\nvar init = noptify(args)\n  .option(\'debug\', \'Debug output\')\n  .command(\'myapp\', done.bind(null, null));\n\nnoptify(args).command(\'init\', init).parse();\n```\n\n',
13327 silly resolved     readmeFilename: 'readme.md',
13327 silly resolved     bugs: { url: 'https://github.com/mklabs/noptify/issues' },
13327 silly resolved     homepage: 'https://github.com/mklabs/noptify',
13327 silly resolved     _id: 'noptify@0.0.3',
13327 silly resolved     dist: { shasum: 'f46063a9b1c7f68eb849a4128c48258108eff3da' },
13327 silly resolved     _from: 'noptify@latest',
13327 silly resolved     _resolved: 'https://registry.npmjs.org/noptify/-/noptify-0.0.3.tgz' },
13327 silly resolved   { name: 'faye-websocket',
13327 silly resolved     description: 'Standards-compliant WebSocket server and client',
13327 silly resolved     homepage: 'http://github.com/faye/faye-websocket-node',
13327 silly resolved     author:
13327 silly resolved      { name: 'James Coglan',
13327 silly resolved        email: 'jcoglan@gmail.com',
13327 silly resolved        url: 'http://jcoglan.com/' },
13327 silly resolved     keywords: [ 'websocket', 'eventsource' ],
13327 silly resolved     version: '0.4.4',
13327 silly resolved     engines: { node: '>=0.4.0' },
13327 silly resolved     main: './lib/faye/websocket',
13327 silly resolved     devDependencies: { jsclass: '', pace: '' },
13327 silly resolved     scripts: { test: 'node spec/runner.js' },
13327 silly resolved     bugs: { url: 'http://github.com/faye/faye-websocket-node/issues' },
13327 silly resolved     licenses: [ [Object] ],
13327 silly resolved     repositories: [ [Object] ],
13327 silly resolved     readme: '# faye-websocket\n\n* Travis CI build: [<img src="https://secure.travis-ci.org/faye/faye-websocket-node.png" />](http://travis-ci.org/faye/faye-websocket-node)\n* Autobahn tests: [server](http://faye.jcoglan.com/autobahn/servers/), [client](http://faye.jcoglan.com/autobahn/clients/)\n\nThis is a robust, general-purpose WebSocket implementation extracted from the\n[Faye](http://faye.jcoglan.com) project. It provides classes for easily building\nWebSocket servers and clients in Node. It does not provide a server itself, but\nrather makes it easy to handle WebSocket connections within an existing\n[Node](http://nodejs.org/) application. It does not provide any abstraction\nother than the standard [WebSocket API](http://dev.w3.org/html5/websockets/).\n\nIt also provides an abstraction for handling [EventSource](http://dev.w3.org/html5/eventsource/)\nconnections, which are one-way connections that allow the server to push data to\nthe client. They are based on streaming HTTP responses and can be easier to\naccess via proxies than WebSockets.\n\nThe server-side socket can process [draft-75](http://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-75),\n[draft-76](http://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-76),\n[hybi-07](http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-07)\nand later versions of the protocol. It selects protocol versions automatically,\nsupports both `text` and `binary` messages, and transparently handles `ping`,\n`pong`, `close` and fragmented messages.\n\n\n## Handling WebSocket connections in Node\n\nYou can handle WebSockets on the server side by listening for HTTP Upgrade\nrequests, and creating a new socket for the request. This socket object exposes\nthe usual WebSocket methods for receiving and sending messages. For example this\nis how you\'d implement an echo server:\n\n```js\nvar WebSocket = require(\'faye-websocket\'),\n    http      = require(\'http\');\n\nvar server = http.createServer();\n\nserver.addListener(\'upgrade\', function(request, socket, head) {\n  var ws = new WebSocket(request, socket, head);\n  \n  ws.onmessage = function(event) {\n    ws.send(event.data);\n  };\n  \n  ws.onclose = function(event) {\n    console.log(\'close\', event.code, event.reason);\n    ws = null;\n  };\n});\n\nserver.listen(8000);\n```\n\nNote that under certain circumstances (notably a draft-76 client connecting\nthrough an HTTP proxy), the WebSocket handshake will not be complete after you\ncall `new WebSocket()` because the server will not have received the entire\nhandshake from the client yet. In this case, calls to `ws.send()` will buffer\nthe message in memory until the handshake is complete, at which point any\nbuffered messages will be sent to the client.\n\nIf you need to detect when the WebSocket handshake is complete, you can use the\n`onopen` event.\n\nIf the connection\'s protocol version supports it, you can call `ws.ping()` to\nsend a ping message and wait for the client\'s response. This method takes a\nmessage string, and an optional callback that fires when a matching pong message\nis received. It returns `true` iff a ping message was sent. If the client does\nnot support ping/pong, this method sends no data and returns `false`.\n\n```js\nws.ping(\'Mic check, one, two\', function() {\n  // fires when pong is received\n});\n```\n\n\n## Using the WebSocket client\n\nThe client supports both the plain-text `ws` protocol and the encrypted `wss`\nprotocol, and has exactly the same interface as a socket you would use in a web\nbrowser. On the wire it identifies itself as hybi-13.\n\n```js\nvar WebSocket = require(\'faye-websocket\'),\n    ws        = new WebSocket.Client(\'ws://www.example.com/\');\n\nws.onopen = function(event) {\n  console.log(\'open\');\n  ws.send(\'Hello, world!\');\n};\n\nws.onmessage = function(event) {\n  console.log(\'message\', event.data);\n};\n\nws.onclose = function(event) {\n  console.log(\'close\', event.code, event.reason);\n  ws = null;\n};\n```\n\n\n## Subprotocol negotiation\n\nThe WebSocket protocol allows peers to select and identify the application\nprotocol to use over the connection. On the client side, you can set which\nprotocols the client accepts by passing a list of protocol names when you\nconstruct the socket:\n\n```js\nvar ws = new WebSocket.Client(\'ws://www.example.com/\', [\'irc\', \'amqp\']);\n```\n\nOn the server side, you can likewise pass in the list of protocols the server\nsupports after the other constructor arguments:\n\n```js\nvar ws = new WebSocket(request, socket, head, [\'irc\', \'amqp\']);\n```\n\nIf the client and server agree on a protocol, both the client- and server-side\nsocket objects expose the selected protocol through the `ws.protocol` property.\nIf they cannot agree on a protocol to use, the client closes the connection.\n\n\n## WebSocket API\n\nThe WebSocket API consists of several event handlers and a method for sending\nmessages.\n\n* <b><tt>onopen</tt></b> fires when the socket connection is established. Event\n  has no attributes.\n* <b><tt>onerror</tt></b> fires when the connection attempt fails. Event has no\n  attributes.\n* <b><tt>onmessage</tt></b> fires when the socket receives a message. Event has\n  one attribute, <b><tt>data</tt></b>, which is either a `String` (for text\n  frames) or a `Buffer` (for binary frames).\n* <b><tt>onclose</tt></b> fires when either the client or the server closes the\n  connection. Event has two optional attributes, <b><tt>code</tt></b> and\n  <b><tt>reason</tt></b>, that expose the status code and message sent by the\n  peer that closed the connection.\n* <b><tt>send(message)</tt></b> accepts either a `String` or a `Buffer` and\n  sends a text or binary message over the connection to the other peer.\n* <b><tt>close(code, reason)</tt></b> closes the connection, sending the given\n  status code and reason text, both of which are optional.\n* <b><tt>protocol</tt></b> is a string (which may be empty) identifying the\n  subprotocol the socket is using.\n\n\n## Handling EventSource connections in Node\n\nEventSource connections provide a very similar interface, although because they\nonly allow the server to send data to the client, there is no `onmessage` API.\nEventSource allows the server to push text messages to the client, where each\nmessage has an optional event-type and ID.\n\n```js\nvar WebSocket   = require(\'faye-websocket\'),\n    EventSource = WebSocket.EventSource,\n    http        = require(\'http\');\n\nvar server = http.createServer();\n\nserver.addListener(\'request\', function(request, response) {\n  if (EventSource.isEventSource(request)) {\n    var es = new EventSource(request, response);\n    console.log(\'open\', es.url, es.lastEventId);\n    \n    // Periodically send messages\n    var loop = setInterval(function() { es.send(\'Hello\') }, 1000);\n    \n    es.onclose = function() {\n      clearInterval(loop);\n      es = null;\n    };\n  \n  } else {\n    // Normal HTTP request\n    response.writeHead(200, {\'Content-Type\': \'text/plain\'});\n    response.write(\'Hello\');\n    response.end();\n  }\n});\n\nserver.listen(8000);\n```\n\nThe `send` method takes two optional parameters, `event` and `id`. The default\nevent-type is `\'message\'` with no ID. For example, to send a `notification`\nevent with ID `99`:\n\n```js\nes.send(\'Breaking News!\', {event: \'notification\', id: \'99\'});\n```\n\nThe `EventSource` object exposes the following properties:\n\n* <b><tt>url</tt></b> is a string containing the URL the client used to create\n  the EventSource.\n* <b><tt>lastEventId</tt></b> is a string containing the last event ID\n  received by the client. You can use this when the client reconnects after a\n  dropped connection to determine which messages need resending.\n\nWhen you initialize an EventSource with ` new EventSource()`, you can pass\nconfiguration options after the `response` parameter. Available options are:\n\n* <b><tt>retry</tt></b> is a number that tells the client how long (in seconds)\n  it should wait after a dropped connection before attempting to reconnect.\n* <b><tt>ping</tt></b> is a number that tells the server how often (in seconds)\n  to send \'ping\' packets to the client to keep the connection open, to defeat\n  timeouts set by proxies. The client will ignore these messages.\n\nFor example, this creates a connection that pings every 15 seconds and is\nretryable every 10 seconds if the connection is broken:\n\n```js\nvar es = new EventSource(request, response, {ping: 15, retry: 10});\n```\n\nYou can send a ping message at any time by calling `es.ping()`. Unlike WebSocket,\nthe client does not send a response to this; it is merely to send some data over\nthe wire to keep the connection alive.\n\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2009-2013 James Coglan\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \'Software\'), to deal in\nthe Software without restriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\nSoftware, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n',
13327 silly resolved     readmeFilename: 'README.markdown',
13327 silly resolved     repository:
13327 silly resolved      { type: 'git',
13327 silly resolved        url: 'git://github.com/faye/faye-websocket-node.git' },
13327 silly resolved     _id: 'faye-websocket@0.4.4',
13327 silly resolved     dist: { shasum: 'bc90ee236be013aadbe9aee3f2b421e58c297b70' },
13327 silly resolved     _from: 'faye-websocket@~0.4.3',
13327 silly resolved     _resolved: 'https://registry.npmjs.org/faye-websocket/-/faye-websocket-0.4.4.tgz' },
13327 silly resolved   { name: 'qs',
13327 silly resolved     description: 'querystring parser',
13327 silly resolved     version: '0.5.6',
13327 silly resolved     keywords: [ 'query string', 'parser', 'component' ],
13327 silly resolved     repository:
13327 silly resolved      { type: 'git',
13327 silly resolved        url: 'git://github.com/visionmedia/node-querystring.git' },
13327 silly resolved     devDependencies: { mocha: '*', 'expect.js': '*' },
13327 silly resolved     component: { scripts: [Object] },
13327 silly resolved     author:
13327 silly resolved      { name: 'TJ Holowaychuk',
13327 silly resolved        email: 'tj@vision-media.ca',
13327 silly resolved        url: 'http://tjholowaychuk.com' },
13327 silly resolved     main: 'index',
13327 silly resolved     engines: { node: '*' },
13327 silly resolved     readme: '# node-querystring\n\n  query string parser for node and the browser supporting nesting, as it was removed from `0.3.x`, so this library provides the previous and commonly desired behaviour (and twice as fast). Used by [express](http://expressjs.com), [connect](http://senchalabs.github.com/connect) and others.\n\n## Installation\n\n    $ npm install qs\n\n## Examples\n\n```js\nvar qs = require(\'qs\');\n\nqs.parse(\'user[name][first]=Tobi&user[email]=tobi@learnboost.com\');\n// => { user: { name: { first: \'Tobi\' }, email: \'tobi@learnboost.com\' } }\n\nqs.stringify({ user: { name: \'Tobi\', email: \'tobi@learnboost.com\' }})\n// => user[name]=Tobi&user[email]=tobi%40learnboost.com\n```\n\n## Testing\n\nInstall dev dependencies:\n\n    $ npm install -d\n\nand execute:\n\n    $ make test\n\nbrowser:\n\n    $ open test/browser/index.html\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2010 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.',
13327 silly resolved     readmeFilename: 'Readme.md',
13327 silly resolved     bugs: { url: 'https://github.com/visionmedia/node-querystring/issues' },
13327 silly resolved     homepage: 'https://github.com/visionmedia/node-querystring',
13327 silly resolved     _id: 'qs@0.5.6',
13327 silly resolved     dist: { shasum: '0aec69e21763b450e8831a6402f6d5cbc7fb332a' },
13327 silly resolved     _from: 'qs@~0.5.2',
13327 silly resolved     _resolved: 'https://registry.npmjs.org/qs/-/qs-0.5.6.tgz' } ]
13328 info install debug@0.7.4 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\tiny-lr
13329 info install noptify@0.0.3 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\tiny-lr
13330 info install faye-websocket@0.4.4 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\tiny-lr
13331 info install qs@0.5.6 into C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\tiny-lr
13332 info installOne debug@0.7.4
13333 info installOne noptify@0.0.3
13334 info installOne faye-websocket@0.4.4
13335 info installOne qs@0.5.6
13336 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\tiny-lr\node_modules\debug unbuild
13337 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\tiny-lr\node_modules\noptify unbuild
13338 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\tiny-lr\node_modules\faye-websocket unbuild
13339 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\tiny-lr\node_modules\qs unbuild
13340 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\noptify\0.0.3\package.tgz
13341 silly lockFile a1214b37-les-tiny-lr-node-modules-noptify tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\tiny-lr\node_modules\noptify
13342 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\tiny-lr\node_modules\noptify C:\Users\Gaston\AppData\Roaming\npm-cache\a1214b37-les-tiny-lr-node-modules-noptify.lock
13343 silly lockFile 5736e0d5--cache-noptify-0-0-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\noptify\0.0.3\package.tgz
13344 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\noptify\0.0.3\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\5736e0d5--cache-noptify-0-0-3-package-tgz.lock
13345 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\faye-websocket\0.4.4\package.tgz
13346 silly lockFile cceea586-y-lr-node-modules-faye-websocket tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\tiny-lr\node_modules\faye-websocket
13347 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\tiny-lr\node_modules\faye-websocket C:\Users\Gaston\AppData\Roaming\npm-cache\cceea586-y-lr-node-modules-faye-websocket.lock
13348 silly lockFile cf2155b7-faye-websocket-0-4-4-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\faye-websocket\0.4.4\package.tgz
13349 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\faye-websocket\0.4.4\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\cf2155b7-faye-websocket-0-4-4-package-tgz.lock
13350 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.5.6\package.tgz
13351 silly lockFile 94f9569d--modules-tiny-lr-node-modules-qs tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\tiny-lr\node_modules\qs
13352 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\tiny-lr\node_modules\qs C:\Users\Gaston\AppData\Roaming\npm-cache\94f9569d--modules-tiny-lr-node-modules-qs.lock
13353 silly lockFile 4d7795de-g-npm-cache-qs-0-5-6-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.5.6\package.tgz
13354 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.5.6\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\4d7795de-g-npm-cache-qs-0-5-6-package-tgz.lock
13355 verbose tar unpack C:\Users\Gaston\AppData\Roaming\npm-cache\debug\0.7.4\package.tgz
13356 silly lockFile d597ad65-dules-tiny-lr-node-modules-debug tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\tiny-lr\node_modules\debug
13357 verbose lock tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\tiny-lr\node_modules\debug C:\Users\Gaston\AppData\Roaming\npm-cache\d597ad65-dules-tiny-lr-node-modules-debug.lock
13358 silly lockFile 9cf76063-pm-cache-debug-0-7-4-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\debug\0.7.4\package.tgz
13359 verbose lock tar://C:\Users\Gaston\AppData\Roaming\npm-cache\debug\0.7.4\package.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\9cf76063-pm-cache-debug-0-7-4-package-tgz.lock
13360 silly gunzTarPerm modes [ '755', '644' ]
13361 silly gunzTarPerm modes [ '755', '644' ]
13362 silly gunzTarPerm modes [ '755', '644' ]
13363 silly gunzTarPerm modes [ '755', '644' ]
13364 silly gunzTarPerm extractEntry package.json
13365 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
13366 silly gunzTarPerm extractEntry package.json
13367 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
13368 silly gunzTarPerm extractEntry package.json
13369 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
13370 silly gunzTarPerm extractEntry package.json
13371 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
13372 silly gunzTarPerm extractEntry debug.js
13373 silly gunzTarPerm modified mode [ 'debug.js', 438, 420 ]
13374 silly gunzTarPerm extractEntry index.js
13375 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
13376 silly gunzTarPerm extractEntry .npmignore
13377 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
13378 silly gunzTarPerm extractEntry index.js
13379 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
13380 silly gunzTarPerm extractEntry .npmignore
13381 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
13382 silly gunzTarPerm extractEntry benchmark.js
13383 silly gunzTarPerm modified mode [ 'benchmark.js', 438, 420 ]
13384 silly gunzTarPerm extractEntry CHANGELOG.txt
13385 silly gunzTarPerm modified mode [ 'CHANGELOG.txt', 438, 420 ]
13386 silly gunzTarPerm extractEntry examples/autobahn_client.js
13387 silly gunzTarPerm modified mode [ 'examples/autobahn_client.js', 438, 420 ]
13388 silly gunzTarPerm extractEntry actions/collectable.js
13389 silly gunzTarPerm modified mode [ 'actions/collectable.js', 438, 420 ]
13390 silly gunzTarPerm extractEntry actions/commandable.js
13391 silly gunzTarPerm modified mode [ 'actions/commandable.js', 438, 420 ]
13392 silly gunzTarPerm extractEntry lib/debug.js
13393 silly gunzTarPerm modified mode [ 'lib/debug.js', 438, 420 ]
13394 silly gunzTarPerm extractEntry Readme.md
13395 silly gunzTarPerm modified mode [ 'Readme.md', 438, 420 ]
13396 silly gunzTarPerm extractEntry examples.js
13397 silly gunzTarPerm modified mode [ 'examples.js', 438, 420 ]
13398 silly gunzTarPerm extractEntry index.js
13399 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
13400 silly gunzTarPerm extractEntry examples/client.js
13401 silly gunzTarPerm modified mode [ 'examples/client.js', 438, 420 ]
13402 silly gunzTarPerm extractEntry examples/server.js
13403 silly gunzTarPerm modified mode [ 'examples/server.js', 438, 420 ]
13404 silly gunzTarPerm extractEntry readme.md
13405 silly gunzTarPerm modified mode [ 'readme.md', 438, 420 ]
13406 silly gunzTarPerm extractEntry test/api.js
13407 silly gunzTarPerm modified mode [ 'test/api.js', 438, 420 ]
13408 silly gunzTarPerm extractEntry test/collectable.js
13409 silly gunzTarPerm modified mode [ 'test/collectable.js', 438, 420 ]
13410 silly gunzTarPerm extractEntry test/commandable.js
13411 silly gunzTarPerm modified mode [ 'test/commandable.js', 438, 420 ]
13412 silly gunzTarPerm extractEntry test/fixtures/a.js
13413 silly gunzTarPerm modified mode [ 'test/fixtures/a.js', 438, 420 ]
13414 silly gunzTarPerm extractEntry test/fixtures/b.js
13415 silly gunzTarPerm modified mode [ 'test/fixtures/b.js', 438, 420 ]
13416 silly gunzTarPerm extractEntry util/extend.js
13417 silly gunzTarPerm modified mode [ 'util/extend.js', 438, 420 ]
13418 silly gunzTarPerm extractEntry util/index.js
13419 silly gunzTarPerm modified mode [ 'util/index.js', 438, 420 ]
13420 silly gunzTarPerm extractEntry History.md
13421 silly gunzTarPerm modified mode [ 'History.md', 438, 420 ]
13422 silly gunzTarPerm extractEntry .gitmodules
13423 silly gunzTarPerm modified mode [ '.gitmodules', 438, 420 ]
13424 silly gunzTarPerm extractEntry examples/haproxy.conf
13425 silly gunzTarPerm modified mode [ 'examples/haproxy.conf', 438, 420 ]
13426 silly gunzTarPerm extractEntry examples/sse.html
13427 silly gunzTarPerm modified mode [ 'examples/sse.html', 438, 420 ]
13428 silly gunzTarPerm extractEntry component.json
13429 silly gunzTarPerm modified mode [ 'component.json', 438, 420 ]
13430 silly gunzTarPerm extractEntry Makefile
13431 silly gunzTarPerm modified mode [ 'Makefile', 438, 420 ]
13432 silly gunzTarPerm extractEntry examples/ws.html
13433 silly gunzTarPerm modified mode [ 'examples/ws.html', 438, 420 ]
13434 silly gunzTarPerm extractEntry lib/faye/eventsource.js
13435 silly gunzTarPerm modified mode [ 'lib/faye/eventsource.js', 438, 420 ]
13436 silly gunzTarPerm extractEntry .travis.yml
13437 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]
13438 silly gunzTarPerm extractEntry Readme.md
13439 silly gunzTarPerm modified mode [ 'Readme.md', 438, 420 ]
13440 silly gunzTarPerm extractEntry lib/faye/websocket.js
13441 silly gunzTarPerm modified mode [ 'lib/faye/websocket.js', 438, 420 ]
13442 silly gunzTarPerm extractEntry lib/faye/websocket/api.js
13443 silly gunzTarPerm modified mode [ 'lib/faye/websocket/api.js', 438, 420 ]
13444 silly gunzTarPerm extractEntry lib/faye/websocket/client.js
13445 silly gunzTarPerm modified mode [ 'lib/faye/websocket/client.js', 438, 420 ]
13446 silly gunzTarPerm extractEntry test/parse.js
13447 silly gunzTarPerm modified mode [ 'test/parse.js', 438, 420 ]
13448 silly gunzTarPerm extractEntry test/stringify.js
13449 silly gunzTarPerm modified mode [ 'test/stringify.js', 438, 420 ]
13450 silly lockFile d597ad65-dules-tiny-lr-node-modules-debug tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\tiny-lr\node_modules\debug
13451 silly lockFile d597ad65-dules-tiny-lr-node-modules-debug tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\tiny-lr\node_modules\debug
13452 silly lockFile 9cf76063-pm-cache-debug-0-7-4-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\debug\0.7.4\package.tgz
13453 silly lockFile 9cf76063-pm-cache-debug-0-7-4-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\debug\0.7.4\package.tgz
13454 silly gunzTarPerm extractEntry lib/faye/websocket/draft75_parser.js
13455 silly gunzTarPerm modified mode [ 'lib/faye/websocket/draft75_parser.js', 438, 420 ]
13456 silly gunzTarPerm extractEntry lib/faye/websocket/draft76_parser.js
13457 silly gunzTarPerm modified mode [ 'lib/faye/websocket/draft76_parser.js', 438, 420 ]
13458 silly gunzTarPerm extractEntry test/browser/expect.js
13459 silly gunzTarPerm modified mode [ 'test/browser/expect.js', 438, 420 ]
13460 silly gunzTarPerm extractEntry test/browser/jquery.js
13461 silly gunzTarPerm modified mode [ 'test/browser/jquery.js', 438, 420 ]
13462 info preinstall debug@0.7.4
13463 silly gunzTarPerm extractEntry lib/faye/websocket/hybi_parser.js
13464 silly gunzTarPerm modified mode [ 'lib/faye/websocket/hybi_parser.js', 438, 420 ]
13465 silly gunzTarPerm extractEntry lib/faye/websocket/api/event.js
13466 silly gunzTarPerm modified mode [ 'lib/faye/websocket/api/event.js', 438, 420 ]
13467 silly gunzTarPerm extractEntry test/browser/mocha.js
13468 silly gunzTarPerm modified mode [ 'test/browser/mocha.js', 438, 420 ]
13469 verbose readDependencies using package.json deps
13470 verbose readDependencies using package.json deps
13471 silly resolved []
13472 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\tiny-lr\node_modules\debug
13473 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\tiny-lr\node_modules\debug
13474 verbose linkStuff [ false,
13474 verbose linkStuff   false,
13474 verbose linkStuff   false,
13474 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-contrib-watch\\node_modules\\tiny-lr\\node_modules' ]
13475 info linkStuff debug@0.7.4
13476 verbose linkBins debug@0.7.4
13477 verbose linkMans debug@0.7.4
13478 verbose rebuildBundles debug@0.7.4
13479 info install debug@0.7.4
13480 info postinstall debug@0.7.4
13481 silly gunzTarPerm extractEntry test/browser/qs.js
13482 silly gunzTarPerm modified mode [ 'test/browser/qs.js', 438, 420 ]
13483 silly gunzTarPerm extractEntry test/browser/index.html
13484 silly gunzTarPerm modified mode [ 'test/browser/index.html', 438, 420 ]
13485 silly gunzTarPerm extractEntry lib/faye/websocket/api/event_target.js
13486 silly gunzTarPerm modified mode [ 'lib/faye/websocket/api/event_target.js', 438, 420 ]
13487 silly gunzTarPerm extractEntry lib/faye/websocket/hybi_parser/handshake.js
13488 silly gunzTarPerm modified mode [ 'lib/faye/websocket/hybi_parser/handshake.js', 438, 420 ]
13489 silly gunzTarPerm extractEntry test/browser/mocha.css
13490 silly gunzTarPerm modified mode [ 'test/browser/mocha.css', 438, 420 ]
13491 silly gunzTarPerm extractEntry test/browser/qs.css
13492 silly gunzTarPerm modified mode [ 'test/browser/qs.css', 438, 420 ]
13493 silly gunzTarPerm extractEntry lib/faye/websocket/hybi_parser/stream_reader.js
13494 silly gunzTarPerm modified mode [ 'lib/faye/websocket/hybi_parser/stream_reader.js', 438, 420 ]
13495 silly gunzTarPerm extractEntry README.markdown
13496 silly gunzTarPerm modified mode [ 'README.markdown', 438, 420 ]
13497 silly gunzTarPerm extractEntry spec/runner.js
13498 silly gunzTarPerm modified mode [ 'spec/runner.js', 438, 420 ]
13499 silly gunzTarPerm extractEntry spec/faye/websocket/client_spec.js
13500 silly gunzTarPerm modified mode [ 'spec/faye/websocket/client_spec.js', 438, 420 ]
13501 silly gunzTarPerm extractEntry spec/faye/websocket/draft75parser_spec.js
13502 silly gunzTarPerm modified mode [ 'spec/faye/websocket/draft75parser_spec.js', 438, 420 ]
13503 silly gunzTarPerm extractEntry spec/faye/websocket/draft76parser_spec.js
13504 silly gunzTarPerm modified mode [ 'spec/faye/websocket/draft76parser_spec.js', 438, 420 ]
13505 silly lockFile a1214b37-les-tiny-lr-node-modules-noptify tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\tiny-lr\node_modules\noptify
13506 silly lockFile a1214b37-les-tiny-lr-node-modules-noptify tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\tiny-lr\node_modules\noptify
13507 silly lockFile 5736e0d5--cache-noptify-0-0-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\noptify\0.0.3\package.tgz
13508 silly lockFile 5736e0d5--cache-noptify-0-0-3-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\noptify\0.0.3\package.tgz
13509 silly gunzTarPerm extractEntry spec/faye/websocket/hybi_parser_spec.js
13510 silly gunzTarPerm modified mode [ 'spec/faye/websocket/hybi_parser_spec.js', 438, 420 ]
13511 silly gunzTarPerm extractEntry spec/server.crt
13512 silly gunzTarPerm modified mode [ 'spec/server.crt', 438, 420 ]
13513 info preinstall noptify@0.0.3
13514 verbose readDependencies using package.json deps
13515 silly gunzTarPerm extractEntry spec/server.key
13516 silly gunzTarPerm modified mode [ 'spec/server.key', 438, 420 ]
13517 verbose readDependencies using package.json deps
13518 verbose cache add [ 'nopt@~2.0.0', null ]
13519 verbose cache add name=undefined spec="nopt@~2.0.0" args=["nopt@~2.0.0",null]
13520 verbose parsed url { protocol: null,
13520 verbose parsed url   slashes: null,
13520 verbose parsed url   auth: null,
13520 verbose parsed url   host: null,
13520 verbose parsed url   port: null,
13520 verbose parsed url   hostname: null,
13520 verbose parsed url   hash: null,
13520 verbose parsed url   search: null,
13520 verbose parsed url   query: null,
13520 verbose parsed url   pathname: 'nopt@~2.0.0',
13520 verbose parsed url   path: 'nopt@~2.0.0',
13520 verbose parsed url   href: 'nopt@~2.0.0' }
13521 verbose cache add name="nopt" spec="~2.0.0" args=["nopt","~2.0.0"]
13522 verbose parsed url { protocol: null,
13522 verbose parsed url   slashes: null,
13522 verbose parsed url   auth: null,
13522 verbose parsed url   host: null,
13522 verbose parsed url   port: null,
13522 verbose parsed url   hostname: null,
13522 verbose parsed url   hash: null,
13522 verbose parsed url   search: null,
13522 verbose parsed url   query: null,
13522 verbose parsed url   pathname: '~2.0.0',
13522 verbose parsed url   path: '~2.0.0',
13522 verbose parsed url   href: '~2.0.0' }
13523 verbose addNamed [ 'nopt', '~2.0.0' ]
13524 verbose addNamed [ null, '>=2.0.0-0 <2.1.0-0' ]
13525 silly lockFile 42399ddd-nopt-2-0-0 nopt@~2.0.0
13526 verbose lock nopt@~2.0.0 C:\Users\Gaston\AppData\Roaming\npm-cache\42399ddd-nopt-2-0-0.lock
13527 silly addNameRange { name: 'nopt', range: '>=2.0.0-0 <2.1.0-0', hasData: false }
13528 verbose url raw nopt
13529 verbose url resolving [ 'https://registry.npmjs.org/', './nopt' ]
13530 verbose url resolved https://registry.npmjs.org/nopt
13531 info trying registry request attempt 1 at 16:40:48
13532 verbose etag "DJRBEL3WAPM7JVR89XHXNNQ95"
13533 http GET https://registry.npmjs.org/nopt
13534 silly lockFile cceea586-y-lr-node-modules-faye-websocket tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\tiny-lr\node_modules\faye-websocket
13535 silly lockFile cceea586-y-lr-node-modules-faye-websocket tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\tiny-lr\node_modules\faye-websocket
13536 silly lockFile cf2155b7-faye-websocket-0-4-4-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\faye-websocket\0.4.4\package.tgz
13537 silly lockFile cf2155b7-faye-websocket-0-4-4-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\faye-websocket\0.4.4\package.tgz
13538 info preinstall faye-websocket@0.4.4
13539 verbose readDependencies using package.json deps
13540 verbose readDependencies using package.json deps
13541 silly resolved []
13542 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\tiny-lr\node_modules\faye-websocket
13543 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\tiny-lr\node_modules\faye-websocket
13544 verbose linkStuff [ false,
13544 verbose linkStuff   false,
13544 verbose linkStuff   false,
13544 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-contrib-watch\\node_modules\\tiny-lr\\node_modules' ]
13545 info linkStuff faye-websocket@0.4.4
13546 verbose linkBins faye-websocket@0.4.4
13547 verbose linkMans faye-websocket@0.4.4
13548 verbose rebuildBundles faye-websocket@0.4.4
13549 info install faye-websocket@0.4.4
13550 info postinstall faye-websocket@0.4.4
13551 silly lockFile 94f9569d--modules-tiny-lr-node-modules-qs tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\tiny-lr\node_modules\qs
13552 silly lockFile 94f9569d--modules-tiny-lr-node-modules-qs tar://C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\tiny-lr\node_modules\qs
13553 silly lockFile 4d7795de-g-npm-cache-qs-0-5-6-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.5.6\package.tgz
13554 silly lockFile 4d7795de-g-npm-cache-qs-0-5-6-package-tgz tar://C:\Users\Gaston\AppData\Roaming\npm-cache\qs\0.5.6\package.tgz
13555 info preinstall qs@0.5.6
13556 verbose readDependencies using package.json deps
13557 verbose readDependencies using package.json deps
13558 silly resolved []
13559 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\tiny-lr\node_modules\qs
13560 info build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt-contrib-watch\node_modules\tiny-lr\node_modules\qs
13561 verbose linkStuff [ false,
13561 verbose linkStuff   false,
13561 verbose linkStuff   false,
13561 verbose linkStuff   'C:\\Users\\Gaston\\PhpstormProjects\\frontTest\\node_modules\\grunt-contrib-watch\\node_modules\\tiny-lr\\node_modules' ]
13562 info linkStuff qs@0.5.6
13563 verbose linkBins qs@0.5.6
13564 verbose linkMans qs@0.5.6
13565 verbose rebuildBundles qs@0.5.6
13566 info install qs@0.5.6
13567 info postinstall qs@0.5.6
13568 http 304 https://registry.npmjs.org/nopt
13569 silly registry.get cb [ 304,
13569 silly registry.get   { date: 'Fri, 03 Jan 2014 19:39:50 GMT',
13569 silly registry.get     server: 'Apache',
13569 silly registry.get     connection: 'Keep-Alive',
13569 silly registry.get     'keep-alive': 'timeout=10, max=50',
13569 silly registry.get     etag: '"DJRBEL3WAPM7JVR89XHXNNQ95"',
13569 silly registry.get     vary: 'Accept' } ]
13570 verbose etag nopt from cache
13571 silly addNameRange number 2 { name: 'nopt', range: '>=2.0.0-0 <2.1.0-0', hasData: true }
13572 silly addNameRange versions [ 'nopt',
13572 silly addNameRange   [ '1.0.0',
13572 silly addNameRange     '1.0.1',
13572 silly addNameRange     '1.0.2',
13572 silly addNameRange     '1.0.3',
13572 silly addNameRange     '1.0.4',
13572 silly addNameRange     '1.0.5',
13572 silly addNameRange     '1.0.6',
13572 silly addNameRange     '1.0.7',
13572 silly addNameRange     '1.0.8',
13572 silly addNameRange     '1.0.9',
13572 silly addNameRange     '1.0.10',
13572 silly addNameRange     '2.0.0',
13572 silly addNameRange     '2.1.0',
13572 silly addNameRange     '2.1.1',
13572 silly addNameRange     '2.1.2' ] ]
13573 verbose addNamed [ 'nopt', '2.0.0' ]
13574 verbose addNamed [ '2.0.0', '2.0.0' ]
13575 silly lockFile b7b4fa5b-nopt-2-0-0 nopt@2.0.0
13576 verbose lock nopt@2.0.0 C:\Users\Gaston\AppData\Roaming\npm-cache\b7b4fa5b-nopt-2-0-0.lock
13577 silly lockFile adae84a1-ry-npmjs-org-nopt-nopt-2-0-0-tgz https://registry.npmjs.org/nopt/-/nopt-2.0.0.tgz
13578 verbose lock https://registry.npmjs.org/nopt/-/nopt-2.0.0.tgz C:\Users\Gaston\AppData\Roaming\npm-cache\adae84a1-ry-npmjs-org-nopt-nopt-2-0-0-tgz.lock
13579 verbose addRemoteTarball [ 'https://registry.npmjs.org/nopt/-/nopt-2.0.0.tgz',
13579 verbose addRemoteTarball   'ca7416f20a5e3f9c3b86180f96295fa3d0b52e0d' ]
13580 info retry fetch attempt 1 at 16:40:50
13581 verbose fetch to= C:\Users\Gaston\AppData\Local\Temp\npm-3168-WZdkTj4f\1388778050037-0.7767870251554996\tmp.tgz
13582 http GET https://registry.npmjs.org/nopt/-/nopt-2.0.0.tgz
13583 http 200 https://registry.npmjs.org/nopt/-/nopt-2.0.0.tgz
13584 http 200 https://registry.npmjs.org/async
13585 verbose bad json {"_id":"async","_rev":"177-db7e2498bd56d1f5b1c0a4da4796eb2c","name":"async","description":"Higher-order functions and common patterns for asynchronous code","dist-tags":{"latest":"0.2.9"},"versions":{"0.1.0":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.0","repository":{"type":"git","url":"http://github.com/caolan/async.git"},"bugs":{"web":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"_id":"async@0.1.0","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/async/-/async-0.1.0.tgz","shasum":"ab8ece0c40627e4e8f0e09c8fcf7c19ed0c4241c"},"directories":{}},"0.1.1":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.1","repository":{"type":"git","url":"http://github.com/caolan/async.git"},"bugs":{"web":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"_id":"async@0.1.1","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/async/-/async-0.1.1.tgz","shasum":"fb965e70dbea44c8a4b8a948472dee7d27279d5e"},"directories":{}},"0.1.2":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.2","repository":{"type":"git","url":"http://github.com/caolan/async.git"},"bugs":{"web":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"_id":"async@0.1.2","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/async/-/async-0.1.2.tgz","shasum":"be761882a64d3dc81a669f9ee3d5c28497382691"},"directories":{}},"0.1.3":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.3","repository":{"type":"git","url":"http://github.com/caolan/async.git"},"bugs":{"web":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"_id":"async@0.1.3","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/async/-/async-0.1.3.tgz","shasum":"629ca2357112d90cafc33872366b14f2695a1fbc"},"directories":{}},"0.1.4":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.4","repository":{"type":"git","url":"http://github.com/caolan/async.git"},"bugs":{"web":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"_id":"async@0.1.4","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/async/-/async-0.1.4.tgz","shasum":"29de4b98712ab8858411d8d8e3361a986c3b2c18"},"directories":{}},"0.1.5":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.5","repository":{"type":"git","url":"http://github.com/caolan/async.git"},"bugs":{"web":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"_id":"async@0.1.5","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/async/-/async-0.1.5.tgz","shasum":"9d83e3d4adb9c962fc4a30e7dd04bf1206c28ea5"},"directories":{}},"0.1.6":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.6","repository":{"type":"git","url":"http://github.com/caolan/async.git"},"bugs":{"web":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"_id":"async@0.1.6","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/async/-/async-0.1.6.tgz","shasum":"2dfb4fa1915f86056060c2e2f35a7fb8549907cc"},"directories":{}},"0.1.7":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.7","repository":{"type":"git","url":"http://github.com/caolan/async.git"},"bugs":{"web":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"_id":"async@0.1.7","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.4-1","_nodeVersion":"v0.2.5","dist":{"tarball":"http://registry.npmjs.org/async/-/async-0.1.7.tgz","shasum":"e9268d0d8cd8dcfe0db0895b27dcc4bcc5c739a5"},"directories":{}},"0.1.8":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.8","repository":{"type":"git","url":"http://github.com/caolan/async.git"},"bugs":{"web":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"_id":"async@0.1.8","engines":{"node":"*"},"_nodeSupported":true,"dist":{"tarball":"http://registry.npmjs.org/async/-/async-0.1.8.tgz","shasum":"52f2df6c0aa6a7f8333e1fbac0fbd93670cf6758"},"directories":{}},"0.1.9":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.9","repository":{"type":"git","url":"git://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"dependencies":{},"devDependencies":{},"_id":"async@0.1.9","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.1rc7","_nodeVersion":"v0.4.7","_defaultsLoaded":true,"dist":{"shasum":"f984d0739b5382c949cc3bea702d21d0dbd52040","tarball":"http://registry.npmjs.org/async/-/async-0.1.9.tgz"},"directories":{}},"0.1.10":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.10","repository":{"type":"git","url":"git://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"_npmJsonOpts":{"file":"/home/caolan/.npm/async/0.1.10/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"async@0.1.10","dependencies":{},"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.27","_nodeVersion":"v0.4.11","_defaultsLoaded":true,"dist":{"shasum":"12b32bf098fa7fc51ae3ac51441b8ba15f437cf1","tarball":"http://registry.npmjs.org/async/-/async-0.1.10.tgz"},"maintainers":[{"name":"caolan","email":"caolan@caolanmcmahon.com"}],"directories":{}},"0.1.11":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.11","repository":{"type":"git","url":"git://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"_npmJsonOpts":{"file":"/home/caolan/.npm/async/0.1.11/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"async@0.1.11","dependencies":{},"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.27","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"a397a69c6febae232d20a76a5b10d8742e2b8215","tarball":"http://registry.npmjs.org/async/-/async-0.1.11.tgz"},"maintainers":[{"name":"caolan","email":"caolan@caolanmcmahon.com"}],"directories":{}},"0.1.12":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.12","repository":{"type":"git","url":"git://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"_npmJsonOpts":{"file":"/home/caolan/.npm/async/0.1.12/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"async@0.1.12","dependencies":{},"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.27","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"ab36be6611dc63d91657128e1d65102b959d4afe","tarball":"http://registry.npmjs.org/async/-/async-0.1.12.tgz"},"maintainers":[{"name":"caolan","email":"caolan@caolanmcmahon.com"}],"directories":{}},"0.1.13":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.13","repository":{"type":"git","url":"git://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"_npmUser":{"name":"caolan","email":"caolan@caolanmcmahon.com"},"_id":"async@0.1.13","dependencies":{},"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.101","_nodeVersion":"v0.4.9","_defaultsLoaded":true,"dist":{"shasum":"f1e53ad69dab282d8e75cbec5e2c5524b6195eab","tarball":"http://registry.npmjs.org/async/-/async-0.1.13.tgz"},"maintainers":[{"name":"caolan","email":"caolan@caolanmcmahon.com"}],"directories":{}},"0.1.14":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.14","repository":{"type":"git","url":"git://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"_npmUser":{"name":"caolan","email":"caolan@caolanmcmahon.com"},"_id":"async@0.1.14","dependencies":{},"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.101","_nodeVersion":"v0.4.9","_defaultsLoaded":true,"dist":{"shasum":"0fcfaf089229fc657798203d1a4544102f7d26dc","tarball":"http://registry.npmjs.org/async/-/async-0.1.14.tgz"},"maintainers":[{"name":"caolan","email":"caolan@caolanmcmahon.com"}],"directories":{}},"0.1.15":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.15","repository":{"type":"git","url":"git://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"_npmUser":{"name":"caolan","email":"caolan@caolanmcmahon.com"},"_id":"async@0.1.15","dependencies":{},"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.101","_nodeVersion":"v0.4.9","_defaultsLoaded":true,"dist":{"shasum":"2180eaca2cf2a6ca5280d41c0585bec9b3e49bd3","tarball":"http://registry.npmjs.org/async/-/async-0.1.15.tgz"},"maintainers":[{"name":"caolan","email":"caolan@caolanmcmahon.com"}],"directories":{}},"0.1.16":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.16","repository":{"type":"git","url":"git://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"_npmUser":{"name":"caolan","email":"caolan@caolanmcmahon.com"},"_id":"async@0.1.16","dependencies":{},"devDependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-3","_nodeVersion":"v0.6.10","_defaultsLoaded":true,"dist":{"shasum":"b3a61fdc1a9193d4f64755c7600126e254223186","tarball":"http://registry.npmjs.org/async/-/async-0.1.16.tgz"},"readme":"# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual 'functional'\nsuspects (map, reduce, filter, forEach…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n    async.map(['file1','file2','file3'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n    async.filter(['file1','file2','file3'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n    async.parallel([\n        function(){ ... },\n        function(){ ... }\n    ], callback);\n\n    async.series([\n        function(){ ... },\n        function(){ ... }\n    ]);\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n\n## Download\n\nReleases are available for download from\n[GitHub](http://github.com/caolan/async/downloads).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 17.5kb Uncompressed\n\n__Production:__ [async.min.js](https://github.com/caolan/async/raw/master/dist/async.min.js) - 1.7kb Packed and Gzipped\n\n\n## In the Browser\n\nSo far its been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n    <script type=\"text/javascript\" src=\"async.js\"></script>\n    <script type=\"text/javascript\">\n\n        async.map(data, asyncProcess, function(err, results){\n            alert(results);\n        });\n\n    </script>\n\n\n## Documentation\n\n### Collections\n\n* [forEach](#forEach)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [until](#until)\n* [waterfall](#waterfall)\n* [queue](#queue)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name=\"forEach\" />\n### forEach(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the forEach function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // assuming openFiles is an array of file names and saveFile is a function\n    // to save the modified contents of that file:\n\n    async.forEach(openFiles, saveFile, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n\n---------------------------------------\n\n<a name=\"forEachSeries\" />\n### forEachSeries(arr, iterator, callback)\n\nThe same as forEach only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name=\"forEachLimit\" />\n### forEachLimit(arr, limit, iterator, callback)\n\nThe same as forEach only the iterator is applied to batches of items in the\narray, in series. The next batch of iterators is only called once the current\none has completed processing.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - How many items should be in each batch.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // Assume documents is an array of JSON objects and requestApi is a\n    // function that interacts with a rate-limited REST api.\n\n    async.forEachLimit(documents, 20, requestApi, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n---------------------------------------\n\n<a name=\"map\" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n    async.map(['file1','file2','file3'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n---------------------------------------\n\n<a name=\"mapSeries\" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name=\"filter\" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n    async.filter(['file1','file2','file3'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n---------------------------------------\n\n<a name=\"filterSeries\" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name=\"reject\" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name=\"rejectSeries\" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as filter, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name=\"reduce\" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then its probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback which accepts an optional error as its first argument, and the state\n  of the reduction as the second. If an error is passed to the callback, the\n  reduction is stopped and the main callback is immediately called with the\n  error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n    async.reduce([1,2,3], 0, function(memo, item, callback){\n        // pointless async:\n        process.nextTick(function(){\n            callback(null, memo + item)\n        });\n    }, function(err, result){\n        // result is now equal to the last value of memo, which is 6\n    });\n\n---------------------------------------\n\n<a name=\"reduceRight\" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name=\"detect\" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n    async.detect(['file1','file2','file3'], path.exists, function(result){\n        // result now equals the first file in the list that exists\n    });\n\n---------------------------------------\n\n<a name=\"detectSeries\" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name=\"sortBy\" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a value to use as the sort criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n    async.sortBy(['file1','file2','file3'], function(file, callback){\n        fs.stat(file, function(err, stats){\n            callback(err, stats.mtime);\n        });\n    }, function(err, results){\n        // results is now the original array of files sorted by\n        // modified date\n    });\n\n\n---------------------------------------\n\n<a name=\"some\" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n    async.some(['file1','file2','file3'], path.exists, function(result){\n        // if result is true then at least one of the files exists\n    });\n\n---------------------------------------\n\n<a name=\"every\" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n    async.every(['file1','file2','file3'], path.exists, function(result){\n        // if result is true then every file exists\n    });\n\n---------------------------------------\n\n<a name=\"concat\" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n    async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files){\n        // files is now a list of filenames that exist in the 3 directories\n    });\n\n---------------------------------------\n\n<a name=\"concatSeries\" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name=\"series\" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.series([\n        function(callback){\n            // do some stuff ...\n            callback(null, 'one');\n        },\n        function(callback){\n            // do some more stuff ...\n            callback(null, 'two');\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // results is now equal to ['one', 'two']\n    });\n\n\n    // an example using an object instead of an array\n    async.series({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equal to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.parallel([\n        function(callback){\n            setTimeout(function(){\n                callback(null, 'one');\n            }, 200);\n        },\n        function(callback){\n            setTimeout(function(){\n                callback(null, 'two');\n            }, 100);\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // in this case, the results array will equal ['two','one']\n        // because the functions were run in parallel and the second\n        // function had a shorter timeout before calling the callback.\n    });\n\n\n    // an example using an object instead of an array\n    async.parallel({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equals to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name=\"whilst\" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback which must be called once it has completed with an optional\n  error as the first argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n    var count = 0;\n\n    async.whilst(\n        function () { return count < 5; },\n        function (callback) {\n            count++;\n            setTimeout(callback, 1000);\n        },\n        function (err) {\n            // 5 seconds have passed\n        }\n    );\n\n\n---------------------------------------\n\n<a name=\"until\" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n\n---------------------------------------\n\n<a name=\"waterfall\" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task's callback.\n\n\n\n__Example__\n\n    async.waterfall([\n        function(callback){\n            callback(null, 'one', 'two');\n        },\n        function(arg1, arg2, callback){\n            callback(null, 'three');\n        },\n        function(arg1, callback){\n            // arg1 now equals 'three'\n            callback(null, 'done');\n        }\n    ], function (err, result) {\n       // result now equals 'done'    \n    });\n\n\n---------------------------------------\n\n<a name=\"queue\" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task's callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n    // create a queue object with concurrency 2\n\n    var q = async.queue(function (task, callback) {\n        console.log('hello ' + task.name);\n        callback();\n    }, 2);\n\n\n    // assign a callback\n    q.drain = function() {\n        console.log('all items have been processed');\n    }\n\n    // add some items to the queue\n\n    q.push({name: 'foo'}, function (err) {\n        console.log('finished processing foo');\n    });\n    q.push({name: 'bar'}, function (err) {\n        console.log('finished processing bar');\n    });\n\n    // add some items to the queue (batch-wise)\n\n    q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function (err) {\n        console.log('finished processing bar');\n    });\n\n\n---------------------------------------\n\n<a name=\"auto\" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The\n  syntax is easier to understand by looking at the example.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. If all tasks complete\n  successfully, it will receive an object containing their results.\n\n__Example__\n\n    async.auto({\n        get_data: function(callback){\n            // async code to get some data\n        },\n        make_folder: function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        },\n        write_file: ['get_data', 'make_folder', function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n            callback(null, filename);\n        }],\n        email_link: ['write_file', function(callback, results){\n            // once the file is written let's email a link to it...\n            // results.write_file contains the filename returned by write_file.\n        }]\n    });\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n    async.parallel([\n        function(callback){\n            // async code to get some data\n        },\n        function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        }\n    ],\n    function(results){\n        async.series([\n            function(callback){\n                // once there is some data and the directory exists,\n                // write the data to a file in the directory\n            },\n            email_link: function(callback){\n                // once the file is written let's email a link to it...\n            }\n        ]);\n    });\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name=\"iterator\" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. Its also possible to\n'peek' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n\n__Example__\n\n    var iterator = async.iterator([\n        function(){ sys.p('one'); },\n        function(){ sys.p('two'); },\n        function(){ sys.p('three'); }\n    ]);\n\n    node> var iterator2 = iterator();\n    'one'\n    node> var iterator3 = iterator2();\n    'two'\n    node> iterator3();\n    'three'\n    node> var nextfn = iterator2.next();\n    node> nextfn();\n    'three'\n\n\n---------------------------------------\n\n<a name=\"apply\" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n    // using apply\n\n    async.parallel([\n        async.apply(fs.writeFile, 'testfile1', 'test1'),\n        async.apply(fs.writeFile, 'testfile2', 'test2'),\n    ]);\n\n\n    // the same process without using apply\n\n    async.parallel([\n        function(callback){\n            fs.writeFile('testfile1', 'test1', callback);\n        },\n        function(callback){\n            fs.writeFile('testfile2', 'test2', callback);\n        },\n    ]);\n\nIt's possible to pass any number of additional arguments when calling the\ncontinuation:\n\n    node> var fn = async.apply(sys.puts, 'one');\n    node> fn('two', 'three');\n    one\n    two\n    three\n\n---------------------------------------\n\n<a name=\"nextTick\" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setTimeout(callback, 0),\nwhich means other higher priority events may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n    var call_order = [];\n    async.nextTick(function(){\n        call_order.push('two');\n        // call_order now equals ['one','two]\n    });\n    call_order.push('one')\n\n\n## Utils\n\n<a name=\"memoize\" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n    var slow_fn = function (name, callback) {\n        // do something\n        callback(null, result);\n    };\n    var fn = async.memoize(slow_fn);\n\n    // fn can now be used as if it were slow_fn\n    fn('some name', function () {\n        // callback\n    });\n\n<a name=\"unmemoize\" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name=\"log\" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, 'hello ' + name);\n        }, 1000);\n    };\n\n    node> async.log(hello, 'world');\n    'hello world'\n\n\n---------------------------------------\n\n<a name=\"dir\" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, {hello: name});\n        }, 1000);\n    };\n\n    node> async.dir(hello, 'world');\n    {hello: 'world'}\n\n\n---------------------------------------\n\n<a name=\"noConflict\" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n","maintainers":[{"name":"caolan","email":"caolan@caolanmcmahon.com"}],"directories":{}},"0.1.17":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.17","repository":{"type":"git","url":"git://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"dependencies":{"uglify-js":"1.2.x"},"devDependencies":{"nodeunit":">0.0.0","nodelint":">0.0.0"},"scripts":{"preinstall":"make clean","install":"make build","test":"make test"},"_npmUser":{"name":"caolan","email":"caolan@caolanmcmahon.com"},"_id":"async@0.1.17","optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.1","_nodeVersion":"v0.6.11","_defaultsLoaded":true,"dist":{"shasum":"03524a379e974dc9ee5c811c6ee3815d7bc54f6e","tarball":"http://registry.npmjs.org/async/-/async-0.1.17.tgz"},"readme":"# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual 'functional'\nsuspects (map, reduce, filter, forEach…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n    async.map(['file1','file2','file3'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n    async.filter(['file1','file2','file3'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n    async.parallel([\n        function(){ ... },\n        function(){ ... }\n    ], callback);\n\n    async.series([\n        function(){ ... },\n        function(){ ... }\n    ]);\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n\n## Download\n\nReleases are available for download from\n[GitHub](http://github.com/caolan/async/downloads).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 17.5kb Uncompressed\n\n__Production:__ [async.min.js](https://github.com/caolan/async/raw/master/dist/async.min.js) - 1.7kb Packed and Gzipped\n\n\n## In the Browser\n\nSo far its been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n    <script type=\"text/javascript\" src=\"async.js\"></script>\n    <script type=\"text/javascript\">\n\n        async.map(data, asyncProcess, function(err, results){\n            alert(results);\n        });\n\n    </script>\n\n\n## Documentation\n\n### Collections\n\n* [forEach](#forEach)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [until](#until)\n* [waterfall](#waterfall)\n* [queue](#queue)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name=\"forEach\" />\n### forEach(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the forEach function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // assuming openFiles is an array of file names and saveFile is a function\n    // to save the modified contents of that file:\n\n    async.forEach(openFiles, saveFile, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n\n---------------------------------------\n\n<a name=\"forEachSeries\" />\n### forEachSeries(arr, iterator, callback)\n\nThe same as forEach only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name=\"forEachLimit\" />\n### forEachLimit(arr, limit, iterator, callback)\n\nThe same as forEach only the iterator is applied to batches of items in the\narray, in series. The next batch of iterators is only called once the current\none has completed processing.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - How many items should be in each batch.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // Assume documents is an array of JSON objects and requestApi is a\n    // function that interacts with a rate-limited REST api.\n\n    async.forEachLimit(documents, 20, requestApi, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n---------------------------------------\n\n<a name=\"map\" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n    async.map(['file1','file2','file3'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n---------------------------------------\n\n<a name=\"mapSeries\" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name=\"filter\" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n    async.filter(['file1','file2','file3'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n---------------------------------------\n\n<a name=\"filterSeries\" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name=\"reject\" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name=\"rejectSeries\" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as filter, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name=\"reduce\" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then its probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback which accepts an optional error as its first argument, and the state\n  of the reduction as the second. If an error is passed to the callback, the\n  reduction is stopped and the main callback is immediately called with the\n  error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n    async.reduce([1,2,3], 0, function(memo, item, callback){\n        // pointless async:\n        process.nextTick(function(){\n            callback(null, memo + item)\n        });\n    }, function(err, result){\n        // result is now equal to the last value of memo, which is 6\n    });\n\n---------------------------------------\n\n<a name=\"reduceRight\" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name=\"detect\" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n    async.detect(['file1','file2','file3'], path.exists, function(result){\n        // result now equals the first file in the list that exists\n    });\n\n---------------------------------------\n\n<a name=\"detectSeries\" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name=\"sortBy\" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a value to use as the sort criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n    async.sortBy(['file1','file2','file3'], function(file, callback){\n        fs.stat(file, function(err, stats){\n            callback(err, stats.mtime);\n        });\n    }, function(err, results){\n        // results is now the original array of files sorted by\n        // modified date\n    });\n\n\n---------------------------------------\n\n<a name=\"some\" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n    async.some(['file1','file2','file3'], path.exists, function(result){\n        // if result is true then at least one of the files exists\n    });\n\n---------------------------------------\n\n<a name=\"every\" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n    async.every(['file1','file2','file3'], path.exists, function(result){\n        // if result is true then every file exists\n    });\n\n---------------------------------------\n\n<a name=\"concat\" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n    async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files){\n        // files is now a list of filenames that exist in the 3 directories\n    });\n\n---------------------------------------\n\n<a name=\"concatSeries\" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name=\"series\" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.series([\n        function(callback){\n            // do some stuff ...\n            callback(null, 'one');\n        },\n        function(callback){\n            // do some more stuff ...\n            callback(null, 'two');\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // results is now equal to ['one', 'two']\n    });\n\n\n    // an example using an object instead of an array\n    async.series({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equal to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.parallel([\n        function(callback){\n            setTimeout(function(){\n                callback(null, 'one');\n            }, 200);\n        },\n        function(callback){\n            setTimeout(function(){\n                callback(null, 'two');\n            }, 100);\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // in this case, the results array will equal ['two','one']\n        // because the functions were run in parallel and the second\n        // function had a shorter timeout before calling the callback.\n    });\n\n\n    // an example using an object instead of an array\n    async.parallel({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equals to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name=\"whilst\" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback which must be called once it has completed with an optional\n  error as the first argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n    var count = 0;\n\n    async.whilst(\n        function () { return count < 5; },\n        function (callback) {\n            count++;\n            setTimeout(callback, 1000);\n        },\n        function (err) {\n            // 5 seconds have passed\n        }\n    );\n\n\n---------------------------------------\n\n<a name=\"until\" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n\n---------------------------------------\n\n<a name=\"waterfall\" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task's callback.\n\n\n\n__Example__\n\n    async.waterfall([\n        function(callback){\n            callback(null, 'one', 'two');\n        },\n        function(arg1, arg2, callback){\n            callback(null, 'three');\n        },\n        function(arg1, callback){\n            // arg1 now equals 'three'\n            callback(null, 'done');\n        }\n    ], function (err, result) {\n       // result now equals 'done'    \n    });\n\n\n---------------------------------------\n\n<a name=\"queue\" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task's callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n    // create a queue object with concurrency 2\n\n    var q = async.queue(function (task, callback) {\n        console.log('hello ' + task.name);\n        callback();\n    }, 2);\n\n\n    // assign a callback\n    q.drain = function() {\n        console.log('all items have been processed');\n    }\n\n    // add some items to the queue\n\n    q.push({name: 'foo'}, function (err) {\n        console.log('finished processing foo');\n    });\n    q.push({name: 'bar'}, function (err) {\n        console.log('finished processing bar');\n    });\n\n    // add some items to the queue (batch-wise)\n\n    q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function (err) {\n        console.log('finished processing bar');\n    });\n\n\n---------------------------------------\n\n<a name=\"auto\" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The\n  syntax is easier to understand by looking at the example.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. If all tasks complete\n  successfully, it will receive an object containing their results.\n\n__Example__\n\n    async.auto({\n        get_data: function(callback){\n            // async code to get some data\n        },\n        make_folder: function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        },\n        write_file: ['get_data', 'make_folder', function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n            callback(null, filename);\n        }],\n        email_link: ['write_file', function(callback, results){\n            // once the file is written let's email a link to it...\n            // results.write_file contains the filename returned by write_file.\n        }]\n    });\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n    async.parallel([\n        function(callback){\n            // async code to get some data\n        },\n        function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        }\n    ],\n    function(results){\n        async.series([\n            function(callback){\n                // once there is some data and the directory exists,\n                // write the data to a file in the directory\n            },\n            email_link: function(callback){\n                // once the file is written let's email a link to it...\n            }\n        ]);\n    });\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name=\"iterator\" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. Its also possible to\n'peek' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n\n__Example__\n\n    var iterator = async.iterator([\n        function(){ sys.p('one'); },\n        function(){ sys.p('two'); },\n        function(){ sys.p('three'); }\n    ]);\n\n    node> var iterator2 = iterator();\n    'one'\n    node> var iterator3 = iterator2();\n    'two'\n    node> iterator3();\n    'three'\n    node> var nextfn = iterator2.next();\n    node> nextfn();\n    'three'\n\n\n---------------------------------------\n\n<a name=\"apply\" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n    // using apply\n\n    async.parallel([\n        async.apply(fs.writeFile, 'testfile1', 'test1'),\n        async.apply(fs.writeFile, 'testfile2', 'test2'),\n    ]);\n\n\n    // the same process without using apply\n\n    async.parallel([\n        function(callback){\n            fs.writeFile('testfile1', 'test1', callback);\n        },\n        function(callback){\n            fs.writeFile('testfile2', 'test2', callback);\n        },\n    ]);\n\nIt's possible to pass any number of additional arguments when calling the\ncontinuation:\n\n    node> var fn = async.apply(sys.puts, 'one');\n    node> fn('two', 'three');\n    one\n    two\n    three\n\n---------------------------------------\n\n<a name=\"nextTick\" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setTimeout(callback, 0),\nwhich means other higher priority events may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n    var call_order = [];\n    async.nextTick(function(){\n        call_order.push('two');\n        // call_order now equals ['one','two]\n    });\n    call_order.push('one')\n\n\n## Utils\n\n<a name=\"memoize\" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n    var slow_fn = function (name, callback) {\n        // do something\n        callback(null, result);\n    };\n    var fn = async.memoize(slow_fn);\n\n    // fn can now be used as if it were slow_fn\n    fn('some name', function () {\n        // callback\n    });\n\n<a name=\"unmemoize\" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name=\"log\" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, 'hello ' + name);\n        }, 1000);\n    };\n\n    node> async.log(hello, 'world');\n    'hello world'\n\n\n---------------------------------------\n\n<a name=\"dir\" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, {hello: name});\n        }, 1000);\n    };\n\n    node> async.dir(hello, 'world');\n    {hello: 'world'}\n\n\n---------------------------------------\n\n<a name=\"noConflict\" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n","maintainers":[{"name":"caolan","email":"caolan@caolanmcmahon.com"}],"directories":{}},"0.1.18":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.18","repository":{"type":"git","url":"git://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"devDependencies":{"nodeunit":">0.0.0","uglify-js":"1.2.x","nodelint":">0.0.0"},"_npmUser":{"name":"caolan","email":"caolan@caolanmcmahon.com"},"_id":"async@0.1.18","dependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.1","_nodeVersion":"v0.6.11","_defaultsLoaded":true,"dist":{"shasum":"c59c923920b76d5bf23248c04433920c4d45086a","tarball":"http://registry.npmjs.org/async/-/async-0.1.18.tgz"},"readme":"# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual 'functional'\nsuspects (map, reduce, filter, forEach…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n    async.map(['file1','file2','file3'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n    async.filter(['file1','file2','file3'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n    async.parallel([\n        function(){ ... },\n        function(){ ... }\n    ], callback);\n\n    async.series([\n        function(){ ... },\n        function(){ ... }\n    ]);\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n\n## Download\n\nReleases are available for download from\n[GitHub](http://github.com/caolan/async/downloads).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 17.5kb Uncompressed\n\n__Production:__ [async.min.js](https://github.com/caolan/async/raw/master/dist/async.min.js) - 1.7kb Packed and Gzipped\n\n\n## In the Browser\n\nSo far its been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n    <script type=\"text/javascript\" src=\"async.js\"></script>\n    <script type=\"text/javascript\">\n\n        async.map(data, asyncProcess, function(err, results){\n            alert(results);\n        });\n\n    </script>\n\n\n## Documentation\n\n### Collections\n\n* [forEach](#forEach)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [until](#until)\n* [waterfall](#waterfall)\n* [queue](#queue)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name=\"forEach\" />\n### forEach(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the forEach function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // assuming openFiles is an array of file names and saveFile is a function\n    // to save the modified contents of that file:\n\n    async.forEach(openFiles, saveFile, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n\n---------------------------------------\n\n<a name=\"forEachSeries\" />\n### forEachSeries(arr, iterator, callback)\n\nThe same as forEach only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name=\"forEachLimit\" />\n### forEachLimit(arr, limit, iterator, callback)\n\nThe same as forEach only the iterator is applied to batches of items in the\narray, in series. The next batch of iterators is only called once the current\none has completed processing.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - How many items should be in each batch.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // Assume documents is an array of JSON objects and requestApi is a\n    // function that interacts with a rate-limited REST api.\n\n    async.forEachLimit(documents, 20, requestApi, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n---------------------------------------\n\n<a name=\"map\" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n    async.map(['file1','file2','file3'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n---------------------------------------\n\n<a name=\"mapSeries\" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name=\"filter\" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n    async.filter(['file1','file2','file3'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n---------------------------------------\n\n<a name=\"filterSeries\" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name=\"reject\" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name=\"rejectSeries\" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as filter, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name=\"reduce\" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then its probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback which accepts an optional error as its first argument, and the state\n  of the reduction as the second. If an error is passed to the callback, the\n  reduction is stopped and the main callback is immediately called with the\n  error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n    async.reduce([1,2,3], 0, function(memo, item, callback){\n        // pointless async:\n        process.nextTick(function(){\n            callback(null, memo + item)\n        });\n    }, function(err, result){\n        // result is now equal to the last value of memo, which is 6\n    });\n\n---------------------------------------\n\n<a name=\"reduceRight\" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name=\"detect\" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n    async.detect(['file1','file2','file3'], path.exists, function(result){\n        // result now equals the first file in the list that exists\n    });\n\n---------------------------------------\n\n<a name=\"detectSeries\" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name=\"sortBy\" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a value to use as the sort criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n    async.sortBy(['file1','file2','file3'], function(file, callback){\n        fs.stat(file, function(err, stats){\n            callback(err, stats.mtime);\n        });\n    }, function(err, results){\n        // results is now the original array of files sorted by\n        // modified date\n    });\n\n\n---------------------------------------\n\n<a name=\"some\" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n    async.some(['file1','file2','file3'], path.exists, function(result){\n        // if result is true then at least one of the files exists\n    });\n\n---------------------------------------\n\n<a name=\"every\" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n    async.every(['file1','file2','file3'], path.exists, function(result){\n        // if result is true then every file exists\n    });\n\n---------------------------------------\n\n<a name=\"concat\" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n    async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files){\n        // files is now a list of filenames that exist in the 3 directories\n    });\n\n---------------------------------------\n\n<a name=\"concatSeries\" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name=\"series\" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.series([\n        function(callback){\n            // do some stuff ...\n            callback(null, 'one');\n        },\n        function(callback){\n            // do some more stuff ...\n            callback(null, 'two');\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // results is now equal to ['one', 'two']\n    });\n\n\n    // an example using an object instead of an array\n    async.series({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equal to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.parallel([\n        function(callback){\n            setTimeout(function(){\n                callback(null, 'one');\n            }, 200);\n        },\n        function(callback){\n            setTimeout(function(){\n                callback(null, 'two');\n            }, 100);\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // in this case, the results array will equal ['two','one']\n        // because the functions were run in parallel and the second\n        // function had a shorter timeout before calling the callback.\n    });\n\n\n    // an example using an object instead of an array\n    async.parallel({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equals to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name=\"whilst\" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback which must be called once it has completed with an optional\n  error as the first argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n    var count = 0;\n\n    async.whilst(\n        function () { return count < 5; },\n        function (callback) {\n            count++;\n            setTimeout(callback, 1000);\n        },\n        function (err) {\n            // 5 seconds have passed\n        }\n    );\n\n\n---------------------------------------\n\n<a name=\"until\" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n\n---------------------------------------\n\n<a name=\"waterfall\" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task's callback.\n\n\n\n__Example__\n\n    async.waterfall([\n        function(callback){\n            callback(null, 'one', 'two');\n        },\n        function(arg1, arg2, callback){\n            callback(null, 'three');\n        },\n        function(arg1, callback){\n            // arg1 now equals 'three'\n            callback(null, 'done');\n        }\n    ], function (err, result) {\n       // result now equals 'done'    \n    });\n\n\n---------------------------------------\n\n<a name=\"queue\" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task's callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n    // create a queue object with concurrency 2\n\n    var q = async.queue(function (task, callback) {\n        console.log('hello ' + task.name);\n        callback();\n    }, 2);\n\n\n    // assign a callback\n    q.drain = function() {\n        console.log('all items have been processed');\n    }\n\n    // add some items to the queue\n\n    q.push({name: 'foo'}, function (err) {\n        console.log('finished processing foo');\n    });\n    q.push({name: 'bar'}, function (err) {\n        console.log('finished processing bar');\n    });\n\n    // add some items to the queue (batch-wise)\n\n    q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function (err) {\n        console.log('finished processing bar');\n    });\n\n\n---------------------------------------\n\n<a name=\"auto\" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The\n  syntax is easier to understand by looking at the example.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. If all tasks complete\n  successfully, it will receive an object containing their results.\n\n__Example__\n\n    async.auto({\n        get_data: function(callback){\n            // async code to get some data\n        },\n        make_folder: function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        },\n        write_file: ['get_data', 'make_folder', function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n            callback(null, filename);\n        }],\n        email_link: ['write_file', function(callback, results){\n            // once the file is written let's email a link to it...\n            // results.write_file contains the filename returned by write_file.\n        }]\n    });\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n    async.parallel([\n        function(callback){\n            // async code to get some data\n        },\n        function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        }\n    ],\n    function(results){\n        async.series([\n            function(callback){\n                // once there is some data and the directory exists,\n                // write the data to a file in the directory\n            },\n            email_link: function(callback){\n                // once the file is written let's email a link to it...\n            }\n        ]);\n    });\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name=\"iterator\" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. Its also possible to\n'peek' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n\n__Example__\n\n    var iterator = async.iterator([\n        function(){ sys.p('one'); },\n        function(){ sys.p('two'); },\n        function(){ sys.p('three'); }\n    ]);\n\n    node> var iterator2 = iterator();\n    'one'\n    node> var iterator3 = iterator2();\n    'two'\n    node> iterator3();\n    'three'\n    node> var nextfn = iterator2.next();\n    node> nextfn();\n    'three'\n\n\n---------------------------------------\n\n<a name=\"apply\" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n    // using apply\n\n    async.parallel([\n        async.apply(fs.writeFile, 'testfile1', 'test1'),\n        async.apply(fs.writeFile, 'testfile2', 'test2'),\n    ]);\n\n\n    // the same process without using apply\n\n    async.parallel([\n        function(callback){\n            fs.writeFile('testfile1', 'test1', callback);\n        },\n        function(callback){\n            fs.writeFile('testfile2', 'test2', callback);\n        },\n    ]);\n\nIt's possible to pass any number of additional arguments when calling the\ncontinuation:\n\n    node> var fn = async.apply(sys.puts, 'one');\n    node> fn('two', 'three');\n    one\n    two\n    three\n\n---------------------------------------\n\n<a name=\"nextTick\" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setTimeout(callback, 0),\nwhich means other higher priority events may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n    var call_order = [];\n    async.nextTick(function(){\n        call_order.push('two');\n        // call_order now equals ['one','two]\n    });\n    call_order.push('one')\n\n\n## Utils\n\n<a name=\"memoize\" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n    var slow_fn = function (name, callback) {\n        // do something\n        callback(null, result);\n    };\n    var fn = async.memoize(slow_fn);\n\n    // fn can now be used as if it were slow_fn\n    fn('some name', function () {\n        // callback\n    });\n\n<a name=\"unmemoize\" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name=\"log\" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, 'hello ' + name);\n        }, 1000);\n    };\n\n    node> async.log(hello, 'world');\n    'hello world'\n\n\n---------------------------------------\n\n<a name=\"dir\" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, {hello: name});\n        }, 1000);\n    };\n\n    node> async.dir(hello, 'world');\n    {hello: 'world'}\n\n\n---------------------------------------\n\n<a name=\"noConflict\" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n","maintainers":[{"name":"caolan","email":"caolan@caolanmcmahon.com"}],"directories":{}},"0.1.19":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.19","repository":{"type":"git","url":"git://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"devDependencies":{"nodeunit":">0.0.0","uglify-js":"1.2.x","nodelint":">0.0.0"},"_npmUser":{"name":"caolan","email":"caolan@caolanmcmahon.com"},"_id":"async@0.1.19","dependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.21","_nodeVersion":"v0.6.18","_defaultsLoaded":true,"dist":{"shasum":"4fd6125a70f841fb10b14aeec6e23cf1479c71a7","tarball":"http://registry.npmjs.org/async/-/async-0.1.19.tgz"},"readme":"# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual 'functional'\nsuspects (map, reduce, filter, forEach…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n    async.map(['file1','file2','file3'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n    async.filter(['file1','file2','file3'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n    async.parallel([\n        function(){ ... },\n        function(){ ... }\n    ], callback);\n\n    async.series([\n        function(){ ... },\n        function(){ ... }\n    ]);\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n\n## Download\n\nReleases are available for download from\n[GitHub](http://github.com/caolan/async/downloads).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 17.5kb Uncompressed\n\n__Production:__ [async.min.js](https://github.com/caolan/async/raw/master/dist/async.min.js) - 1.7kb Packed and Gzipped\n\n\n## In the Browser\n\nSo far its been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n    <script type=\"text/javascript\" src=\"async.js\"></script>\n    <script type=\"text/javascript\">\n\n        async.map(data, asyncProcess, function(err, results){\n            alert(results);\n        });\n\n    </script>\n\n\n## Documentation\n\n### Collections\n\n* [forEach](#forEach)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [until](#until)\n* [waterfall](#waterfall)\n* [queue](#queue)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name=\"forEach\" />\n### forEach(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the forEach function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // assuming openFiles is an array of file names and saveFile is a function\n    // to save the modified contents of that file:\n\n    async.forEach(openFiles, saveFile, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n\n---------------------------------------\n\n<a name=\"forEachSeries\" />\n### forEachSeries(arr, iterator, callback)\n\nThe same as forEach only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name=\"forEachLimit\" />\n### forEachLimit(arr, limit, iterator, callback)\n\nThe same as forEach only the iterator is applied to batches of items in the\narray, in series. The next batch of iterators is only called once the current\none has completed processing.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - How many items should be in each batch.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // Assume documents is an array of JSON objects and requestApi is a\n    // function that interacts with a rate-limited REST api.\n\n    async.forEachLimit(documents, 20, requestApi, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n---------------------------------------\n\n<a name=\"map\" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n    async.map(['file1','file2','file3'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n---------------------------------------\n\n<a name=\"mapSeries\" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name=\"filter\" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n    async.filter(['file1','file2','file3'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n---------------------------------------\n\n<a name=\"filterSeries\" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name=\"reject\" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name=\"rejectSeries\" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as filter, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name=\"reduce\" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then its probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback which accepts an optional error as its first argument, and the state\n  of the reduction as the second. If an error is passed to the callback, the\n  reduction is stopped and the main callback is immediately called with the\n  error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n    async.reduce([1,2,3], 0, function(memo, item, callback){\n        // pointless async:\n        process.nextTick(function(){\n            callback(null, memo + item)\n        });\n    }, function(err, result){\n        // result is now equal to the last value of memo, which is 6\n    });\n\n---------------------------------------\n\n<a name=\"reduceRight\" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name=\"detect\" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n    async.detect(['file1','file2','file3'], path.exists, function(result){\n        // result now equals the first file in the list that exists\n    });\n\n---------------------------------------\n\n<a name=\"detectSeries\" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name=\"sortBy\" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a value to use as the sort criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n    async.sortBy(['file1','file2','file3'], function(file, callback){\n        fs.stat(file, function(err, stats){\n            callback(err, stats.mtime);\n        });\n    }, function(err, results){\n        // results is now the original array of files sorted by\n        // modified date\n    });\n\n\n---------------------------------------\n\n<a name=\"some\" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n    async.some(['file1','file2','file3'], path.exists, function(result){\n        // if result is true then at least one of the files exists\n    });\n\n---------------------------------------\n\n<a name=\"every\" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n    async.every(['file1','file2','file3'], path.exists, function(result){\n        // if result is true then every file exists\n    });\n\n---------------------------------------\n\n<a name=\"concat\" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n    async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files){\n        // files is now a list of filenames that exist in the 3 directories\n    });\n\n---------------------------------------\n\n<a name=\"concatSeries\" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name=\"series\" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.series([\n        function(callback){\n            // do some stuff ...\n            callback(null, 'one');\n        },\n        function(callback){\n            // do some more stuff ...\n            callback(null, 'two');\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // results is now equal to ['one', 'two']\n    });\n\n\n    // an example using an object instead of an array\n    async.series({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equal to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.parallel([\n        function(callback){\n            setTimeout(function(){\n                callback(null, 'one');\n            }, 200);\n        },\n        function(callback){\n            setTimeout(function(){\n                callback(null, 'two');\n            }, 100);\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // the results array will equal ['one','two'] even though\n        // the second function had a shorter timeout.\n    });\n\n\n    // an example using an object instead of an array\n    async.parallel({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equals to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name=\"whilst\" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback which must be called once it has completed with an optional\n  error as the first argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n    var count = 0;\n\n    async.whilst(\n        function () { return count < 5; },\n        function (callback) {\n            count++;\n            setTimeout(callback, 1000);\n        },\n        function (err) {\n            // 5 seconds have passed\n        }\n    );\n\n\n---------------------------------------\n\n<a name=\"until\" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n\n---------------------------------------\n\n<a name=\"waterfall\" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task's callback.\n\n\n\n__Example__\n\n    async.waterfall([\n        function(callback){\n            callback(null, 'one', 'two');\n        },\n        function(arg1, arg2, callback){\n            callback(null, 'three');\n        },\n        function(arg1, callback){\n            // arg1 now equals 'three'\n            callback(null, 'done');\n        }\n    ], function (err, result) {\n       // result now equals 'done'    \n    });\n\n\n---------------------------------------\n\n<a name=\"queue\" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task's callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n    // create a queue object with concurrency 2\n\n    var q = async.queue(function (task, callback) {\n        console.log('hello ' + task.name);\n        callback();\n    }, 2);\n\n\n    // assign a callback\n    q.drain = function() {\n        console.log('all items have been processed');\n    }\n\n    // add some items to the queue\n\n    q.push({name: 'foo'}, function (err) {\n        console.log('finished processing foo');\n    });\n    q.push({name: 'bar'}, function (err) {\n        console.log('finished processing bar');\n    });\n\n    // add some items to the queue (batch-wise)\n\n    q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function (err) {\n        console.log('finished processing bar');\n    });\n\n\n---------------------------------------\n\n<a name=\"auto\" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The\n  syntax is easier to understand by looking at the example.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. If all tasks complete\n  successfully, it will receive an object containing their results.\n\n__Example__\n\n    async.auto({\n        get_data: function(callback){\n            // async code to get some data\n        },\n        make_folder: function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        },\n        write_file: ['get_data', 'make_folder', function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n            callback(null, filename);\n        }],\n        email_link: ['write_file', function(callback, results){\n            // once the file is written let's email a link to it...\n            // results.write_file contains the filename returned by write_file.\n        }]\n    });\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n    async.parallel([\n        function(callback){\n            // async code to get some data\n        },\n        function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        }\n    ],\n    function(results){\n        async.series([\n            function(callback){\n                // once there is some data and the directory exists,\n                // write the data to a file in the directory\n            },\n            email_link: function(callback){\n                // once the file is written let's email a link to it...\n            }\n        ]);\n    });\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name=\"iterator\" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. Its also possible to\n'peek' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n\n__Example__\n\n    var iterator = async.iterator([\n        function(){ sys.p('one'); },\n        function(){ sys.p('two'); },\n        function(){ sys.p('three'); }\n    ]);\n\n    node> var iterator2 = iterator();\n    'one'\n    node> var iterator3 = iterator2();\n    'two'\n    node> iterator3();\n    'three'\n    node> var nextfn = iterator2.next();\n    node> nextfn();\n    'three'\n\n\n---------------------------------------\n\n<a name=\"apply\" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n    // using apply\n\n    async.parallel([\n        async.apply(fs.writeFile, 'testfile1', 'test1'),\n        async.apply(fs.writeFile, 'testfile2', 'test2'),\n    ]);\n\n\n    // the same process without using apply\n\n    async.parallel([\n        function(callback){\n            fs.writeFile('testfile1', 'test1', callback);\n        },\n        function(callback){\n            fs.writeFile('testfile2', 'test2', callback);\n        },\n    ]);\n\nIt's possible to pass any number of additional arguments when calling the\ncontinuation:\n\n    node> var fn = async.apply(sys.puts, 'one');\n    node> fn('two', 'three');\n    one\n    two\n    three\n\n---------------------------------------\n\n<a name=\"nextTick\" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setTimeout(callback, 0),\nwhich means other higher priority events may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n    var call_order = [];\n    async.nextTick(function(){\n        call_order.push('two');\n        // call_order now equals ['one','two]\n    });\n    call_order.push('one')\n\n\n## Utils\n\n<a name=\"memoize\" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n    var slow_fn = function (name, callback) {\n        // do something\n        callback(null, result);\n    };\n    var fn = async.memoize(slow_fn);\n\n    // fn can now be used as if it were slow_fn\n    fn('some name', function () {\n        // callback\n    });\n\n<a name=\"unmemoize\" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name=\"log\" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, 'hello ' + name);\n        }, 1000);\n    };\n\n    node> async.log(hello, 'world');\n    'hello world'\n\n\n---------------------------------------\n\n<a name=\"dir\" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, {hello: name});\n        }, 1000);\n    };\n\n    node> async.dir(hello, 'world');\n    {hello: 'world'}\n\n\n---------------------------------------\n\n<a name=\"noConflict\" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n","maintainers":[{"name":"caolan","email":"caolan@caolanmcmahon.com"}],"directories":{}},"0.1.20":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.20","repository":{"type":"git","url":"git://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"devDependencies":{"nodeunit":">0.0.0","uglify-js":"1.2.x","nodelint":">0.0.0"},"_npmUser":{"name":"caolan","email":"caolan@caolanmcmahon.com"},"_id":"async@0.1.20","dependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.21","_nodeVersion":"v0.6.18","_defaultsLoaded":true,"dist":{"shasum":"ba0e47b08ae972e04b5215de28539b313482ede5","tarball":"http://registry.npmjs.org/async/-/async-0.1.20.tgz"},"readme":"# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual 'functional'\nsuspects (map, reduce, filter, forEach…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n    async.map(['file1','file2','file3'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n    async.filter(['file1','file2','file3'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n    async.parallel([\n        function(){ ... },\n        function(){ ... }\n    ], callback);\n\n    async.series([\n        function(){ ... },\n        function(){ ... }\n    ]);\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n\n## Download\n\nReleases are available for download from\n[GitHub](http://github.com/caolan/async/downloads).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 17.5kb Uncompressed\n\n__Production:__ [async.min.js](https://github.com/caolan/async/raw/master/dist/async.min.js) - 1.7kb Packed and Gzipped\n\n\n## In the Browser\n\nSo far its been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n    <script type=\"text/javascript\" src=\"async.js\"></script>\n    <script type=\"text/javascript\">\n\n        async.map(data, asyncProcess, function(err, results){\n            alert(results);\n        });\n\n    </script>\n\n\n## Documentation\n\n### Collections\n\n* [forEach](#forEach)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [until](#until)\n* [waterfall](#waterfall)\n* [queue](#queue)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name=\"forEach\" />\n### forEach(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the forEach function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // assuming openFiles is an array of file names and saveFile is a function\n    // to save the modified contents of that file:\n\n    async.forEach(openFiles, saveFile, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n\n---------------------------------------\n\n<a name=\"forEachSeries\" />\n### forEachSeries(arr, iterator, callback)\n\nThe same as forEach only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name=\"forEachLimit\" />\n### forEachLimit(arr, limit, iterator, callback)\n\nThe same as forEach only the iterator is applied to batches of items in the\narray, in series. The next batch of iterators is only called once the current\none has completed processing.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - How many items should be in each batch.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // Assume documents is an array of JSON objects and requestApi is a\n    // function that interacts with a rate-limited REST api.\n\n    async.forEachLimit(documents, 20, requestApi, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n---------------------------------------\n\n<a name=\"map\" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n    async.map(['file1','file2','file3'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n---------------------------------------\n\n<a name=\"mapSeries\" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name=\"filter\" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n    async.filter(['file1','file2','file3'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n---------------------------------------\n\n<a name=\"filterSeries\" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name=\"reject\" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name=\"rejectSeries\" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as filter, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name=\"reduce\" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then its probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback which accepts an optional error as its first argument, and the state\n  of the reduction as the second. If an error is passed to the callback, the\n  reduction is stopped and the main callback is immediately called with the\n  error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n    async.reduce([1,2,3], 0, function(memo, item, callback){\n        // pointless async:\n        process.nextTick(function(){\n            callback(null, memo + item)\n        });\n    }, function(err, result){\n        // result is now equal to the last value of memo, which is 6\n    });\n\n---------------------------------------\n\n<a name=\"reduceRight\" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name=\"detect\" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n    async.detect(['file1','file2','file3'], path.exists, function(result){\n        // result now equals the first file in the list that exists\n    });\n\n---------------------------------------\n\n<a name=\"detectSeries\" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name=\"sortBy\" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a value to use as the sort criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n    async.sortBy(['file1','file2','file3'], function(file, callback){\n        fs.stat(file, function(err, stats){\n            callback(err, stats.mtime);\n        });\n    }, function(err, results){\n        // results is now the original array of files sorted by\n        // modified date\n    });\n\n\n---------------------------------------\n\n<a name=\"some\" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n    async.some(['file1','file2','file3'], path.exists, function(result){\n        // if result is true then at least one of the files exists\n    });\n\n---------------------------------------\n\n<a name=\"every\" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n    async.every(['file1','file2','file3'], path.exists, function(result){\n        // if result is true then every file exists\n    });\n\n---------------------------------------\n\n<a name=\"concat\" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n    async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files){\n        // files is now a list of filenames that exist in the 3 directories\n    });\n\n---------------------------------------\n\n<a name=\"concatSeries\" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name=\"series\" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.series([\n        function(callback){\n            // do some stuff ...\n            callback(null, 'one');\n        },\n        function(callback){\n            // do some more stuff ...\n            callback(null, 'two');\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // results is now equal to ['one', 'two']\n    });\n\n\n    // an example using an object instead of an array\n    async.series({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equal to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.parallel([\n        function(callback){\n            setTimeout(function(){\n                callback(null, 'one');\n            }, 200);\n        },\n        function(callback){\n            setTimeout(function(){\n                callback(null, 'two');\n            }, 100);\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // the results array will equal ['one','two'] even though\n        // the second function had a shorter timeout.\n    });\n\n\n    // an example using an object instead of an array\n    async.parallel({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equals to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name=\"whilst\" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback which must be called once it has completed with an optional\n  error as the first argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n    var count = 0;\n\n    async.whilst(\n        function () { return count < 5; },\n        function (callback) {\n            count++;\n            setTimeout(callback, 1000);\n        },\n        function (err) {\n            // 5 seconds have passed\n        }\n    );\n\n\n---------------------------------------\n\n<a name=\"until\" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n\n---------------------------------------\n\n<a name=\"waterfall\" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task's callback.\n\n\n\n__Example__\n\n    async.waterfall([\n        function(callback){\n            callback(null, 'one', 'two');\n        },\n        function(arg1, arg2, callback){\n            callback(null, 'three');\n        },\n        function(arg1, callback){\n            // arg1 now equals 'three'\n            callback(null, 'done');\n        }\n    ], function (err, result) {\n       // result now equals 'done'    \n    });\n\n\n---------------------------------------\n\n<a name=\"queue\" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task's callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n    // create a queue object with concurrency 2\n\n    var q = async.queue(function (task, callback) {\n        console.log('hello ' + task.name);\n        callback();\n    }, 2);\n\n\n    // assign a callback\n    q.drain = function() {\n        console.log('all items have been processed');\n    }\n\n    // add some items to the queue\n\n    q.push({name: 'foo'}, function (err) {\n        console.log('finished processing foo');\n    });\n    q.push({name: 'bar'}, function (err) {\n        console.log('finished processing bar');\n    });\n\n    // add some items to the queue (batch-wise)\n\n    q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function (err) {\n        console.log('finished processing bar');\n    });\n\n\n---------------------------------------\n\n<a name=\"auto\" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The\n  syntax is easier to understand by looking at the example.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. If all tasks complete\n  successfully, it will receive an object containing their results.\n\n__Example__\n\n    async.auto({\n        get_data: function(callback){\n            // async code to get some data\n        },\n        make_folder: function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        },\n        write_file: ['get_data', 'make_folder', function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n            callback(null, filename);\n        }],\n        email_link: ['write_file', function(callback, results){\n            // once the file is written let's email a link to it...\n            // results.write_file contains the filename returned by write_file.\n        }]\n    });\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n    async.parallel([\n        function(callback){\n            // async code to get some data\n        },\n        function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        }\n    ],\n    function(results){\n        async.series([\n            function(callback){\n                // once there is some data and the directory exists,\n                // write the data to a file in the directory\n            },\n            email_link: function(callback){\n                // once the file is written let's email a link to it...\n            }\n        ]);\n    });\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name=\"iterator\" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. Its also possible to\n'peek' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n\n__Example__\n\n    var iterator = async.iterator([\n        function(){ sys.p('one'); },\n        function(){ sys.p('two'); },\n        function(){ sys.p('three'); }\n    ]);\n\n    node> var iterator2 = iterator();\n    'one'\n    node> var iterator3 = iterator2();\n    'two'\n    node> iterator3();\n    'three'\n    node> var nextfn = iterator2.next();\n    node> nextfn();\n    'three'\n\n\n---------------------------------------\n\n<a name=\"apply\" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n    // using apply\n\n    async.parallel([\n        async.apply(fs.writeFile, 'testfile1', 'test1'),\n        async.apply(fs.writeFile, 'testfile2', 'test2'),\n    ]);\n\n\n    // the same process without using apply\n\n    async.parallel([\n        function(callback){\n            fs.writeFile('testfile1', 'test1', callback);\n        },\n        function(callback){\n            fs.writeFile('testfile2', 'test2', callback);\n        },\n    ]);\n\nIt's possible to pass any number of additional arguments when calling the\ncontinuation:\n\n    node> var fn = async.apply(sys.puts, 'one');\n    node> fn('two', 'three');\n    one\n    two\n    three\n\n---------------------------------------\n\n<a name=\"nextTick\" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setTimeout(callback, 0),\nwhich means other higher priority events may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n    var call_order = [];\n    async.nextTick(function(){\n        call_order.push('two');\n        // call_order now equals ['one','two]\n    });\n    call_order.push('one')\n\n\n## Utils\n\n<a name=\"memoize\" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n    var slow_fn = function (name, callback) {\n        // do something\n        callback(null, result);\n    };\n    var fn = async.memoize(slow_fn);\n\n    // fn can now be used as if it were slow_fn\n    fn('some name', function () {\n        // callback\n    });\n\n<a name=\"unmemoize\" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name=\"log\" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, 'hello ' + name);\n        }, 1000);\n    };\n\n    node> async.log(hello, 'world');\n    'hello world'\n\n\n---------------------------------------\n\n<a name=\"dir\" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, {hello: name});\n        }, 1000);\n    };\n\n    node> async.dir(hello, 'world');\n    {hello: 'world'}\n\n\n---------------------------------------\n\n<a name=\"noConflict\" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n","maintainers":[{"name":"caolan","email":"caolan@caolanmcmahon.com"}],"directories":{}},"0.1.21":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.21","repository":{"type":"git","url":"git://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"devDependencies":{"nodeunit":">0.0.0","uglify-js":"1.2.x","nodelint":">0.0.0"},"_npmUser":{"name":"caolan","email":"caolan@caolanmcmahon.com"},"_id":"async@0.1.21","dependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.21","_nodeVersion":"v0.6.18","_defaultsLoaded":true,"dist":{"shasum":"b5b12e985f09ab72c202fa00f623cd9d997e9464","tarball":"http://registry.npmjs.org/async/-/async-0.1.21.tgz"},"readme":"# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual 'functional'\nsuspects (map, reduce, filter, forEach…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n    async.map(['file1','file2','file3'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n    async.filter(['file1','file2','file3'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n    async.parallel([\n        function(){ ... },\n        function(){ ... }\n    ], callback);\n\n    async.series([\n        function(){ ... },\n        function(){ ... }\n    ]);\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n\n## Download\n\nReleases are available for download from\n[GitHub](http://github.com/caolan/async/downloads).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 17.5kb Uncompressed\n\n__Production:__ [async.min.js](https://github.com/caolan/async/raw/master/dist/async.min.js) - 1.7kb Packed and Gzipped\n\n\n## In the Browser\n\nSo far its been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n    <script type=\"text/javascript\" src=\"async.js\"></script>\n    <script type=\"text/javascript\">\n\n        async.map(data, asyncProcess, function(err, results){\n            alert(results);\n        });\n\n    </script>\n\n\n## Documentation\n\n### Collections\n\n* [forEach](#forEach)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [until](#until)\n* [waterfall](#waterfall)\n* [queue](#queue)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name=\"forEach\" />\n### forEach(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the forEach function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // assuming openFiles is an array of file names and saveFile is a function\n    // to save the modified contents of that file:\n\n    async.forEach(openFiles, saveFile, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n\n---------------------------------------\n\n<a name=\"forEachSeries\" />\n### forEachSeries(arr, iterator, callback)\n\nThe same as forEach only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name=\"forEachLimit\" />\n### forEachLimit(arr, limit, iterator, callback)\n\nThe same as forEach only the iterator is applied to batches of items in the\narray, in series. The next batch of iterators is only called once the current\none has completed processing.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - How many items should be in each batch.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // Assume documents is an array of JSON objects and requestApi is a\n    // function that interacts with a rate-limited REST api.\n\n    async.forEachLimit(documents, 20, requestApi, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n---------------------------------------\n\n<a name=\"map\" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n    async.map(['file1','file2','file3'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n---------------------------------------\n\n<a name=\"mapSeries\" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name=\"filter\" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n    async.filter(['file1','file2','file3'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n---------------------------------------\n\n<a name=\"filterSeries\" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name=\"reject\" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name=\"rejectSeries\" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as filter, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name=\"reduce\" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then its probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback which accepts an optional error as its first argument, and the state\n  of the reduction as the second. If an error is passed to the callback, the\n  reduction is stopped and the main callback is immediately called with the\n  error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n    async.reduce([1,2,3], 0, function(memo, item, callback){\n        // pointless async:\n        process.nextTick(function(){\n            callback(null, memo + item)\n        });\n    }, function(err, result){\n        // result is now equal to the last value of memo, which is 6\n    });\n\n---------------------------------------\n\n<a name=\"reduceRight\" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name=\"detect\" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n    async.detect(['file1','file2','file3'], path.exists, function(result){\n        // result now equals the first file in the list that exists\n    });\n\n---------------------------------------\n\n<a name=\"detectSeries\" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name=\"sortBy\" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a value to use as the sort criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n    async.sortBy(['file1','file2','file3'], function(file, callback){\n        fs.stat(file, function(err, stats){\n            callback(err, stats.mtime);\n        });\n    }, function(err, results){\n        // results is now the original array of files sorted by\n        // modified date\n    });\n\n\n---------------------------------------\n\n<a name=\"some\" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n    async.some(['file1','file2','file3'], path.exists, function(result){\n        // if result is true then at least one of the files exists\n    });\n\n---------------------------------------\n\n<a name=\"every\" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n    async.every(['file1','file2','file3'], path.exists, function(result){\n        // if result is true then every file exists\n    });\n\n---------------------------------------\n\n<a name=\"concat\" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n    async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files){\n        // files is now a list of filenames that exist in the 3 directories\n    });\n\n---------------------------------------\n\n<a name=\"concatSeries\" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name=\"series\" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.series([\n        function(callback){\n            // do some stuff ...\n            callback(null, 'one');\n        },\n        function(callback){\n            // do some more stuff ...\n            callback(null, 'two');\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // results is now equal to ['one', 'two']\n    });\n\n\n    // an example using an object instead of an array\n    async.series({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equal to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.parallel([\n        function(callback){\n            setTimeout(function(){\n                callback(null, 'one');\n            }, 200);\n        },\n        function(callback){\n            setTimeout(function(){\n                callback(null, 'two');\n            }, 100);\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // the results array will equal ['one','two'] even though\n        // the second function had a shorter timeout.\n    });\n\n\n    // an example using an object instead of an array\n    async.parallel({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equals to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name=\"whilst\" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback which must be called once it has completed with an optional\n  error as the first argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n    var count = 0;\n\n    async.whilst(\n        function () { return count < 5; },\n        function (callback) {\n            count++;\n            setTimeout(callback, 1000);\n        },\n        function (err) {\n            // 5 seconds have passed\n        }\n    );\n\n\n---------------------------------------\n\n<a name=\"until\" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n\n---------------------------------------\n\n<a name=\"waterfall\" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task's callback.\n\n\n\n__Example__\n\n    async.waterfall([\n        function(callback){\n            callback(null, 'one', 'two');\n        },\n        function(arg1, arg2, callback){\n            callback(null, 'three');\n        },\n        function(arg1, callback){\n            // arg1 now equals 'three'\n            callback(null, 'done');\n        }\n    ], function (err, result) {\n       // result now equals 'done'    \n    });\n\n\n---------------------------------------\n\n<a name=\"queue\" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task's callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n    // create a queue object with concurrency 2\n\n    var q = async.queue(function (task, callback) {\n        console.log('hello ' + task.name);\n        callback();\n    }, 2);\n\n\n    // assign a callback\n    q.drain = function() {\n        console.log('all items have been processed');\n    }\n\n    // add some items to the queue\n\n    q.push({name: 'foo'}, function (err) {\n        console.log('finished processing foo');\n    });\n    q.push({name: 'bar'}, function (err) {\n        console.log('finished processing bar');\n    });\n\n    // add some items to the queue (batch-wise)\n\n    q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function (err) {\n        console.log('finished processing bar');\n    });\n\n\n---------------------------------------\n\n<a name=\"auto\" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The\n  syntax is easier to understand by looking at the example.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. If all tasks complete\n  successfully, it will receive an object containing their results.\n\n__Example__\n\n    async.auto({\n        get_data: function(callback){\n            // async code to get some data\n        },\n        make_folder: function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        },\n        write_file: ['get_data', 'make_folder', function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n            callback(null, filename);\n        }],\n        email_link: ['write_file', function(callback, results){\n            // once the file is written let's email a link to it...\n            // results.write_file contains the filename returned by write_file.\n        }]\n    });\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n    async.parallel([\n        function(callback){\n            // async code to get some data\n        },\n        function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        }\n    ],\n    function(results){\n        async.series([\n            function(callback){\n                // once there is some data and the directory exists,\n                // write the data to a file in the directory\n            },\n            email_link: function(callback){\n                // once the file is written let's email a link to it...\n            }\n        ]);\n    });\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name=\"iterator\" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. Its also possible to\n'peek' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n\n__Example__\n\n    var iterator = async.iterator([\n        function(){ sys.p('one'); },\n        function(){ sys.p('two'); },\n        function(){ sys.p('three'); }\n    ]);\n\n    node> var iterator2 = iterator();\n    'one'\n    node> var iterator3 = iterator2();\n    'two'\n    node> iterator3();\n    'three'\n    node> var nextfn = iterator2.next();\n    node> nextfn();\n    'three'\n\n\n---------------------------------------\n\n<a name=\"apply\" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n    // using apply\n\n    async.parallel([\n        async.apply(fs.writeFile, 'testfile1', 'test1'),\n        async.apply(fs.writeFile, 'testfile2', 'test2'),\n    ]);\n\n\n    // the same process without using apply\n\n    async.parallel([\n        function(callback){\n            fs.writeFile('testfile1', 'test1', callback);\n        },\n        function(callback){\n            fs.writeFile('testfile2', 'test2', callback);\n        },\n    ]);\n\nIt's possible to pass any number of additional arguments when calling the\ncontinuation:\n\n    node> var fn = async.apply(sys.puts, 'one');\n    node> fn('two', 'three');\n    one\n    two\n    three\n\n---------------------------------------\n\n<a name=\"nextTick\" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setTimeout(callback, 0),\nwhich means other higher priority events may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n    var call_order = [];\n    async.nextTick(function(){\n        call_order.push('two');\n        // call_order now equals ['one','two]\n    });\n    call_order.push('one')\n\n\n## Utils\n\n<a name=\"memoize\" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n    var slow_fn = function (name, callback) {\n        // do something\n        callback(null, result);\n    };\n    var fn = async.memoize(slow_fn);\n\n    // fn can now be used as if it were slow_fn\n    fn('some name', function () {\n        // callback\n    });\n\n<a name=\"unmemoize\" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name=\"log\" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, 'hello ' + name);\n        }, 1000);\n    };\n\n    node> async.log(hello, 'world');\n    'hello world'\n\n\n---------------------------------------\n\n<a name=\"dir\" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, {hello: name});\n        }, 1000);\n    };\n\n    node> async.dir(hello, 'world');\n    {hello: 'world'}\n\n\n---------------------------------------\n\n<a name=\"noConflict\" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n","maintainers":[{"name":"caolan","email":"caolan@caolanmcmahon.com"}],"directories":{}},"0.1.22":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.22","repository":{"type":"git","url":"git://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"devDependencies":{"nodeunit":">0.0.0","uglify-js":"1.2.x","nodelint":">0.0.0"},"_npmUser":{"name":"caolan","email":"caolan@caolanmcmahon.com"},"_id":"async@0.1.22","dependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.21","_nodeVersion":"v0.6.18","_defaultsLoaded":true,"dist":{"shasum":"0fc1aaa088a0e3ef0ebe2d8831bab0dcf8845061","tarball":"http://registry.npmjs.org/async/-/async-0.1.22.tgz"},"readme":"# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual 'functional'\nsuspects (map, reduce, filter, forEach…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n    async.map(['file1','file2','file3'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n    async.filter(['file1','file2','file3'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n    async.parallel([\n        function(){ ... },\n        function(){ ... }\n    ], callback);\n\n    async.series([\n        function(){ ... },\n        function(){ ... }\n    ]);\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n\n## Download\n\nReleases are available for download from\n[GitHub](http://github.com/caolan/async/downloads).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 17.5kb Uncompressed\n\n__Production:__ [async.min.js](https://github.com/caolan/async/raw/master/dist/async.min.js) - 1.7kb Packed and Gzipped\n\n\n## In the Browser\n\nSo far its been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n    <script type=\"text/javascript\" src=\"async.js\"></script>\n    <script type=\"text/javascript\">\n\n        async.map(data, asyncProcess, function(err, results){\n            alert(results);\n        });\n\n    </script>\n\n\n## Documentation\n\n### Collections\n\n* [forEach](#forEach)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [until](#until)\n* [waterfall](#waterfall)\n* [queue](#queue)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name=\"forEach\" />\n### forEach(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the forEach function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // assuming openFiles is an array of file names and saveFile is a function\n    // to save the modified contents of that file:\n\n    async.forEach(openFiles, saveFile, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n\n---------------------------------------\n\n<a name=\"forEachSeries\" />\n### forEachSeries(arr, iterator, callback)\n\nThe same as forEach only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name=\"forEachLimit\" />\n### forEachLimit(arr, limit, iterator, callback)\n\nThe same as forEach only the iterator is applied to batches of items in the\narray, in series. The next batch of iterators is only called once the current\none has completed processing.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - How many items should be in each batch.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // Assume documents is an array of JSON objects and requestApi is a\n    // function that interacts with a rate-limited REST api.\n\n    async.forEachLimit(documents, 20, requestApi, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n---------------------------------------\n\n<a name=\"map\" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n    async.map(['file1','file2','file3'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n---------------------------------------\n\n<a name=\"mapSeries\" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name=\"filter\" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n    async.filter(['file1','file2','file3'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n---------------------------------------\n\n<a name=\"filterSeries\" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name=\"reject\" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name=\"rejectSeries\" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as filter, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name=\"reduce\" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then its probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback which accepts an optional error as its first argument, and the state\n  of the reduction as the second. If an error is passed to the callback, the\n  reduction is stopped and the main callback is immediately called with the\n  error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n    async.reduce([1,2,3], 0, function(memo, item, callback){\n        // pointless async:\n        process.nextTick(function(){\n            callback(null, memo + item)\n        });\n    }, function(err, result){\n        // result is now equal to the last value of memo, which is 6\n    });\n\n---------------------------------------\n\n<a name=\"reduceRight\" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name=\"detect\" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n    async.detect(['file1','file2','file3'], path.exists, function(result){\n        // result now equals the first file in the list that exists\n    });\n\n---------------------------------------\n\n<a name=\"detectSeries\" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name=\"sortBy\" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a value to use as the sort criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n    async.sortBy(['file1','file2','file3'], function(file, callback){\n        fs.stat(file, function(err, stats){\n            callback(err, stats.mtime);\n        });\n    }, function(err, results){\n        // results is now the original array of files sorted by\n        // modified date\n    });\n\n\n---------------------------------------\n\n<a name=\"some\" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n    async.some(['file1','file2','file3'], path.exists, function(result){\n        // if result is true then at least one of the files exists\n    });\n\n---------------------------------------\n\n<a name=\"every\" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n    async.every(['file1','file2','file3'], path.exists, function(result){\n        // if result is true then every file exists\n    });\n\n---------------------------------------\n\n<a name=\"concat\" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n    async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files){\n        // files is now a list of filenames that exist in the 3 directories\n    });\n\n---------------------------------------\n\n<a name=\"concatSeries\" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name=\"series\" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.series([\n        function(callback){\n            // do some stuff ...\n            callback(null, 'one');\n        },\n        function(callback){\n            // do some more stuff ...\n            callback(null, 'two');\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // results is now equal to ['one', 'two']\n    });\n\n\n    // an example using an object instead of an array\n    async.series({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equal to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.parallel([\n        function(callback){\n            setTimeout(function(){\n                callback(null, 'one');\n            }, 200);\n        },\n        function(callback){\n            setTimeout(function(){\n                callback(null, 'two');\n            }, 100);\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // the results array will equal ['one','two'] even though\n        // the second function had a shorter timeout.\n    });\n\n\n    // an example using an object instead of an array\n    async.parallel({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equals to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name=\"whilst\" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback which must be called once it has completed with an optional\n  error as the first argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n    var count = 0;\n\n    async.whilst(\n        function () { return count < 5; },\n        function (callback) {\n            count++;\n            setTimeout(callback, 1000);\n        },\n        function (err) {\n            // 5 seconds have passed\n        }\n    );\n\n\n---------------------------------------\n\n<a name=\"until\" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n\n---------------------------------------\n\n<a name=\"waterfall\" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task's callback.\n\n\n\n__Example__\n\n    async.waterfall([\n        function(callback){\n            callback(null, 'one', 'two');\n        },\n        function(arg1, arg2, callback){\n            callback(null, 'three');\n        },\n        function(arg1, callback){\n            // arg1 now equals 'three'\n            callback(null, 'done');\n        }\n    ], function (err, result) {\n       // result now equals 'done'    \n    });\n\n\n---------------------------------------\n\n<a name=\"queue\" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task's callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n    // create a queue object with concurrency 2\n\n    var q = async.queue(function (task, callback) {\n        console.log('hello ' + task.name);\n        callback();\n    }, 2);\n\n\n    // assign a callback\n    q.drain = function() {\n        console.log('all items have been processed');\n    }\n\n    // add some items to the queue\n\n    q.push({name: 'foo'}, function (err) {\n        console.log('finished processing foo');\n    });\n    q.push({name: 'bar'}, function (err) {\n        console.log('finished processing bar');\n    });\n\n    // add some items to the queue (batch-wise)\n\n    q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function (err) {\n        console.log('finished processing bar');\n    });\n\n\n---------------------------------------\n\n<a name=\"auto\" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The\n  syntax is easier to understand by looking at the example.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. If all tasks complete\n  successfully, it will receive an object containing their results.\n\n__Example__\n\n    async.auto({\n        get_data: function(callback){\n            // async code to get some data\n        },\n        make_folder: function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        },\n        write_file: ['get_data', 'make_folder', function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n            callback(null, filename);\n        }],\n        email_link: ['write_file', function(callback, results){\n            // once the file is written let's email a link to it...\n            // results.write_file contains the filename returned by write_file.\n        }]\n    });\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n    async.parallel([\n        function(callback){\n            // async code to get some data\n        },\n        function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        }\n    ],\n    function(results){\n        async.series([\n            function(callback){\n                // once there is some data and the directory exists,\n                // write the data to a file in the directory\n            },\n            email_link: function(callback){\n                // once the file is written let's email a link to it...\n            }\n        ]);\n    });\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name=\"iterator\" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. Its also possible to\n'peek' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n\n__Example__\n\n    var iterator = async.iterator([\n        function(){ sys.p('one'); },\n        function(){ sys.p('two'); },\n        function(){ sys.p('three'); }\n    ]);\n\n    node> var iterator2 = iterator();\n    'one'\n    node> var iterator3 = iterator2();\n    'two'\n    node> iterator3();\n    'three'\n    node> var nextfn = iterator2.next();\n    node> nextfn();\n    'three'\n\n\n---------------------------------------\n\n<a name=\"apply\" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n    // using apply\n\n    async.parallel([\n        async.apply(fs.writeFile, 'testfile1', 'test1'),\n        async.apply(fs.writeFile, 'testfile2', 'test2'),\n    ]);\n\n\n    // the same process without using apply\n\n    async.parallel([\n        function(callback){\n            fs.writeFile('testfile1', 'test1', callback);\n        },\n        function(callback){\n            fs.writeFile('testfile2', 'test2', callback);\n        },\n    ]);\n\nIt's possible to pass any number of additional arguments when calling the\ncontinuation:\n\n    node> var fn = async.apply(sys.puts, 'one');\n    node> fn('two', 'three');\n    one\n    two\n    three\n\n---------------------------------------\n\n<a name=\"nextTick\" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setTimeout(callback, 0),\nwhich means other higher priority events may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n    var call_order = [];\n    async.nextTick(function(){\n        call_order.push('two');\n        // call_order now equals ['one','two]\n    });\n    call_order.push('one')\n\n\n## Utils\n\n<a name=\"memoize\" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n    var slow_fn = function (name, callback) {\n        // do something\n        callback(null, result);\n    };\n    var fn = async.memoize(slow_fn);\n\n    // fn can now be used as if it were slow_fn\n    fn('some name', function () {\n        // callback\n    });\n\n<a name=\"unmemoize\" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name=\"log\" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, 'hello ' + name);\n        }, 1000);\n    };\n\n    node> async.log(hello, 'world');\n    'hello world'\n\n\n---------------------------------------\n\n<a name=\"dir\" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, {hello: name});\n        }, 1000);\n    };\n\n    node> async.dir(hello, 'world');\n    {hello: 'world'}\n\n\n---------------------------------------\n\n<a name=\"noConflict\" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n","maintainers":[{"name":"caolan","email":"caolan@caolanmcmahon.com"}],"directories":{}},"0.2.0":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./lib/async","author":{"name":"Caolan McMahon"},"version":"0.2.0","repository":{"type":"git","url":"http://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"devDependencies":{"nodeunit":">0.0.0","uglify-js":"1.2.x","nodelint":">0.0.0"},"readme":"# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual 'functional'\nsuspects (map, reduce, filter, forEach…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n```javascript\nasync.map(['file1','file2','file3'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n\nasync.filter(['file1','file2','file3'], path.exists, function(results){\n    // results now equals an array of the existing files\n});\n\nasync.parallel([\n    function(){ ... },\n    function(){ ... }\n], callback);\n\nasync.series([\n    function(){ ... },\n    function(){ ... }\n]);\n```\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n\n## Download\n\nReleases are available for download from\n[GitHub](http://github.com/caolan/async/downloads).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 17.5kb Uncompressed\n\n__Production:__ [async.min.js](https://github.com/caolan/async/raw/master/dist/async.min.js) - 1.7kb Packed and Gzipped\n\n\n## In the Browser\n\nSo far its been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n```html\n<script type=\"text/javascript\" src=\"async.js\"></script>\n<script type=\"text/javascript\">\n\n    async.map(data, asyncProcess, function(err, results){\n        alert(results);\n    });\n\n</script>\n```\n\n## Documentation\n\n### Collections\n\n* [forEach](#forEach)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [doWhilst](#doWhilst)\n* [until](#until)\n* [doUntil](#doUntil)\n* [waterfall](#waterfall)\n* [queue](#queue)\n* [cargo](#cargo)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n* [times](#times)\n* [timesSeries](#timesSeries)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name=\"forEach\" />\n### forEach(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the forEach function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err) which must be called once it has completed.\n  If no error has occured, the callback should be run without arguments or \n  with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// assuming openFiles is an array of file names and saveFile is a function\n// to save the modified contents of that file:\n\nasync.forEach(openFiles, saveFile, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name=\"forEachSeries\" />\n### forEachSeries(arr, iterator, callback)\n\nThe same as forEach only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name=\"forEachLimit\" />\n### forEachLimit(arr, limit, iterator, callback)\n\nThe same as forEach only the iterator is applied to batches of items in the\narray, in series. The next batch of iterators is only called once the current\none has completed processing.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - How many items should be in each batch.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n  If no error has occured, the callback should be run without arguments or \n  with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// Assume documents is an array of JSON objects and requestApi is a\n// function that interacts with a rate-limited REST api.\n\nasync.forEachLimit(documents, 20, requestApi, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name=\"map\" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map(['file1','file2','file3'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name=\"mapSeries\" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name=\"mapLimit\" />\n### mapLimit(arr, limit, iterator, callback)\n\nThe same as map only the iterator is applied to batches of items in the\narray, in series. The next batch of iterators is only called once the current\none has completed processing.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - How many items should be in each batch.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n  If no error has occured, the callback should be run without arguments or \n  with an explicit null argument.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map(['file1','file2','file3'], 1, fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name=\"filter\" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n```js\nasync.filter(['file1','file2','file3'], path.exists, function(results){\n    // results now equals an array of the existing files\n});\n```\n\n---------------------------------------\n\n<a name=\"filterSeries\" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name=\"reject\" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name=\"rejectSeries\" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as reject, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name=\"reduce\" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then its probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback which accepts an optional error as its first argument, and the state\n  of the reduction as the second. If an error is passed to the callback, the\n  reduction is stopped and the main callback is immediately called with the\n  error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n```js\nasync.reduce([1,2,3], 0, function(memo, item, callback){\n    // pointless async:\n    process.nextTick(function(){\n        callback(null, memo + item)\n    });\n}, function(err, result){\n    // result is now equal to the last value of memo, which is 6\n});\n```\n\n---------------------------------------\n\n<a name=\"reduceRight\" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name=\"detect\" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n```js\nasync.detect(['file1','file2','file3'], path.exists, function(result){\n    // result now equals the first file in the list that exists\n});\n```\n\n---------------------------------------\n\n<a name=\"detectSeries\" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name=\"sortBy\" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a value to use as the sort criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n```js\nasync.sortBy(['file1','file2','file3'], function(file, callback){\n    fs.stat(file, function(err, stats){\n        callback(err, stats.mtime);\n    });\n}, function(err, results){\n    // results is now the original array of files sorted by\n    // modified date\n});\n```\n\n---------------------------------------\n\n<a name=\"some\" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n```js\nasync.some(['file1','file2','file3'], path.exists, function(result){\n    // if result is true then at least one of the files exists\n});\n```\n\n---------------------------------------\n\n<a name=\"every\" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n```js\nasync.every(['file1','file2','file3'], path.exists, function(result){\n    // if result is true then every file exists\n});\n```\n\n---------------------------------------\n\n<a name=\"concat\" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n```js\nasync.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files){\n    // files is now a list of filenames that exist in the 3 directories\n});\n```\n\n---------------------------------------\n\n<a name=\"concatSeries\" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name=\"series\" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n```js\nasync.series([\n    function(callback){\n        // do some stuff ...\n        callback(null, 'one');\n    },\n    function(callback){\n        // do some more stuff ...\n        callback(null, 'two');\n    }\n],\n// optional callback\nfunction(err, results){\n    // results is now equal to ['one', 'two']\n});\n\n\n// an example using an object instead of an array\nasync.series({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equal to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n```js\nasync.parallel([\n    function(callback){\n        setTimeout(function(){\n            callback(null, 'one');\n        }, 200);\n    },\n    function(callback){\n        setTimeout(function(){\n            callback(null, 'two');\n        }, 100);\n    }\n],\n// optional callback\nfunction(err, results){\n    // the results array will equal ['one','two'] even though\n    // the second function had a shorter timeout.\n});\n\n\n// an example using an object instead of an array\nasync.parallel({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equals to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallelLimit(tasks, limit, [callback])\n\nThe same as parallel only the tasks are executed in parallel with a maximum of \"limit\" \ntasks executing at any time.\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* limit - The maximum number of tasks to run at any time.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n\n---------------------------------------\n\n<a name=\"whilst\" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback which must be called once it has completed with an optional\n  error as the first argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n```js\nvar count = 0;\n\nasync.whilst(\n    function () { return count < 5; },\n    function (callback) {\n        count++;\n        setTimeout(callback, 1000);\n    },\n    function (err) {\n        // 5 seconds have passed\n    }\n);\n```\n\n---------------------------------------\n\n<a name=\"doWhilst\" />\n### doWhilst(fn, test, callback)\n\nThe post check version of whilst. To reflect the difference in the order of operations `test` and `fn` arguments are switched. `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n\n---------------------------------------\n\n<a name=\"until\" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n---------------------------------------\n\n<a name=\"doUntil\" />\n### doUntil(fn, test, callback)\n\nLike doWhilst except the test is inverted. Note the argument ordering differs from `until`.\n\n\n---------------------------------------\n\n<a name=\"waterfall\" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task's callback.\n\n\n\n__Example__\n\n```js\nasync.waterfall([\n    function(callback){\n        callback(null, 'one', 'two');\n    },\n    function(arg1, arg2, callback){\n        callback(null, 'three');\n    },\n    function(arg1, callback){\n        // arg1 now equals 'three'\n        callback(null, 'done');\n    }\n], function (err, result) {\n   // result now equals 'done'    \n});\n```\n\n---------------------------------------\n\n<a name=\"queue\" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task's callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a queue object with concurrency 2\n\nvar q = async.queue(function (task, callback) {\n    console.log('hello ' + task.name);\n    callback();\n}, 2);\n\n\n// assign a callback\nq.drain = function() {\n    console.log('all items have been processed');\n}\n\n// add some items to the queue\n\nq.push({name: 'foo'}, function (err) {\n    console.log('finished processing foo');\n});\nq.push({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\n\n// add some items to the queue (batch-wise)\n\nq.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function (err) {\n    console.log('finished processing bar');\n});\n```\n\n---------------------------------------\n\n<a name=\"cargo\" />\n### cargo(worker, [payload])\n\nCreates a cargo object with the specified payload. Tasks added to the\ncargo will be processed altogether (up to the payload limit). If the\nworker is in progress, the task is queued until it is available. Once\nthe worker has completed some tasks, each callback of those tasks is called.\n\n__Arguments__\n\n* worker(tasks, callback) - An asynchronous function for processing queued\n  tasks.\n* payload - An optional integer for determining how many tasks should be\n  process per round, default is unlimited.\n\n__Cargo objects__\n\nThe cargo object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* payload - an integer for determining how many tasks should be\n  process per round. This property can be changed after a cargo is created to\n  alter the payload on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a cargo object with payload 2\n\nvar cargo = async.cargo(function (task, callback) {\n    console.log('hello ' + task.name);\n    callback();\n}, 2);\n\n\n// add some items\n\ncargo.push({name: 'foo'}, function (err) {\n    console.log('finished processing foo');\n});\ncargo.push({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\ncargo.push({name: 'baz'}, function (err) {\n    console.log('finished processing baz');\n});\n```\n\n---------------------------------------\n\n<a name=\"auto\" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The\n  syntax is easier to understand by looking at the example.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. If all tasks complete\n  successfully, it will receive an object containing their results.\n\n__Example__\n\n```js\nasync.auto({\n    get_data: function(callback){\n        // async code to get some data\n    },\n    make_folder: function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    },\n    write_file: ['get_data', 'make_folder', function(callback){\n        // once there is some data and the directory exists,\n        // write the data to a file in the directory\n        callback(null, filename);\n    }],\n    email_link: ['write_file', function(callback, results){\n        // once the file is written let's email a link to it...\n        // results.write_file contains the filename returned by write_file.\n    }]\n});\n```\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n```js\nasync.parallel([\n    function(callback){\n        // async code to get some data\n    },\n    function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    }\n],\nfunction(err, results){\n    async.series([\n        function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n        },\n        function(callback){\n            // once the file is written let's email a link to it...\n        }\n    ]);\n});\n```\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name=\"iterator\" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. Its also possible to\n'peek' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n\n__Example__\n\n```js\nvar iterator = async.iterator([\n    function(){ sys.p('one'); },\n    function(){ sys.p('two'); },\n    function(){ sys.p('three'); }\n]);\n\nnode> var iterator2 = iterator();\n'one'\nnode> var iterator3 = iterator2();\n'two'\nnode> iterator3();\n'three'\nnode> var nextfn = iterator2.next();\nnode> nextfn();\n'three'\n```\n\n---------------------------------------\n\n<a name=\"apply\" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n```js\n// using apply\n\nasync.parallel([\n    async.apply(fs.writeFile, 'testfile1', 'test1'),\n    async.apply(fs.writeFile, 'testfile2', 'test2'),\n]);\n\n\n// the same process without using apply\n\nasync.parallel([\n    function(callback){\n        fs.writeFile('testfile1', 'test1', callback);\n    },\n    function(callback){\n        fs.writeFile('testfile2', 'test2', callback);\n    }\n]);\n```\n\nIt's possible to pass any number of additional arguments when calling the\ncontinuation:\n\n```js\nnode> var fn = async.apply(sys.puts, 'one');\nnode> fn('two', 'three');\none\ntwo\nthree\n```\n\n---------------------------------------\n\n<a name=\"nextTick\" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setImmediate(callback)\nif available, otherwise setTimeout(callback, 0), which means other higher priority\nevents may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n```js\nvar call_order = [];\nasync.nextTick(function(){\n    call_order.push('two');\n    // call_order now equals ['one','two']\n});\ncall_order.push('one')\n```\n\n<a name=\"times\" />\n### times(n, callback)\n\nCalls the callback n times and accumulates results in the same manner\nyou would use with async.map.\n\n__Arguments__\n\n* n - The number of times to run the function.\n* callback - The function to call n times.\n\n__Example__\n\n```js\n// Pretend this is some complicated async factory\nvar createUser = function(id, callback) {\n  callback(null, {\n    id: 'user' + id\n  })\n}\n// generate 5 users\nasync.times(5, function(n, next){\n    createUser(n, function(err, user) {\n      next(err, user)\n    })\n}, function(err, users) {\n  // we should now have 5 users\n});\n```\n\n<a name=\"timesSeries\" />\n### timesSeries(n, callback)\n\nThe same as times only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n## Utils\n\n<a name=\"memoize\" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\nThe cache of results is exposed as the `memo` property of the function returned\nby `memoize`.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n```js\nvar slow_fn = function (name, callback) {\n    // do something\n    callback(null, result);\n};\nvar fn = async.memoize(slow_fn);\n\n// fn can now be used as if it were slow_fn\nfn('some name', function () {\n    // callback\n});\n```\n\n<a name=\"unmemoize\" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name=\"log\" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, 'hello ' + name);\n    }, 1000);\n};\n```\n```js\nnode> async.log(hello, 'world');\n'hello world'\n```\n\n---------------------------------------\n\n<a name=\"dir\" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, {hello: name});\n    }, 1000);\n};\n```\n```js\nnode> async.dir(hello, 'world');\n{hello: 'world'}\n```\n\n---------------------------------------\n\n<a name=\"noConflict\" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n","readmeFilename":"README.md","_id":"async@0.2.0","dist":{"shasum":"db1c645337bab79d0ca93d95f5c72d9605be0fce","tarball":"http://registry.npmjs.org/async/-/async-0.2.0.tgz"},"_npmVersion":"1.2.0","_npmUser":{"name":"caolan","email":"caolan.mcmahon@gmail.com"},"maintainers":[{"name":"caolan","email":"caolan@caolanmcmahon.com"}],"directories":{}},"0.2.1":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./lib/async","author":{"name":"Caolan McMahon"},"version":"0.2.1","repository":{"type":"git","url":"http://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"devDependencies":{"nodeunit":">0.0.0","uglify-js":"1.2.x","nodelint":">0.0.0"},"readme":"# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual 'functional'\nsuspects (map, reduce, filter, forEach…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n```javascript\nasync.map(['file1','file2','file3'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n\nasync.filter(['file1','file2','file3'], path.exists, function(results){\n    // results now equals an array of the existing files\n});\n\nasync.parallel([\n    function(){ ... },\n    function(){ ... }\n], callback);\n\nasync.series([\n    function(){ ... },\n    function(){ ... }\n]);\n```\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n\n## Download\n\nReleases are available for download from\n[GitHub](http://github.com/caolan/async/downloads).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 17.5kb Uncompressed\n\n__Production:__ [async.min.js](https://github.com/caolan/async/raw/master/dist/async.min.js) - 1.7kb Packed and Gzipped\n\n\n## In the Browser\n\nSo far its been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n```html\n<script type=\"text/javascript\" src=\"async.js\"></script>\n<script type=\"text/javascript\">\n\n    async.map(data, asyncProcess, function(err, results){\n        alert(results);\n    });\n\n</script>\n```\n\n## Documentation\n\n### Collections\n\n* [forEach](#forEach)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [doWhilst](#doWhilst)\n* [until](#until)\n* [doUntil](#doUntil)\n* [waterfall](#waterfall)\n* [queue](#queue)\n* [cargo](#cargo)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n* [times](#times)\n* [timesSeries](#timesSeries)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name=\"forEach\" />\n### forEach(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the forEach function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err) which must be called once it has completed.\n  If no error has occured, the callback should be run without arguments or \n  with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// assuming openFiles is an array of file names and saveFile is a function\n// to save the modified contents of that file:\n\nasync.forEach(openFiles, saveFile, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name=\"forEachSeries\" />\n### forEachSeries(arr, iterator, callback)\n\nThe same as forEach only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name=\"forEachLimit\" />\n### forEachLimit(arr, limit, iterator, callback)\n\nThe same as forEach only the iterator is applied to batches of items in the\narray, in series. The next batch of iterators is only called once the current\none has completed processing.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - How many items should be in each batch.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n  If no error has occured, the callback should be run without arguments or \n  with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// Assume documents is an array of JSON objects and requestApi is a\n// function that interacts with a rate-limited REST api.\n\nasync.forEachLimit(documents, 20, requestApi, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name=\"map\" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map(['file1','file2','file3'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name=\"mapSeries\" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name=\"mapLimit\" />\n### mapLimit(arr, limit, iterator, callback)\n\nThe same as map only the iterator is applied to batches of items in the\narray, in series. The next batch of iterators is only called once the current\none has completed processing.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - How many items should be in each batch.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n  If no error has occured, the callback should be run without arguments or \n  with an explicit null argument.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map(['file1','file2','file3'], 1, fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name=\"filter\" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n```js\nasync.filter(['file1','file2','file3'], path.exists, function(results){\n    // results now equals an array of the existing files\n});\n```\n\n---------------------------------------\n\n<a name=\"filterSeries\" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name=\"reject\" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name=\"rejectSeries\" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as reject, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name=\"reduce\" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then its probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback which accepts an optional error as its first argument, and the state\n  of the reduction as the second. If an error is passed to the callback, the\n  reduction is stopped and the main callback is immediately called with the\n  error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n```js\nasync.reduce([1,2,3], 0, function(memo, item, callback){\n    // pointless async:\n    process.nextTick(function(){\n        callback(null, memo + item)\n    });\n}, function(err, result){\n    // result is now equal to the last value of memo, which is 6\n});\n```\n\n---------------------------------------\n\n<a name=\"reduceRight\" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name=\"detect\" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n```js\nasync.detect(['file1','file2','file3'], path.exists, function(result){\n    // result now equals the first file in the list that exists\n});\n```\n\n---------------------------------------\n\n<a name=\"detectSeries\" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name=\"sortBy\" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a value to use as the sort criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n```js\nasync.sortBy(['file1','file2','file3'], function(file, callback){\n    fs.stat(file, function(err, stats){\n        callback(err, stats.mtime);\n    });\n}, function(err, results){\n    // results is now the original array of files sorted by\n    // modified date\n});\n```\n\n---------------------------------------\n\n<a name=\"some\" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n```js\nasync.some(['file1','file2','file3'], path.exists, function(result){\n    // if result is true then at least one of the files exists\n});\n```\n\n---------------------------------------\n\n<a name=\"every\" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n```js\nasync.every(['file1','file2','file3'], path.exists, function(result){\n    // if result is true then every file exists\n});\n```\n\n---------------------------------------\n\n<a name=\"concat\" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n```js\nasync.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files){\n    // files is now a list of filenames that exist in the 3 directories\n});\n```\n\n---------------------------------------\n\n<a name=\"concatSeries\" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name=\"series\" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n```js\nasync.series([\n    function(callback){\n        // do some stuff ...\n        callback(null, 'one');\n    },\n    function(callback){\n        // do some more stuff ...\n        callback(null, 'two');\n    }\n],\n// optional callback\nfunction(err, results){\n    // results is now equal to ['one', 'two']\n});\n\n\n// an example using an object instead of an array\nasync.series({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equal to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n```js\nasync.parallel([\n    function(callback){\n        setTimeout(function(){\n            callback(null, 'one');\n        }, 200);\n    },\n    function(callback){\n        setTimeout(function(){\n            callback(null, 'two');\n        }, 100);\n    }\n],\n// optional callback\nfunction(err, results){\n    // the results array will equal ['one','two'] even though\n    // the second function had a shorter timeout.\n});\n\n\n// an example using an object instead of an array\nasync.parallel({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equals to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallelLimit(tasks, limit, [callback])\n\nThe same as parallel only the tasks are executed in parallel with a maximum of \"limit\" \ntasks executing at any time.\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* limit - The maximum number of tasks to run at any time.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n\n---------------------------------------\n\n<a name=\"whilst\" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback which must be called once it has completed with an optional\n  error as the first argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n```js\nvar count = 0;\n\nasync.whilst(\n    function () { return count < 5; },\n    function (callback) {\n        count++;\n        setTimeout(callback, 1000);\n    },\n    function (err) {\n        // 5 seconds have passed\n    }\n);\n```\n\n---------------------------------------\n\n<a name=\"doWhilst\" />\n### doWhilst(fn, test, callback)\n\nThe post check version of whilst. To reflect the difference in the order of operations `test` and `fn` arguments are switched. `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n\n---------------------------------------\n\n<a name=\"until\" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n---------------------------------------\n\n<a name=\"doUntil\" />\n### doUntil(fn, test, callback)\n\nLike doWhilst except the test is inverted. Note the argument ordering differs from `until`.\n\n\n---------------------------------------\n\n<a name=\"waterfall\" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task's callback.\n\n\n\n__Example__\n\n```js\nasync.waterfall([\n    function(callback){\n        callback(null, 'one', 'two');\n    },\n    function(arg1, arg2, callback){\n        callback(null, 'three');\n    },\n    function(arg1, callback){\n        // arg1 now equals 'three'\n        callback(null, 'done');\n    }\n], function (err, result) {\n   // result now equals 'done'    \n});\n```\n\n---------------------------------------\n\n<a name=\"queue\" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task's callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a queue object with concurrency 2\n\nvar q = async.queue(function (task, callback) {\n    console.log('hello ' + task.name);\n    callback();\n}, 2);\n\n\n// assign a callback\nq.drain = function() {\n    console.log('all items have been processed');\n}\n\n// add some items to the queue\n\nq.push({name: 'foo'}, function (err) {\n    console.log('finished processing foo');\n});\nq.push({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\n\n// add some items to the queue (batch-wise)\n\nq.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function (err) {\n    console.log('finished processing bar');\n});\n```\n\n---------------------------------------\n\n<a name=\"cargo\" />\n### cargo(worker, [payload])\n\nCreates a cargo object with the specified payload. Tasks added to the\ncargo will be processed altogether (up to the payload limit). If the\nworker is in progress, the task is queued until it is available. Once\nthe worker has completed some tasks, each callback of those tasks is called.\n\n__Arguments__\n\n* worker(tasks, callback) - An asynchronous function for processing queued\n  tasks.\n* payload - An optional integer for determining how many tasks should be\n  process per round, default is unlimited.\n\n__Cargo objects__\n\nThe cargo object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* payload - an integer for determining how many tasks should be\n  process per round. This property can be changed after a cargo is created to\n  alter the payload on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a cargo object with payload 2\n\nvar cargo = async.cargo(function (task, callback) {\n    console.log('hello ' + task.name);\n    callback();\n}, 2);\n\n\n// add some items\n\ncargo.push({name: 'foo'}, function (err) {\n    console.log('finished processing foo');\n});\ncargo.push({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\ncargo.push({name: 'baz'}, function (err) {\n    console.log('finished processing baz');\n});\n```\n\n---------------------------------------\n\n<a name=\"auto\" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The\n  syntax is easier to understand by looking at the example.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. If all tasks complete\n  successfully, it will receive an object containing their results.\n\n__Example__\n\n```js\nasync.auto({\n    get_data: function(callback){\n        // async code to get some data\n    },\n    make_folder: function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    },\n    write_file: ['get_data', 'make_folder', function(callback){\n        // once there is some data and the directory exists,\n        // write the data to a file in the directory\n        callback(null, filename);\n    }],\n    email_link: ['write_file', function(callback, results){\n        // once the file is written let's email a link to it...\n        // results.write_file contains the filename returned by write_file.\n    }]\n});\n```\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n```js\nasync.parallel([\n    function(callback){\n        // async code to get some data\n    },\n    function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    }\n],\nfunction(err, results){\n    async.series([\n        function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n        },\n        function(callback){\n            // once the file is written let's email a link to it...\n        }\n    ]);\n});\n```\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name=\"iterator\" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. Its also possible to\n'peek' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n\n__Example__\n\n```js\nvar iterator = async.iterator([\n    function(){ sys.p('one'); },\n    function(){ sys.p('two'); },\n    function(){ sys.p('three'); }\n]);\n\nnode> var iterator2 = iterator();\n'one'\nnode> var iterator3 = iterator2();\n'two'\nnode> iterator3();\n'three'\nnode> var nextfn = iterator2.next();\nnode> nextfn();\n'three'\n```\n\n---------------------------------------\n\n<a name=\"apply\" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n```js\n// using apply\n\nasync.parallel([\n    async.apply(fs.writeFile, 'testfile1', 'test1'),\n    async.apply(fs.writeFile, 'testfile2', 'test2'),\n]);\n\n\n// the same process without using apply\n\nasync.parallel([\n    function(callback){\n        fs.writeFile('testfile1', 'test1', callback);\n    },\n    function(callback){\n        fs.writeFile('testfile2', 'test2', callback);\n    }\n]);\n```\n\nIt's possible to pass any number of additional arguments when calling the\ncontinuation:\n\n```js\nnode> var fn = async.apply(sys.puts, 'one');\nnode> fn('two', 'three');\none\ntwo\nthree\n```\n\n---------------------------------------\n\n<a name=\"nextTick\" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setImmediate(callback)\nif available, otherwise setTimeout(callback, 0), which means other higher priority\nevents may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n```js\nvar call_order = [];\nasync.nextTick(function(){\n    call_order.push('two');\n    // call_order now equals ['one','two']\n});\ncall_order.push('one')\n```\n\n<a name=\"times\" />\n### times(n, callback)\n\nCalls the callback n times and accumulates results in the same manner\nyou would use with async.map.\n\n__Arguments__\n\n* n - The number of times to run the function.\n* callback - The function to call n times.\n\n__Example__\n\n```js\n// Pretend this is some complicated async factory\nvar createUser = function(id, callback) {\n  callback(null, {\n    id: 'user' + id\n  })\n}\n// generate 5 users\nasync.times(5, function(n, next){\n    createUser(n, function(err, user) {\n      next(err, user)\n    })\n}, function(err, users) {\n  // we should now have 5 users\n});\n```\n\n<a name=\"timesSeries\" />\n### timesSeries(n, callback)\n\nThe same as times only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n## Utils\n\n<a name=\"memoize\" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\nThe cache of results is exposed as the `memo` property of the function returned\nby `memoize`.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n```js\nvar slow_fn = function (name, callback) {\n    // do something\n    callback(null, result);\n};\nvar fn = async.memoize(slow_fn);\n\n// fn can now be used as if it were slow_fn\nfn('some name', function () {\n    // callback\n});\n```\n\n<a name=\"unmemoize\" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name=\"log\" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, 'hello ' + name);\n    }, 1000);\n};\n```\n```js\nnode> async.log(hello, 'world');\n'hello world'\n```\n\n---------------------------------------\n\n<a name=\"dir\" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, {hello: name});\n    }, 1000);\n};\n```\n```js\nnode> async.dir(hello, 'world');\n{hello: 'world'}\n```\n\n---------------------------------------\n\n<a name=\"noConflict\" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n","readmeFilename":"README.md","_id":"async@0.2.1","dist":{"shasum":"4e37d08391132f79657a99ca73aa4eb471a6f771","tarball":"http://registry.npmjs.org/async/-/async-0.2.1.tgz"},"_npmVersion":"1.2.0","_npmUser":{"name":"caolan","email":"caolan.mcmahon@gmail.com"},"maintainers":[{"name":"caolan","email":"caolan@caolanmcmahon.com"}],"directories":{}},"0.2.2":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./lib/async","author":{"name":"Caolan McMahon"},"version":"0.2.2","repository":{"type":"git","url":"http://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"devDependencies":{"nodeunit":">0.0.0","uglify-js":"1.2.x","nodelint":">0.0.0"},"jam":{"main":"lib/async.js","include":["lib/async.js","README.md","LICENSE"]},"readme":"# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual 'functional'\nsuspects (map, reduce, filter, forEach…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n```javascript\nasync.map(['file1','file2','file3'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n\nasync.filter(['file1','file2','file3'], path.exists, function(results){\n    // results now equals an array of the existing files\n});\n\nasync.parallel([\n    function(){ ... },\n    function(){ ... }\n], callback);\n\nasync.series([\n    function(){ ... },\n    function(){ ... }\n]);\n```\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n\n## Download\n\nReleases are available for download from\n[GitHub](http://github.com/caolan/async/downloads).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 17.5kb Uncompressed\n\n__Production:__ [async.min.js](https://github.com/caolan/async/raw/master/dist/async.min.js) - 1.7kb Packed and Gzipped\n\n\n## In the Browser\n\nSo far its been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n```html\n<script type=\"text/javascript\" src=\"async.js\"></script>\n<script type=\"text/javascript\">\n\n    async.map(data, asyncProcess, function(err, results){\n        alert(results);\n    });\n\n</script>\n```\n\n## Documentation\n\n### Collections\n\n* [forEach](#forEach)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [doWhilst](#doWhilst)\n* [until](#until)\n* [doUntil](#doUntil)\n* [waterfall](#waterfall)\n* [queue](#queue)\n* [cargo](#cargo)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n* [times](#times)\n* [timesSeries](#timesSeries)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name=\"forEach\" />\n### forEach(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the forEach function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err) which must be called once it has completed.\n  If no error has occured, the callback should be run without arguments or \n  with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// assuming openFiles is an array of file names and saveFile is a function\n// to save the modified contents of that file:\n\nasync.forEach(openFiles, saveFile, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name=\"forEachSeries\" />\n### forEachSeries(arr, iterator, callback)\n\nThe same as forEach only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name=\"forEachLimit\" />\n### forEachLimit(arr, limit, iterator, callback)\n\nThe same as forEach only the iterator is applied to batches of items in the\narray, in series. The next batch of iterators is only called once the current\none has completed processing.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - How many items should be in each batch.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n  If no error has occured, the callback should be run without arguments or \n  with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// Assume documents is an array of JSON objects and requestApi is a\n// function that interacts with a rate-limited REST api.\n\nasync.forEachLimit(documents, 20, requestApi, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name=\"map\" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map(['file1','file2','file3'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name=\"mapSeries\" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name=\"mapLimit\" />\n### mapLimit(arr, limit, iterator, callback)\n\nThe same as map only the iterator is applied to batches of items in the\narray, in series. The next batch of iterators is only called once the current\none has completed processing.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - How many items should be in each batch.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n  If no error has occured, the callback should be run without arguments or \n  with an explicit null argument.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map(['file1','file2','file3'], 1, fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name=\"filter\" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n```js\nasync.filter(['file1','file2','file3'], path.exists, function(results){\n    // results now equals an array of the existing files\n});\n```\n\n---------------------------------------\n\n<a name=\"filterSeries\" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name=\"reject\" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name=\"rejectSeries\" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as reject, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name=\"reduce\" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then its probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback which accepts an optional error as its first argument, and the state\n  of the reduction as the second. If an error is passed to the callback, the\n  reduction is stopped and the main callback is immediately called with the\n  error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n```js\nasync.reduce([1,2,3], 0, function(memo, item, callback){\n    // pointless async:\n    process.nextTick(function(){\n        callback(null, memo + item)\n    });\n}, function(err, result){\n    // result is now equal to the last value of memo, which is 6\n});\n```\n\n---------------------------------------\n\n<a name=\"reduceRight\" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name=\"detect\" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n```js\nasync.detect(['file1','file2','file3'], path.exists, function(result){\n    // result now equals the first file in the list that exists\n});\n```\n\n---------------------------------------\n\n<a name=\"detectSeries\" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name=\"sortBy\" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a value to use as the sort criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n```js\nasync.sortBy(['file1','file2','file3'], function(file, callback){\n    fs.stat(file, function(err, stats){\n        callback(err, stats.mtime);\n    });\n}, function(err, results){\n    // results is now the original array of files sorted by\n    // modified date\n});\n```\n\n---------------------------------------\n\n<a name=\"some\" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n```js\nasync.some(['file1','file2','file3'], path.exists, function(result){\n    // if result is true then at least one of the files exists\n});\n```\n\n---------------------------------------\n\n<a name=\"every\" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n```js\nasync.every(['file1','file2','file3'], path.exists, function(result){\n    // if result is true then every file exists\n});\n```\n\n---------------------------------------\n\n<a name=\"concat\" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n```js\nasync.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files){\n    // files is now a list of filenames that exist in the 3 directories\n});\n```\n\n---------------------------------------\n\n<a name=\"concatSeries\" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name=\"series\" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n```js\nasync.series([\n    function(callback){\n        // do some stuff ...\n        callback(null, 'one');\n    },\n    function(callback){\n        // do some more stuff ...\n        callback(null, 'two');\n    }\n],\n// optional callback\nfunction(err, results){\n    // results is now equal to ['one', 'two']\n});\n\n\n// an example using an object instead of an array\nasync.series({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equal to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n```js\nasync.parallel([\n    function(callback){\n        setTimeout(function(){\n            callback(null, 'one');\n        }, 200);\n    },\n    function(callback){\n        setTimeout(function(){\n            callback(null, 'two');\n        }, 100);\n    }\n],\n// optional callback\nfunction(err, results){\n    // the results array will equal ['one','two'] even though\n    // the second function had a shorter timeout.\n});\n\n\n// an example using an object instead of an array\nasync.parallel({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equals to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallelLimit(tasks, limit, [callback])\n\nThe same as parallel only the tasks are executed in parallel with a maximum of \"limit\" \ntasks executing at any time.\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* limit - The maximum number of tasks to run at any time.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n\n---------------------------------------\n\n<a name=\"whilst\" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback which must be called once it has completed with an optional\n  error as the first argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n```js\nvar count = 0;\n\nasync.whilst(\n    function () { return count < 5; },\n    function (callback) {\n        count++;\n        setTimeout(callback, 1000);\n    },\n    function (err) {\n        // 5 seconds have passed\n    }\n);\n```\n\n---------------------------------------\n\n<a name=\"doWhilst\" />\n### doWhilst(fn, test, callback)\n\nThe post check version of whilst. To reflect the difference in the order of operations `test` and `fn` arguments are switched. `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n\n---------------------------------------\n\n<a name=\"until\" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n---------------------------------------\n\n<a name=\"doUntil\" />\n### doUntil(fn, test, callback)\n\nLike doWhilst except the test is inverted. Note the argument ordering differs from `until`.\n\n\n---------------------------------------\n\n<a name=\"waterfall\" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task's callback.\n\n\n\n__Example__\n\n```js\nasync.waterfall([\n    function(callback){\n        callback(null, 'one', 'two');\n    },\n    function(arg1, arg2, callback){\n        callback(null, 'three');\n    },\n    function(arg1, callback){\n        // arg1 now equals 'three'\n        callback(null, 'done');\n    }\n], function (err, result) {\n   // result now equals 'done'    \n});\n```\n\n---------------------------------------\n\n<a name=\"queue\" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task's callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* unshift(task, [callback]) - add a new task to the front of the queue.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a queue object with concurrency 2\n\nvar q = async.queue(function (task, callback) {\n    console.log('hello ' + task.name);\n    callback();\n}, 2);\n\n\n// assign a callback\nq.drain = function() {\n    console.log('all items have been processed');\n}\n\n// add some items to the queue\n\nq.push({name: 'foo'}, function (err) {\n    console.log('finished processing foo');\n});\nq.push({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\n\n// add some items to the queue (batch-wise)\n\nq.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function (err) {\n    console.log('finished processing bar');\n});\n\n// add some items to the front of the queue\n\nq.unshift({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\n```\n\n---------------------------------------\n\n<a name=\"cargo\" />\n### cargo(worker, [payload])\n\nCreates a cargo object with the specified payload. Tasks added to the\ncargo will be processed altogether (up to the payload limit). If the\nworker is in progress, the task is queued until it is available. Once\nthe worker has completed some tasks, each callback of those tasks is called.\n\n__Arguments__\n\n* worker(tasks, callback) - An asynchronous function for processing queued\n  tasks.\n* payload - An optional integer for determining how many tasks should be\n  process per round, default is unlimited.\n\n__Cargo objects__\n\nThe cargo object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* payload - an integer for determining how many tasks should be\n  process per round. This property can be changed after a cargo is created to\n  alter the payload on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a cargo object with payload 2\n\nvar cargo = async.cargo(function (task, callback) {\n    console.log('hello ' + task.name);\n    callback();\n}, 2);\n\n\n// add some items\n\ncargo.push({name: 'foo'}, function (err) {\n    console.log('finished processing foo');\n});\ncargo.push({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\ncargo.push({name: 'baz'}, function (err) {\n    console.log('finished processing baz');\n});\n```\n\n---------------------------------------\n\n<a name=\"auto\" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The\n  syntax is easier to understand by looking at the example.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. If all tasks complete\n  successfully, it will receive an object containing their results.\n\n__Example__\n\n```js\nasync.auto({\n    get_data: function(callback){\n        // async code to get some data\n    },\n    make_folder: function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    },\n    write_file: ['get_data', 'make_folder', function(callback){\n        // once there is some data and the directory exists,\n        // write the data to a file in the directory\n        callback(null, filename);\n    }],\n    email_link: ['write_file', function(callback, results){\n        // once the file is written let's email a link to it...\n        // results.write_file contains the filename returned by write_file.\n    }]\n});\n```\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n```js\nasync.parallel([\n    function(callback){\n        // async code to get some data\n    },\n    function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    }\n],\nfunction(err, results){\n    async.series([\n        function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n        },\n        function(callback){\n            // once the file is written let's email a link to it...\n        }\n    ]);\n});\n```\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name=\"iterator\" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. Its also possible to\n'peek' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n\n__Example__\n\n```js\nvar iterator = async.iterator([\n    function(){ sys.p('one'); },\n    function(){ sys.p('two'); },\n    function(){ sys.p('three'); }\n]);\n\nnode> var iterator2 = iterator();\n'one'\nnode> var iterator3 = iterator2();\n'two'\nnode> iterator3();\n'three'\nnode> var nextfn = iterator2.next();\nnode> nextfn();\n'three'\n```\n\n---------------------------------------\n\n<a name=\"apply\" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n```js\n// using apply\n\nasync.parallel([\n    async.apply(fs.writeFile, 'testfile1', 'test1'),\n    async.apply(fs.writeFile, 'testfile2', 'test2'),\n]);\n\n\n// the same process without using apply\n\nasync.parallel([\n    function(callback){\n        fs.writeFile('testfile1', 'test1', callback);\n    },\n    function(callback){\n        fs.writeFile('testfile2', 'test2', callback);\n    }\n]);\n```\n\nIt's possible to pass any number of additional arguments when calling the\ncontinuation:\n\n```js\nnode> var fn = async.apply(sys.puts, 'one');\nnode> fn('two', 'three');\none\ntwo\nthree\n```\n\n---------------------------------------\n\n<a name=\"nextTick\" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setImmediate(callback)\nif available, otherwise setTimeout(callback, 0), which means other higher priority\nevents may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n```js\nvar call_order = [];\nasync.nextTick(function(){\n    call_order.push('two');\n    // call_order now equals ['one','two']\n});\ncall_order.push('one')\n```\n\n<a name=\"times\" />\n### times(n, callback)\n\nCalls the callback n times and accumulates results in the same manner\nyou would use with async.map.\n\n__Arguments__\n\n* n - The number of times to run the function.\n* callback - The function to call n times.\n\n__Example__\n\n```js\n// Pretend this is some complicated async factory\nvar createUser = function(id, callback) {\n  callback(null, {\n    id: 'user' + id\n  })\n}\n// generate 5 users\nasync.times(5, function(n, next){\n    createUser(n, function(err, user) {\n      next(err, user)\n    })\n}, function(err, users) {\n  // we should now have 5 users\n});\n```\n\n<a name=\"timesSeries\" />\n### timesSeries(n, callback)\n\nThe same as times only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n## Utils\n\n<a name=\"memoize\" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\nThe cache of results is exposed as the `memo` property of the function returned\nby `memoize`.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n```js\nvar slow_fn = function (name, callback) {\n    // do something\n    callback(null, result);\n};\nvar fn = async.memoize(slow_fn);\n\n// fn can now be used as if it were slow_fn\nfn('some name', function () {\n    // callback\n});\n```\n\n<a name=\"unmemoize\" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name=\"log\" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, 'hello ' + name);\n    }, 1000);\n};\n```\n```js\nnode> async.log(hello, 'world');\n'hello world'\n```\n\n---------------------------------------\n\n<a name=\"dir\" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, {hello: name});\n    }, 1000);\n};\n```\n```js\nnode> async.dir(hello, 'world');\n{hello: 'world'}\n```\n\n---------------------------------------\n\n<a name=\"noConflict\" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n","readmeFilename":"README.md","_id":"async@0.2.2","dist":{"shasum":"8414ee47da7548126b4d3d923850d54e68a72b28","tarball":"http://registry.npmjs.org/async/-/async-0.2.2.tgz"},"_npmVersion":"1.2.0","_npmUser":{"name":"caolan","email":"caolan.mcmahon@gmail.com"},"maintainers":[{"name":"caolan","email":"caolan@caolanmcmahon.com"}],"directories":{}},"0.2.3":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./lib/async","author":{"name":"Caolan McMahon"},"version":"0.2.3","repository":{"type":"git","url":"http://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"devDependencies":{"nodeunit":">0.0.0","uglify-js":"1.2.x","nodelint":">0.0.0"},"jam":{"main":"lib/async.js","include":["lib/async.js","README.md","LICENSE"]},"readme":"# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual 'functional'\nsuspects (map, reduce, filter, forEach…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n```javascript\nasync.map(['file1','file2','file3'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n\nasync.filter(['file1','file2','file3'], path.exists, function(results){\n    // results now equals an array of the existing files\n});\n\nasync.parallel([\n    function(){ ... },\n    function(){ ... }\n], callback);\n\nasync.series([\n    function(){ ... },\n    function(){ ... }\n]);\n```\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n\n## Download\n\nReleases are available for download from\n[GitHub](http://github.com/caolan/async/downloads).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 17.5kb Uncompressed\n\n__Production:__ [async.min.js](https://github.com/caolan/async/raw/master/dist/async.min.js) - 1.7kb Packed and Gzipped\n\n\n## In the Browser\n\nSo far its been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n```html\n<script type=\"text/javascript\" src=\"async.js\"></script>\n<script type=\"text/javascript\">\n\n    async.map(data, asyncProcess, function(err, results){\n        alert(results);\n    });\n\n</script>\n```\n\n## Documentation\n\n### Collections\n\n* [forEach](#forEach)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [doWhilst](#doWhilst)\n* [until](#until)\n* [doUntil](#doUntil)\n* [waterfall](#waterfall)\n* [queue](#queue)\n* [cargo](#cargo)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n* [times](#times)\n* [timesSeries](#timesSeries)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name=\"forEach\" />\n### forEach(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the forEach function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err) which must be called once it has completed.\n  If no error has occured, the callback should be run without arguments or \n  with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// assuming openFiles is an array of file names and saveFile is a function\n// to save the modified contents of that file:\n\nasync.forEach(openFiles, saveFile, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name=\"forEachSeries\" />\n### forEachSeries(arr, iterator, callback)\n\nThe same as forEach only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name=\"forEachLimit\" />\n### forEachLimit(arr, limit, iterator, callback)\n\nThe same as forEach only the iterator is applied to batches of items in the\narray, in series. The next batch of iterators is only called once the current\none has completed processing.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - How many items should be in each batch.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n  If no error has occured, the callback should be run without arguments or \n  with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// Assume documents is an array of JSON objects and requestApi is a\n// function that interacts with a rate-limited REST api.\n\nasync.forEachLimit(documents, 20, requestApi, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name=\"map\" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map(['file1','file2','file3'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name=\"mapSeries\" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name=\"mapLimit\" />\n### mapLimit(arr, limit, iterator, callback)\n\nThe same as map only the iterator is applied to batches of items in the\narray, in series. The next batch of iterators is only called once the current\none has completed processing.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - How many items should be in each batch.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n  If no error has occured, the callback should be run without arguments or \n  with an explicit null argument.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map(['file1','file2','file3'], 1, fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name=\"filter\" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n```js\nasync.filter(['file1','file2','file3'], path.exists, function(results){\n    // results now equals an array of the existing files\n});\n```\n\n---------------------------------------\n\n<a name=\"filterSeries\" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name=\"reject\" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name=\"rejectSeries\" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as reject, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name=\"reduce\" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then its probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback which accepts an optional error as its first argument, and the state\n  of the reduction as the second. If an error is passed to the callback, the\n  reduction is stopped and the main callback is immediately called with the\n  error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n```js\nasync.reduce([1,2,3], 0, function(memo, item, callback){\n    // pointless async:\n    process.nextTick(function(){\n        callback(null, memo + item)\n    });\n}, function(err, result){\n    // result is now equal to the last value of memo, which is 6\n});\n```\n\n---------------------------------------\n\n<a name=\"reduceRight\" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name=\"detect\" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n```js\nasync.detect(['file1','file2','file3'], path.exists, function(result){\n    // result now equals the first file in the list that exists\n});\n```\n\n---------------------------------------\n\n<a name=\"detectSeries\" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name=\"sortBy\" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a value to use as the sort criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n```js\nasync.sortBy(['file1','file2','file3'], function(file, callback){\n    fs.stat(file, function(err, stats){\n        callback(err, stats.mtime);\n    });\n}, function(err, results){\n    // results is now the original array of files sorted by\n    // modified date\n});\n```\n\n---------------------------------------\n\n<a name=\"some\" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n```js\nasync.some(['file1','file2','file3'], path.exists, function(result){\n    // if result is true then at least one of the files exists\n});\n```\n\n---------------------------------------\n\n<a name=\"every\" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n```js\nasync.every(['file1','file2','file3'], path.exists, function(result){\n    // if result is true then every file exists\n});\n```\n\n---------------------------------------\n\n<a name=\"concat\" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n```js\nasync.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files){\n    // files is now a list of filenames that exist in the 3 directories\n});\n```\n\n---------------------------------------\n\n<a name=\"concatSeries\" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name=\"series\" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n```js\nasync.series([\n    function(callback){\n        // do some stuff ...\n        callback(null, 'one');\n    },\n    function(callback){\n        // do some more stuff ...\n        callback(null, 'two');\n    }\n],\n// optional callback\nfunction(err, results){\n    // results is now equal to ['one', 'two']\n});\n\n\n// an example using an object instead of an array\nasync.series({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equal to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n```js\nasync.parallel([\n    function(callback){\n        setTimeout(function(){\n            callback(null, 'one');\n        }, 200);\n    },\n    function(callback){\n        setTimeout(function(){\n            callback(null, 'two');\n        }, 100);\n    }\n],\n// optional callback\nfunction(err, results){\n    // the results array will equal ['one','two'] even though\n    // the second function had a shorter timeout.\n});\n\n\n// an example using an object instead of an array\nasync.parallel({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equals to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallelLimit(tasks, limit, [callback])\n\nThe same as parallel only the tasks are executed in parallel with a maximum of \"limit\" \ntasks executing at any time.\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* limit - The maximum number of tasks to run at any time.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n\n---------------------------------------\n\n<a name=\"whilst\" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback which must be called once it has completed with an optional\n  error as the first argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n```js\nvar count = 0;\n\nasync.whilst(\n    function () { return count < 5; },\n    function (callback) {\n        count++;\n        setTimeout(callback, 1000);\n    },\n    function (err) {\n        // 5 seconds have passed\n    }\n);\n```\n\n---------------------------------------\n\n<a name=\"doWhilst\" />\n### doWhilst(fn, test, callback)\n\nThe post check version of whilst. To reflect the difference in the order of operations `test` and `fn` arguments are switched. `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n\n---------------------------------------\n\n<a name=\"until\" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n---------------------------------------\n\n<a name=\"doUntil\" />\n### doUntil(fn, test, callback)\n\nLike doWhilst except the test is inverted. Note the argument ordering differs from `until`.\n\n\n---------------------------------------\n\n<a name=\"waterfall\" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task's callback.\n\n\n\n__Example__\n\n```js\nasync.waterfall([\n    function(callback){\n        callback(null, 'one', 'two');\n    },\n    function(arg1, arg2, callback){\n        callback(null, 'three');\n    },\n    function(arg1, callback){\n        // arg1 now equals 'three'\n        callback(null, 'done');\n    }\n], function (err, result) {\n   // result now equals 'done'    \n});\n```\n\n---------------------------------------\n\n<a name=\"queue\" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task's callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* unshift(task, [callback]) - add a new task to the front of the queue.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a queue object with concurrency 2\n\nvar q = async.queue(function (task, callback) {\n    console.log('hello ' + task.name);\n    callback();\n}, 2);\n\n\n// assign a callback\nq.drain = function() {\n    console.log('all items have been processed');\n}\n\n// add some items to the queue\n\nq.push({name: 'foo'}, function (err) {\n    console.log('finished processing foo');\n});\nq.push({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\n\n// add some items to the queue (batch-wise)\n\nq.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function (err) {\n    console.log('finished processing bar');\n});\n\n// add some items to the front of the queue\n\nq.unshift({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\n```\n\n---------------------------------------\n\n<a name=\"cargo\" />\n### cargo(worker, [payload])\n\nCreates a cargo object with the specified payload. Tasks added to the\ncargo will be processed altogether (up to the payload limit). If the\nworker is in progress, the task is queued until it is available. Once\nthe worker has completed some tasks, each callback of those tasks is called.\n\n__Arguments__\n\n* worker(tasks, callback) - An asynchronous function for processing queued\n  tasks.\n* payload - An optional integer for determining how many tasks should be\n  process per round, default is unlimited.\n\n__Cargo objects__\n\nThe cargo object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* payload - an integer for determining how many tasks should be\n  process per round. This property can be changed after a cargo is created to\n  alter the payload on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a cargo object with payload 2\n\nvar cargo = async.cargo(function (task, callback) {\n    console.log('hello ' + task.name);\n    callback();\n}, 2);\n\n\n// add some items\n\ncargo.push({name: 'foo'}, function (err) {\n    console.log('finished processing foo');\n});\ncargo.push({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\ncargo.push({name: 'baz'}, function (err) {\n    console.log('finished processing baz');\n});\n```\n\n---------------------------------------\n\n<a name=\"auto\" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The\n  syntax is easier to understand by looking at the example.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. If all tasks complete\n  successfully, it will receive an object containing their results.\n\n__Example__\n\n```js\nasync.auto({\n    get_data: function(callback){\n        // async code to get some data\n    },\n    make_folder: function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    },\n    write_file: ['get_data', 'make_folder', function(callback){\n        // once there is some data and the directory exists,\n        // write the data to a file in the directory\n        callback(null, filename);\n    }],\n    email_link: ['write_file', function(callback, results){\n        // once the file is written let's email a link to it...\n        // results.write_file contains the filename returned by write_file.\n    }]\n});\n```\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n```js\nasync.parallel([\n    function(callback){\n        // async code to get some data\n    },\n    function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    }\n],\nfunction(err, results){\n    async.series([\n        function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n        },\n        function(callback){\n            // once the file is written let's email a link to it...\n        }\n    ]);\n});\n```\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name=\"iterator\" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. Its also possible to\n'peek' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n\n__Example__\n\n```js\nvar iterator = async.iterator([\n    function(){ sys.p('one'); },\n    function(){ sys.p('two'); },\n    function(){ sys.p('three'); }\n]);\n\nnode> var iterator2 = iterator();\n'one'\nnode> var iterator3 = iterator2();\n'two'\nnode> iterator3();\n'three'\nnode> var nextfn = iterator2.next();\nnode> nextfn();\n'three'\n```\n\n---------------------------------------\n\n<a name=\"apply\" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n```js\n// using apply\n\nasync.parallel([\n    async.apply(fs.writeFile, 'testfile1', 'test1'),\n    async.apply(fs.writeFile, 'testfile2', 'test2'),\n]);\n\n\n// the same process without using apply\n\nasync.parallel([\n    function(callback){\n        fs.writeFile('testfile1', 'test1', callback);\n    },\n    function(callback){\n        fs.writeFile('testfile2', 'test2', callback);\n    }\n]);\n```\n\nIt's possible to pass any number of additional arguments when calling the\ncontinuation:\n\n```js\nnode> var fn = async.apply(sys.puts, 'one');\nnode> fn('two', 'three');\none\ntwo\nthree\n```\n\n---------------------------------------\n\n<a name=\"nextTick\" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setImmediate(callback)\nif available, otherwise setTimeout(callback, 0), which means other higher priority\nevents may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n```js\nvar call_order = [];\nasync.nextTick(function(){\n    call_order.push('two');\n    // call_order now equals ['one','two']\n});\ncall_order.push('one')\n```\n\n<a name=\"times\" />\n### times(n, callback)\n\nCalls the callback n times and accumulates results in the same manner\nyou would use with async.map.\n\n__Arguments__\n\n* n - The number of times to run the function.\n* callback - The function to call n times.\n\n__Example__\n\n```js\n// Pretend this is some complicated async factory\nvar createUser = function(id, callback) {\n  callback(null, {\n    id: 'user' + id\n  })\n}\n// generate 5 users\nasync.times(5, function(n, next){\n    createUser(n, function(err, user) {\n      next(err, user)\n    })\n}, function(err, users) {\n  // we should now have 5 users\n});\n```\n\n<a name=\"timesSeries\" />\n### timesSeries(n, callback)\n\nThe same as times only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n## Utils\n\n<a name=\"memoize\" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\nThe cache of results is exposed as the `memo` property of the function returned\nby `memoize`.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n```js\nvar slow_fn = function (name, callback) {\n    // do something\n    callback(null, result);\n};\nvar fn = async.memoize(slow_fn);\n\n// fn can now be used as if it were slow_fn\nfn('some name', function () {\n    // callback\n});\n```\n\n<a name=\"unmemoize\" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name=\"log\" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, 'hello ' + name);\n    }, 1000);\n};\n```\n```js\nnode> async.log(hello, 'world');\n'hello world'\n```\n\n---------------------------------------\n\n<a name=\"dir\" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, {hello: name});\n    }, 1000);\n};\n```\n```js\nnode> async.dir(hello, 'world');\n{hello: 'world'}\n```\n\n---------------------------------------\n\n<a name=\"noConflict\" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n","readmeFilename":"README.md","_id":"async@0.2.3","dist":{"shasum":"79bf601d723a2e8c3e91cb6bb08f152dca309fb3","tarball":"http://registry.npmjs.org/async/-/async-0.2.3.tgz"},"_npmVersion":"1.2.0","_npmUser":{"name":"caolan","email":"caolan.mcmahon@gmail.com"},"maintainers":[{"name":"caolan","email":"caolan@caolanmcmahon.com"}],"directories":{}},"0.2.4":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./lib/async","author":{"name":"Caolan McMahon"},"version":"0.2.4","repository":{"type":"git","url":"http://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"devDependencies":{"nodeunit":">0.0.0","uglify-js":"1.2.x","nodelint":">0.0.0"},"jam":{"main":"lib/async.js","include":["lib/async.js","README.md","LICENSE"]},"readme":"# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual 'functional'\nsuspects (map, reduce, filter, forEach…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n```javascript\nasync.map(['file1','file2','file3'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n\nasync.filter(['file1','file2','file3'], path.exists, function(results){\n    // results now equals an array of the existing files\n});\n\nasync.parallel([\n    function(){ ... },\n    function(){ ... }\n], callback);\n\nasync.series([\n    function(){ ... },\n    function(){ ... }\n]);\n```\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n\n## Download\n\nReleases are available for download from\n[GitHub](http://github.com/caolan/async/downloads).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 17.5kb Uncompressed\n\n__Production:__ [async.min.js](https://github.com/caolan/async/raw/master/dist/async.min.js) - 1.7kb Packed and Gzipped\n\n\n## In the Browser\n\nSo far its been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n```html\n<script type=\"text/javascript\" src=\"async.js\"></script>\n<script type=\"text/javascript\">\n\n    async.map(data, asyncProcess, function(err, results){\n        alert(results);\n    });\n\n</script>\n```\n\n## Documentation\n\n### Collections\n\n* [forEach](#forEach)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [doWhilst](#doWhilst)\n* [until](#until)\n* [doUntil](#doUntil)\n* [waterfall](#waterfall)\n* [compose](#compose)\n* [queue](#queue)\n* [cargo](#cargo)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n* [times](#times)\n* [timesSeries](#timesSeries)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name=\"forEach\" />\n### forEach(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the forEach function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err) which must be called once it has completed.\n  If no error has occured, the callback should be run without arguments or \n  with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// assuming openFiles is an array of file names and saveFile is a function\n// to save the modified contents of that file:\n\nasync.forEach(openFiles, saveFile, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name=\"forEachSeries\" />\n### forEachSeries(arr, iterator, callback)\n\nThe same as forEach only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name=\"forEachLimit\" />\n### forEachLimit(arr, limit, iterator, callback)\n\nThe same as forEach only no more than \"limit\" iterators will be simultaneously \nrunning at any time.\n\nNote that the items are not processed in batches, so there is no guarantee that\n the first \"limit\" iterator functions will complete before any others are \nstarted.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - The maximum number of iterators to run at any time.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n  If no error has occured, the callback should be run without arguments or \n  with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// Assume documents is an array of JSON objects and requestApi is a\n// function that interacts with a rate-limited REST api.\n\nasync.forEachLimit(documents, 20, requestApi, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name=\"map\" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map(['file1','file2','file3'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name=\"mapSeries\" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name=\"mapLimit\" />\n### mapLimit(arr, limit, iterator, callback)\n\nThe same as map only no more than \"limit\" iterators will be simultaneously \nrunning at any time.\n\nNote that the items are not processed in batches, so there is no guarantee that\n the first \"limit\" iterator functions will complete before any others are \nstarted.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - The maximum number of iterators to run at any time.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n  If no error has occured, the callback should be run without arguments or \n  with an explicit null argument.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map(['file1','file2','file3'], 1, fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name=\"filter\" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n```js\nasync.filter(['file1','file2','file3'], path.exists, function(results){\n    // results now equals an array of the existing files\n});\n```\n\n---------------------------------------\n\n<a name=\"filterSeries\" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name=\"reject\" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name=\"rejectSeries\" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as reject, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name=\"reduce\" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then its probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback which accepts an optional error as its first argument, and the state\n  of the reduction as the second. If an error is passed to the callback, the\n  reduction is stopped and the main callback is immediately called with the\n  error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n```js\nasync.reduce([1,2,3], 0, function(memo, item, callback){\n    // pointless async:\n    process.nextTick(function(){\n        callback(null, memo + item)\n    });\n}, function(err, result){\n    // result is now equal to the last value of memo, which is 6\n});\n```\n\n---------------------------------------\n\n<a name=\"reduceRight\" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name=\"detect\" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n```js\nasync.detect(['file1','file2','file3'], path.exists, function(result){\n    // result now equals the first file in the list that exists\n});\n```\n\n---------------------------------------\n\n<a name=\"detectSeries\" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name=\"sortBy\" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a value to use as the sort criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n```js\nasync.sortBy(['file1','file2','file3'], function(file, callback){\n    fs.stat(file, function(err, stats){\n        callback(err, stats.mtime);\n    });\n}, function(err, results){\n    // results is now the original array of files sorted by\n    // modified date\n});\n```\n\n---------------------------------------\n\n<a name=\"some\" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n```js\nasync.some(['file1','file2','file3'], path.exists, function(result){\n    // if result is true then at least one of the files exists\n});\n```\n\n---------------------------------------\n\n<a name=\"every\" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n```js\nasync.every(['file1','file2','file3'], path.exists, function(result){\n    // if result is true then every file exists\n});\n```\n\n---------------------------------------\n\n<a name=\"concat\" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n```js\nasync.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files){\n    // files is now a list of filenames that exist in the 3 directories\n});\n```\n\n---------------------------------------\n\n<a name=\"concatSeries\" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name=\"series\" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n```js\nasync.series([\n    function(callback){\n        // do some stuff ...\n        callback(null, 'one');\n    },\n    function(callback){\n        // do some more stuff ...\n        callback(null, 'two');\n    }\n],\n// optional callback\nfunction(err, results){\n    // results is now equal to ['one', 'two']\n});\n\n\n// an example using an object instead of an array\nasync.series({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equal to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n```js\nasync.parallel([\n    function(callback){\n        setTimeout(function(){\n            callback(null, 'one');\n        }, 200);\n    },\n    function(callback){\n        setTimeout(function(){\n            callback(null, 'two');\n        }, 100);\n    }\n],\n// optional callback\nfunction(err, results){\n    // the results array will equal ['one','two'] even though\n    // the second function had a shorter timeout.\n});\n\n\n// an example using an object instead of an array\nasync.parallel({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equals to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallelLimit(tasks, limit, [callback])\n\nThe same as parallel only the tasks are executed in parallel with a maximum of \"limit\" \ntasks executing at any time.\n\nNote that the tasks are not executed in batches, so there is no guarantee that \nthe first \"limit\" tasks will complete before any others are started.\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* limit - The maximum number of tasks to run at any time.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n\n---------------------------------------\n\n<a name=\"whilst\" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback which must be called once it has completed with an optional\n  error as the first argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n```js\nvar count = 0;\n\nasync.whilst(\n    function () { return count < 5; },\n    function (callback) {\n        count++;\n        setTimeout(callback, 1000);\n    },\n    function (err) {\n        // 5 seconds have passed\n    }\n);\n```\n\n---------------------------------------\n\n<a name=\"doWhilst\" />\n### doWhilst(fn, test, callback)\n\nThe post check version of whilst. To reflect the difference in the order of operations `test` and `fn` arguments are switched. `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n\n---------------------------------------\n\n<a name=\"until\" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n---------------------------------------\n\n<a name=\"doUntil\" />\n### doUntil(fn, test, callback)\n\nLike doWhilst except the test is inverted. Note the argument ordering differs from `until`.\n\n\n---------------------------------------\n\n<a name=\"waterfall\" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task's callback.\n\n\n\n__Example__\n\n```js\nasync.waterfall([\n    function(callback){\n        callback(null, 'one', 'two');\n    },\n    function(arg1, arg2, callback){\n        callback(null, 'three');\n    },\n    function(arg1, callback){\n        // arg1 now equals 'three'\n        callback(null, 'done');\n    }\n], function (err, result) {\n   // result now equals 'done'    \n});\n```\n\n---------------------------------------\n<a name=\"compose\" />\n### compose(fn1, fn2...)\n\nCreates a function which is a composition of the passed asynchronous\nfunctions. Each function consumes the return value of the function that\nfollows. Composing functions f(), g() and h() would produce the result of\nf(g(h())), only this version uses callbacks to obtain the return values.\n\nEach function is executed with the `this` binding of the composed function.\n\n__Arguments__\n\n* functions... - the asynchronous functions to compose\n\n\n__Example__\n\n```js\nfunction add1(n, callback) {\n    setTimeout(function () [\n        callback(null, n + 1);\n    }, 10);\n}\n\nfunction mul3(n, callback) {\n    setTimeout(function () [\n        callback(null, n * 3);\n    }, 10);\n}\n\nvar add1mul3 = async.compose(mul3, add1);\n\nadd1mul3(4, function (err, result) {\n   // result now equals 15\n});\n```\n\n---------------------------------------\n\n<a name=\"queue\" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task's callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* unshift(task, [callback]) - add a new task to the front of the queue.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a queue object with concurrency 2\n\nvar q = async.queue(function (task, callback) {\n    console.log('hello ' + task.name);\n    callback();\n}, 2);\n\n\n// assign a callback\nq.drain = function() {\n    console.log('all items have been processed');\n}\n\n// add some items to the queue\n\nq.push({name: 'foo'}, function (err) {\n    console.log('finished processing foo');\n});\nq.push({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\n\n// add some items to the queue (batch-wise)\n\nq.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function (err) {\n    console.log('finished processing bar');\n});\n\n// add some items to the front of the queue\n\nq.unshift({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\n```\n\n---------------------------------------\n\n<a name=\"cargo\" />\n### cargo(worker, [payload])\n\nCreates a cargo object with the specified payload. Tasks added to the\ncargo will be processed altogether (up to the payload limit). If the\nworker is in progress, the task is queued until it is available. Once\nthe worker has completed some tasks, each callback of those tasks is called.\n\n__Arguments__\n\n* worker(tasks, callback) - An asynchronous function for processing queued\n  tasks.\n* payload - An optional integer for determining how many tasks should be\n  process per round, default is unlimited.\n\n__Cargo objects__\n\nThe cargo object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* payload - an integer for determining how many tasks should be\n  process per round. This property can be changed after a cargo is created to\n  alter the payload on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a cargo object with payload 2\n\nvar cargo = async.cargo(function (task, callback) {\n    console.log('hello ' + task.name);\n    callback();\n}, 2);\n\n\n// add some items\n\ncargo.push({name: 'foo'}, function (err) {\n    console.log('finished processing foo');\n});\ncargo.push({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\ncargo.push({name: 'baz'}, function (err) {\n    console.log('finished processing baz');\n});\n```\n\n---------------------------------------\n\n<a name=\"auto\" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The\n  syntax is easier to understand by looking at the example.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. If all tasks complete\n  successfully, it will receive an object containing their results.\n\n__Example__\n\n```js\nasync.auto({\n    get_data: function(callback){\n        // async code to get some data\n    },\n    make_folder: function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    },\n    write_file: ['get_data', 'make_folder', function(callback){\n        // once there is some data and the directory exists,\n        // write the data to a file in the directory\n        callback(null, filename);\n    }],\n    email_link: ['write_file', function(callback, results){\n        // once the file is written let's email a link to it...\n        // results.write_file contains the filename returned by write_file.\n    }]\n});\n```\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n```js\nasync.parallel([\n    function(callback){\n        // async code to get some data\n    },\n    function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    }\n],\nfunction(err, results){\n    async.series([\n        function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n        },\n        function(callback){\n            // once the file is written let's email a link to it...\n        }\n    ]);\n});\n```\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name=\"iterator\" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. Its also possible to\n'peek' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n\n__Example__\n\n```js\nvar iterator = async.iterator([\n    function(){ sys.p('one'); },\n    function(){ sys.p('two'); },\n    function(){ sys.p('three'); }\n]);\n\nnode> var iterator2 = iterator();\n'one'\nnode> var iterator3 = iterator2();\n'two'\nnode> iterator3();\n'three'\nnode> var nextfn = iterator2.next();\nnode> nextfn();\n'three'\n```\n\n---------------------------------------\n\n<a name=\"apply\" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n```js\n// using apply\n\nasync.parallel([\n    async.apply(fs.writeFile, 'testfile1', 'test1'),\n    async.apply(fs.writeFile, 'testfile2', 'test2'),\n]);\n\n\n// the same process without using apply\n\nasync.parallel([\n    function(callback){\n        fs.writeFile('testfile1', 'test1', callback);\n    },\n    function(callback){\n        fs.writeFile('testfile2', 'test2', callback);\n    }\n]);\n```\n\nIt's possible to pass any number of additional arguments when calling the\ncontinuation:\n\n```js\nnode> var fn = async.apply(sys.puts, 'one');\nnode> fn('two', 'three');\none\ntwo\nthree\n```\n\n---------------------------------------\n\n<a name=\"nextTick\" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setImmediate(callback)\nif available, otherwise setTimeout(callback, 0), which means other higher priority\nevents may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n```js\nvar call_order = [];\nasync.nextTick(function(){\n    call_order.push('two');\n    // call_order now equals ['one','two']\n});\ncall_order.push('one')\n```\n\n<a name=\"times\" />\n### times(n, callback)\n\nCalls the callback n times and accumulates results in the same manner\nyou would use with async.map.\n\n__Arguments__\n\n* n - The number of times to run the function.\n* callback - The function to call n times.\n\n__Example__\n\n```js\n// Pretend this is some complicated async factory\nvar createUser = function(id, callback) {\n  callback(null, {\n    id: 'user' + id\n  })\n}\n// generate 5 users\nasync.times(5, function(n, next){\n    createUser(n, function(err, user) {\n      next(err, user)\n    })\n}, function(err, users) {\n  // we should now have 5 users\n});\n```\n\n<a name=\"timesSeries\" />\n### timesSeries(n, callback)\n\nThe same as times only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n## Utils\n\n<a name=\"memoize\" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\nThe cache of results is exposed as the `memo` property of the function returned\nby `memoize`.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n```js\nvar slow_fn = function (name, callback) {\n    // do something\n    callback(null, result);\n};\nvar fn = async.memoize(slow_fn);\n\n// fn can now be used as if it were slow_fn\nfn('some name', function () {\n    // callback\n});\n```\n\n<a name=\"unmemoize\" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name=\"log\" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, 'hello ' + name);\n    }, 1000);\n};\n```\n```js\nnode> async.log(hello, 'world');\n'hello world'\n```\n\n---------------------------------------\n\n<a name=\"dir\" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, {hello: name});\n    }, 1000);\n};\n```\n```js\nnode> async.dir(hello, 'world');\n{hello: 'world'}\n```\n\n---------------------------------------\n\n<a name=\"noConflict\" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n","readmeFilename":"README.md","_id":"async@0.2.4","dist":{"shasum":"0550e510cf43b83e2fcf1cb96399f03f1efd50eb","tarball":"http://registry.npmjs.org/async/-/async-0.2.4.tgz"},"_npmVersion":"1.2.0","_npmUser":{"name":"caolan","email":"caolan.mcmahon@gmail.com"},"maintainers":[{"name":"caolan","email":"caolan@caolanmcmahon.com"}],"directories":{}},"0.2.5":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./lib/async","author":{"name":"Caolan McMahon"},"version":"0.2.5","repository":{"type":"git","url":"http://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"devDependencies":{"nodeunit":">0.0.0","uglify-js":"1.2.x","nodelint":">0.0.0"},"jam":{"main":"lib/async.js","include":["lib/async.js","README.md","LICENSE"]},"readme":"# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual 'functional'\nsuspects (map, reduce, filter, each…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n```javascript\nasync.map(['file1','file2','file3'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n\nasync.filter(['file1','file2','file3'], path.exists, function(results){\n    // results now equals an array of the existing files\n});\n\nasync.parallel([\n    function(){ ... },\n    function(){ ... }\n], callback);\n\nasync.series([\n    function(){ ... },\n    function(){ ... }\n]);\n```\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n\n## Download\n\nReleases are available for download from\n[GitHub](http://github.com/caolan/async/downloads).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 17.5kb Uncompressed\n\n__Production:__ [async.min.js](https://github.com/caolan/async/raw/master/dist/async.min.js) - 1.7kb Packed and Gzipped\n\n\n## In the Browser\n\nSo far its been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n```html\n<script type=\"text/javascript\" src=\"async.js\"></script>\n<script type=\"text/javascript\">\n\n    async.map(data, asyncProcess, function(err, results){\n        alert(results);\n    });\n\n</script>\n```\n\n## Documentation\n\n### Collections\n\n* [each](#each)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [doWhilst](#doWhilst)\n* [until](#until)\n* [doUntil](#doUntil)\n* [waterfall](#waterfall)\n* [compose](#compose)\n* [queue](#queue)\n* [cargo](#cargo)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n* [times](#times)\n* [timesSeries](#timesSeries)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name=\"forEach\" />\n<a name=\"each\" />\n### each(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the each function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err) which must be called once it has completed.\n  If no error has occured, the callback should be run without arguments or \n  with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// assuming openFiles is an array of file names and saveFile is a function\n// to save the modified contents of that file:\n\nasync.each(openFiles, saveFile, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name=\"forEachSeries\" />\n<a name=\"eachSeries\" />\n### eachSeries(arr, iterator, callback)\n\nThe same as each only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name=\"forEachLimit\" />\n<a name=\"eachLimit\" />\n### eachLimit(arr, limit, iterator, callback)\n\nThe same as each only no more than \"limit\" iterators will be simultaneously \nrunning at any time.\n\nNote that the items are not processed in batches, so there is no guarantee that\n the first \"limit\" iterator functions will complete before any others are \nstarted.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - The maximum number of iterators to run at any time.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n  If no error has occured, the callback should be run without arguments or \n  with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// Assume documents is an array of JSON objects and requestApi is a\n// function that interacts with a rate-limited REST api.\n\nasync.eachLimit(documents, 20, requestApi, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name=\"map\" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map(['file1','file2','file3'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name=\"mapSeries\" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name=\"mapLimit\" />\n### mapLimit(arr, limit, iterator, callback)\n\nThe same as map only no more than \"limit\" iterators will be simultaneously \nrunning at any time.\n\nNote that the items are not processed in batches, so there is no guarantee that\n the first \"limit\" iterator functions will complete before any others are \nstarted.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - The maximum number of iterators to run at any time.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n  If no error has occured, the callback should be run without arguments or \n  with an explicit null argument.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map(['file1','file2','file3'], 1, fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name=\"filter\" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n```js\nasync.filter(['file1','file2','file3'], path.exists, function(results){\n    // results now equals an array of the existing files\n});\n```\n\n---------------------------------------\n\n<a name=\"filterSeries\" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name=\"reject\" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name=\"rejectSeries\" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as reject, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name=\"reduce\" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then its probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback which accepts an optional error as its first argument, and the state\n  of the reduction as the second. If an error is passed to the callback, the\n  reduction is stopped and the main callback is immediately called with the\n  error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n```js\nasync.reduce([1,2,3], 0, function(memo, item, callback){\n    // pointless async:\n    process.nextTick(function(){\n        callback(null, memo + item)\n    });\n}, function(err, result){\n    // result is now equal to the last value of memo, which is 6\n});\n```\n\n---------------------------------------\n\n<a name=\"reduceRight\" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name=\"detect\" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n```js\nasync.detect(['file1','file2','file3'], path.exists, function(result){\n    // result now equals the first file in the list that exists\n});\n```\n\n---------------------------------------\n\n<a name=\"detectSeries\" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name=\"sortBy\" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a value to use as the sort criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n```js\nasync.sortBy(['file1','file2','file3'], function(file, callback){\n    fs.stat(file, function(err, stats){\n        callback(err, stats.mtime);\n    });\n}, function(err, results){\n    // results is now the original array of files sorted by\n    // modified date\n});\n```\n\n---------------------------------------\n\n<a name=\"some\" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n```js\nasync.some(['file1','file2','file3'], path.exists, function(result){\n    // if result is true then at least one of the files exists\n});\n```\n\n---------------------------------------\n\n<a name=\"every\" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n```js\nasync.every(['file1','file2','file3'], path.exists, function(result){\n    // if result is true then every file exists\n});\n```\n\n---------------------------------------\n\n<a name=\"concat\" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n```js\nasync.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files){\n    // files is now a list of filenames that exist in the 3 directories\n});\n```\n\n---------------------------------------\n\n<a name=\"concatSeries\" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name=\"series\" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n```js\nasync.series([\n    function(callback){\n        // do some stuff ...\n        callback(null, 'one');\n    },\n    function(callback){\n        // do some more stuff ...\n        callback(null, 'two');\n    }\n],\n// optional callback\nfunction(err, results){\n    // results is now equal to ['one', 'two']\n});\n\n\n// an example using an object instead of an array\nasync.series({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equal to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n```js\nasync.parallel([\n    function(callback){\n        setTimeout(function(){\n            callback(null, 'one');\n        }, 200);\n    },\n    function(callback){\n        setTimeout(function(){\n            callback(null, 'two');\n        }, 100);\n    }\n],\n// optional callback\nfunction(err, results){\n    // the results array will equal ['one','two'] even though\n    // the second function had a shorter timeout.\n});\n\n\n// an example using an object instead of an array\nasync.parallel({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equals to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallelLimit(tasks, limit, [callback])\n\nThe same as parallel only the tasks are executed in parallel with a maximum of \"limit\" \ntasks executing at any time.\n\nNote that the tasks are not executed in batches, so there is no guarantee that \nthe first \"limit\" tasks will complete before any others are started.\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* limit - The maximum number of tasks to run at any time.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n\n---------------------------------------\n\n<a name=\"whilst\" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback which must be called once it has completed with an optional\n  error as the first argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n```js\nvar count = 0;\n\nasync.whilst(\n    function () { return count < 5; },\n    function (callback) {\n        count++;\n        setTimeout(callback, 1000);\n    },\n    function (err) {\n        // 5 seconds have passed\n    }\n);\n```\n\n---------------------------------------\n\n<a name=\"doWhilst\" />\n### doWhilst(fn, test, callback)\n\nThe post check version of whilst. To reflect the difference in the order of operations `test` and `fn` arguments are switched. `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n\n---------------------------------------\n\n<a name=\"until\" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n---------------------------------------\n\n<a name=\"doUntil\" />\n### doUntil(fn, test, callback)\n\nLike doWhilst except the test is inverted. Note the argument ordering differs from `until`.\n\n\n---------------------------------------\n\n<a name=\"waterfall\" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task's callback.\n\n\n\n__Example__\n\n```js\nasync.waterfall([\n    function(callback){\n        callback(null, 'one', 'two');\n    },\n    function(arg1, arg2, callback){\n        callback(null, 'three');\n    },\n    function(arg1, callback){\n        // arg1 now equals 'three'\n        callback(null, 'done');\n    }\n], function (err, result) {\n   // result now equals 'done'    \n});\n```\n\n---------------------------------------\n<a name=\"compose\" />\n### compose(fn1, fn2...)\n\nCreates a function which is a composition of the passed asynchronous\nfunctions. Each function consumes the return value of the function that\nfollows. Composing functions f(), g() and h() would produce the result of\nf(g(h())), only this version uses callbacks to obtain the return values.\n\nEach function is executed with the `this` binding of the composed function.\n\n__Arguments__\n\n* functions... - the asynchronous functions to compose\n\n\n__Example__\n\n```js\nfunction add1(n, callback) {\n    setTimeout(function () [\n        callback(null, n + 1);\n    }, 10);\n}\n\nfunction mul3(n, callback) {\n    setTimeout(function () [\n        callback(null, n * 3);\n    }, 10);\n}\n\nvar add1mul3 = async.compose(mul3, add1);\n\nadd1mul3(4, function (err, result) {\n   // result now equals 15\n});\n```\n\n---------------------------------------\n\n<a name=\"queue\" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task's callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* unshift(task, [callback]) - add a new task to the front of the queue.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a queue object with concurrency 2\n\nvar q = async.queue(function (task, callback) {\n    console.log('hello ' + task.name);\n    callback();\n}, 2);\n\n\n// assign a callback\nq.drain = function() {\n    console.log('all items have been processed');\n}\n\n// add some items to the queue\n\nq.push({name: 'foo'}, function (err) {\n    console.log('finished processing foo');\n});\nq.push({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\n\n// add some items to the queue (batch-wise)\n\nq.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function (err) {\n    console.log('finished processing bar');\n});\n\n// add some items to the front of the queue\n\nq.unshift({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\n```\n\n---------------------------------------\n\n<a name=\"cargo\" />\n### cargo(worker, [payload])\n\nCreates a cargo object with the specified payload. Tasks added to the\ncargo will be processed altogether (up to the payload limit). If the\nworker is in progress, the task is queued until it is available. Once\nthe worker has completed some tasks, each callback of those tasks is called.\n\n__Arguments__\n\n* worker(tasks, callback) - An asynchronous function for processing queued\n  tasks.\n* payload - An optional integer for determining how many tasks should be\n  process per round, default is unlimited.\n\n__Cargo objects__\n\nThe cargo object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* payload - an integer for determining how many tasks should be\n  process per round. This property can be changed after a cargo is created to\n  alter the payload on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a cargo object with payload 2\n\nvar cargo = async.cargo(function (task, callback) {\n    console.log('hello ' + task.name);\n    callback();\n}, 2);\n\n\n// add some items\n\ncargo.push({name: 'foo'}, function (err) {\n    console.log('finished processing foo');\n});\ncargo.push({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\ncargo.push({name: 'baz'}, function (err) {\n    console.log('finished processing baz');\n});\n```\n\n---------------------------------------\n\n<a name=\"auto\" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The\n  syntax is easier to understand by looking at the example.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. If all tasks complete\n  successfully, it will receive an object containing their results.\n\n__Example__\n\n```js\nasync.auto({\n    get_data: function(callback){\n        // async code to get some data\n    },\n    make_folder: function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    },\n    write_file: ['get_data', 'make_folder', function(callback){\n        // once there is some data and the directory exists,\n        // write the data to a file in the directory\n        callback(null, filename);\n    }],\n    email_link: ['write_file', function(callback, results){\n        // once the file is written let's email a link to it...\n        // results.write_file contains the filename returned by write_file.\n    }]\n});\n```\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n```js\nasync.parallel([\n    function(callback){\n        // async code to get some data\n    },\n    function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    }\n],\nfunction(err, results){\n    async.series([\n        function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n        },\n        function(callback){\n            // once the file is written let's email a link to it...\n        }\n    ]);\n});\n```\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name=\"iterator\" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. Its also possible to\n'peek' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n\n__Example__\n\n```js\nvar iterator = async.iterator([\n    function(){ sys.p('one'); },\n    function(){ sys.p('two'); },\n    function(){ sys.p('three'); }\n]);\n\nnode> var iterator2 = iterator();\n'one'\nnode> var iterator3 = iterator2();\n'two'\nnode> iterator3();\n'three'\nnode> var nextfn = iterator2.next();\nnode> nextfn();\n'three'\n```\n\n---------------------------------------\n\n<a name=\"apply\" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n```js\n// using apply\n\nasync.parallel([\n    async.apply(fs.writeFile, 'testfile1', 'test1'),\n    async.apply(fs.writeFile, 'testfile2', 'test2'),\n]);\n\n\n// the same process without using apply\n\nasync.parallel([\n    function(callback){\n        fs.writeFile('testfile1', 'test1', callback);\n    },\n    function(callback){\n        fs.writeFile('testfile2', 'test2', callback);\n    }\n]);\n```\n\nIt's possible to pass any number of additional arguments when calling the\ncontinuation:\n\n```js\nnode> var fn = async.apply(sys.puts, 'one');\nnode> fn('two', 'three');\none\ntwo\nthree\n```\n\n---------------------------------------\n\n<a name=\"nextTick\" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setImmediate(callback)\nif available, otherwise setTimeout(callback, 0), which means other higher priority\nevents may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n```js\nvar call_order = [];\nasync.nextTick(function(){\n    call_order.push('two');\n    // call_order now equals ['one','two']\n});\ncall_order.push('one')\n```\n\n<a name=\"times\" />\n### times(n, callback)\n\nCalls the callback n times and accumulates results in the same manner\nyou would use with async.map.\n\n__Arguments__\n\n* n - The number of times to run the function.\n* callback - The function to call n times.\n\n__Example__\n\n```js\n// Pretend this is some complicated async factory\nvar createUser = function(id, callback) {\n  callback(null, {\n    id: 'user' + id\n  })\n}\n// generate 5 users\nasync.times(5, function(n, next){\n    createUser(n, function(err, user) {\n      next(err, user)\n    })\n}, function(err, users) {\n  // we should now have 5 users\n});\n```\n\n<a name=\"timesSeries\" />\n### timesSeries(n, callback)\n\nThe same as times only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n## Utils\n\n<a name=\"memoize\" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\nThe cache of results is exposed as the `memo` property of the function returned\nby `memoize`.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n```js\nvar slow_fn = function (name, callback) {\n    // do something\n    callback(null, result);\n};\nvar fn = async.memoize(slow_fn);\n\n// fn can now be used as if it were slow_fn\nfn('some name', function () {\n    // callback\n});\n```\n\n<a name=\"unmemoize\" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name=\"log\" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, 'hello ' + name);\n    }, 1000);\n};\n```\n```js\nnode> async.log(hello, 'world');\n'hello world'\n```\n\n---------------------------------------\n\n<a name=\"dir\" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, {hello: name});\n    }, 1000);\n};\n```\n```js\nnode> async.dir(hello, 'world');\n{hello: 'world'}\n```\n\n---------------------------------------\n\n<a name=\"noConflict\" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n","readmeFilename":"README.md","_id":"async@0.2.5","dist":{"shasum":"45f05da480749ba4c1dcd8cd3a3747ae7b36fe52","tarball":"http://registry.npmjs.org/async/-/async-0.2.5.tgz"},"_npmVersion":"1.2.0","_npmUser":{"name":"caolan","email":"caolan.mcmahon@gmail.com"},"maintainers":[{"name":"caolan","email":"caolan@caolanmcmahon.com"}],"directories":{}},"0.2.6":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./lib/async","author":{"name":"Caolan McMahon"},"version":"0.2.6","repository":{"type":"git","url":"http://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"devDependencies":{"nodeunit":">0.0.0","uglify-js":"1.2.x","nodelint":">0.0.0"},"jam":{"main":"lib/async.js","include":["lib/async.js","README.md","LICENSE"]},"scripts":{"test":"nodeunit test/test-async.js"},"readme":"# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual 'functional'\nsuspects (map, reduce, filter, each…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n```javascript\nasync.map(['file1','file2','file3'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n\nasync.filter(['file1','file2','file3'], path.exists, function(results){\n    // results now equals an array of the existing files\n});\n\nasync.parallel([\n    function(){ ... },\n    function(){ ... }\n], callback);\n\nasync.series([\n    function(){ ... },\n    function(){ ... }\n]);\n```\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n\n## Download\n\nReleases are available for download from\n[GitHub](http://github.com/caolan/async/downloads).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 17.5kb Uncompressed\n\n__Production:__ [async.min.js](https://github.com/caolan/async/raw/master/dist/async.min.js) - 1.7kb Packed and Gzipped\n\n\n## In the Browser\n\nSo far its been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n```html\n<script type=\"text/javascript\" src=\"async.js\"></script>\n<script type=\"text/javascript\">\n\n    async.map(data, asyncProcess, function(err, results){\n        alert(results);\n    });\n\n</script>\n```\n\n## Documentation\n\n### Collections\n\n* [each](#each)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [doWhilst](#doWhilst)\n* [until](#until)\n* [doUntil](#doUntil)\n* [waterfall](#waterfall)\n* [compose](#compose)\n* [applyEach](#applyEach)\n* [queue](#queue)\n* [cargo](#cargo)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n* [times](#times)\n* [timesSeries](#timesSeries)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name=\"forEach\" />\n<a name=\"each\" />\n### each(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the each function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err) which must be called once it has \n  completed. If no error has occured, the callback should be run without \n  arguments or with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// assuming openFiles is an array of file names and saveFile is a function\n// to save the modified contents of that file:\n\nasync.each(openFiles, saveFile, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name=\"forEachSeries\" />\n<a name=\"eachSeries\" />\n### eachSeries(arr, iterator, callback)\n\nThe same as each only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name=\"forEachLimit\" />\n<a name=\"eachLimit\" />\n### eachLimit(arr, limit, iterator, callback)\n\nThe same as each only no more than \"limit\" iterators will be simultaneously \nrunning at any time.\n\nNote that the items are not processed in batches, so there is no guarantee that\n the first \"limit\" iterator functions will complete before any others are \nstarted.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - The maximum number of iterators to run at any time.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err) which must be called once it has \n  completed. If no error has occured, the callback should be run without \n  arguments or with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// Assume documents is an array of JSON objects and requestApi is a\n// function that interacts with a rate-limited REST api.\n\nasync.eachLimit(documents, 20, requestApi, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name=\"map\" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, transformed) which must be called once \n  it has completed with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map(['file1','file2','file3'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name=\"mapSeries\" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name=\"mapLimit\" />\n### mapLimit(arr, limit, iterator, callback)\n\nThe same as map only no more than \"limit\" iterators will be simultaneously \nrunning at any time.\n\nNote that the items are not processed in batches, so there is no guarantee that\n the first \"limit\" iterator functions will complete before any others are \nstarted.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - The maximum number of iterators to run at any time.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, transformed) which must be called once \n  it has completed with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map(['file1','file2','file3'], 1, fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name=\"filter\" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n```js\nasync.filter(['file1','file2','file3'], path.exists, function(results){\n    // results now equals an array of the existing files\n});\n```\n\n---------------------------------------\n\n<a name=\"filterSeries\" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name=\"reject\" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name=\"rejectSeries\" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as reject, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name=\"reduce\" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then its probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback(err, reduction) which accepts an optional error as its first \n  argument, and the state of the reduction as the second. If an error is \n  passed to the callback, the reduction is stopped and the main callback is \n  immediately called with the error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n```js\nasync.reduce([1,2,3], 0, function(memo, item, callback){\n    // pointless async:\n    process.nextTick(function(){\n        callback(null, memo + item)\n    });\n}, function(err, result){\n    // result is now equal to the last value of memo, which is 6\n});\n```\n\n---------------------------------------\n\n<a name=\"reduceRight\" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name=\"detect\" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n```js\nasync.detect(['file1','file2','file3'], path.exists, function(result){\n    // result now equals the first file in the list that exists\n});\n```\n\n---------------------------------------\n\n<a name=\"detectSeries\" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name=\"sortBy\" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, sortValue) which must be called once it\n  has completed with an error (which can be null) and a value to use as the sort\n  criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n```js\nasync.sortBy(['file1','file2','file3'], function(file, callback){\n    fs.stat(file, function(err, stats){\n        callback(err, stats.mtime);\n    });\n}, function(err, results){\n    // results is now the original array of files sorted by\n    // modified date\n});\n```\n\n---------------------------------------\n\n<a name=\"some\" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n```js\nasync.some(['file1','file2','file3'], path.exists, function(result){\n    // if result is true then at least one of the files exists\n});\n```\n\n---------------------------------------\n\n<a name=\"every\" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n```js\nasync.every(['file1','file2','file3'], path.exists, function(result){\n    // if result is true then every file exists\n});\n```\n\n---------------------------------------\n\n<a name=\"concat\" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, results) which must be called once it \n  has completed with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n```js\nasync.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files){\n    // files is now a list of filenames that exist in the 3 directories\n});\n```\n\n---------------------------------------\n\n<a name=\"concatSeries\" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name=\"series\" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n__Example__\n\n```js\nasync.series([\n    function(callback){\n        // do some stuff ...\n        callback(null, 'one');\n    },\n    function(callback){\n        // do some more stuff ...\n        callback(null, 'two');\n    }\n],\n// optional callback\nfunction(err, results){\n    // results is now equal to ['one', 'two']\n});\n\n\n// an example using an object instead of an array\nasync.series({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equal to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed \n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n__Example__\n\n```js\nasync.parallel([\n    function(callback){\n        setTimeout(function(){\n            callback(null, 'one');\n        }, 200);\n    },\n    function(callback){\n        setTimeout(function(){\n            callback(null, 'two');\n        }, 100);\n    }\n],\n// optional callback\nfunction(err, results){\n    // the results array will equal ['one','two'] even though\n    // the second function had a shorter timeout.\n});\n\n\n// an example using an object instead of an array\nasync.parallel({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equals to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallelLimit(tasks, limit, [callback])\n\nThe same as parallel only the tasks are executed in parallel with a maximum of \"limit\" \ntasks executing at any time.\n\nNote that the tasks are not executed in batches, so there is no guarantee that \nthe first \"limit\" tasks will complete before any others are started.\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed \n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* limit - The maximum number of tasks to run at any time.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n---------------------------------------\n\n<a name=\"whilst\" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback(err) which must be called once it has completed with an \n  optional error argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n```js\nvar count = 0;\n\nasync.whilst(\n    function () { return count < 5; },\n    function (callback) {\n        count++;\n        setTimeout(callback, 1000);\n    },\n    function (err) {\n        // 5 seconds have passed\n    }\n);\n```\n\n---------------------------------------\n\n<a name=\"doWhilst\" />\n### doWhilst(fn, test, callback)\n\nThe post check version of whilst. To reflect the difference in the order of operations `test` and `fn` arguments are switched. `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n\n---------------------------------------\n\n<a name=\"until\" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n---------------------------------------\n\n<a name=\"doUntil\" />\n### doUntil(fn, test, callback)\n\nLike doWhilst except the test is inverted. Note the argument ordering differs from `until`.\n\n\n---------------------------------------\n\n<a name=\"waterfall\" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a \n  callback(err, result1, result2, ...) it must call on completion. The first\n  argument is an error (which can be null) and any further arguments will be \n  passed as arguments in order to the next task.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task's callback.\n\n\n\n__Example__\n\n```js\nasync.waterfall([\n    function(callback){\n        callback(null, 'one', 'two');\n    },\n    function(arg1, arg2, callback){\n        callback(null, 'three');\n    },\n    function(arg1, callback){\n        // arg1 now equals 'three'\n        callback(null, 'done');\n    }\n], function (err, result) {\n   // result now equals 'done'    \n});\n```\n\n---------------------------------------\n<a name=\"compose\" />\n### compose(fn1, fn2...)\n\nCreates a function which is a composition of the passed asynchronous\nfunctions. Each function consumes the return value of the function that\nfollows. Composing functions f(), g() and h() would produce the result of\nf(g(h())), only this version uses callbacks to obtain the return values.\n\nEach function is executed with the `this` binding of the composed function.\n\n__Arguments__\n\n* functions... - the asynchronous functions to compose\n\n\n__Example__\n\n```js\nfunction add1(n, callback) {\n    setTimeout(function () {\n        callback(null, n + 1);\n    }, 10);\n}\n\nfunction mul3(n, callback) {\n    setTimeout(function () {\n        callback(null, n * 3);\n    }, 10);\n}\n\nvar add1mul3 = async.compose(mul3, add1);\n\nadd1mul3(4, function (err, result) {\n   // result now equals 15\n});\n```\n\n---------------------------------------\n<a name=\"applyEach\" />\n### applyEach(fns, args..., callback)\n\nApplies the provided arguments to each function in the array, calling the\ncallback after all functions have completed. If you only provide the first\nargument then it will return a function which lets you pass in the\narguments as if it were a single function call.\n\n__Arguments__\n\n* fns - the asynchronous functions to all call with the same arguments\n* args... - any number of separate arguments to pass to the function\n* callback - the final argument should be the callback, called when all\n  functions have completed processing\n\n\n__Example__\n\n```js\nasync.applyEach([enableSearch, updateSchema], 'bucket', callback);\n\n// partial application example:\nasync.each(\n    buckets,\n    async.applyEach([enableSearch, updateSchema]),\n    callback\n);\n```\n\n---------------------------------------\n\n<a name=\"queue\" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task's callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task, which must call its callback(err) argument when finished, with an \n  optional error as an argument.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* unshift(task, [callback]) - add a new task to the front of the queue.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a queue object with concurrency 2\n\nvar q = async.queue(function (task, callback) {\n    console.log('hello ' + task.name);\n    callback();\n}, 2);\n\n\n// assign a callback\nq.drain = function() {\n    console.log('all items have been processed');\n}\n\n// add some items to the queue\n\nq.push({name: 'foo'}, function (err) {\n    console.log('finished processing foo');\n});\nq.push({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\n\n// add some items to the queue (batch-wise)\n\nq.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function (err) {\n    console.log('finished processing bar');\n});\n\n// add some items to the front of the queue\n\nq.unshift({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\n```\n\n---------------------------------------\n\n<a name=\"cargo\" />\n### cargo(worker, [payload])\n\nCreates a cargo object with the specified payload. Tasks added to the\ncargo will be processed altogether (up to the payload limit). If the\nworker is in progress, the task is queued until it is available. Once\nthe worker has completed some tasks, each callback of those tasks is called.\n\n__Arguments__\n\n* worker(tasks, callback) - An asynchronous function for processing queued\n  tasks, which must call its callback(err) argument when finished, with an \n  optional error as an argument.\n* payload - An optional integer for determining how many tasks should be\n  process per round, default is unlimited.\n\n__Cargo objects__\n\nThe cargo object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* payload - an integer for determining how many tasks should be\n  process per round. This property can be changed after a cargo is created to\n  alter the payload on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a cargo object with payload 2\n\nvar cargo = async.cargo(function (task, callback) {\n    console.log('hello ' + task.name);\n    callback();\n}, 2);\n\n\n// add some items\n\ncargo.push({name: 'foo'}, function (err) {\n    console.log('finished processing foo');\n});\ncargo.push({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\ncargo.push({name: 'baz'}, function (err) {\n    console.log('finished processing baz');\n});\n```\n\n---------------------------------------\n\n<a name=\"auto\" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\nNote, all functions are called with a results object as a second argument, \nso it is unsafe to pass functions in the tasks object which cannot handle the\nextra argument. For example, this snippet of code:\n\n```js\nasync.auto({\n  readData: async.apply(fs.readFile, 'data.txt', 'utf-8');\n}, callback);\n```\n\nwill have the effect of calling readFile with the results object as the last\nargument, which will fail:\n\n```js\nfs.readFile('data.txt', 'utf-8', cb, {});\n```\n\nInstead, wrap the call to readFile in a function which does not forward the \nresults object:\n\n```js\nasync.auto({\n  readData: function(cb, results){\n    fs.readFile('data.txt', 'utf-8', cb);\n  }\n}, callback);\n```\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The \n  function receives two arguments: (1) a callback(err, result) which must be \n  called when finished, passing an error (which can be null) and the result of \n  the function's execution, and (2) a results object, containing the results of\n  the previously executed functions.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. Results will always be passed\n\tbut if an error occurred, no other tasks will be performed, and the results\n\tobject will only contain partial results.\n  \n\n__Example__\n\n```js\nasync.auto({\n    get_data: function(callback){\n        // async code to get some data\n    },\n    make_folder: function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    },\n    write_file: ['get_data', 'make_folder', function(callback){\n        // once there is some data and the directory exists,\n        // write the data to a file in the directory\n        callback(null, filename);\n    }],\n    email_link: ['write_file', function(callback, results){\n        // once the file is written let's email a link to it...\n        // results.write_file contains the filename returned by write_file.\n    }]\n});\n```\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n```js\nasync.parallel([\n    function(callback){\n        // async code to get some data\n    },\n    function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    }\n],\nfunction(err, results){\n    async.series([\n        function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n        },\n        function(callback){\n            // once the file is written let's email a link to it...\n        }\n    ]);\n});\n```\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name=\"iterator\" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. Its also possible to\n'peek' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run.\n\n__Example__\n\n```js\nvar iterator = async.iterator([\n    function(){ sys.p('one'); },\n    function(){ sys.p('two'); },\n    function(){ sys.p('three'); }\n]);\n\nnode> var iterator2 = iterator();\n'one'\nnode> var iterator3 = iterator2();\n'two'\nnode> iterator3();\n'three'\nnode> var nextfn = iterator2.next();\nnode> nextfn();\n'three'\n```\n\n---------------------------------------\n\n<a name=\"apply\" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n```js\n// using apply\n\nasync.parallel([\n    async.apply(fs.writeFile, 'testfile1', 'test1'),\n    async.apply(fs.writeFile, 'testfile2', 'test2'),\n]);\n\n\n// the same process without using apply\n\nasync.parallel([\n    function(callback){\n        fs.writeFile('testfile1', 'test1', callback);\n    },\n    function(callback){\n        fs.writeFile('testfile2', 'test2', callback);\n    }\n]);\n```\n\nIt's possible to pass any number of additional arguments when calling the\ncontinuation:\n\n```js\nnode> var fn = async.apply(sys.puts, 'one');\nnode> fn('two', 'three');\none\ntwo\nthree\n```\n\n---------------------------------------\n\n<a name=\"nextTick\" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setImmediate(callback)\nif available, otherwise setTimeout(callback, 0), which means other higher priority\nevents may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n```js\nvar call_order = [];\nasync.nextTick(function(){\n    call_order.push('two');\n    // call_order now equals ['one','two']\n});\ncall_order.push('one')\n```\n\n<a name=\"times\" />\n### times(n, callback)\n\nCalls the callback n times and accumulates results in the same manner\nyou would use with async.map.\n\n__Arguments__\n\n* n - The number of times to run the function.\n* callback - The function to call n times.\n\n__Example__\n\n```js\n// Pretend this is some complicated async factory\nvar createUser = function(id, callback) {\n  callback(null, {\n    id: 'user' + id\n  })\n}\n// generate 5 users\nasync.times(5, function(n, next){\n    createUser(n, function(err, user) {\n      next(err, user)\n    })\n}, function(err, users) {\n  // we should now have 5 users\n});\n```\n\n<a name=\"timesSeries\" />\n### timesSeries(n, callback)\n\nThe same as times only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n## Utils\n\n<a name=\"memoize\" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\nThe cache of results is exposed as the `memo` property of the function returned\nby `memoize`.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n```js\nvar slow_fn = function (name, callback) {\n    // do something\n    callback(null, result);\n};\nvar fn = async.memoize(slow_fn);\n\n// fn can now be used as if it were slow_fn\nfn('some name', function () {\n    // callback\n});\n```\n\n<a name=\"unmemoize\" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name=\"log\" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, 'hello ' + name);\n    }, 1000);\n};\n```\n```js\nnode> async.log(hello, 'world');\n'hello world'\n```\n\n---------------------------------------\n\n<a name=\"dir\" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, {hello: name});\n    }, 1000);\n};\n```\n```js\nnode> async.dir(hello, 'world');\n{hello: 'world'}\n```\n\n---------------------------------------\n\n<a name=\"noConflict\" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n","readmeFilename":"README.md","_id":"async@0.2.6","dist":{"shasum":"ad3f373d9249ae324881565582bc90e152abbd68","tarball":"http://registry.npmjs.org/async/-/async-0.2.6.tgz"},"_from":".","_npmVersion":"1.2.11","_npmUser":{"name":"caolan","email":"caolan.mcmahon@gmail.com"},"maintainers":[{"name":"caolan","email":"caolan@caolanmcmahon.com"}],"directories":{}},"0.2.7":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./lib/async","author":{"name":"Caolan McMahon"},"version":"0.2.7","repository":{"type":"git","url":"http://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"devDependencies":{"nodeunit":">0.0.0","uglify-js":"1.2.x","nodelint":">0.0.0"},"jam":{"main":"lib/async.js","include":["lib/async.js","README.md","LICENSE"]},"scripts":{"test":"nodeunit test/test-async.js"},"readme":"# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual 'functional'\nsuspects (map, reduce, filter, each…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n```javascript\nasync.map(['file1','file2','file3'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n\nasync.filter(['file1','file2','file3'], path.exists, function(results){\n    // results now equals an array of the existing files\n});\n\nasync.parallel([\n    function(){ ... },\n    function(){ ... }\n], callback);\n\nasync.series([\n    function(){ ... },\n    function(){ ... }\n]);\n```\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n## Common Pitfalls\n\n### Binding a context to an iterator\n\nThis section is really about bind, not about async. If you are wondering how to\nmake async execute your iterators in a given context, or are confused as to why\na method of another library isn't working as an iterator, study this example:\n\n```js\n// Here is a simple object with an (unnecessarily roundabout) squaring method\nvar AsyncSquaringLibrary = {\n  squareExponent: 2,\n  square: function(number, callback){ \n    var result = Math.pow(number, this.squareExponent);\n    setTimeout(function(){\n      callback(null, result);\n    }, 200);\n  }\n};\n\nasync.map([1, 2, 3], AsyncSquaringLibrary.square, function(err, result){\n  // result is [NaN, NaN, NaN]\n  // This fails because the `this.squareExponent` expression in the square\n  // function is not evaluated in the context of AsyncSquaringLibrary, and is\n  // therefore undefined.\n});\n\nasync.map([1, 2, 3], AsyncSquaringLibrary.square.bind(AsyncSquaringLibrary), function(err, result){\n  // result is [1, 4, 9]\n  // With the help of bind we can attach a context to the iterator before\n  // passing it to async. Now the square function will be executed in its \n  // 'home' AsyncSquaringLibrary context and the value of `this.squareExponent`\n  // will be as expected.\n});\n```\n\n## Download\n\nThe source is available for download from\n[GitHub](http://github.com/caolan/async).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 29.6kb Uncompressed\n\n## In the Browser\n\nSo far it's been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n```html\n<script type=\"text/javascript\" src=\"async.js\"></script>\n<script type=\"text/javascript\">\n\n    async.map(data, asyncProcess, function(err, results){\n        alert(results);\n    });\n\n</script>\n```\n\n## Documentation\n\n### Collections\n\n* [each](#each)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [doWhilst](#doWhilst)\n* [until](#until)\n* [doUntil](#doUntil)\n* [forever](#forever)\n* [waterfall](#waterfall)\n* [compose](#compose)\n* [applyEach](#applyEach)\n* [queue](#queue)\n* [cargo](#cargo)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n* [times](#times)\n* [timesSeries](#timesSeries)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name=\"forEach\" />\n<a name=\"each\" />\n### each(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the each function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err) which must be called once it has \n  completed. If no error has occured, the callback should be run without \n  arguments or with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// assuming openFiles is an array of file names and saveFile is a function\n// to save the modified contents of that file:\n\nasync.each(openFiles, saveFile, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name=\"forEachSeries\" />\n<a name=\"eachSeries\" />\n### eachSeries(arr, iterator, callback)\n\nThe same as each only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name=\"forEachLimit\" />\n<a name=\"eachLimit\" />\n### eachLimit(arr, limit, iterator, callback)\n\nThe same as each only no more than \"limit\" iterators will be simultaneously \nrunning at any time.\n\nNote that the items are not processed in batches, so there is no guarantee that\n the first \"limit\" iterator functions will complete before any others are \nstarted.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - The maximum number of iterators to run at any time.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err) which must be called once it has \n  completed. If no error has occured, the callback should be run without \n  arguments or with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// Assume documents is an array of JSON objects and requestApi is a\n// function that interacts with a rate-limited REST api.\n\nasync.eachLimit(documents, 20, requestApi, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name=\"map\" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, transformed) which must be called once \n  it has completed with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map(['file1','file2','file3'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name=\"mapSeries\" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name=\"mapLimit\" />\n### mapLimit(arr, limit, iterator, callback)\n\nThe same as map only no more than \"limit\" iterators will be simultaneously \nrunning at any time.\n\nNote that the items are not processed in batches, so there is no guarantee that\n the first \"limit\" iterator functions will complete before any others are \nstarted.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - The maximum number of iterators to run at any time.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, transformed) which must be called once \n  it has completed with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map(['file1','file2','file3'], 1, fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name=\"filter\" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n```js\nasync.filter(['file1','file2','file3'], path.exists, function(results){\n    // results now equals an array of the existing files\n});\n```\n\n---------------------------------------\n\n<a name=\"filterSeries\" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name=\"reject\" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name=\"rejectSeries\" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as reject, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name=\"reduce\" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then it's probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback(err, reduction) which accepts an optional error as its first \n  argument, and the state of the reduction as the second. If an error is \n  passed to the callback, the reduction is stopped and the main callback is \n  immediately called with the error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n```js\nasync.reduce([1,2,3], 0, function(memo, item, callback){\n    // pointless async:\n    process.nextTick(function(){\n        callback(null, memo + item)\n    });\n}, function(err, result){\n    // result is now equal to the last value of memo, which is 6\n});\n```\n\n---------------------------------------\n\n<a name=\"reduceRight\" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name=\"detect\" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n```js\nasync.detect(['file1','file2','file3'], path.exists, function(result){\n    // result now equals the first file in the list that exists\n});\n```\n\n---------------------------------------\n\n<a name=\"detectSeries\" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name=\"sortBy\" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, sortValue) which must be called once it\n  has completed with an error (which can be null) and a value to use as the sort\n  criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n```js\nasync.sortBy(['file1','file2','file3'], function(file, callback){\n    fs.stat(file, function(err, stats){\n        callback(err, stats.mtime);\n    });\n}, function(err, results){\n    // results is now the original array of files sorted by\n    // modified date\n});\n```\n\n---------------------------------------\n\n<a name=\"some\" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n```js\nasync.some(['file1','file2','file3'], path.exists, function(result){\n    // if result is true then at least one of the files exists\n});\n```\n\n---------------------------------------\n\n<a name=\"every\" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n```js\nasync.every(['file1','file2','file3'], path.exists, function(result){\n    // if result is true then every file exists\n});\n```\n\n---------------------------------------\n\n<a name=\"concat\" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, results) which must be called once it \n  has completed with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n```js\nasync.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files){\n    // files is now a list of filenames that exist in the 3 directories\n});\n```\n\n---------------------------------------\n\n<a name=\"concatSeries\" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name=\"series\" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n__Example__\n\n```js\nasync.series([\n    function(callback){\n        // do some stuff ...\n        callback(null, 'one');\n    },\n    function(callback){\n        // do some more stuff ...\n        callback(null, 'two');\n    }\n],\n// optional callback\nfunction(err, results){\n    // results is now equal to ['one', 'two']\n});\n\n\n// an example using an object instead of an array\nasync.series({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equal to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed \n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n__Example__\n\n```js\nasync.parallel([\n    function(callback){\n        setTimeout(function(){\n            callback(null, 'one');\n        }, 200);\n    },\n    function(callback){\n        setTimeout(function(){\n            callback(null, 'two');\n        }, 100);\n    }\n],\n// optional callback\nfunction(err, results){\n    // the results array will equal ['one','two'] even though\n    // the second function had a shorter timeout.\n});\n\n\n// an example using an object instead of an array\nasync.parallel({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equals to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallelLimit(tasks, limit, [callback])\n\nThe same as parallel only the tasks are executed in parallel with a maximum of \"limit\" \ntasks executing at any time.\n\nNote that the tasks are not executed in batches, so there is no guarantee that \nthe first \"limit\" tasks will complete before any others are started.\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed \n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* limit - The maximum number of tasks to run at any time.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n---------------------------------------\n\n<a name=\"whilst\" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback(err) which must be called once it has completed with an \n  optional error argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n```js\nvar count = 0;\n\nasync.whilst(\n    function () { return count < 5; },\n    function (callback) {\n        count++;\n        setTimeout(callback, 1000);\n    },\n    function (err) {\n        // 5 seconds have passed\n    }\n);\n```\n\n---------------------------------------\n\n<a name=\"doWhilst\" />\n### doWhilst(fn, test, callback)\n\nThe post check version of whilst. To reflect the difference in the order of operations `test` and `fn` arguments are switched. `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n\n---------------------------------------\n\n<a name=\"until\" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n---------------------------------------\n\n<a name=\"doUntil\" />\n### doUntil(fn, test, callback)\n\nLike doWhilst except the test is inverted. Note the argument ordering differs from `until`.\n\n---------------------------------------\n\n<a name=\"forever\" />\n### forever(fn, callback)\n\nCalls the asynchronous function 'fn' repeatedly, in series, indefinitely.\nIf an error is passed to fn's callback then 'callback' is called with the\nerror, otherwise it will never be called.\n\n---------------------------------------\n\n<a name=\"waterfall\" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a \n  callback(err, result1, result2, ...) it must call on completion. The first\n  argument is an error (which can be null) and any further arguments will be \n  passed as arguments in order to the next task.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task's callback.\n\n\n\n__Example__\n\n```js\nasync.waterfall([\n    function(callback){\n        callback(null, 'one', 'two');\n    },\n    function(arg1, arg2, callback){\n        callback(null, 'three');\n    },\n    function(arg1, callback){\n        // arg1 now equals 'three'\n        callback(null, 'done');\n    }\n], function (err, result) {\n   // result now equals 'done'    \n});\n```\n\n---------------------------------------\n<a name=\"compose\" />\n### compose(fn1, fn2...)\n\nCreates a function which is a composition of the passed asynchronous\nfunctions. Each function consumes the return value of the function that\nfollows. Composing functions f(), g() and h() would produce the result of\nf(g(h())), only this version uses callbacks to obtain the return values.\n\nEach function is executed with the `this` binding of the composed function.\n\n__Arguments__\n\n* functions... - the asynchronous functions to compose\n\n\n__Example__\n\n```js\nfunction add1(n, callback) {\n    setTimeout(function () {\n        callback(null, n + 1);\n    }, 10);\n}\n\nfunction mul3(n, callback) {\n    setTimeout(function () {\n        callback(null, n * 3);\n    }, 10);\n}\n\nvar add1mul3 = async.compose(mul3, add1);\n\nadd1mul3(4, function (err, result) {\n   // result now equals 15\n});\n```\n\n---------------------------------------\n<a name=\"applyEach\" />\n### applyEach(fns, args..., callback)\n\nApplies the provided arguments to each function in the array, calling the\ncallback after all functions have completed. If you only provide the first\nargument then it will return a function which lets you pass in the\narguments as if it were a single function call.\n\n__Arguments__\n\n* fns - the asynchronous functions to all call with the same arguments\n* args... - any number of separate arguments to pass to the function\n* callback - the final argument should be the callback, called when all\n  functions have completed processing\n\n\n__Example__\n\n```js\nasync.applyEach([enableSearch, updateSchema], 'bucket', callback);\n\n// partial application example:\nasync.each(\n    buckets,\n    async.applyEach([enableSearch, updateSchema]),\n    callback\n);\n```\n\n---------------------------------------\n\n<a name=\"applyEachSeries\" />\n### applyEachSeries(arr, iterator, callback)\n\nThe same as applyEach only the functions are applied in series.\n\n---------------------------------------\n\n<a name=\"queue\" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task's callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task, which must call its callback(err) argument when finished, with an \n  optional error as an argument.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* unshift(task, [callback]) - add a new task to the front of the queue.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a queue object with concurrency 2\n\nvar q = async.queue(function (task, callback) {\n    console.log('hello ' + task.name);\n    callback();\n}, 2);\n\n\n// assign a callback\nq.drain = function() {\n    console.log('all items have been processed');\n}\n\n// add some items to the queue\n\nq.push({name: 'foo'}, function (err) {\n    console.log('finished processing foo');\n});\nq.push({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\n\n// add some items to the queue (batch-wise)\n\nq.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function (err) {\n    console.log('finished processing bar');\n});\n\n// add some items to the front of the queue\n\nq.unshift({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\n```\n\n---------------------------------------\n\n<a name=\"cargo\" />\n### cargo(worker, [payload])\n\nCreates a cargo object with the specified payload. Tasks added to the\ncargo will be processed altogether (up to the payload limit). If the\nworker is in progress, the task is queued until it is available. Once\nthe worker has completed some tasks, each callback of those tasks is called.\n\n__Arguments__\n\n* worker(tasks, callback) - An asynchronous function for processing an array of\n  queued tasks, which must call its callback(err) argument when finished, with \n  an optional error as an argument.\n* payload - An optional integer for determining how many tasks should be\n  processed per round; if omitted, the default is unlimited.\n\n__Cargo objects__\n\nThe cargo object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* payload - an integer for determining how many tasks should be\n  process per round. This property can be changed after a cargo is created to\n  alter the payload on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a cargo object with payload 2\n\nvar cargo = async.cargo(function (tasks, callback) {\n    for(var i=0; i<tasks.length; i++){\n      console.log('hello ' + tasks[i].name);\n    }\n    callback();\n}, 2);\n\n\n// add some items\n\ncargo.push({name: 'foo'}, function (err) {\n    console.log('finished processing foo');\n});\ncargo.push({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\ncargo.push({name: 'baz'}, function (err) {\n    console.log('finished processing baz');\n});\n```\n\n---------------------------------------\n\n<a name=\"auto\" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\nNote, all functions are called with a results object as a second argument, \nso it is unsafe to pass functions in the tasks object which cannot handle the\nextra argument. For example, this snippet of code:\n\n```js\nasync.auto({\n  readData: async.apply(fs.readFile, 'data.txt', 'utf-8');\n}, callback);\n```\n\nwill have the effect of calling readFile with the results object as the last\nargument, which will fail:\n\n```js\nfs.readFile('data.txt', 'utf-8', cb, {});\n```\n\nInstead, wrap the call to readFile in a function which does not forward the \nresults object:\n\n```js\nasync.auto({\n  readData: function(cb, results){\n    fs.readFile('data.txt', 'utf-8', cb);\n  }\n}, callback);\n```\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The \n  function receives two arguments: (1) a callback(err, result) which must be \n  called when finished, passing an error (which can be null) and the result of \n  the function's execution, and (2) a results object, containing the results of\n  the previously executed functions.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. Results will always be passed\n\tbut if an error occurred, no other tasks will be performed, and the results\n\tobject will only contain partial results.\n  \n\n__Example__\n\n```js\nasync.auto({\n    get_data: function(callback){\n        // async code to get some data\n    },\n    make_folder: function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    },\n    write_file: ['get_data', 'make_folder', function(callback){\n        // once there is some data and the directory exists,\n        // write the data to a file in the directory\n        callback(null, filename);\n    }],\n    email_link: ['write_file', function(callback, results){\n        // once the file is written let's email a link to it...\n        // results.write_file contains the filename returned by write_file.\n    }]\n});\n```\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n```js\nasync.parallel([\n    function(callback){\n        // async code to get some data\n    },\n    function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    }\n],\nfunction(err, results){\n    async.series([\n        function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n        },\n        function(callback){\n            // once the file is written let's email a link to it...\n        }\n    ]);\n});\n```\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name=\"iterator\" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. It's also possible to\n'peek' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run.\n\n__Example__\n\n```js\nvar iterator = async.iterator([\n    function(){ sys.p('one'); },\n    function(){ sys.p('two'); },\n    function(){ sys.p('three'); }\n]);\n\nnode> var iterator2 = iterator();\n'one'\nnode> var iterator3 = iterator2();\n'two'\nnode> iterator3();\n'three'\nnode> var nextfn = iterator2.next();\nnode> nextfn();\n'three'\n```\n\n---------------------------------------\n\n<a name=\"apply\" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n```js\n// using apply\n\nasync.parallel([\n    async.apply(fs.writeFile, 'testfile1', 'test1'),\n    async.apply(fs.writeFile, 'testfile2', 'test2'),\n]);\n\n\n// the same process without using apply\n\nasync.parallel([\n    function(callback){\n        fs.writeFile('testfile1', 'test1', callback);\n    },\n    function(callback){\n        fs.writeFile('testfile2', 'test2', callback);\n    }\n]);\n```\n\nIt's possible to pass any number of additional arguments when calling the\ncontinuation:\n\n```js\nnode> var fn = async.apply(sys.puts, 'one');\nnode> fn('two', 'three');\none\ntwo\nthree\n```\n\n---------------------------------------\n\n<a name=\"nextTick\" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setImmediate(callback)\nif available, otherwise setTimeout(callback, 0), which means other higher priority\nevents may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n```js\nvar call_order = [];\nasync.nextTick(function(){\n    call_order.push('two');\n    // call_order now equals ['one','two']\n});\ncall_order.push('one')\n```\n\n<a name=\"times\" />\n### times(n, callback)\n\nCalls the callback n times and accumulates results in the same manner\nyou would use with async.map.\n\n__Arguments__\n\n* n - The number of times to run the function.\n* callback - The function to call n times.\n\n__Example__\n\n```js\n// Pretend this is some complicated async factory\nvar createUser = function(id, callback) {\n  callback(null, {\n    id: 'user' + id\n  })\n}\n// generate 5 users\nasync.times(5, function(n, next){\n    createUser(n, function(err, user) {\n      next(err, user)\n    })\n}, function(err, users) {\n  // we should now have 5 users\n});\n```\n\n<a name=\"timesSeries\" />\n### timesSeries(n, callback)\n\nThe same as times only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n## Utils\n\n<a name=\"memoize\" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\nThe cache of results is exposed as the `memo` property of the function returned\nby `memoize`.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n```js\nvar slow_fn = function (name, callback) {\n    // do something\n    callback(null, result);\n};\nvar fn = async.memoize(slow_fn);\n\n// fn can now be used as if it were slow_fn\nfn('some name', function () {\n    // callback\n});\n```\n\n<a name=\"unmemoize\" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name=\"log\" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, 'hello ' + name);\n    }, 1000);\n};\n```\n```js\nnode> async.log(hello, 'world');\n'hello world'\n```\n\n---------------------------------------\n\n<a name=\"dir\" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, {hello: name});\n    }, 1000);\n};\n```\n```js\nnode> async.dir(hello, 'world');\n{hello: 'world'}\n```\n\n---------------------------------------\n\n<a name=\"noConflict\" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n","readmeFilename":"README.md","_id":"async@0.2.7","dist":{"shasum":"44c5ee151aece6c4bf5364cfc7c28fe4e58f18df","tarball":"http://registry.npmjs.org/async/-/async-0.2.7.tgz"},"_from":".","_npmVersion":"1.2.11","_npmUser":{"name":"caolan","email":"caolan.mcmahon@gmail.com"},"maintainers":[{"name":"caolan","email":"caolan@caolanmcmahon.com"}],"directories":{}},"0.2.8":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./lib/async","author":{"name":"Caolan McMahon"},"version":"0.2.8","repository":{"type":"git","url":"http://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"devDependencies":{"nodeunit":">0.0.0","uglify-js":"1.2.x","nodelint":">0.0.0"},"jam":{"main":"lib/async.js","include":["lib/async.js","README.md","LICENSE"]},"scripts":{"test":"nodeunit test/test-async.js"},"readme":"# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual 'functional'\nsuspects (map, reduce, filter, each…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n```javascript\nasync.map(['file1','file2','file3'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n\nasync.filter(['file1','file2','file3'], path.exists, function(results){\n    // results now equals an array of the existing files\n});\n\nasync.parallel([\n    function(){ ... },\n    function(){ ... }\n], callback);\n\nasync.series([\n    function(){ ... },\n    function(){ ... }\n]);\n```\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n## Common Pitfalls\n\n### Binding a context to an iterator\n\nThis section is really about bind, not about async. If you are wondering how to\nmake async execute your iterators in a given context, or are confused as to why\na method of another library isn't working as an iterator, study this example:\n\n```js\n// Here is a simple object with an (unnecessarily roundabout) squaring method\nvar AsyncSquaringLibrary = {\n  squareExponent: 2,\n  square: function(number, callback){ \n    var result = Math.pow(number, this.squareExponent);\n    setTimeout(function(){\n      callback(null, result);\n    }, 200);\n  }\n};\n\nasync.map([1, 2, 3], AsyncSquaringLibrary.square, function(err, result){\n  // result is [NaN, NaN, NaN]\n  // This fails because the `this.squareExponent
13586 error registry error parsing json
13587 silly registry.get cb [ 200,
13587 silly registry.get   { date: 'Fri, 03 Jan 2014 19:36:50 GMT',
13587 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
13587 silly registry.get     etag: '"1I9ZGRGBDL3K6MN9A9JI71HM6"',
13587 silly registry.get     'content-type': 'application/json',
13587 silly registry.get     'content-length': '676833',
13587 silly registry.get     'accept-ranges': 'bytes',
13587 silly registry.get     via: '1.1 varnish',
13587 silly registry.get     age: '400',
13587 silly registry.get     'x-served-by': 'cache-jfk1021-JFK',
13587 silly registry.get     'x-cache': 'HIT',
13587 silly registry.get     'x-cache-hits': '1',
13587 silly registry.get     'x-timer': 'S1388777810.384774208,VS0,VE3',
13587 silly registry.get     vary: 'Accept',
13587 silly registry.get     'keep-alive': 'timeout=10, max=47',
13587 silly registry.get     connection: 'Keep-Alive' } ]
13588 silly lockFile 3af71045-async-0-1-22 async@~0.1.22
13589 silly lockFile 3af71045-async-0-1-22 async@~0.1.22
13590 verbose about to build C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt
13591 info C:\Users\Gaston\PhpstormProjects\frontTest\node_modules\grunt unbuild
13592 info preuninstall grunt@0.4.2
13593 info uninstall grunt@0.4.2
13594 verbose true,C:\Users\Gaston\PhpstormProjects\frontTest\node_modules,C:\Users\Gaston\PhpstormProjects\frontTest\node_modules unbuild grunt@0.4.2
13595 info postuninstall grunt@0.4.2
13596 error SyntaxError: Unexpected end of input
13596 error {"_id":"async","_rev":"177-db7e2498bd56d1f5b1c0a4da4796eb2c","name":"async","description":"Higher-order functions and common patterns for asynchronous code","dist-tags":{"latest":"0.2.9"},"versions":{"0.1.0":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.0","repository":{"type":"git","url":"http://github.com/caolan/async.git"},"bugs":{"web":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"_id":"async@0.1.0","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/async/-/async-0.1.0.tgz","shasum":"ab8ece0c40627e4e8f0e09c8fcf7c19ed0c4241c"},"directories":{}},"0.1.1":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.1","repository":{"type":"git","url":"http://github.com/caolan/async.git"},"bugs":{"web":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"_id":"async@0.1.1","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/async/-/async-0.1.1.tgz","shasum":"fb965e70dbea44c8a4b8a948472dee7d27279d5e"},"directories":{}},"0.1.2":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.2","repository":{"type":"git","url":"http://github.com/caolan/async.git"},"bugs":{"web":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"_id":"async@0.1.2","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/async/-/async-0.1.2.tgz","shasum":"be761882a64d3dc81a669f9ee3d5c28497382691"},"directories":{}},"0.1.3":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.3","repository":{"type":"git","url":"http://github.com/caolan/async.git"},"bugs":{"web":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"_id":"async@0.1.3","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/async/-/async-0.1.3.tgz","shasum":"629ca2357112d90cafc33872366b14f2695a1fbc"},"directories":{}},"0.1.4":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.4","repository":{"type":"git","url":"http://github.com/caolan/async.git"},"bugs":{"web":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"_id":"async@0.1.4","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/async/-/async-0.1.4.tgz","shasum":"29de4b98712ab8858411d8d8e3361a986c3b2c18"},"directories":{}},"0.1.5":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.5","repository":{"type":"git","url":"http://github.com/caolan/async.git"},"bugs":{"web":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"_id":"async@0.1.5","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/async/-/async-0.1.5.tgz","shasum":"9d83e3d4adb9c962fc4a30e7dd04bf1206c28ea5"},"directories":{}},"0.1.6":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.6","repository":{"type":"git","url":"http://github.com/caolan/async.git"},"bugs":{"web":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"_id":"async@0.1.6","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/async/-/async-0.1.6.tgz","shasum":"2dfb4fa1915f86056060c2e2f35a7fb8549907cc"},"directories":{}},"0.1.7":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.7","repository":{"type":"git","url":"http://github.com/caolan/async.git"},"bugs":{"web":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"_id":"async@0.1.7","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.4-1","_nodeVersion":"v0.2.5","dist":{"tarball":"http://registry.npmjs.org/async/-/async-0.1.7.tgz","shasum":"e9268d0d8cd8dcfe0db0895b27dcc4bcc5c739a5"},"directories":{}},"0.1.8":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.8","repository":{"type":"git","url":"http://github.com/caolan/async.git"},"bugs":{"web":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"_id":"async@0.1.8","engines":{"node":"*"},"_nodeSupported":true,"dist":{"tarball":"http://registry.npmjs.org/async/-/async-0.1.8.tgz","shasum":"52f2df6c0aa6a7f8333e1fbac0fbd93670cf6758"},"directories":{}},"0.1.9":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.9","repository":{"type":"git","url":"git://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"dependencies":{},"devDependencies":{},"_id":"async@0.1.9","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.1rc7","_nodeVersion":"v0.4.7","_defaultsLoaded":true,"dist":{"shasum":"f984d0739b5382c949cc3bea702d21d0dbd52040","tarball":"http://registry.npmjs.org/async/-/async-0.1.9.tgz"},"directories":{}},"0.1.10":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.10","repository":{"type":"git","url":"git://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"_npmJsonOpts":{"file":"/home/caolan/.npm/async/0.1.10/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"async@0.1.10","dependencies":{},"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.27","_nodeVersion":"v0.4.11","_defaultsLoaded":true,"dist":{"shasum":"12b32bf098fa7fc51ae3ac51441b8ba15f437cf1","tarball":"http://registry.npmjs.org/async/-/async-0.1.10.tgz"},"maintainers":[{"name":"caolan","email":"caolan@caolanmcmahon.com"}],"directories":{}},"0.1.11":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.11","repository":{"type":"git","url":"git://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"_npmJsonOpts":{"file":"/home/caolan/.npm/async/0.1.11/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"async@0.1.11","dependencies":{},"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.27","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"a397a69c6febae232d20a76a5b10d8742e2b8215","tarball":"http://registry.npmjs.org/async/-/async-0.1.11.tgz"},"maintainers":[{"name":"caolan","email":"caolan@caolanmcmahon.com"}],"directories":{}},"0.1.12":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.12","repository":{"type":"git","url":"git://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"_npmJsonOpts":{"file":"/home/caolan/.npm/async/0.1.12/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"async@0.1.12","dependencies":{},"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.27","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"ab36be6611dc63d91657128e1d65102b959d4afe","tarball":"http://registry.npmjs.org/async/-/async-0.1.12.tgz"},"maintainers":[{"name":"caolan","email":"caolan@caolanmcmahon.com"}],"directories":{}},"0.1.13":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.13","repository":{"type":"git","url":"git://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"_npmUser":{"name":"caolan","email":"caolan@caolanmcmahon.com"},"_id":"async@0.1.13","dependencies":{},"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.101","_nodeVersion":"v0.4.9","_defaultsLoaded":true,"dist":{"shasum":"f1e53ad69dab282d8e75cbec5e2c5524b6195eab","tarball":"http://registry.npmjs.org/async/-/async-0.1.13.tgz"},"maintainers":[{"name":"caolan","email":"caolan@caolanmcmahon.com"}],"directories":{}},"0.1.14":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.14","repository":{"type":"git","url":"git://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"_npmUser":{"name":"caolan","email":"caolan@caolanmcmahon.com"},"_id":"async@0.1.14","dependencies":{},"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.101","_nodeVersion":"v0.4.9","_defaultsLoaded":true,"dist":{"shasum":"0fcfaf089229fc657798203d1a4544102f7d26dc","tarball":"http://registry.npmjs.org/async/-/async-0.1.14.tgz"},"maintainers":[{"name":"caolan","email":"caolan@caolanmcmahon.com"}],"directories":{}},"0.1.15":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.15","repository":{"type":"git","url":"git://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"_npmUser":{"name":"caolan","email":"caolan@caolanmcmahon.com"},"_id":"async@0.1.15","dependencies":{},"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.101","_nodeVersion":"v0.4.9","_defaultsLoaded":true,"dist":{"shasum":"2180eaca2cf2a6ca5280d41c0585bec9b3e49bd3","tarball":"http://registry.npmjs.org/async/-/async-0.1.15.tgz"},"maintainers":[{"name":"caolan","email":"caolan@caolanmcmahon.com"}],"directories":{}},"0.1.16":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.16","repository":{"type":"git","url":"git://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"_npmUser":{"name":"caolan","email":"caolan@caolanmcmahon.com"},"_id":"async@0.1.16","dependencies":{},"devDependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-3","_nodeVersion":"v0.6.10","_defaultsLoaded":true,"dist":{"shasum":"b3a61fdc1a9193d4f64755c7600126e254223186","tarball":"http://registry.npmjs.org/async/-/async-0.1.16.tgz"},"readme":"# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual 'functional'\nsuspects (map, reduce, filter, forEach…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n    async.map(['file1','file2','file3'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n    async.filter(['file1','file2','file3'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n    async.parallel([\n        function(){ ... },\n        function(){ ... }\n    ], callback);\n\n    async.series([\n        function(){ ... },\n        function(){ ... }\n    ]);\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n\n## Download\n\nReleases are available for download from\n[GitHub](http://github.com/caolan/async/downloads).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 17.5kb Uncompressed\n\n__Production:__ [async.min.js](https://github.com/caolan/async/raw/master/dist/async.min.js) - 1.7kb Packed and Gzipped\n\n\n## In the Browser\n\nSo far its been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n    <script type=\"text/javascript\" src=\"async.js\"></script>\n    <script type=\"text/javascript\">\n\n        async.map(data, asyncProcess, function(err, results){\n            alert(results);\n        });\n\n    </script>\n\n\n## Documentation\n\n### Collections\n\n* [forEach](#forEach)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [until](#until)\n* [waterfall](#waterfall)\n* [queue](#queue)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name=\"forEach\" />\n### forEach(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the forEach function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // assuming openFiles is an array of file names and saveFile is a function\n    // to save the modified contents of that file:\n\n    async.forEach(openFiles, saveFile, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n\n---------------------------------------\n\n<a name=\"forEachSeries\" />\n### forEachSeries(arr, iterator, callback)\n\nThe same as forEach only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name=\"forEachLimit\" />\n### forEachLimit(arr, limit, iterator, callback)\n\nThe same as forEach only the iterator is applied to batches of items in the\narray, in series. The next batch of iterators is only called once the current\none has completed processing.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - How many items should be in each batch.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // Assume documents is an array of JSON objects and requestApi is a\n    // function that interacts with a rate-limited REST api.\n\n    async.forEachLimit(documents, 20, requestApi, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n---------------------------------------\n\n<a name=\"map\" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n    async.map(['file1','file2','file3'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n---------------------------------------\n\n<a name=\"mapSeries\" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name=\"filter\" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n    async.filter(['file1','file2','file3'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n---------------------------------------\n\n<a name=\"filterSeries\" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name=\"reject\" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name=\"rejectSeries\" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as filter, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name=\"reduce\" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then its probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback which accepts an optional error as its first argument, and the state\n  of the reduction as the second. If an error is passed to the callback, the\n  reduction is stopped and the main callback is immediately called with the\n  error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n    async.reduce([1,2,3], 0, function(memo, item, callback){\n        // pointless async:\n        process.nextTick(function(){\n            callback(null, memo + item)\n        });\n    }, function(err, result){\n        // result is now equal to the last value of memo, which is 6\n    });\n\n---------------------------------------\n\n<a name=\"reduceRight\" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name=\"detect\" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n    async.detect(['file1','file2','file3'], path.exists, function(result){\n        // result now equals the first file in the list that exists\n    });\n\n---------------------------------------\n\n<a name=\"detectSeries\" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name=\"sortBy\" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a value to use as the sort criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n    async.sortBy(['file1','file2','file3'], function(file, callback){\n        fs.stat(file, function(err, stats){\n            callback(err, stats.mtime);\n        });\n    }, function(err, results){\n        // results is now the original array of files sorted by\n        // modified date\n    });\n\n\n---------------------------------------\n\n<a name=\"some\" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n    async.some(['file1','file2','file3'], path.exists, function(result){\n        // if result is true then at least one of the files exists\n    });\n\n---------------------------------------\n\n<a name=\"every\" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n    async.every(['file1','file2','file3'], path.exists, function(result){\n        // if result is true then every file exists\n    });\n\n---------------------------------------\n\n<a name=\"concat\" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n    async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files){\n        // files is now a list of filenames that exist in the 3 directories\n    });\n\n---------------------------------------\n\n<a name=\"concatSeries\" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name=\"series\" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.series([\n        function(callback){\n            // do some stuff ...\n            callback(null, 'one');\n        },\n        function(callback){\n            // do some more stuff ...\n            callback(null, 'two');\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // results is now equal to ['one', 'two']\n    });\n\n\n    // an example using an object instead of an array\n    async.series({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equal to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.parallel([\n        function(callback){\n            setTimeout(function(){\n                callback(null, 'one');\n            }, 200);\n        },\n        function(callback){\n            setTimeout(function(){\n                callback(null, 'two');\n            }, 100);\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // in this case, the results array will equal ['two','one']\n        // because the functions were run in parallel and the second\n        // function had a shorter timeout before calling the callback.\n    });\n\n\n    // an example using an object instead of an array\n    async.parallel({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equals to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name=\"whilst\" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback which must be called once it has completed with an optional\n  error as the first argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n    var count = 0;\n\n    async.whilst(\n        function () { return count < 5; },\n        function (callback) {\n            count++;\n            setTimeout(callback, 1000);\n        },\n        function (err) {\n            // 5 seconds have passed\n        }\n    );\n\n\n---------------------------------------\n\n<a name=\"until\" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n\n---------------------------------------\n\n<a name=\"waterfall\" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task's callback.\n\n\n\n__Example__\n\n    async.waterfall([\n        function(callback){\n            callback(null, 'one', 'two');\n        },\n        function(arg1, arg2, callback){\n            callback(null, 'three');\n        },\n        function(arg1, callback){\n            // arg1 now equals 'three'\n            callback(null, 'done');\n        }\n    ], function (err, result) {\n       // result now equals 'done'    \n    });\n\n\n---------------------------------------\n\n<a name=\"queue\" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task's callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n    // create a queue object with concurrency 2\n\n    var q = async.queue(function (task, callback) {\n        console.log('hello ' + task.name);\n        callback();\n    }, 2);\n\n\n    // assign a callback\n    q.drain = function() {\n        console.log('all items have been processed');\n    }\n\n    // add some items to the queue\n\n    q.push({name: 'foo'}, function (err) {\n        console.log('finished processing foo');\n    });\n    q.push({name: 'bar'}, function (err) {\n        console.log('finished processing bar');\n    });\n\n    // add some items to the queue (batch-wise)\n\n    q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function (err) {\n        console.log('finished processing bar');\n    });\n\n\n---------------------------------------\n\n<a name=\"auto\" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The\n  syntax is easier to understand by looking at the example.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. If all tasks complete\n  successfully, it will receive an object containing their results.\n\n__Example__\n\n    async.auto({\n        get_data: function(callback){\n            // async code to get some data\n        },\n        make_folder: function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        },\n        write_file: ['get_data', 'make_folder', function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n            callback(null, filename);\n        }],\n        email_link: ['write_file', function(callback, results){\n            // once the file is written let's email a link to it...\n            // results.write_file contains the filename returned by write_file.\n        }]\n    });\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n    async.parallel([\n        function(callback){\n            // async code to get some data\n        },\n        function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        }\n    ],\n    function(results){\n        async.series([\n            function(callback){\n                // once there is some data and the directory exists,\n                // write the data to a file in the directory\n            },\n            email_link: function(callback){\n                // once the file is written let's email a link to it...\n            }\n        ]);\n    });\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name=\"iterator\" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. Its also possible to\n'peek' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n\n__Example__\n\n    var iterator = async.iterator([\n        function(){ sys.p('one'); },\n        function(){ sys.p('two'); },\n        function(){ sys.p('three'); }\n    ]);\n\n    node> var iterator2 = iterator();\n    'one'\n    node> var iterator3 = iterator2();\n    'two'\n    node> iterator3();\n    'three'\n    node> var nextfn = iterator2.next();\n    node> nextfn();\n    'three'\n\n\n---------------------------------------\n\n<a name=\"apply\" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n    // using apply\n\n    async.parallel([\n        async.apply(fs.writeFile, 'testfile1', 'test1'),\n        async.apply(fs.writeFile, 'testfile2', 'test2'),\n    ]);\n\n\n    // the same process without using apply\n\n    async.parallel([\n        function(callback){\n            fs.writeFile('testfile1', 'test1', callback);\n        },\n        function(callback){\n            fs.writeFile('testfile2', 'test2', callback);\n        },\n    ]);\n\nIt's possible to pass any number of additional arguments when calling the\ncontinuation:\n\n    node> var fn = async.apply(sys.puts, 'one');\n    node> fn('two', 'three');\n    one\n    two\n    three\n\n---------------------------------------\n\n<a name=\"nextTick\" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setTimeout(callback, 0),\nwhich means other higher priority events may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n    var call_order = [];\n    async.nextTick(function(){\n        call_order.push('two');\n        // call_order now equals ['one','two]\n    });\n    call_order.push('one')\n\n\n## Utils\n\n<a name=\"memoize\" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n    var slow_fn = function (name, callback) {\n        // do something\n        callback(null, result);\n    };\n    var fn = async.memoize(slow_fn);\n\n    // fn can now be used as if it were slow_fn\n    fn('some name', function () {\n        // callback\n    });\n\n<a name=\"unmemoize\" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name=\"log\" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, 'hello ' + name);\n        }, 1000);\n    };\n\n    node> async.log(hello, 'world');\n    'hello world'\n\n\n---------------------------------------\n\n<a name=\"dir\" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, {hello: name});\n        }, 1000);\n    };\n\n    node> async.dir(hello, 'world');\n    {hello: 'world'}\n\n\n---------------------------------------\n\n<a name=\"noConflict\" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n","maintainers":[{"name":"caolan","email":"caolan@caolanmcmahon.com"}],"directories":{}},"0.1.17":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.17","repository":{"type":"git","url":"git://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"dependencies":{"uglify-js":"1.2.x"},"devDependencies":{"nodeunit":">0.0.0","nodelint":">0.0.0"},"scripts":{"preinstall":"make clean","install":"make build","test":"make test"},"_npmUser":{"name":"caolan","email":"caolan@caolanmcmahon.com"},"_id":"async@0.1.17","optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.1","_nodeVersion":"v0.6.11","_defaultsLoaded":true,"dist":{"shasum":"03524a379e974dc9ee5c811c6ee3815d7bc54f6e","tarball":"http://registry.npmjs.org/async/-/async-0.1.17.tgz"},"readme":"# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual 'functional'\nsuspects (map, reduce, filter, forEach…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n    async.map(['file1','file2','file3'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n    async.filter(['file1','file2','file3'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n    async.parallel([\n        function(){ ... },\n        function(){ ... }\n    ], callback);\n\n    async.series([\n        function(){ ... },\n        function(){ ... }\n    ]);\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n\n## Download\n\nReleases are available for download from\n[GitHub](http://github.com/caolan/async/downloads).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 17.5kb Uncompressed\n\n__Production:__ [async.min.js](https://github.com/caolan/async/raw/master/dist/async.min.js) - 1.7kb Packed and Gzipped\n\n\n## In the Browser\n\nSo far its been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n    <script type=\"text/javascript\" src=\"async.js\"></script>\n    <script type=\"text/javascript\">\n\n        async.map(data, asyncProcess, function(err, results){\n            alert(results);\n        });\n\n    </script>\n\n\n## Documentation\n\n### Collections\n\n* [forEach](#forEach)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [until](#until)\n* [waterfall](#waterfall)\n* [queue](#queue)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name=\"forEach\" />\n### forEach(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the forEach function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // assuming openFiles is an array of file names and saveFile is a function\n    // to save the modified contents of that file:\n\n    async.forEach(openFiles, saveFile, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n\n---------------------------------------\n\n<a name=\"forEachSeries\" />\n### forEachSeries(arr, iterator, callback)\n\nThe same as forEach only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name=\"forEachLimit\" />\n### forEachLimit(arr, limit, iterator, callback)\n\nThe same as forEach only the iterator is applied to batches of items in the\narray, in series. The next batch of iterators is only called once the current\none has completed processing.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - How many items should be in each batch.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // Assume documents is an array of JSON objects and requestApi is a\n    // function that interacts with a rate-limited REST api.\n\n    async.forEachLimit(documents, 20, requestApi, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n---------------------------------------\n\n<a name=\"map\" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n    async.map(['file1','file2','file3'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n---------------------------------------\n\n<a name=\"mapSeries\" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name=\"filter\" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n    async.filter(['file1','file2','file3'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n---------------------------------------\n\n<a name=\"filterSeries\" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name=\"reject\" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name=\"rejectSeries\" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as filter, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name=\"reduce\" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then its probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback which accepts an optional error as its first argument, and the state\n  of the reduction as the second. If an error is passed to the callback, the\n  reduction is stopped and the main callback is immediately called with the\n  error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n    async.reduce([1,2,3], 0, function(memo, item, callback){\n        // pointless async:\n        process.nextTick(function(){\n            callback(null, memo + item)\n        });\n    }, function(err, result){\n        // result is now equal to the last value of memo, which is 6\n    });\n\n---------------------------------------\n\n<a name=\"reduceRight\" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name=\"detect\" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n    async.detect(['file1','file2','file3'], path.exists, function(result){\n        // result now equals the first file in the list that exists\n    });\n\n---------------------------------------\n\n<a name=\"detectSeries\" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name=\"sortBy\" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a value to use as the sort criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n    async.sortBy(['file1','file2','file3'], function(file, callback){\n        fs.stat(file, function(err, stats){\n            callback(err, stats.mtime);\n        });\n    }, function(err, results){\n        // results is now the original array of files sorted by\n        // modified date\n    });\n\n\n---------------------------------------\n\n<a name=\"some\" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n    async.some(['file1','file2','file3'], path.exists, function(result){\n        // if result is true then at least one of the files exists\n    });\n\n---------------------------------------\n\n<a name=\"every\" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n    async.every(['file1','file2','file3'], path.exists, function(result){\n        // if result is true then every file exists\n    });\n\n---------------------------------------\n\n<a name=\"concat\" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n    async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files){\n        // files is now a list of filenames that exist in the 3 directories\n    });\n\n---------------------------------------\n\n<a name=\"concatSeries\" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name=\"series\" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.series([\n        function(callback){\n            // do some stuff ...\n            callback(null, 'one');\n        },\n        function(callback){\n            // do some more stuff ...\n            callback(null, 'two');\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // results is now equal to ['one', 'two']\n    });\n\n\n    // an example using an object instead of an array\n    async.series({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equal to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.parallel([\n        function(callback){\n            setTimeout(function(){\n                callback(null, 'one');\n            }, 200);\n        },\n        function(callback){\n            setTimeout(function(){\n                callback(null, 'two');\n            }, 100);\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // in this case, the results array will equal ['two','one']\n        // because the functions were run in parallel and the second\n        // function had a shorter timeout before calling the callback.\n    });\n\n\n    // an example using an object instead of an array\n    async.parallel({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equals to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name=\"whilst\" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback which must be called once it has completed with an optional\n  error as the first argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n    var count = 0;\n\n    async.whilst(\n        function () { return count < 5; },\n        function (callback) {\n            count++;\n            setTimeout(callback, 1000);\n        },\n        function (err) {\n            // 5 seconds have passed\n        }\n    );\n\n\n---------------------------------------\n\n<a name=\"until\" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n\n---------------------------------------\n\n<a name=\"waterfall\" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task's callback.\n\n\n\n__Example__\n\n    async.waterfall([\n        function(callback){\n            callback(null, 'one', 'two');\n        },\n        function(arg1, arg2, callback){\n            callback(null, 'three');\n        },\n        function(arg1, callback){\n            // arg1 now equals 'three'\n            callback(null, 'done');\n        }\n    ], function (err, result) {\n       // result now equals 'done'    \n    });\n\n\n---------------------------------------\n\n<a name=\"queue\" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task's callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n    // create a queue object with concurrency 2\n\n    var q = async.queue(function (task, callback) {\n        console.log('hello ' + task.name);\n        callback();\n    }, 2);\n\n\n    // assign a callback\n    q.drain = function() {\n        console.log('all items have been processed');\n    }\n\n    // add some items to the queue\n\n    q.push({name: 'foo'}, function (err) {\n        console.log('finished processing foo');\n    });\n    q.push({name: 'bar'}, function (err) {\n        console.log('finished processing bar');\n    });\n\n    // add some items to the queue (batch-wise)\n\n    q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function (err) {\n        console.log('finished processing bar');\n    });\n\n\n---------------------------------------\n\n<a name=\"auto\" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The\n  syntax is easier to understand by looking at the example.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. If all tasks complete\n  successfully, it will receive an object containing their results.\n\n__Example__\n\n    async.auto({\n        get_data: function(callback){\n            // async code to get some data\n        },\n        make_folder: function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        },\n        write_file: ['get_data', 'make_folder', function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n            callback(null, filename);\n        }],\n        email_link: ['write_file', function(callback, results){\n            // once the file is written let's email a link to it...\n            // results.write_file contains the filename returned by write_file.\n        }]\n    });\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n    async.parallel([\n        function(callback){\n            // async code to get some data\n        },\n        function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        }\n    ],\n    function(results){\n        async.series([\n            function(callback){\n                // once there is some data and the directory exists,\n                // write the data to a file in the directory\n            },\n            email_link: function(callback){\n                // once the file is written let's email a link to it...\n            }\n        ]);\n    });\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name=\"iterator\" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. Its also possible to\n'peek' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n\n__Example__\n\n    var iterator = async.iterator([\n        function(){ sys.p('one'); },\n        function(){ sys.p('two'); },\n        function(){ sys.p('three'); }\n    ]);\n\n    node> var iterator2 = iterator();\n    'one'\n    node> var iterator3 = iterator2();\n    'two'\n    node> iterator3();\n    'three'\n    node> var nextfn = iterator2.next();\n    node> nextfn();\n    'three'\n\n\n---------------------------------------\n\n<a name=\"apply\" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n    // using apply\n\n    async.parallel([\n        async.apply(fs.writeFile, 'testfile1', 'test1'),\n        async.apply(fs.writeFile, 'testfile2', 'test2'),\n    ]);\n\n\n    // the same process without using apply\n\n    async.parallel([\n        function(callback){\n            fs.writeFile('testfile1', 'test1', callback);\n        },\n        function(callback){\n            fs.writeFile('testfile2', 'test2', callback);\n        },\n    ]);\n\nIt's possible to pass any number of additional arguments when calling the\ncontinuation:\n\n    node> var fn = async.apply(sys.puts, 'one');\n    node> fn('two', 'three');\n    one\n    two\n    three\n\n---------------------------------------\n\n<a name=\"nextTick\" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setTimeout(callback, 0),\nwhich means other higher priority events may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n    var call_order = [];\n    async.nextTick(function(){\n        call_order.push('two');\n        // call_order now equals ['one','two]\n    });\n    call_order.push('one')\n\n\n## Utils\n\n<a name=\"memoize\" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n    var slow_fn = function (name, callback) {\n        // do something\n        callback(null, result);\n    };\n    var fn = async.memoize(slow_fn);\n\n    // fn can now be used as if it were slow_fn\n    fn('some name', function () {\n        // callback\n    });\n\n<a name=\"unmemoize\" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name=\"log\" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, 'hello ' + name);\n        }, 1000);\n    };\n\n    node> async.log(hello, 'world');\n    'hello world'\n\n\n---------------------------------------\n\n<a name=\"dir\" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, {hello: name});\n        }, 1000);\n    };\n\n    node> async.dir(hello, 'world');\n    {hello: 'world'}\n\n\n---------------------------------------\n\n<a name=\"noConflict\" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n","maintainers":[{"name":"caolan","email":"caolan@caolanmcmahon.com"}],"directories":{}},"0.1.18":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.18","repository":{"type":"git","url":"git://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"devDependencies":{"nodeunit":">0.0.0","uglify-js":"1.2.x","nodelint":">0.0.0"},"_npmUser":{"name":"caolan","email":"caolan@caolanmcmahon.com"},"_id":"async@0.1.18","dependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.1","_nodeVersion":"v0.6.11","_defaultsLoaded":true,"dist":{"shasum":"c59c923920b76d5bf23248c04433920c4d45086a","tarball":"http://registry.npmjs.org/async/-/async-0.1.18.tgz"},"readme":"# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual 'functional'\nsuspects (map, reduce, filter, forEach…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n    async.map(['file1','file2','file3'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n    async.filter(['file1','file2','file3'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n    async.parallel([\n        function(){ ... },\n        function(){ ... }\n    ], callback);\n\n    async.series([\n        function(){ ... },\n        function(){ ... }\n    ]);\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n\n## Download\n\nReleases are available for download from\n[GitHub](http://github.com/caolan/async/downloads).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 17.5kb Uncompressed\n\n__Production:__ [async.min.js](https://github.com/caolan/async/raw/master/dist/async.min.js) - 1.7kb Packed and Gzipped\n\n\n## In the Browser\n\nSo far its been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n    <script type=\"text/javascript\" src=\"async.js\"></script>\n    <script type=\"text/javascript\">\n\n        async.map(data, asyncProcess, function(err, results){\n            alert(results);\n        });\n\n    </script>\n\n\n## Documentation\n\n### Collections\n\n* [forEach](#forEach)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [until](#until)\n* [waterfall](#waterfall)\n* [queue](#queue)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name=\"forEach\" />\n### forEach(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the forEach function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // assuming openFiles is an array of file names and saveFile is a function\n    // to save the modified contents of that file:\n\n    async.forEach(openFiles, saveFile, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n\n---------------------------------------\n\n<a name=\"forEachSeries\" />\n### forEachSeries(arr, iterator, callback)\n\nThe same as forEach only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name=\"forEachLimit\" />\n### forEachLimit(arr, limit, iterator, callback)\n\nThe same as forEach only the iterator is applied to batches of items in the\narray, in series. The next batch of iterators is only called once the current\none has completed processing.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - How many items should be in each batch.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // Assume documents is an array of JSON objects and requestApi is a\n    // function that interacts with a rate-limited REST api.\n\n    async.forEachLimit(documents, 20, requestApi, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n---------------------------------------\n\n<a name=\"map\" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n    async.map(['file1','file2','file3'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n---------------------------------------\n\n<a name=\"mapSeries\" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name=\"filter\" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n    async.filter(['file1','file2','file3'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n---------------------------------------\n\n<a name=\"filterSeries\" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name=\"reject\" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name=\"rejectSeries\" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as filter, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name=\"reduce\" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then its probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback which accepts an optional error as its first argument, and the state\n  of the reduction as the second. If an error is passed to the callback, the\n  reduction is stopped and the main callback is immediately called with the\n  error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n    async.reduce([1,2,3], 0, function(memo, item, callback){\n        // pointless async:\n        process.nextTick(function(){\n            callback(null, memo + item)\n        });\n    }, function(err, result){\n        // result is now equal to the last value of memo, which is 6\n    });\n\n---------------------------------------\n\n<a name=\"reduceRight\" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name=\"detect\" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n    async.detect(['file1','file2','file3'], path.exists, function(result){\n        // result now equals the first file in the list that exists\n    });\n\n---------------------------------------\n\n<a name=\"detectSeries\" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name=\"sortBy\" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a value to use as the sort criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n    async.sortBy(['file1','file2','file3'], function(file, callback){\n        fs.stat(file, function(err, stats){\n            callback(err, stats.mtime);\n        });\n    }, function(err, results){\n        // results is now the original array of files sorted by\n        // modified date\n    });\n\n\n---------------------------------------\n\n<a name=\"some\" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n    async.some(['file1','file2','file3'], path.exists, function(result){\n        // if result is true then at least one of the files exists\n    });\n\n---------------------------------------\n\n<a name=\"every\" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n    async.every(['file1','file2','file3'], path.exists, function(result){\n        // if result is true then every file exists\n    });\n\n---------------------------------------\n\n<a name=\"concat\" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n    async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files){\n        // files is now a list of filenames that exist in the 3 directories\n    });\n\n---------------------------------------\n\n<a name=\"concatSeries\" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name=\"series\" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.series([\n        function(callback){\n            // do some stuff ...\n            callback(null, 'one');\n        },\n        function(callback){\n            // do some more stuff ...\n            callback(null, 'two');\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // results is now equal to ['one', 'two']\n    });\n\n\n    // an example using an object instead of an array\n    async.series({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equal to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.parallel([\n        function(callback){\n            setTimeout(function(){\n                callback(null, 'one');\n            }, 200);\n        },\n        function(callback){\n            setTimeout(function(){\n                callback(null, 'two');\n            }, 100);\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // in this case, the results array will equal ['two','one']\n        // because the functions were run in parallel and the second\n        // function had a shorter timeout before calling the callback.\n    });\n\n\n    // an example using an object instead of an array\n    async.parallel({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equals to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name=\"whilst\" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback which must be called once it has completed with an optional\n  error as the first argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n    var count = 0;\n\n    async.whilst(\n        function () { return count < 5; },\n        function (callback) {\n            count++;\n            setTimeout(callback, 1000);\n        },\n        function (err) {\n            // 5 seconds have passed\n        }\n    );\n\n\n---------------------------------------\n\n<a name=\"until\" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n\n---------------------------------------\n\n<a name=\"waterfall\" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task's callback.\n\n\n\n__Example__\n\n    async.waterfall([\n        function(callback){\n            callback(null, 'one', 'two');\n        },\n        function(arg1, arg2, callback){\n            callback(null, 'three');\n        },\n        function(arg1, callback){\n            // arg1 now equals 'three'\n            callback(null, 'done');\n        }\n    ], function (err, result) {\n       // result now equals 'done'    \n    });\n\n\n---------------------------------------\n\n<a name=\"queue\" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task's callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n    // create a queue object with concurrency 2\n\n    var q = async.queue(function (task, callback) {\n        console.log('hello ' + task.name);\n        callback();\n    }, 2);\n\n\n    // assign a callback\n    q.drain = function() {\n        console.log('all items have been processed');\n    }\n\n    // add some items to the queue\n\n    q.push({name: 'foo'}, function (err) {\n        console.log('finished processing foo');\n    });\n    q.push({name: 'bar'}, function (err) {\n        console.log('finished processing bar');\n    });\n\n    // add some items to the queue (batch-wise)\n\n    q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function (err) {\n        console.log('finished processing bar');\n    });\n\n\n---------------------------------------\n\n<a name=\"auto\" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The\n  syntax is easier to understand by looking at the example.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. If all tasks complete\n  successfully, it will receive an object containing their results.\n\n__Example__\n\n    async.auto({\n        get_data: function(callback){\n            // async code to get some data\n        },\n        make_folder: function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        },\n        write_file: ['get_data', 'make_folder', function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n            callback(null, filename);\n        }],\n        email_link: ['write_file', function(callback, results){\n            // once the file is written let's email a link to it...\n            // results.write_file contains the filename returned by write_file.\n        }]\n    });\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n    async.parallel([\n        function(callback){\n            // async code to get some data\n        },\n        function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        }\n    ],\n    function(results){\n        async.series([\n            function(callback){\n                // once there is some data and the directory exists,\n                // write the data to a file in the directory\n            },\n            email_link: function(callback){\n                // once the file is written let's email a link to it...\n            }\n        ]);\n    });\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name=\"iterator\" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. Its also possible to\n'peek' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n\n__Example__\n\n    var iterator = async.iterator([\n        function(){ sys.p('one'); },\n        function(){ sys.p('two'); },\n        function(){ sys.p('three'); }\n    ]);\n\n    node> var iterator2 = iterator();\n    'one'\n    node> var iterator3 = iterator2();\n    'two'\n    node> iterator3();\n    'three'\n    node> var nextfn = iterator2.next();\n    node> nextfn();\n    'three'\n\n\n---------------------------------------\n\n<a name=\"apply\" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n    // using apply\n\n    async.parallel([\n        async.apply(fs.writeFile, 'testfile1', 'test1'),\n        async.apply(fs.writeFile, 'testfile2', 'test2'),\n    ]);\n\n\n    // the same process without using apply\n\n    async.parallel([\n        function(callback){\n            fs.writeFile('testfile1', 'test1', callback);\n        },\n        function(callback){\n            fs.writeFile('testfile2', 'test2', callback);\n        },\n    ]);\n\nIt's possible to pass any number of additional arguments when calling the\ncontinuation:\n\n    node> var fn = async.apply(sys.puts, 'one');\n    node> fn('two', 'three');\n    one\n    two\n    three\n\n---------------------------------------\n\n<a name=\"nextTick\" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setTimeout(callback, 0),\nwhich means other higher priority events may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n    var call_order = [];\n    async.nextTick(function(){\n        call_order.push('two');\n        // call_order now equals ['one','two]\n    });\n    call_order.push('one')\n\n\n## Utils\n\n<a name=\"memoize\" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n    var slow_fn = function (name, callback) {\n        // do something\n        callback(null, result);\n    };\n    var fn = async.memoize(slow_fn);\n\n    // fn can now be used as if it were slow_fn\n    fn('some name', function () {\n        // callback\n    });\n\n<a name=\"unmemoize\" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name=\"log\" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, 'hello ' + name);\n        }, 1000);\n    };\n\n    node> async.log(hello, 'world');\n    'hello world'\n\n\n---------------------------------------\n\n<a name=\"dir\" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, {hello: name});\n        }, 1000);\n    };\n\n    node> async.dir(hello, 'world');\n    {hello: 'world'}\n\n\n---------------------------------------\n\n<a name=\"noConflict\" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n","maintainers":[{"name":"caolan","email":"caolan@caolanmcmahon.com"}],"directories":{}},"0.1.19":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.19","repository":{"type":"git","url":"git://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"devDependencies":{"nodeunit":">0.0.0","uglify-js":"1.2.x","nodelint":">0.0.0"},"_npmUser":{"name":"caolan","email":"caolan@caolanmcmahon.com"},"_id":"async@0.1.19","dependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.21","_nodeVersion":"v0.6.18","_defaultsLoaded":true,"dist":{"shasum":"4fd6125a70f841fb10b14aeec6e23cf1479c71a7","tarball":"http://registry.npmjs.org/async/-/async-0.1.19.tgz"},"readme":"# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual 'functional'\nsuspects (map, reduce, filter, forEach…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n    async.map(['file1','file2','file3'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n    async.filter(['file1','file2','file3'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n    async.parallel([\n        function(){ ... },\n        function(){ ... }\n    ], callback);\n\n    async.series([\n        function(){ ... },\n        function(){ ... }\n    ]);\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n\n## Download\n\nReleases are available for download from\n[GitHub](http://github.com/caolan/async/downloads).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 17.5kb Uncompressed\n\n__Production:__ [async.min.js](https://github.com/caolan/async/raw/master/dist/async.min.js) - 1.7kb Packed and Gzipped\n\n\n## In the Browser\n\nSo far its been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n    <script type=\"text/javascript\" src=\"async.js\"></script>\n    <script type=\"text/javascript\">\n\n        async.map(data, asyncProcess, function(err, results){\n            alert(results);\n        });\n\n    </script>\n\n\n## Documentation\n\n### Collections\n\n* [forEach](#forEach)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [until](#until)\n* [waterfall](#waterfall)\n* [queue](#queue)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name=\"forEach\" />\n### forEach(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the forEach function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // assuming openFiles is an array of file names and saveFile is a function\n    // to save the modified contents of that file:\n\n    async.forEach(openFiles, saveFile, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n\n---------------------------------------\n\n<a name=\"forEachSeries\" />\n### forEachSeries(arr, iterator, callback)\n\nThe same as forEach only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name=\"forEachLimit\" />\n### forEachLimit(arr, limit, iterator, callback)\n\nThe same as forEach only the iterator is applied to batches of items in the\narray, in series. The next batch of iterators is only called once the current\none has completed processing.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - How many items should be in each batch.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // Assume documents is an array of JSON objects and requestApi is a\n    // function that interacts with a rate-limited REST api.\n\n    async.forEachLimit(documents, 20, requestApi, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n---------------------------------------\n\n<a name=\"map\" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n    async.map(['file1','file2','file3'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n---------------------------------------\n\n<a name=\"mapSeries\" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name=\"filter\" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n    async.filter(['file1','file2','file3'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n---------------------------------------\n\n<a name=\"filterSeries\" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name=\"reject\" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name=\"rejectSeries\" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as filter, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name=\"reduce\" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then its probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback which accepts an optional error as its first argument, and the state\n  of the reduction as the second. If an error is passed to the callback, the\n  reduction is stopped and the main callback is immediately called with the\n  error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n    async.reduce([1,2,3], 0, function(memo, item, callback){\n        // pointless async:\n        process.nextTick(function(){\n            callback(null, memo + item)\n        });\n    }, function(err, result){\n        // result is now equal to the last value of memo, which is 6\n    });\n\n---------------------------------------\n\n<a name=\"reduceRight\" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name=\"detect\" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n    async.detect(['file1','file2','file3'], path.exists, function(result){\n        // result now equals the first file in the list that exists\n    });\n\n---------------------------------------\n\n<a name=\"detectSeries\" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name=\"sortBy\" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a value to use as the sort criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n    async.sortBy(['file1','file2','file3'], function(file, callback){\n        fs.stat(file, function(err, stats){\n            callback(err, stats.mtime);\n        });\n    }, function(err, results){\n        // results is now the original array of files sorted by\n        // modified date\n    });\n\n\n---------------------------------------\n\n<a name=\"some\" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n    async.some(['file1','file2','file3'], path.exists, function(result){\n        // if result is true then at least one of the files exists\n    });\n\n---------------------------------------\n\n<a name=\"every\" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n    async.every(['file1','file2','file3'], path.exists, function(result){\n        // if result is true then every file exists\n    });\n\n---------------------------------------\n\n<a name=\"concat\" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n    async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files){\n        // files is now a list of filenames that exist in the 3 directories\n    });\n\n---------------------------------------\n\n<a name=\"concatSeries\" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name=\"series\" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.series([\n        function(callback){\n            // do some stuff ...\n            callback(null, 'one');\n        },\n        function(callback){\n            // do some more stuff ...\n            callback(null, 'two');\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // results is now equal to ['one', 'two']\n    });\n\n\n    // an example using an object instead of an array\n    async.series({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equal to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.parallel([\n        function(callback){\n            setTimeout(function(){\n                callback(null, 'one');\n            }, 200);\n        },\n        function(callback){\n            setTimeout(function(){\n                callback(null, 'two');\n            }, 100);\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // the results array will equal ['one','two'] even though\n        // the second function had a shorter timeout.\n    });\n\n\n    // an example using an object instead of an array\n    async.parallel({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equals to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name=\"whilst\" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback which must be called once it has completed with an optional\n  error as the first argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n    var count = 0;\n\n    async.whilst(\n        function () { return count < 5; },\n        function (callback) {\n            count++;\n            setTimeout(callback, 1000);\n        },\n        function (err) {\n            // 5 seconds have passed\n        }\n    );\n\n\n---------------------------------------\n\n<a name=\"until\" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n\n---------------------------------------\n\n<a name=\"waterfall\" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task's callback.\n\n\n\n__Example__\n\n    async.waterfall([\n        function(callback){\n            callback(null, 'one', 'two');\n        },\n        function(arg1, arg2, callback){\n            callback(null, 'three');\n        },\n        function(arg1, callback){\n            // arg1 now equals 'three'\n            callback(null, 'done');\n        }\n    ], function (err, result) {\n       // result now equals 'done'    \n    });\n\n\n---------------------------------------\n\n<a name=\"queue\" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task's callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n    // create a queue object with concurrency 2\n\n    var q = async.queue(function (task, callback) {\n        console.log('hello ' + task.name);\n        callback();\n    }, 2);\n\n\n    // assign a callback\n    q.drain = function() {\n        console.log('all items have been processed');\n    }\n\n    // add some items to the queue\n\n    q.push({name: 'foo'}, function (err) {\n        console.log('finished processing foo');\n    });\n    q.push({name: 'bar'}, function (err) {\n        console.log('finished processing bar');\n    });\n\n    // add some items to the queue (batch-wise)\n\n    q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function (err) {\n        console.log('finished processing bar');\n    });\n\n\n---------------------------------------\n\n<a name=\"auto\" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The\n  syntax is easier to understand by looking at the example.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. If all tasks complete\n  successfully, it will receive an object containing their results.\n\n__Example__\n\n    async.auto({\n        get_data: function(callback){\n            // async code to get some data\n        },\n        make_folder: function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        },\n        write_file: ['get_data', 'make_folder', function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n            callback(null, filename);\n        }],\n        email_link: ['write_file', function(callback, results){\n            // once the file is written let's email a link to it...\n            // results.write_file contains the filename returned by write_file.\n        }]\n    });\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n    async.parallel([\n        function(callback){\n            // async code to get some data\n        },\n        function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        }\n    ],\n    function(results){\n        async.series([\n            function(callback){\n                // once there is some data and the directory exists,\n                // write the data to a file in the directory\n            },\n            email_link: function(callback){\n                // once the file is written let's email a link to it...\n            }\n        ]);\n    });\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name=\"iterator\" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. Its also possible to\n'peek' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n\n__Example__\n\n    var iterator = async.iterator([\n        function(){ sys.p('one'); },\n        function(){ sys.p('two'); },\n        function(){ sys.p('three'); }\n    ]);\n\n    node> var iterator2 = iterator();\n    'one'\n    node> var iterator3 = iterator2();\n    'two'\n    node> iterator3();\n    'three'\n    node> var nextfn = iterator2.next();\n    node> nextfn();\n    'three'\n\n\n---------------------------------------\n\n<a name=\"apply\" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n    // using apply\n\n    async.parallel([\n        async.apply(fs.writeFile, 'testfile1', 'test1'),\n        async.apply(fs.writeFile, 'testfile2', 'test2'),\n    ]);\n\n\n    // the same process without using apply\n\n    async.parallel([\n        function(callback){\n            fs.writeFile('testfile1', 'test1', callback);\n        },\n        function(callback){\n            fs.writeFile('testfile2', 'test2', callback);\n        },\n    ]);\n\nIt's possible to pass any number of additional arguments when calling the\ncontinuation:\n\n    node> var fn = async.apply(sys.puts, 'one');\n    node> fn('two', 'three');\n    one\n    two\n    three\n\n---------------------------------------\n\n<a name=\"nextTick\" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setTimeout(callback, 0),\nwhich means other higher priority events may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n    var call_order = [];\n    async.nextTick(function(){\n        call_order.push('two');\n        // call_order now equals ['one','two]\n    });\n    call_order.push('one')\n\n\n## Utils\n\n<a name=\"memoize\" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n    var slow_fn = function (name, callback) {\n        // do something\n        callback(null, result);\n    };\n    var fn = async.memoize(slow_fn);\n\n    // fn can now be used as if it were slow_fn\n    fn('some name', function () {\n        // callback\n    });\n\n<a name=\"unmemoize\" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name=\"log\" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, 'hello ' + name);\n        }, 1000);\n    };\n\n    node> async.log(hello, 'world');\n    'hello world'\n\n\n---------------------------------------\n\n<a name=\"dir\" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, {hello: name});\n        }, 1000);\n    };\n\n    node> async.dir(hello, 'world');\n    {hello: 'world'}\n\n\n---------------------------------------\n\n<a name=\"noConflict\" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n","maintainers":[{"name":"caolan","email":"caolan@caolanmcmahon.com"}],"directories":{}},"0.1.20":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.20","repository":{"type":"git","url":"git://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"devDependencies":{"nodeunit":">0.0.0","uglify-js":"1.2.x","nodelint":">0.0.0"},"_npmUser":{"name":"caolan","email":"caolan@caolanmcmahon.com"},"_id":"async@0.1.20","dependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.21","_nodeVersion":"v0.6.18","_defaultsLoaded":true,"dist":{"shasum":"ba0e47b08ae972e04b5215de28539b313482ede5","tarball":"http://registry.npmjs.org/async/-/async-0.1.20.tgz"},"readme":"# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual 'functional'\nsuspects (map, reduce, filter, forEach…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n    async.map(['file1','file2','file3'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n    async.filter(['file1','file2','file3'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n    async.parallel([\n        function(){ ... },\n        function(){ ... }\n    ], callback);\n\n    async.series([\n        function(){ ... },\n        function(){ ... }\n    ]);\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n\n## Download\n\nReleases are available for download from\n[GitHub](http://github.com/caolan/async/downloads).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 17.5kb Uncompressed\n\n__Production:__ [async.min.js](https://github.com/caolan/async/raw/master/dist/async.min.js) - 1.7kb Packed and Gzipped\n\n\n## In the Browser\n\nSo far its been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n    <script type=\"text/javascript\" src=\"async.js\"></script>\n    <script type=\"text/javascript\">\n\n        async.map(data, asyncProcess, function(err, results){\n            alert(results);\n        });\n\n    </script>\n\n\n## Documentation\n\n### Collections\n\n* [forEach](#forEach)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [until](#until)\n* [waterfall](#waterfall)\n* [queue](#queue)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name=\"forEach\" />\n### forEach(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the forEach function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // assuming openFiles is an array of file names and saveFile is a function\n    // to save the modified contents of that file:\n\n    async.forEach(openFiles, saveFile, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n\n---------------------------------------\n\n<a name=\"forEachSeries\" />\n### forEachSeries(arr, iterator, callback)\n\nThe same as forEach only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name=\"forEachLimit\" />\n### forEachLimit(arr, limit, iterator, callback)\n\nThe same as forEach only the iterator is applied to batches of items in the\narray, in series. The next batch of iterators is only called once the current\none has completed processing.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - How many items should be in each batch.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // Assume documents is an array of JSON objects and requestApi is a\n    // function that interacts with a rate-limited REST api.\n\n    async.forEachLimit(documents, 20, requestApi, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n---------------------------------------\n\n<a name=\"map\" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n    async.map(['file1','file2','file3'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n---------------------------------------\n\n<a name=\"mapSeries\" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name=\"filter\" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n    async.filter(['file1','file2','file3'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n---------------------------------------\n\n<a name=\"filterSeries\" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name=\"reject\" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name=\"rejectSeries\" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as filter, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name=\"reduce\" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then its probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback which accepts an optional error as its first argument, and the state\n  of the reduction as the second. If an error is passed to the callback, the\n  reduction is stopped and the main callback is immediately called with the\n  error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n    async.reduce([1,2,3], 0, function(memo, item, callback){\n        // pointless async:\n        process.nextTick(function(){\n            callback(null, memo + item)\n        });\n    }, function(err, result){\n        // result is now equal to the last value of memo, which is 6\n    });\n\n---------------------------------------\n\n<a name=\"reduceRight\" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name=\"detect\" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n    async.detect(['file1','file2','file3'], path.exists, function(result){\n        // result now equals the first file in the list that exists\n    });\n\n---------------------------------------\n\n<a name=\"detectSeries\" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name=\"sortBy\" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a value to use as the sort criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n    async.sortBy(['file1','file2','file3'], function(file, callback){\n        fs.stat(file, function(err, stats){\n            callback(err, stats.mtime);\n        });\n    }, function(err, results){\n        // results is now the original array of files sorted by\n        // modified date\n    });\n\n\n---------------------------------------\n\n<a name=\"some\" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n    async.some(['file1','file2','file3'], path.exists, function(result){\n        // if result is true then at least one of the files exists\n    });\n\n---------------------------------------\n\n<a name=\"every\" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n    async.every(['file1','file2','file3'], path.exists, function(result){\n        // if result is true then every file exists\n    });\n\n---------------------------------------\n\n<a name=\"concat\" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n    async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files){\n        // files is now a list of filenames that exist in the 3 directories\n    });\n\n---------------------------------------\n\n<a name=\"concatSeries\" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name=\"series\" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.series([\n        function(callback){\n            // do some stuff ...\n            callback(null, 'one');\n        },\n        function(callback){\n            // do some more stuff ...\n            callback(null, 'two');\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // results is now equal to ['one', 'two']\n    });\n\n\n    // an example using an object instead of an array\n    async.series({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equal to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.parallel([\n        function(callback){\n            setTimeout(function(){\n                callback(null, 'one');\n            }, 200);\n        },\n        function(callback){\n            setTimeout(function(){\n                callback(null, 'two');\n            }, 100);\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // the results array will equal ['one','two'] even though\n        // the second function had a shorter timeout.\n    });\n\n\n    // an example using an object instead of an array\n    async.parallel({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equals to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name=\"whilst\" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback which must be called once it has completed with an optional\n  error as the first argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n    var count = 0;\n\n    async.whilst(\n        function () { return count < 5; },\n        function (callback) {\n            count++;\n            setTimeout(callback, 1000);\n        },\n        function (err) {\n            // 5 seconds have passed\n        }\n    );\n\n\n---------------------------------------\n\n<a name=\"until\" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n\n---------------------------------------\n\n<a name=\"waterfall\" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task's callback.\n\n\n\n__Example__\n\n    async.waterfall([\n        function(callback){\n            callback(null, 'one', 'two');\n        },\n        function(arg1, arg2, callback){\n            callback(null, 'three');\n        },\n        function(arg1, callback){\n            // arg1 now equals 'three'\n            callback(null, 'done');\n        }\n    ], function (err, result) {\n       // result now equals 'done'    \n    });\n\n\n---------------------------------------\n\n<a name=\"queue\" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task's callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n    // create a queue object with concurrency 2\n\n    var q = async.queue(function (task, callback) {\n        console.log('hello ' + task.name);\n        callback();\n    }, 2);\n\n\n    // assign a callback\n    q.drain = function() {\n        console.log('all items have been processed');\n    }\n\n    // add some items to the queue\n\n    q.push({name: 'foo'}, function (err) {\n        console.log('finished processing foo');\n    });\n    q.push({name: 'bar'}, function (err) {\n        console.log('finished processing bar');\n    });\n\n    // add some items to the queue (batch-wise)\n\n    q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function (err) {\n        console.log('finished processing bar');\n    });\n\n\n---------------------------------------\n\n<a name=\"auto\" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The\n  syntax is easier to understand by looking at the example.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. If all tasks complete\n  successfully, it will receive an object containing their results.\n\n__Example__\n\n    async.auto({\n        get_data: function(callback){\n            // async code to get some data\n        },\n        make_folder: function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        },\n        write_file: ['get_data', 'make_folder', function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n            callback(null, filename);\n        }],\n        email_link: ['write_file', function(callback, results){\n            // once the file is written let's email a link to it...\n            // results.write_file contains the filename returned by write_file.\n        }]\n    });\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n    async.parallel([\n        function(callback){\n            // async code to get some data\n        },\n        function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        }\n    ],\n    function(results){\n        async.series([\n            function(callback){\n                // once there is some data and the directory exists,\n                // write the data to a file in the directory\n            },\n            email_link: function(callback){\n                // once the file is written let's email a link to it...\n            }\n        ]);\n    });\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name=\"iterator\" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. Its also possible to\n'peek' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n\n__Example__\n\n    var iterator = async.iterator([\n        function(){ sys.p('one'); },\n        function(){ sys.p('two'); },\n        function(){ sys.p('three'); }\n    ]);\n\n    node> var iterator2 = iterator();\n    'one'\n    node> var iterator3 = iterator2();\n    'two'\n    node> iterator3();\n    'three'\n    node> var nextfn = iterator2.next();\n    node> nextfn();\n    'three'\n\n\n---------------------------------------\n\n<a name=\"apply\" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n    // using apply\n\n    async.parallel([\n        async.apply(fs.writeFile, 'testfile1', 'test1'),\n        async.apply(fs.writeFile, 'testfile2', 'test2'),\n    ]);\n\n\n    // the same process without using apply\n\n    async.parallel([\n        function(callback){\n            fs.writeFile('testfile1', 'test1', callback);\n        },\n        function(callback){\n            fs.writeFile('testfile2', 'test2', callback);\n        },\n    ]);\n\nIt's possible to pass any number of additional arguments when calling the\ncontinuation:\n\n    node> var fn = async.apply(sys.puts, 'one');\n    node> fn('two', 'three');\n    one\n    two\n    three\n\n---------------------------------------\n\n<a name=\"nextTick\" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setTimeout(callback, 0),\nwhich means other higher priority events may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n    var call_order = [];\n    async.nextTick(function(){\n        call_order.push('two');\n        // call_order now equals ['one','two]\n    });\n    call_order.push('one')\n\n\n## Utils\n\n<a name=\"memoize\" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n    var slow_fn = function (name, callback) {\n        // do something\n        callback(null, result);\n    };\n    var fn = async.memoize(slow_fn);\n\n    // fn can now be used as if it were slow_fn\n    fn('some name', function () {\n        // callback\n    });\n\n<a name=\"unmemoize\" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name=\"log\" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, 'hello ' + name);\n        }, 1000);\n    };\n\n    node> async.log(hello, 'world');\n    'hello world'\n\n\n---------------------------------------\n\n<a name=\"dir\" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, {hello: name});\n        }, 1000);\n    };\n\n    node> async.dir(hello, 'world');\n    {hello: 'world'}\n\n\n---------------------------------------\n\n<a name=\"noConflict\" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n","maintainers":[{"name":"caolan","email":"caolan@caolanmcmahon.com"}],"directories":{}},"0.1.21":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.21","repository":{"type":"git","url":"git://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"devDependencies":{"nodeunit":">0.0.0","uglify-js":"1.2.x","nodelint":">0.0.0"},"_npmUser":{"name":"caolan","email":"caolan@caolanmcmahon.com"},"_id":"async@0.1.21","dependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.21","_nodeVersion":"v0.6.18","_defaultsLoaded":true,"dist":{"shasum":"b5b12e985f09ab72c202fa00f623cd9d997e9464","tarball":"http://registry.npmjs.org/async/-/async-0.1.21.tgz"},"readme":"# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual 'functional'\nsuspects (map, reduce, filter, forEach…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n    async.map(['file1','file2','file3'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n    async.filter(['file1','file2','file3'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n    async.parallel([\n        function(){ ... },\n        function(){ ... }\n    ], callback);\n\n    async.series([\n        function(){ ... },\n        function(){ ... }\n    ]);\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n\n## Download\n\nReleases are available for download from\n[GitHub](http://github.com/caolan/async/downloads).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 17.5kb Uncompressed\n\n__Production:__ [async.min.js](https://github.com/caolan/async/raw/master/dist/async.min.js) - 1.7kb Packed and Gzipped\n\n\n## In the Browser\n\nSo far its been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n    <script type=\"text/javascript\" src=\"async.js\"></script>\n    <script type=\"text/javascript\">\n\n        async.map(data, asyncProcess, function(err, results){\n            alert(results);\n        });\n\n    </script>\n\n\n## Documentation\n\n### Collections\n\n* [forEach](#forEach)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [until](#until)\n* [waterfall](#waterfall)\n* [queue](#queue)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name=\"forEach\" />\n### forEach(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the forEach function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // assuming openFiles is an array of file names and saveFile is a function\n    // to save the modified contents of that file:\n\n    async.forEach(openFiles, saveFile, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n\n---------------------------------------\n\n<a name=\"forEachSeries\" />\n### forEachSeries(arr, iterator, callback)\n\nThe same as forEach only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name=\"forEachLimit\" />\n### forEachLimit(arr, limit, iterator, callback)\n\nThe same as forEach only the iterator is applied to batches of items in the\narray, in series. The next batch of iterators is only called once the current\none has completed processing.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - How many items should be in each batch.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // Assume documents is an array of JSON objects and requestApi is a\n    // function that interacts with a rate-limited REST api.\n\n    async.forEachLimit(documents, 20, requestApi, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n---------------------------------------\n\n<a name=\"map\" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n    async.map(['file1','file2','file3'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n---------------------------------------\n\n<a name=\"mapSeries\" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name=\"filter\" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n    async.filter(['file1','file2','file3'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n---------------------------------------\n\n<a name=\"filterSeries\" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name=\"reject\" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name=\"rejectSeries\" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as filter, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name=\"reduce\" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then its probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback which accepts an optional error as its first argument, and the state\n  of the reduction as the second. If an error is passed to the callback, the\n  reduction is stopped and the main callback is immediately called with the\n  error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n    async.reduce([1,2,3], 0, function(memo, item, callback){\n        // pointless async:\n        process.nextTick(function(){\n            callback(null, memo + item)\n        });\n    }, function(err, result){\n        // result is now equal to the last value of memo, which is 6\n    });\n\n---------------------------------------\n\n<a name=\"reduceRight\" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name=\"detect\" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n    async.detect(['file1','file2','file3'], path.exists, function(result){\n        // result now equals the first file in the list that exists\n    });\n\n---------------------------------------\n\n<a name=\"detectSeries\" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name=\"sortBy\" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a value to use as the sort criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n    async.sortBy(['file1','file2','file3'], function(file, callback){\n        fs.stat(file, function(err, stats){\n            callback(err, stats.mtime);\n        });\n    }, function(err, results){\n        // results is now the original array of files sorted by\n        // modified date\n    });\n\n\n---------------------------------------\n\n<a name=\"some\" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n    async.some(['file1','file2','file3'], path.exists, function(result){\n        // if result is true then at least one of the files exists\n    });\n\n---------------------------------------\n\n<a name=\"every\" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n    async.every(['file1','file2','file3'], path.exists, function(result){\n        // if result is true then every file exists\n    });\n\n---------------------------------------\n\n<a name=\"concat\" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n    async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files){\n        // files is now a list of filenames that exist in the 3 directories\n    });\n\n---------------------------------------\n\n<a name=\"concatSeries\" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name=\"series\" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.series([\n        function(callback){\n            // do some stuff ...\n            callback(null, 'one');\n        },\n        function(callback){\n            // do some more stuff ...\n            callback(null, 'two');\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // results is now equal to ['one', 'two']\n    });\n\n\n    // an example using an object instead of an array\n    async.series({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equal to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.parallel([\n        function(callback){\n            setTimeout(function(){\n                callback(null, 'one');\n            }, 200);\n        },\n        function(callback){\n            setTimeout(function(){\n                callback(null, 'two');\n            }, 100);\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // the results array will equal ['one','two'] even though\n        // the second function had a shorter timeout.\n    });\n\n\n    // an example using an object instead of an array\n    async.parallel({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equals to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name=\"whilst\" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback which must be called once it has completed with an optional\n  error as the first argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n    var count = 0;\n\n    async.whilst(\n        function () { return count < 5; },\n        function (callback) {\n            count++;\n            setTimeout(callback, 1000);\n        },\n        function (err) {\n            // 5 seconds have passed\n        }\n    );\n\n\n---------------------------------------\n\n<a name=\"until\" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n\n---------------------------------------\n\n<a name=\"waterfall\" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task's callback.\n\n\n\n__Example__\n\n    async.waterfall([\n        function(callback){\n            callback(null, 'one', 'two');\n        },\n        function(arg1, arg2, callback){\n            callback(null, 'three');\n        },\n        function(arg1, callback){\n            // arg1 now equals 'three'\n            callback(null, 'done');\n        }\n    ], function (err, result) {\n       // result now equals 'done'    \n    });\n\n\n---------------------------------------\n\n<a name=\"queue\" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task's callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n    // create a queue object with concurrency 2\n\n    var q = async.queue(function (task, callback) {\n        console.log('hello ' + task.name);\n        callback();\n    }, 2);\n\n\n    // assign a callback\n    q.drain = function() {\n        console.log('all items have been processed');\n    }\n\n    // add some items to the queue\n\n    q.push({name: 'foo'}, function (err) {\n        console.log('finished processing foo');\n    });\n    q.push({name: 'bar'}, function (err) {\n        console.log('finished processing bar');\n    });\n\n    // add some items to the queue (batch-wise)\n\n    q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function (err) {\n        console.log('finished processing bar');\n    });\n\n\n---------------------------------------\n\n<a name=\"auto\" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The\n  syntax is easier to understand by looking at the example.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. If all tasks complete\n  successfully, it will receive an object containing their results.\n\n__Example__\n\n    async.auto({\n        get_data: function(callback){\n            // async code to get some data\n        },\n        make_folder: function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        },\n        write_file: ['get_data', 'make_folder', function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n            callback(null, filename);\n        }],\n        email_link: ['write_file', function(callback, results){\n            // once the file is written let's email a link to it...\n            // results.write_file contains the filename returned by write_file.\n        }]\n    });\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n    async.parallel([\n        function(callback){\n            // async code to get some data\n        },\n        function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        }\n    ],\n    function(results){\n        async.series([\n            function(callback){\n                // once there is some data and the directory exists,\n                // write the data to a file in the directory\n            },\n            email_link: function(callback){\n                // once the file is written let's email a link to it...\n            }\n        ]);\n    });\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name=\"iterator\" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. Its also possible to\n'peek' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n\n__Example__\n\n    var iterator = async.iterator([\n        function(){ sys.p('one'); },\n        function(){ sys.p('two'); },\n        function(){ sys.p('three'); }\n    ]);\n\n    node> var iterator2 = iterator();\n    'one'\n    node> var iterator3 = iterator2();\n    'two'\n    node> iterator3();\n    'three'\n    node> var nextfn = iterator2.next();\n    node> nextfn();\n    'three'\n\n\n---------------------------------------\n\n<a name=\"apply\" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n    // using apply\n\n    async.parallel([\n        async.apply(fs.writeFile, 'testfile1', 'test1'),\n        async.apply(fs.writeFile, 'testfile2', 'test2'),\n    ]);\n\n\n    // the same process without using apply\n\n    async.parallel([\n        function(callback){\n            fs.writeFile('testfile1', 'test1', callback);\n        },\n        function(callback){\n            fs.writeFile('testfile2', 'test2', callback);\n        },\n    ]);\n\nIt's possible to pass any number of additional arguments when calling the\ncontinuation:\n\n    node> var fn = async.apply(sys.puts, 'one');\n    node> fn('two', 'three');\n    one\n    two\n    three\n\n---------------------------------------\n\n<a name=\"nextTick\" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setTimeout(callback, 0),\nwhich means other higher priority events may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n    var call_order = [];\n    async.nextTick(function(){\n        call_order.push('two');\n        // call_order now equals ['one','two]\n    });\n    call_order.push('one')\n\n\n## Utils\n\n<a name=\"memoize\" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n    var slow_fn = function (name, callback) {\n        // do something\n        callback(null, result);\n    };\n    var fn = async.memoize(slow_fn);\n\n    // fn can now be used as if it were slow_fn\n    fn('some name', function () {\n        // callback\n    });\n\n<a name=\"unmemoize\" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name=\"log\" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, 'hello ' + name);\n        }, 1000);\n    };\n\n    node> async.log(hello, 'world');\n    'hello world'\n\n\n---------------------------------------\n\n<a name=\"dir\" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, {hello: name});\n        }, 1000);\n    };\n\n    node> async.dir(hello, 'world');\n    {hello: 'world'}\n\n\n---------------------------------------\n\n<a name=\"noConflict\" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n","maintainers":[{"name":"caolan","email":"caolan@caolanmcmahon.com"}],"directories":{}},"0.1.22":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./index","author":{"name":"Caolan McMahon"},"version":"0.1.22","repository":{"type":"git","url":"git://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"devDependencies":{"nodeunit":">0.0.0","uglify-js":"1.2.x","nodelint":">0.0.0"},"_npmUser":{"name":"caolan","email":"caolan@caolanmcmahon.com"},"_id":"async@0.1.22","dependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.21","_nodeVersion":"v0.6.18","_defaultsLoaded":true,"dist":{"shasum":"0fc1aaa088a0e3ef0ebe2d8831bab0dcf8845061","tarball":"http://registry.npmjs.org/async/-/async-0.1.22.tgz"},"readme":"# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual 'functional'\nsuspects (map, reduce, filter, forEach…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n    async.map(['file1','file2','file3'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n    async.filter(['file1','file2','file3'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n    async.parallel([\n        function(){ ... },\n        function(){ ... }\n    ], callback);\n\n    async.series([\n        function(){ ... },\n        function(){ ... }\n    ]);\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n\n## Download\n\nReleases are available for download from\n[GitHub](http://github.com/caolan/async/downloads).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 17.5kb Uncompressed\n\n__Production:__ [async.min.js](https://github.com/caolan/async/raw/master/dist/async.min.js) - 1.7kb Packed and Gzipped\n\n\n## In the Browser\n\nSo far its been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n    <script type=\"text/javascript\" src=\"async.js\"></script>\n    <script type=\"text/javascript\">\n\n        async.map(data, asyncProcess, function(err, results){\n            alert(results);\n        });\n\n    </script>\n\n\n## Documentation\n\n### Collections\n\n* [forEach](#forEach)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [until](#until)\n* [waterfall](#waterfall)\n* [queue](#queue)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name=\"forEach\" />\n### forEach(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the forEach function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // assuming openFiles is an array of file names and saveFile is a function\n    // to save the modified contents of that file:\n\n    async.forEach(openFiles, saveFile, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n\n---------------------------------------\n\n<a name=\"forEachSeries\" />\n### forEachSeries(arr, iterator, callback)\n\nThe same as forEach only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name=\"forEachLimit\" />\n### forEachLimit(arr, limit, iterator, callback)\n\nThe same as forEach only the iterator is applied to batches of items in the\narray, in series. The next batch of iterators is only called once the current\none has completed processing.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - How many items should be in each batch.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // Assume documents is an array of JSON objects and requestApi is a\n    // function that interacts with a rate-limited REST api.\n\n    async.forEachLimit(documents, 20, requestApi, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n---------------------------------------\n\n<a name=\"map\" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n    async.map(['file1','file2','file3'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n---------------------------------------\n\n<a name=\"mapSeries\" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name=\"filter\" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n    async.filter(['file1','file2','file3'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n---------------------------------------\n\n<a name=\"filterSeries\" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name=\"reject\" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name=\"rejectSeries\" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as filter, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name=\"reduce\" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then its probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback which accepts an optional error as its first argument, and the state\n  of the reduction as the second. If an error is passed to the callback, the\n  reduction is stopped and the main callback is immediately called with the\n  error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n    async.reduce([1,2,3], 0, function(memo, item, callback){\n        // pointless async:\n        process.nextTick(function(){\n            callback(null, memo + item)\n        });\n    }, function(err, result){\n        // result is now equal to the last value of memo, which is 6\n    });\n\n---------------------------------------\n\n<a name=\"reduceRight\" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name=\"detect\" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n    async.detect(['file1','file2','file3'], path.exists, function(result){\n        // result now equals the first file in the list that exists\n    });\n\n---------------------------------------\n\n<a name=\"detectSeries\" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name=\"sortBy\" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a value to use as the sort criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n    async.sortBy(['file1','file2','file3'], function(file, callback){\n        fs.stat(file, function(err, stats){\n            callback(err, stats.mtime);\n        });\n    }, function(err, results){\n        // results is now the original array of files sorted by\n        // modified date\n    });\n\n\n---------------------------------------\n\n<a name=\"some\" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n    async.some(['file1','file2','file3'], path.exists, function(result){\n        // if result is true then at least one of the files exists\n    });\n\n---------------------------------------\n\n<a name=\"every\" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n    async.every(['file1','file2','file3'], path.exists, function(result){\n        // if result is true then every file exists\n    });\n\n---------------------------------------\n\n<a name=\"concat\" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n    async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files){\n        // files is now a list of filenames that exist in the 3 directories\n    });\n\n---------------------------------------\n\n<a name=\"concatSeries\" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name=\"series\" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.series([\n        function(callback){\n            // do some stuff ...\n            callback(null, 'one');\n        },\n        function(callback){\n            // do some more stuff ...\n            callback(null, 'two');\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // results is now equal to ['one', 'two']\n    });\n\n\n    // an example using an object instead of an array\n    async.series({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equal to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.parallel([\n        function(callback){\n            setTimeout(function(){\n                callback(null, 'one');\n            }, 200);\n        },\n        function(callback){\n            setTimeout(function(){\n                callback(null, 'two');\n            }, 100);\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // the results array will equal ['one','two'] even though\n        // the second function had a shorter timeout.\n    });\n\n\n    // an example using an object instead of an array\n    async.parallel({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equals to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name=\"whilst\" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback which must be called once it has completed with an optional\n  error as the first argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n    var count = 0;\n\n    async.whilst(\n        function () { return count < 5; },\n        function (callback) {\n            count++;\n            setTimeout(callback, 1000);\n        },\n        function (err) {\n            // 5 seconds have passed\n        }\n    );\n\n\n---------------------------------------\n\n<a name=\"until\" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n\n---------------------------------------\n\n<a name=\"waterfall\" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task's callback.\n\n\n\n__Example__\n\n    async.waterfall([\n        function(callback){\n            callback(null, 'one', 'two');\n        },\n        function(arg1, arg2, callback){\n            callback(null, 'three');\n        },\n        function(arg1, callback){\n            // arg1 now equals 'three'\n            callback(null, 'done');\n        }\n    ], function (err, result) {\n       // result now equals 'done'    \n    });\n\n\n---------------------------------------\n\n<a name=\"queue\" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task's callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n    // create a queue object with concurrency 2\n\n    var q = async.queue(function (task, callback) {\n        console.log('hello ' + task.name);\n        callback();\n    }, 2);\n\n\n    // assign a callback\n    q.drain = function() {\n        console.log('all items have been processed');\n    }\n\n    // add some items to the queue\n\n    q.push({name: 'foo'}, function (err) {\n        console.log('finished processing foo');\n    });\n    q.push({name: 'bar'}, function (err) {\n        console.log('finished processing bar');\n    });\n\n    // add some items to the queue (batch-wise)\n\n    q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function (err) {\n        console.log('finished processing bar');\n    });\n\n\n---------------------------------------\n\n<a name=\"auto\" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The\n  syntax is easier to understand by looking at the example.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. If all tasks complete\n  successfully, it will receive an object containing their results.\n\n__Example__\n\n    async.auto({\n        get_data: function(callback){\n            // async code to get some data\n        },\n        make_folder: function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        },\n        write_file: ['get_data', 'make_folder', function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n            callback(null, filename);\n        }],\n        email_link: ['write_file', function(callback, results){\n            // once the file is written let's email a link to it...\n            // results.write_file contains the filename returned by write_file.\n        }]\n    });\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n    async.parallel([\n        function(callback){\n            // async code to get some data\n        },\n        function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        }\n    ],\n    function(results){\n        async.series([\n            function(callback){\n                // once there is some data and the directory exists,\n                // write the data to a file in the directory\n            },\n            email_link: function(callback){\n                // once the file is written let's email a link to it...\n            }\n        ]);\n    });\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name=\"iterator\" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. Its also possible to\n'peek' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n\n__Example__\n\n    var iterator = async.iterator([\n        function(){ sys.p('one'); },\n        function(){ sys.p('two'); },\n        function(){ sys.p('three'); }\n    ]);\n\n    node> var iterator2 = iterator();\n    'one'\n    node> var iterator3 = iterator2();\n    'two'\n    node> iterator3();\n    'three'\n    node> var nextfn = iterator2.next();\n    node> nextfn();\n    'three'\n\n\n---------------------------------------\n\n<a name=\"apply\" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n    // using apply\n\n    async.parallel([\n        async.apply(fs.writeFile, 'testfile1', 'test1'),\n        async.apply(fs.writeFile, 'testfile2', 'test2'),\n    ]);\n\n\n    // the same process without using apply\n\n    async.parallel([\n        function(callback){\n            fs.writeFile('testfile1', 'test1', callback);\n        },\n        function(callback){\n            fs.writeFile('testfile2', 'test2', callback);\n        },\n    ]);\n\nIt's possible to pass any number of additional arguments when calling the\ncontinuation:\n\n    node> var fn = async.apply(sys.puts, 'one');\n    node> fn('two', 'three');\n    one\n    two\n    three\n\n---------------------------------------\n\n<a name=\"nextTick\" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setTimeout(callback, 0),\nwhich means other higher priority events may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n    var call_order = [];\n    async.nextTick(function(){\n        call_order.push('two');\n        // call_order now equals ['one','two]\n    });\n    call_order.push('one')\n\n\n## Utils\n\n<a name=\"memoize\" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n    var slow_fn = function (name, callback) {\n        // do something\n        callback(null, result);\n    };\n    var fn = async.memoize(slow_fn);\n\n    // fn can now be used as if it were slow_fn\n    fn('some name', function () {\n        // callback\n    });\n\n<a name=\"unmemoize\" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name=\"log\" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, 'hello ' + name);\n        }, 1000);\n    };\n\n    node> async.log(hello, 'world');\n    'hello world'\n\n\n---------------------------------------\n\n<a name=\"dir\" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, {hello: name});\n        }, 1000);\n    };\n\n    node> async.dir(hello, 'world');\n    {hello: 'world'}\n\n\n---------------------------------------\n\n<a name=\"noConflict\" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n","maintainers":[{"name":"caolan","email":"caolan@caolanmcmahon.com"}],"directories":{}},"0.2.0":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./lib/async","author":{"name":"Caolan McMahon"},"version":"0.2.0","repository":{"type":"git","url":"http://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"devDependencies":{"nodeunit":">0.0.0","uglify-js":"1.2.x","nodelint":">0.0.0"},"readme":"# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual 'functional'\nsuspects (map, reduce, filter, forEach…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n```javascript\nasync.map(['file1','file2','file3'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n\nasync.filter(['file1','file2','file3'], path.exists, function(results){\n    // results now equals an array of the existing files\n});\n\nasync.parallel([\n    function(){ ... },\n    function(){ ... }\n], callback);\n\nasync.series([\n    function(){ ... },\n    function(){ ... }\n]);\n```\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n\n## Download\n\nReleases are available for download from\n[GitHub](http://github.com/caolan/async/downloads).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 17.5kb Uncompressed\n\n__Production:__ [async.min.js](https://github.com/caolan/async/raw/master/dist/async.min.js) - 1.7kb Packed and Gzipped\n\n\n## In the Browser\n\nSo far its been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n```html\n<script type=\"text/javascript\" src=\"async.js\"></script>\n<script type=\"text/javascript\">\n\n    async.map(data, asyncProcess, function(err, results){\n        alert(results);\n    });\n\n</script>\n```\n\n## Documentation\n\n### Collections\n\n* [forEach](#forEach)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [doWhilst](#doWhilst)\n* [until](#until)\n* [doUntil](#doUntil)\n* [waterfall](#waterfall)\n* [queue](#queue)\n* [cargo](#cargo)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n* [times](#times)\n* [timesSeries](#timesSeries)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name=\"forEach\" />\n### forEach(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the forEach function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err) which must be called once it has completed.\n  If no error has occured, the callback should be run without arguments or \n  with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// assuming openFiles is an array of file names and saveFile is a function\n// to save the modified contents of that file:\n\nasync.forEach(openFiles, saveFile, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name=\"forEachSeries\" />\n### forEachSeries(arr, iterator, callback)\n\nThe same as forEach only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name=\"forEachLimit\" />\n### forEachLimit(arr, limit, iterator, callback)\n\nThe same as forEach only the iterator is applied to batches of items in the\narray, in series. The next batch of iterators is only called once the current\none has completed processing.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - How many items should be in each batch.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n  If no error has occured, the callback should be run without arguments or \n  with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// Assume documents is an array of JSON objects and requestApi is a\n// function that interacts with a rate-limited REST api.\n\nasync.forEachLimit(documents, 20, requestApi, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name=\"map\" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map(['file1','file2','file3'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name=\"mapSeries\" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name=\"mapLimit\" />\n### mapLimit(arr, limit, iterator, callback)\n\nThe same as map only the iterator is applied to batches of items in the\narray, in series. The next batch of iterators is only called once the current\none has completed processing.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - How many items should be in each batch.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n  If no error has occured, the callback should be run without arguments or \n  with an explicit null argument.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map(['file1','file2','file3'], 1, fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name=\"filter\" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n```js\nasync.filter(['file1','file2','file3'], path.exists, function(results){\n    // results now equals an array of the existing files\n});\n```\n\n---------------------------------------\n\n<a name=\"filterSeries\" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name=\"reject\" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name=\"rejectSeries\" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as reject, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name=\"reduce\" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then its probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback which accepts an optional error as its first argument, and the state\n  of the reduction as the second. If an error is passed to the callback, the\n  reduction is stopped and the main callback is immediately called with the\n  error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n```js\nasync.reduce([1,2,3], 0, function(memo, item, callback){\n    // pointless async:\n    process.nextTick(function(){\n        callback(null, memo + item)\n    });\n}, function(err, result){\n    // result is now equal to the last value of memo, which is 6\n});\n```\n\n---------------------------------------\n\n<a name=\"reduceRight\" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name=\"detect\" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n```js\nasync.detect(['file1','file2','file3'], path.exists, function(result){\n    // result now equals the first file in the list that exists\n});\n```\n\n---------------------------------------\n\n<a name=\"detectSeries\" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name=\"sortBy\" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a value to use as the sort criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n```js\nasync.sortBy(['file1','file2','file3'], function(file, callback){\n    fs.stat(file, function(err, stats){\n        callback(err, stats.mtime);\n    });\n}, function(err, results){\n    // results is now the original array of files sorted by\n    // modified date\n});\n```\n\n---------------------------------------\n\n<a name=\"some\" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n```js\nasync.some(['file1','file2','file3'], path.exists, function(result){\n    // if result is true then at least one of the files exists\n});\n```\n\n---------------------------------------\n\n<a name=\"every\" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n```js\nasync.every(['file1','file2','file3'], path.exists, function(result){\n    // if result is true then every file exists\n});\n```\n\n---------------------------------------\n\n<a name=\"concat\" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n```js\nasync.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files){\n    // files is now a list of filenames that exist in the 3 directories\n});\n```\n\n---------------------------------------\n\n<a name=\"concatSeries\" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name=\"series\" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n```js\nasync.series([\n    function(callback){\n        // do some stuff ...\n        callback(null, 'one');\n    },\n    function(callback){\n        // do some more stuff ...\n        callback(null, 'two');\n    }\n],\n// optional callback\nfunction(err, results){\n    // results is now equal to ['one', 'two']\n});\n\n\n// an example using an object instead of an array\nasync.series({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equal to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n```js\nasync.parallel([\n    function(callback){\n        setTimeout(function(){\n            callback(null, 'one');\n        }, 200);\n    },\n    function(callback){\n        setTimeout(function(){\n            callback(null, 'two');\n        }, 100);\n    }\n],\n// optional callback\nfunction(err, results){\n    // the results array will equal ['one','two'] even though\n    // the second function had a shorter timeout.\n});\n\n\n// an example using an object instead of an array\nasync.parallel({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equals to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallelLimit(tasks, limit, [callback])\n\nThe same as parallel only the tasks are executed in parallel with a maximum of \"limit\" \ntasks executing at any time.\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* limit - The maximum number of tasks to run at any time.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n\n---------------------------------------\n\n<a name=\"whilst\" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback which must be called once it has completed with an optional\n  error as the first argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n```js\nvar count = 0;\n\nasync.whilst(\n    function () { return count < 5; },\n    function (callback) {\n        count++;\n        setTimeout(callback, 1000);\n    },\n    function (err) {\n        // 5 seconds have passed\n    }\n);\n```\n\n---------------------------------------\n\n<a name=\"doWhilst\" />\n### doWhilst(fn, test, callback)\n\nThe post check version of whilst. To reflect the difference in the order of operations `test` and `fn` arguments are switched. `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n\n---------------------------------------\n\n<a name=\"until\" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n---------------------------------------\n\n<a name=\"doUntil\" />\n### doUntil(fn, test, callback)\n\nLike doWhilst except the test is inverted. Note the argument ordering differs from `until`.\n\n\n---------------------------------------\n\n<a name=\"waterfall\" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task's callback.\n\n\n\n__Example__\n\n```js\nasync.waterfall([\n    function(callback){\n        callback(null, 'one', 'two');\n    },\n    function(arg1, arg2, callback){\n        callback(null, 'three');\n    },\n    function(arg1, callback){\n        // arg1 now equals 'three'\n        callback(null, 'done');\n    }\n], function (err, result) {\n   // result now equals 'done'    \n});\n```\n\n---------------------------------------\n\n<a name=\"queue\" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task's callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a queue object with concurrency 2\n\nvar q = async.queue(function (task, callback) {\n    console.log('hello ' + task.name);\n    callback();\n}, 2);\n\n\n// assign a callback\nq.drain = function() {\n    console.log('all items have been processed');\n}\n\n// add some items to the queue\n\nq.push({name: 'foo'}, function (err) {\n    console.log('finished processing foo');\n});\nq.push({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\n\n// add some items to the queue (batch-wise)\n\nq.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function (err) {\n    console.log('finished processing bar');\n});\n```\n\n---------------------------------------\n\n<a name=\"cargo\" />\n### cargo(worker, [payload])\n\nCreates a cargo object with the specified payload. Tasks added to the\ncargo will be processed altogether (up to the payload limit). If the\nworker is in progress, the task is queued until it is available. Once\nthe worker has completed some tasks, each callback of those tasks is called.\n\n__Arguments__\n\n* worker(tasks, callback) - An asynchronous function for processing queued\n  tasks.\n* payload - An optional integer for determining how many tasks should be\n  process per round, default is unlimited.\n\n__Cargo objects__\n\nThe cargo object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* payload - an integer for determining how many tasks should be\n  process per round. This property can be changed after a cargo is created to\n  alter the payload on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a cargo object with payload 2\n\nvar cargo = async.cargo(function (task, callback) {\n    console.log('hello ' + task.name);\n    callback();\n}, 2);\n\n\n// add some items\n\ncargo.push({name: 'foo'}, function (err) {\n    console.log('finished processing foo');\n});\ncargo.push({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\ncargo.push({name: 'baz'}, function (err) {\n    console.log('finished processing baz');\n});\n```\n\n---------------------------------------\n\n<a name=\"auto\" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The\n  syntax is easier to understand by looking at the example.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. If all tasks complete\n  successfully, it will receive an object containing their results.\n\n__Example__\n\n```js\nasync.auto({\n    get_data: function(callback){\n        // async code to get some data\n    },\n    make_folder: function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    },\n    write_file: ['get_data', 'make_folder', function(callback){\n        // once there is some data and the directory exists,\n        // write the data to a file in the directory\n        callback(null, filename);\n    }],\n    email_link: ['write_file', function(callback, results){\n        // once the file is written let's email a link to it...\n        // results.write_file contains the filename returned by write_file.\n    }]\n});\n```\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n```js\nasync.parallel([\n    function(callback){\n        // async code to get some data\n    },\n    function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    }\n],\nfunction(err, results){\n    async.series([\n        function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n        },\n        function(callback){\n            // once the file is written let's email a link to it...\n        }\n    ]);\n});\n```\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name=\"iterator\" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. Its also possible to\n'peek' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n\n__Example__\n\n```js\nvar iterator = async.iterator([\n    function(){ sys.p('one'); },\n    function(){ sys.p('two'); },\n    function(){ sys.p('three'); }\n]);\n\nnode> var iterator2 = iterator();\n'one'\nnode> var iterator3 = iterator2();\n'two'\nnode> iterator3();\n'three'\nnode> var nextfn = iterator2.next();\nnode> nextfn();\n'three'\n```\n\n---------------------------------------\n\n<a name=\"apply\" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n```js\n// using apply\n\nasync.parallel([\n    async.apply(fs.writeFile, 'testfile1', 'test1'),\n    async.apply(fs.writeFile, 'testfile2', 'test2'),\n]);\n\n\n// the same process without using apply\n\nasync.parallel([\n    function(callback){\n        fs.writeFile('testfile1', 'test1', callback);\n    },\n    function(callback){\n        fs.writeFile('testfile2', 'test2', callback);\n    }\n]);\n```\n\nIt's possible to pass any number of additional arguments when calling the\ncontinuation:\n\n```js\nnode> var fn = async.apply(sys.puts, 'one');\nnode> fn('two', 'three');\none\ntwo\nthree\n```\n\n---------------------------------------\n\n<a name=\"nextTick\" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setImmediate(callback)\nif available, otherwise setTimeout(callback, 0), which means other higher priority\nevents may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n```js\nvar call_order = [];\nasync.nextTick(function(){\n    call_order.push('two');\n    // call_order now equals ['one','two']\n});\ncall_order.push('one')\n```\n\n<a name=\"times\" />\n### times(n, callback)\n\nCalls the callback n times and accumulates results in the same manner\nyou would use with async.map.\n\n__Arguments__\n\n* n - The number of times to run the function.\n* callback - The function to call n times.\n\n__Example__\n\n```js\n// Pretend this is some complicated async factory\nvar createUser = function(id, callback) {\n  callback(null, {\n    id: 'user' + id\n  })\n}\n// generate 5 users\nasync.times(5, function(n, next){\n    createUser(n, function(err, user) {\n      next(err, user)\n    })\n}, function(err, users) {\n  // we should now have 5 users\n});\n```\n\n<a name=\"timesSeries\" />\n### timesSeries(n, callback)\n\nThe same as times only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n## Utils\n\n<a name=\"memoize\" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\nThe cache of results is exposed as the `memo` property of the function returned\nby `memoize`.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n```js\nvar slow_fn = function (name, callback) {\n    // do something\n    callback(null, result);\n};\nvar fn = async.memoize(slow_fn);\n\n// fn can now be used as if it were slow_fn\nfn('some name', function () {\n    // callback\n});\n```\n\n<a name=\"unmemoize\" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name=\"log\" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, 'hello ' + name);\n    }, 1000);\n};\n```\n```js\nnode> async.log(hello, 'world');\n'hello world'\n```\n\n---------------------------------------\n\n<a name=\"dir\" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, {hello: name});\n    }, 1000);\n};\n```\n```js\nnode> async.dir(hello, 'world');\n{hello: 'world'}\n```\n\n---------------------------------------\n\n<a name=\"noConflict\" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n","readmeFilename":"README.md","_id":"async@0.2.0","dist":{"shasum":"db1c645337bab79d0ca93d95f5c72d9605be0fce","tarball":"http://registry.npmjs.org/async/-/async-0.2.0.tgz"},"_npmVersion":"1.2.0","_npmUser":{"name":"caolan","email":"caolan.mcmahon@gmail.com"},"maintainers":[{"name":"caolan","email":"caolan@caolanmcmahon.com"}],"directories":{}},"0.2.1":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./lib/async","author":{"name":"Caolan McMahon"},"version":"0.2.1","repository":{"type":"git","url":"http://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"devDependencies":{"nodeunit":">0.0.0","uglify-js":"1.2.x","nodelint":">0.0.0"},"readme":"# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual 'functional'\nsuspects (map, reduce, filter, forEach…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n```javascript\nasync.map(['file1','file2','file3'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n\nasync.filter(['file1','file2','file3'], path.exists, function(results){\n    // results now equals an array of the existing files\n});\n\nasync.parallel([\n    function(){ ... },\n    function(){ ... }\n], callback);\n\nasync.series([\n    function(){ ... },\n    function(){ ... }\n]);\n```\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n\n## Download\n\nReleases are available for download from\n[GitHub](http://github.com/caolan/async/downloads).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 17.5kb Uncompressed\n\n__Production:__ [async.min.js](https://github.com/caolan/async/raw/master/dist/async.min.js) - 1.7kb Packed and Gzipped\n\n\n## In the Browser\n\nSo far its been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n```html\n<script type=\"text/javascript\" src=\"async.js\"></script>\n<script type=\"text/javascript\">\n\n    async.map(data, asyncProcess, function(err, results){\n        alert(results);\n    });\n\n</script>\n```\n\n## Documentation\n\n### Collections\n\n* [forEach](#forEach)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [doWhilst](#doWhilst)\n* [until](#until)\n* [doUntil](#doUntil)\n* [waterfall](#waterfall)\n* [queue](#queue)\n* [cargo](#cargo)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n* [times](#times)\n* [timesSeries](#timesSeries)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name=\"forEach\" />\n### forEach(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the forEach function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err) which must be called once it has completed.\n  If no error has occured, the callback should be run without arguments or \n  with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// assuming openFiles is an array of file names and saveFile is a function\n// to save the modified contents of that file:\n\nasync.forEach(openFiles, saveFile, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name=\"forEachSeries\" />\n### forEachSeries(arr, iterator, callback)\n\nThe same as forEach only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name=\"forEachLimit\" />\n### forEachLimit(arr, limit, iterator, callback)\n\nThe same as forEach only the iterator is applied to batches of items in the\narray, in series. The next batch of iterators is only called once the current\none has completed processing.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - How many items should be in each batch.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n  If no error has occured, the callback should be run without arguments or \n  with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// Assume documents is an array of JSON objects and requestApi is a\n// function that interacts with a rate-limited REST api.\n\nasync.forEachLimit(documents, 20, requestApi, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name=\"map\" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map(['file1','file2','file3'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name=\"mapSeries\" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name=\"mapLimit\" />\n### mapLimit(arr, limit, iterator, callback)\n\nThe same as map only the iterator is applied to batches of items in the\narray, in series. The next batch of iterators is only called once the current\none has completed processing.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - How many items should be in each batch.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n  If no error has occured, the callback should be run without arguments or \n  with an explicit null argument.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map(['file1','file2','file3'], 1, fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name=\"filter\" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n```js\nasync.filter(['file1','file2','file3'], path.exists, function(results){\n    // results now equals an array of the existing files\n});\n```\n\n---------------------------------------\n\n<a name=\"filterSeries\" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name=\"reject\" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name=\"rejectSeries\" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as reject, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name=\"reduce\" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then its probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback which accepts an optional error as its first argument, and the state\n  of the reduction as the second. If an error is passed to the callback, the\n  reduction is stopped and the main callback is immediately called with the\n  error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n```js\nasync.reduce([1,2,3], 0, function(memo, item, callback){\n    // pointless async:\n    process.nextTick(function(){\n        callback(null, memo + item)\n    });\n}, function(err, result){\n    // result is now equal to the last value of memo, which is 6\n});\n```\n\n---------------------------------------\n\n<a name=\"reduceRight\" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name=\"detect\" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n```js\nasync.detect(['file1','file2','file3'], path.exists, function(result){\n    // result now equals the first file in the list that exists\n});\n```\n\n---------------------------------------\n\n<a name=\"detectSeries\" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name=\"sortBy\" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a value to use as the sort criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n```js\nasync.sortBy(['file1','file2','file3'], function(file, callback){\n    fs.stat(file, function(err, stats){\n        callback(err, stats.mtime);\n    });\n}, function(err, results){\n    // results is now the original array of files sorted by\n    // modified date\n});\n```\n\n---------------------------------------\n\n<a name=\"some\" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n```js\nasync.some(['file1','file2','file3'], path.exists, function(result){\n    // if result is true then at least one of the files exists\n});\n```\n\n---------------------------------------\n\n<a name=\"every\" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n```js\nasync.every(['file1','file2','file3'], path.exists, function(result){\n    // if result is true then every file exists\n});\n```\n\n---------------------------------------\n\n<a name=\"concat\" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n```js\nasync.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files){\n    // files is now a list of filenames that exist in the 3 directories\n});\n```\n\n---------------------------------------\n\n<a name=\"concatSeries\" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name=\"series\" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n```js\nasync.series([\n    function(callback){\n        // do some stuff ...\n        callback(null, 'one');\n    },\n    function(callback){\n        // do some more stuff ...\n        callback(null, 'two');\n    }\n],\n// optional callback\nfunction(err, results){\n    // results is now equal to ['one', 'two']\n});\n\n\n// an example using an object instead of an array\nasync.series({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equal to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n```js\nasync.parallel([\n    function(callback){\n        setTimeout(function(){\n            callback(null, 'one');\n        }, 200);\n    },\n    function(callback){\n        setTimeout(function(){\n            callback(null, 'two');\n        }, 100);\n    }\n],\n// optional callback\nfunction(err, results){\n    // the results array will equal ['one','two'] even though\n    // the second function had a shorter timeout.\n});\n\n\n// an example using an object instead of an array\nasync.parallel({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equals to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallelLimit(tasks, limit, [callback])\n\nThe same as parallel only the tasks are executed in parallel with a maximum of \"limit\" \ntasks executing at any time.\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* limit - The maximum number of tasks to run at any time.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n\n---------------------------------------\n\n<a name=\"whilst\" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback which must be called once it has completed with an optional\n  error as the first argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n```js\nvar count = 0;\n\nasync.whilst(\n    function () { return count < 5; },\n    function (callback) {\n        count++;\n        setTimeout(callback, 1000);\n    },\n    function (err) {\n        // 5 seconds have passed\n    }\n);\n```\n\n---------------------------------------\n\n<a name=\"doWhilst\" />\n### doWhilst(fn, test, callback)\n\nThe post check version of whilst. To reflect the difference in the order of operations `test` and `fn` arguments are switched. `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n\n---------------------------------------\n\n<a name=\"until\" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n---------------------------------------\n\n<a name=\"doUntil\" />\n### doUntil(fn, test, callback)\n\nLike doWhilst except the test is inverted. Note the argument ordering differs from `until`.\n\n\n---------------------------------------\n\n<a name=\"waterfall\" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task's callback.\n\n\n\n__Example__\n\n```js\nasync.waterfall([\n    function(callback){\n        callback(null, 'one', 'two');\n    },\n    function(arg1, arg2, callback){\n        callback(null, 'three');\n    },\n    function(arg1, callback){\n        // arg1 now equals 'three'\n        callback(null, 'done');\n    }\n], function (err, result) {\n   // result now equals 'done'    \n});\n```\n\n---------------------------------------\n\n<a name=\"queue\" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task's callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a queue object with concurrency 2\n\nvar q = async.queue(function (task, callback) {\n    console.log('hello ' + task.name);\n    callback();\n}, 2);\n\n\n// assign a callback\nq.drain = function() {\n    console.log('all items have been processed');\n}\n\n// add some items to the queue\n\nq.push({name: 'foo'}, function (err) {\n    console.log('finished processing foo');\n});\nq.push({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\n\n// add some items to the queue (batch-wise)\n\nq.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function (err) {\n    console.log('finished processing bar');\n});\n```\n\n---------------------------------------\n\n<a name=\"cargo\" />\n### cargo(worker, [payload])\n\nCreates a cargo object with the specified payload. Tasks added to the\ncargo will be processed altogether (up to the payload limit). If the\nworker is in progress, the task is queued until it is available. Once\nthe worker has completed some tasks, each callback of those tasks is called.\n\n__Arguments__\n\n* worker(tasks, callback) - An asynchronous function for processing queued\n  tasks.\n* payload - An optional integer for determining how many tasks should be\n  process per round, default is unlimited.\n\n__Cargo objects__\n\nThe cargo object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* payload - an integer for determining how many tasks should be\n  process per round. This property can be changed after a cargo is created to\n  alter the payload on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a cargo object with payload 2\n\nvar cargo = async.cargo(function (task, callback) {\n    console.log('hello ' + task.name);\n    callback();\n}, 2);\n\n\n// add some items\n\ncargo.push({name: 'foo'}, function (err) {\n    console.log('finished processing foo');\n});\ncargo.push({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\ncargo.push({name: 'baz'}, function (err) {\n    console.log('finished processing baz');\n});\n```\n\n---------------------------------------\n\n<a name=\"auto\" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The\n  syntax is easier to understand by looking at the example.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. If all tasks complete\n  successfully, it will receive an object containing their results.\n\n__Example__\n\n```js\nasync.auto({\n    get_data: function(callback){\n        // async code to get some data\n    },\n    make_folder: function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    },\n    write_file: ['get_data', 'make_folder', function(callback){\n        // once there is some data and the directory exists,\n        // write the data to a file in the directory\n        callback(null, filename);\n    }],\n    email_link: ['write_file', function(callback, results){\n        // once the file is written let's email a link to it...\n        // results.write_file contains the filename returned by write_file.\n    }]\n});\n```\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n```js\nasync.parallel([\n    function(callback){\n        // async code to get some data\n    },\n    function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    }\n],\nfunction(err, results){\n    async.series([\n        function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n        },\n        function(callback){\n            // once the file is written let's email a link to it...\n        }\n    ]);\n});\n```\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name=\"iterator\" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. Its also possible to\n'peek' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n\n__Example__\n\n```js\nvar iterator = async.iterator([\n    function(){ sys.p('one'); },\n    function(){ sys.p('two'); },\n    function(){ sys.p('three'); }\n]);\n\nnode> var iterator2 = iterator();\n'one'\nnode> var iterator3 = iterator2();\n'two'\nnode> iterator3();\n'three'\nnode> var nextfn = iterator2.next();\nnode> nextfn();\n'three'\n```\n\n---------------------------------------\n\n<a name=\"apply\" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n```js\n// using apply\n\nasync.parallel([\n    async.apply(fs.writeFile, 'testfile1', 'test1'),\n    async.apply(fs.writeFile, 'testfile2', 'test2'),\n]);\n\n\n// the same process without using apply\n\nasync.parallel([\n    function(callback){\n        fs.writeFile('testfile1', 'test1', callback);\n    },\n    function(callback){\n        fs.writeFile('testfile2', 'test2', callback);\n    }\n]);\n```\n\nIt's possible to pass any number of additional arguments when calling the\ncontinuation:\n\n```js\nnode> var fn = async.apply(sys.puts, 'one');\nnode> fn('two', 'three');\none\ntwo\nthree\n```\n\n---------------------------------------\n\n<a name=\"nextTick\" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setImmediate(callback)\nif available, otherwise setTimeout(callback, 0), which means other higher priority\nevents may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n```js\nvar call_order = [];\nasync.nextTick(function(){\n    call_order.push('two');\n    // call_order now equals ['one','two']\n});\ncall_order.push('one')\n```\n\n<a name=\"times\" />\n### times(n, callback)\n\nCalls the callback n times and accumulates results in the same manner\nyou would use with async.map.\n\n__Arguments__\n\n* n - The number of times to run the function.\n* callback - The function to call n times.\n\n__Example__\n\n```js\n// Pretend this is some complicated async factory\nvar createUser = function(id, callback) {\n  callback(null, {\n    id: 'user' + id\n  })\n}\n// generate 5 users\nasync.times(5, function(n, next){\n    createUser(n, function(err, user) {\n      next(err, user)\n    })\n}, function(err, users) {\n  // we should now have 5 users\n});\n```\n\n<a name=\"timesSeries\" />\n### timesSeries(n, callback)\n\nThe same as times only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n## Utils\n\n<a name=\"memoize\" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\nThe cache of results is exposed as the `memo` property of the function returned\nby `memoize`.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n```js\nvar slow_fn = function (name, callback) {\n    // do something\n    callback(null, result);\n};\nvar fn = async.memoize(slow_fn);\n\n// fn can now be used as if it were slow_fn\nfn('some name', function () {\n    // callback\n});\n```\n\n<a name=\"unmemoize\" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name=\"log\" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, 'hello ' + name);\n    }, 1000);\n};\n```\n```js\nnode> async.log(hello, 'world');\n'hello world'\n```\n\n---------------------------------------\n\n<a name=\"dir\" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, {hello: name});\n    }, 1000);\n};\n```\n```js\nnode> async.dir(hello, 'world');\n{hello: 'world'}\n```\n\n---------------------------------------\n\n<a name=\"noConflict\" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n","readmeFilename":"README.md","_id":"async@0.2.1","dist":{"shasum":"4e37d08391132f79657a99ca73aa4eb471a6f771","tarball":"http://registry.npmjs.org/async/-/async-0.2.1.tgz"},"_npmVersion":"1.2.0","_npmUser":{"name":"caolan","email":"caolan.mcmahon@gmail.com"},"maintainers":[{"name":"caolan","email":"caolan@caolanmcmahon.com"}],"directories":{}},"0.2.2":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./lib/async","author":{"name":"Caolan McMahon"},"version":"0.2.2","repository":{"type":"git","url":"http://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"devDependencies":{"nodeunit":">0.0.0","uglify-js":"1.2.x","nodelint":">0.0.0"},"jam":{"main":"lib/async.js","include":["lib/async.js","README.md","LICENSE"]},"readme":"# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual 'functional'\nsuspects (map, reduce, filter, forEach…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n```javascript\nasync.map(['file1','file2','file3'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n\nasync.filter(['file1','file2','file3'], path.exists, function(results){\n    // results now equals an array of the existing files\n});\n\nasync.parallel([\n    function(){ ... },\n    function(){ ... }\n], callback);\n\nasync.series([\n    function(){ ... },\n    function(){ ... }\n]);\n```\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n\n## Download\n\nReleases are available for download from\n[GitHub](http://github.com/caolan/async/downloads).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 17.5kb Uncompressed\n\n__Production:__ [async.min.js](https://github.com/caolan/async/raw/master/dist/async.min.js) - 1.7kb Packed and Gzipped\n\n\n## In the Browser\n\nSo far its been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n```html\n<script type=\"text/javascript\" src=\"async.js\"></script>\n<script type=\"text/javascript\">\n\n    async.map(data, asyncProcess, function(err, results){\n        alert(results);\n    });\n\n</script>\n```\n\n## Documentation\n\n### Collections\n\n* [forEach](#forEach)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [doWhilst](#doWhilst)\n* [until](#until)\n* [doUntil](#doUntil)\n* [waterfall](#waterfall)\n* [queue](#queue)\n* [cargo](#cargo)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n* [times](#times)\n* [timesSeries](#timesSeries)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name=\"forEach\" />\n### forEach(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the forEach function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err) which must be called once it has completed.\n  If no error has occured, the callback should be run without arguments or \n  with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// assuming openFiles is an array of file names and saveFile is a function\n// to save the modified contents of that file:\n\nasync.forEach(openFiles, saveFile, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name=\"forEachSeries\" />\n### forEachSeries(arr, iterator, callback)\n\nThe same as forEach only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name=\"forEachLimit\" />\n### forEachLimit(arr, limit, iterator, callback)\n\nThe same as forEach only the iterator is applied to batches of items in the\narray, in series. The next batch of iterators is only called once the current\none has completed processing.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - How many items should be in each batch.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n  If no error has occured, the callback should be run without arguments or \n  with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// Assume documents is an array of JSON objects and requestApi is a\n// function that interacts with a rate-limited REST api.\n\nasync.forEachLimit(documents, 20, requestApi, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name=\"map\" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map(['file1','file2','file3'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name=\"mapSeries\" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name=\"mapLimit\" />\n### mapLimit(arr, limit, iterator, callback)\n\nThe same as map only the iterator is applied to batches of items in the\narray, in series. The next batch of iterators is only called once the current\none has completed processing.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - How many items should be in each batch.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n  If no error has occured, the callback should be run without arguments or \n  with an explicit null argument.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map(['file1','file2','file3'], 1, fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name=\"filter\" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n```js\nasync.filter(['file1','file2','file3'], path.exists, function(results){\n    // results now equals an array of the existing files\n});\n```\n\n---------------------------------------\n\n<a name=\"filterSeries\" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name=\"reject\" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name=\"rejectSeries\" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as reject, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name=\"reduce\" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then its probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback which accepts an optional error as its first argument, and the state\n  of the reduction as the second. If an error is passed to the callback, the\n  reduction is stopped and the main callback is immediately called with the\n  error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n```js\nasync.reduce([1,2,3], 0, function(memo, item, callback){\n    // pointless async:\n    process.nextTick(function(){\n        callback(null, memo + item)\n    });\n}, function(err, result){\n    // result is now equal to the last value of memo, which is 6\n});\n```\n\n---------------------------------------\n\n<a name=\"reduceRight\" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name=\"detect\" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n```js\nasync.detect(['file1','file2','file3'], path.exists, function(result){\n    // result now equals the first file in the list that exists\n});\n```\n\n---------------------------------------\n\n<a name=\"detectSeries\" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name=\"sortBy\" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a value to use as the sort criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n```js\nasync.sortBy(['file1','file2','file3'], function(file, callback){\n    fs.stat(file, function(err, stats){\n        callback(err, stats.mtime);\n    });\n}, function(err, results){\n    // results is now the original array of files sorted by\n    // modified date\n});\n```\n\n---------------------------------------\n\n<a name=\"some\" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n```js\nasync.some(['file1','file2','file3'], path.exists, function(result){\n    // if result is true then at least one of the files exists\n});\n```\n\n---------------------------------------\n\n<a name=\"every\" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n```js\nasync.every(['file1','file2','file3'], path.exists, function(result){\n    // if result is true then every file exists\n});\n```\n\n---------------------------------------\n\n<a name=\"concat\" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n```js\nasync.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files){\n    // files is now a list of filenames that exist in the 3 directories\n});\n```\n\n---------------------------------------\n\n<a name=\"concatSeries\" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name=\"series\" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n```js\nasync.series([\n    function(callback){\n        // do some stuff ...\n        callback(null, 'one');\n    },\n    function(callback){\n        // do some more stuff ...\n        callback(null, 'two');\n    }\n],\n// optional callback\nfunction(err, results){\n    // results is now equal to ['one', 'two']\n});\n\n\n// an example using an object instead of an array\nasync.series({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equal to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n```js\nasync.parallel([\n    function(callback){\n        setTimeout(function(){\n            callback(null, 'one');\n        }, 200);\n    },\n    function(callback){\n        setTimeout(function(){\n            callback(null, 'two');\n        }, 100);\n    }\n],\n// optional callback\nfunction(err, results){\n    // the results array will equal ['one','two'] even though\n    // the second function had a shorter timeout.\n});\n\n\n// an example using an object instead of an array\nasync.parallel({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equals to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallelLimit(tasks, limit, [callback])\n\nThe same as parallel only the tasks are executed in parallel with a maximum of \"limit\" \ntasks executing at any time.\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* limit - The maximum number of tasks to run at any time.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n\n---------------------------------------\n\n<a name=\"whilst\" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback which must be called once it has completed with an optional\n  error as the first argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n```js\nvar count = 0;\n\nasync.whilst(\n    function () { return count < 5; },\n    function (callback) {\n        count++;\n        setTimeout(callback, 1000);\n    },\n    function (err) {\n        // 5 seconds have passed\n    }\n);\n```\n\n---------------------------------------\n\n<a name=\"doWhilst\" />\n### doWhilst(fn, test, callback)\n\nThe post check version of whilst. To reflect the difference in the order of operations `test` and `fn` arguments are switched. `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n\n---------------------------------------\n\n<a name=\"until\" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n---------------------------------------\n\n<a name=\"doUntil\" />\n### doUntil(fn, test, callback)\n\nLike doWhilst except the test is inverted. Note the argument ordering differs from `until`.\n\n\n---------------------------------------\n\n<a name=\"waterfall\" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task's callback.\n\n\n\n__Example__\n\n```js\nasync.waterfall([\n    function(callback){\n        callback(null, 'one', 'two');\n    },\n    function(arg1, arg2, callback){\n        callback(null, 'three');\n    },\n    function(arg1, callback){\n        // arg1 now equals 'three'\n        callback(null, 'done');\n    }\n], function (err, result) {\n   // result now equals 'done'    \n});\n```\n\n---------------------------------------\n\n<a name=\"queue\" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task's callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* unshift(task, [callback]) - add a new task to the front of the queue.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a queue object with concurrency 2\n\nvar q = async.queue(function (task, callback) {\n    console.log('hello ' + task.name);\n    callback();\n}, 2);\n\n\n// assign a callback\nq.drain = function() {\n    console.log('all items have been processed');\n}\n\n// add some items to the queue\n\nq.push({name: 'foo'}, function (err) {\n    console.log('finished processing foo');\n});\nq.push({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\n\n// add some items to the queue (batch-wise)\n\nq.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function (err) {\n    console.log('finished processing bar');\n});\n\n// add some items to the front of the queue\n\nq.unshift({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\n```\n\n---------------------------------------\n\n<a name=\"cargo\" />\n### cargo(worker, [payload])\n\nCreates a cargo object with the specified payload. Tasks added to the\ncargo will be processed altogether (up to the payload limit). If the\nworker is in progress, the task is queued until it is available. Once\nthe worker has completed some tasks, each callback of those tasks is called.\n\n__Arguments__\n\n* worker(tasks, callback) - An asynchronous function for processing queued\n  tasks.\n* payload - An optional integer for determining how many tasks should be\n  process per round, default is unlimited.\n\n__Cargo objects__\n\nThe cargo object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* payload - an integer for determining how many tasks should be\n  process per round. This property can be changed after a cargo is created to\n  alter the payload on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a cargo object with payload 2\n\nvar cargo = async.cargo(function (task, callback) {\n    console.log('hello ' + task.name);\n    callback();\n}, 2);\n\n\n// add some items\n\ncargo.push({name: 'foo'}, function (err) {\n    console.log('finished processing foo');\n});\ncargo.push({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\ncargo.push({name: 'baz'}, function (err) {\n    console.log('finished processing baz');\n});\n```\n\n---------------------------------------\n\n<a name=\"auto\" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The\n  syntax is easier to understand by looking at the example.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. If all tasks complete\n  successfully, it will receive an object containing their results.\n\n__Example__\n\n```js\nasync.auto({\n    get_data: function(callback){\n        // async code to get some data\n    },\n    make_folder: function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    },\n    write_file: ['get_data', 'make_folder', function(callback){\n        // once there is some data and the directory exists,\n        // write the data to a file in the directory\n        callback(null, filename);\n    }],\n    email_link: ['write_file', function(callback, results){\n        // once the file is written let's email a link to it...\n        // results.write_file contains the filename returned by write_file.\n    }]\n});\n```\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n```js\nasync.parallel([\n    function(callback){\n        // async code to get some data\n    },\n    function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    }\n],\nfunction(err, results){\n    async.series([\n        function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n        },\n        function(callback){\n            // once the file is written let's email a link to it...\n        }\n    ]);\n});\n```\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name=\"iterator\" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. Its also possible to\n'peek' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n\n__Example__\n\n```js\nvar iterator = async.iterator([\n    function(){ sys.p('one'); },\n    function(){ sys.p('two'); },\n    function(){ sys.p('three'); }\n]);\n\nnode> var iterator2 = iterator();\n'one'\nnode> var iterator3 = iterator2();\n'two'\nnode> iterator3();\n'three'\nnode> var nextfn = iterator2.next();\nnode> nextfn();\n'three'\n```\n\n---------------------------------------\n\n<a name=\"apply\" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n```js\n// using apply\n\nasync.parallel([\n    async.apply(fs.writeFile, 'testfile1', 'test1'),\n    async.apply(fs.writeFile, 'testfile2', 'test2'),\n]);\n\n\n// the same process without using apply\n\nasync.parallel([\n    function(callback){\n        fs.writeFile('testfile1', 'test1', callback);\n    },\n    function(callback){\n        fs.writeFile('testfile2', 'test2', callback);\n    }\n]);\n```\n\nIt's possible to pass any number of additional arguments when calling the\ncontinuation:\n\n```js\nnode> var fn = async.apply(sys.puts, 'one');\nnode> fn('two', 'three');\none\ntwo\nthree\n```\n\n---------------------------------------\n\n<a name=\"nextTick\" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setImmediate(callback)\nif available, otherwise setTimeout(callback, 0), which means other higher priority\nevents may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n```js\nvar call_order = [];\nasync.nextTick(function(){\n    call_order.push('two');\n    // call_order now equals ['one','two']\n});\ncall_order.push('one')\n```\n\n<a name=\"times\" />\n### times(n, callback)\n\nCalls the callback n times and accumulates results in the same manner\nyou would use with async.map.\n\n__Arguments__\n\n* n - The number of times to run the function.\n* callback - The function to call n times.\n\n__Example__\n\n```js\n// Pretend this is some complicated async factory\nvar createUser = function(id, callback) {\n  callback(null, {\n    id: 'user' + id\n  })\n}\n// generate 5 users\nasync.times(5, function(n, next){\n    createUser(n, function(err, user) {\n      next(err, user)\n    })\n}, function(err, users) {\n  // we should now have 5 users\n});\n```\n\n<a name=\"timesSeries\" />\n### timesSeries(n, callback)\n\nThe same as times only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n## Utils\n\n<a name=\"memoize\" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\nThe cache of results is exposed as the `memo` property of the function returned\nby `memoize`.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n```js\nvar slow_fn = function (name, callback) {\n    // do something\n    callback(null, result);\n};\nvar fn = async.memoize(slow_fn);\n\n// fn can now be used as if it were slow_fn\nfn('some name', function () {\n    // callback\n});\n```\n\n<a name=\"unmemoize\" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name=\"log\" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, 'hello ' + name);\n    }, 1000);\n};\n```\n```js\nnode> async.log(hello, 'world');\n'hello world'\n```\n\n---------------------------------------\n\n<a name=\"dir\" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, {hello: name});\n    }, 1000);\n};\n```\n```js\nnode> async.dir(hello, 'world');\n{hello: 'world'}\n```\n\n---------------------------------------\n\n<a name=\"noConflict\" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n","readmeFilename":"README.md","_id":"async@0.2.2","dist":{"shasum":"8414ee47da7548126b4d3d923850d54e68a72b28","tarball":"http://registry.npmjs.org/async/-/async-0.2.2.tgz"},"_npmVersion":"1.2.0","_npmUser":{"name":"caolan","email":"caolan.mcmahon@gmail.com"},"maintainers":[{"name":"caolan","email":"caolan@caolanmcmahon.com"}],"directories":{}},"0.2.3":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./lib/async","author":{"name":"Caolan McMahon"},"version":"0.2.3","repository":{"type":"git","url":"http://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"devDependencies":{"nodeunit":">0.0.0","uglify-js":"1.2.x","nodelint":">0.0.0"},"jam":{"main":"lib/async.js","include":["lib/async.js","README.md","LICENSE"]},"readme":"# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual 'functional'\nsuspects (map, reduce, filter, forEach…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n```javascript\nasync.map(['file1','file2','file3'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n\nasync.filter(['file1','file2','file3'], path.exists, function(results){\n    // results now equals an array of the existing files\n});\n\nasync.parallel([\n    function(){ ... },\n    function(){ ... }\n], callback);\n\nasync.series([\n    function(){ ... },\n    function(){ ... }\n]);\n```\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n\n## Download\n\nReleases are available for download from\n[GitHub](http://github.com/caolan/async/downloads).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 17.5kb Uncompressed\n\n__Production:__ [async.min.js](https://github.com/caolan/async/raw/master/dist/async.min.js) - 1.7kb Packed and Gzipped\n\n\n## In the Browser\n\nSo far its been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n```html\n<script type=\"text/javascript\" src=\"async.js\"></script>\n<script type=\"text/javascript\">\n\n    async.map(data, asyncProcess, function(err, results){\n        alert(results);\n    });\n\n</script>\n```\n\n## Documentation\n\n### Collections\n\n* [forEach](#forEach)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [doWhilst](#doWhilst)\n* [until](#until)\n* [doUntil](#doUntil)\n* [waterfall](#waterfall)\n* [queue](#queue)\n* [cargo](#cargo)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n* [times](#times)\n* [timesSeries](#timesSeries)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name=\"forEach\" />\n### forEach(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the forEach function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err) which must be called once it has completed.\n  If no error has occured, the callback should be run without arguments or \n  with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// assuming openFiles is an array of file names and saveFile is a function\n// to save the modified contents of that file:\n\nasync.forEach(openFiles, saveFile, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name=\"forEachSeries\" />\n### forEachSeries(arr, iterator, callback)\n\nThe same as forEach only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name=\"forEachLimit\" />\n### forEachLimit(arr, limit, iterator, callback)\n\nThe same as forEach only the iterator is applied to batches of items in the\narray, in series. The next batch of iterators is only called once the current\none has completed processing.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - How many items should be in each batch.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n  If no error has occured, the callback should be run without arguments or \n  with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// Assume documents is an array of JSON objects and requestApi is a\n// function that interacts with a rate-limited REST api.\n\nasync.forEachLimit(documents, 20, requestApi, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name=\"map\" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map(['file1','file2','file3'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name=\"mapSeries\" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name=\"mapLimit\" />\n### mapLimit(arr, limit, iterator, callback)\n\nThe same as map only the iterator is applied to batches of items in the\narray, in series. The next batch of iterators is only called once the current\none has completed processing.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - How many items should be in each batch.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n  If no error has occured, the callback should be run without arguments or \n  with an explicit null argument.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map(['file1','file2','file3'], 1, fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name=\"filter\" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n```js\nasync.filter(['file1','file2','file3'], path.exists, function(results){\n    // results now equals an array of the existing files\n});\n```\n\n---------------------------------------\n\n<a name=\"filterSeries\" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name=\"reject\" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name=\"rejectSeries\" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as reject, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name=\"reduce\" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then its probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback which accepts an optional error as its first argument, and the state\n  of the reduction as the second. If an error is passed to the callback, the\n  reduction is stopped and the main callback is immediately called with the\n  error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n```js\nasync.reduce([1,2,3], 0, function(memo, item, callback){\n    // pointless async:\n    process.nextTick(function(){\n        callback(null, memo + item)\n    });\n}, function(err, result){\n    // result is now equal to the last value of memo, which is 6\n});\n```\n\n---------------------------------------\n\n<a name=\"reduceRight\" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name=\"detect\" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n```js\nasync.detect(['file1','file2','file3'], path.exists, function(result){\n    // result now equals the first file in the list that exists\n});\n```\n\n---------------------------------------\n\n<a name=\"detectSeries\" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name=\"sortBy\" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a value to use as the sort criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n```js\nasync.sortBy(['file1','file2','file3'], function(file, callback){\n    fs.stat(file, function(err, stats){\n        callback(err, stats.mtime);\n    });\n}, function(err, results){\n    // results is now the original array of files sorted by\n    // modified date\n});\n```\n\n---------------------------------------\n\n<a name=\"some\" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n```js\nasync.some(['file1','file2','file3'], path.exists, function(result){\n    // if result is true then at least one of the files exists\n});\n```\n\n---------------------------------------\n\n<a name=\"every\" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n```js\nasync.every(['file1','file2','file3'], path.exists, function(result){\n    // if result is true then every file exists\n});\n```\n\n---------------------------------------\n\n<a name=\"concat\" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n```js\nasync.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files){\n    // files is now a list of filenames that exist in the 3 directories\n});\n```\n\n---------------------------------------\n\n<a name=\"concatSeries\" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name=\"series\" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n```js\nasync.series([\n    function(callback){\n        // do some stuff ...\n        callback(null, 'one');\n    },\n    function(callback){\n        // do some more stuff ...\n        callback(null, 'two');\n    }\n],\n// optional callback\nfunction(err, results){\n    // results is now equal to ['one', 'two']\n});\n\n\n// an example using an object instead of an array\nasync.series({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equal to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n```js\nasync.parallel([\n    function(callback){\n        setTimeout(function(){\n            callback(null, 'one');\n        }, 200);\n    },\n    function(callback){\n        setTimeout(function(){\n            callback(null, 'two');\n        }, 100);\n    }\n],\n// optional callback\nfunction(err, results){\n    // the results array will equal ['one','two'] even though\n    // the second function had a shorter timeout.\n});\n\n\n// an example using an object instead of an array\nasync.parallel({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equals to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallelLimit(tasks, limit, [callback])\n\nThe same as parallel only the tasks are executed in parallel with a maximum of \"limit\" \ntasks executing at any time.\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* limit - The maximum number of tasks to run at any time.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n\n---------------------------------------\n\n<a name=\"whilst\" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback which must be called once it has completed with an optional\n  error as the first argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n```js\nvar count = 0;\n\nasync.whilst(\n    function () { return count < 5; },\n    function (callback) {\n        count++;\n        setTimeout(callback, 1000);\n    },\n    function (err) {\n        // 5 seconds have passed\n    }\n);\n```\n\n---------------------------------------\n\n<a name=\"doWhilst\" />\n### doWhilst(fn, test, callback)\n\nThe post check version of whilst. To reflect the difference in the order of operations `test` and `fn` arguments are switched. `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n\n---------------------------------------\n\n<a name=\"until\" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n---------------------------------------\n\n<a name=\"doUntil\" />\n### doUntil(fn, test, callback)\n\nLike doWhilst except the test is inverted. Note the argument ordering differs from `until`.\n\n\n---------------------------------------\n\n<a name=\"waterfall\" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task's callback.\n\n\n\n__Example__\n\n```js\nasync.waterfall([\n    function(callback){\n        callback(null, 'one', 'two');\n    },\n    function(arg1, arg2, callback){\n        callback(null, 'three');\n    },\n    function(arg1, callback){\n        // arg1 now equals 'three'\n        callback(null, 'done');\n    }\n], function (err, result) {\n   // result now equals 'done'    \n});\n```\n\n---------------------------------------\n\n<a name=\"queue\" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task's callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* unshift(task, [callback]) - add a new task to the front of the queue.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a queue object with concurrency 2\n\nvar q = async.queue(function (task, callback) {\n    console.log('hello ' + task.name);\n    callback();\n}, 2);\n\n\n// assign a callback\nq.drain = function() {\n    console.log('all items have been processed');\n}\n\n// add some items to the queue\n\nq.push({name: 'foo'}, function (err) {\n    console.log('finished processing foo');\n});\nq.push({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\n\n// add some items to the queue (batch-wise)\n\nq.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function (err) {\n    console.log('finished processing bar');\n});\n\n// add some items to the front of the queue\n\nq.unshift({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\n```\n\n---------------------------------------\n\n<a name=\"cargo\" />\n### cargo(worker, [payload])\n\nCreates a cargo object with the specified payload. Tasks added to the\ncargo will be processed altogether (up to the payload limit). If the\nworker is in progress, the task is queued until it is available. Once\nthe worker has completed some tasks, each callback of those tasks is called.\n\n__Arguments__\n\n* worker(tasks, callback) - An asynchronous function for processing queued\n  tasks.\n* payload - An optional integer for determining how many tasks should be\n  process per round, default is unlimited.\n\n__Cargo objects__\n\nThe cargo object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* payload - an integer for determining how many tasks should be\n  process per round. This property can be changed after a cargo is created to\n  alter the payload on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a cargo object with payload 2\n\nvar cargo = async.cargo(function (task, callback) {\n    console.log('hello ' + task.name);\n    callback();\n}, 2);\n\n\n// add some items\n\ncargo.push({name: 'foo'}, function (err) {\n    console.log('finished processing foo');\n});\ncargo.push({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\ncargo.push({name: 'baz'}, function (err) {\n    console.log('finished processing baz');\n});\n```\n\n---------------------------------------\n\n<a name=\"auto\" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The\n  syntax is easier to understand by looking at the example.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. If all tasks complete\n  successfully, it will receive an object containing their results.\n\n__Example__\n\n```js\nasync.auto({\n    get_data: function(callback){\n        // async code to get some data\n    },\n    make_folder: function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    },\n    write_file: ['get_data', 'make_folder', function(callback){\n        // once there is some data and the directory exists,\n        // write the data to a file in the directory\n        callback(null, filename);\n    }],\n    email_link: ['write_file', function(callback, results){\n        // once the file is written let's email a link to it...\n        // results.write_file contains the filename returned by write_file.\n    }]\n});\n```\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n```js\nasync.parallel([\n    function(callback){\n        // async code to get some data\n    },\n    function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    }\n],\nfunction(err, results){\n    async.series([\n        function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n        },\n        function(callback){\n            // once the file is written let's email a link to it...\n        }\n    ]);\n});\n```\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name=\"iterator\" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. Its also possible to\n'peek' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n\n__Example__\n\n```js\nvar iterator = async.iterator([\n    function(){ sys.p('one'); },\n    function(){ sys.p('two'); },\n    function(){ sys.p('three'); }\n]);\n\nnode> var iterator2 = iterator();\n'one'\nnode> var iterator3 = iterator2();\n'two'\nnode> iterator3();\n'three'\nnode> var nextfn = iterator2.next();\nnode> nextfn();\n'three'\n```\n\n---------------------------------------\n\n<a name=\"apply\" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n```js\n// using apply\n\nasync.parallel([\n    async.apply(fs.writeFile, 'testfile1', 'test1'),\n    async.apply(fs.writeFile, 'testfile2', 'test2'),\n]);\n\n\n// the same process without using apply\n\nasync.parallel([\n    function(callback){\n        fs.writeFile('testfile1', 'test1', callback);\n    },\n    function(callback){\n        fs.writeFile('testfile2', 'test2', callback);\n    }\n]);\n```\n\nIt's possible to pass any number of additional arguments when calling the\ncontinuation:\n\n```js\nnode> var fn = async.apply(sys.puts, 'one');\nnode> fn('two', 'three');\none\ntwo\nthree\n```\n\n---------------------------------------\n\n<a name=\"nextTick\" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setImmediate(callback)\nif available, otherwise setTimeout(callback, 0), which means other higher priority\nevents may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n```js\nvar call_order = [];\nasync.nextTick(function(){\n    call_order.push('two');\n    // call_order now equals ['one','two']\n});\ncall_order.push('one')\n```\n\n<a name=\"times\" />\n### times(n, callback)\n\nCalls the callback n times and accumulates results in the same manner\nyou would use with async.map.\n\n__Arguments__\n\n* n - The number of times to run the function.\n* callback - The function to call n times.\n\n__Example__\n\n```js\n// Pretend this is some complicated async factory\nvar createUser = function(id, callback) {\n  callback(null, {\n    id: 'user' + id\n  })\n}\n// generate 5 users\nasync.times(5, function(n, next){\n    createUser(n, function(err, user) {\n      next(err, user)\n    })\n}, function(err, users) {\n  // we should now have 5 users\n});\n```\n\n<a name=\"timesSeries\" />\n### timesSeries(n, callback)\n\nThe same as times only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n## Utils\n\n<a name=\"memoize\" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\nThe cache of results is exposed as the `memo` property of the function returned\nby `memoize`.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n```js\nvar slow_fn = function (name, callback) {\n    // do something\n    callback(null, result);\n};\nvar fn = async.memoize(slow_fn);\n\n// fn can now be used as if it were slow_fn\nfn('some name', function () {\n    // callback\n});\n```\n\n<a name=\"unmemoize\" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name=\"log\" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, 'hello ' + name);\n    }, 1000);\n};\n```\n```js\nnode> async.log(hello, 'world');\n'hello world'\n```\n\n---------------------------------------\n\n<a name=\"dir\" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, {hello: name});\n    }, 1000);\n};\n```\n```js\nnode> async.dir(hello, 'world');\n{hello: 'world'}\n```\n\n---------------------------------------\n\n<a name=\"noConflict\" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n","readmeFilename":"README.md","_id":"async@0.2.3","dist":{"shasum":"79bf601d723a2e8c3e91cb6bb08f152dca309fb3","tarball":"http://registry.npmjs.org/async/-/async-0.2.3.tgz"},"_npmVersion":"1.2.0","_npmUser":{"name":"caolan","email":"caolan.mcmahon@gmail.com"},"maintainers":[{"name":"caolan","email":"caolan@caolanmcmahon.com"}],"directories":{}},"0.2.4":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./lib/async","author":{"name":"Caolan McMahon"},"version":"0.2.4","repository":{"type":"git","url":"http://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"devDependencies":{"nodeunit":">0.0.0","uglify-js":"1.2.x","nodelint":">0.0.0"},"jam":{"main":"lib/async.js","include":["lib/async.js","README.md","LICENSE"]},"readme":"# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual 'functional'\nsuspects (map, reduce, filter, forEach…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n```javascript\nasync.map(['file1','file2','file3'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n\nasync.filter(['file1','file2','file3'], path.exists, function(results){\n    // results now equals an array of the existing files\n});\n\nasync.parallel([\n    function(){ ... },\n    function(){ ... }\n], callback);\n\nasync.series([\n    function(){ ... },\n    function(){ ... }\n]);\n```\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n\n## Download\n\nReleases are available for download from\n[GitHub](http://github.com/caolan/async/downloads).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 17.5kb Uncompressed\n\n__Production:__ [async.min.js](https://github.com/caolan/async/raw/master/dist/async.min.js) - 1.7kb Packed and Gzipped\n\n\n## In the Browser\n\nSo far its been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n```html\n<script type=\"text/javascript\" src=\"async.js\"></script>\n<script type=\"text/javascript\">\n\n    async.map(data, asyncProcess, function(err, results){\n        alert(results);\n    });\n\n</script>\n```\n\n## Documentation\n\n### Collections\n\n* [forEach](#forEach)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [doWhilst](#doWhilst)\n* [until](#until)\n* [doUntil](#doUntil)\n* [waterfall](#waterfall)\n* [compose](#compose)\n* [queue](#queue)\n* [cargo](#cargo)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n* [times](#times)\n* [timesSeries](#timesSeries)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name=\"forEach\" />\n### forEach(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the forEach function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err) which must be called once it has completed.\n  If no error has occured, the callback should be run without arguments or \n  with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// assuming openFiles is an array of file names and saveFile is a function\n// to save the modified contents of that file:\n\nasync.forEach(openFiles, saveFile, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name=\"forEachSeries\" />\n### forEachSeries(arr, iterator, callback)\n\nThe same as forEach only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name=\"forEachLimit\" />\n### forEachLimit(arr, limit, iterator, callback)\n\nThe same as forEach only no more than \"limit\" iterators will be simultaneously \nrunning at any time.\n\nNote that the items are not processed in batches, so there is no guarantee that\n the first \"limit\" iterator functions will complete before any others are \nstarted.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - The maximum number of iterators to run at any time.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n  If no error has occured, the callback should be run without arguments or \n  with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// Assume documents is an array of JSON objects and requestApi is a\n// function that interacts with a rate-limited REST api.\n\nasync.forEachLimit(documents, 20, requestApi, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name=\"map\" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map(['file1','file2','file3'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name=\"mapSeries\" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name=\"mapLimit\" />\n### mapLimit(arr, limit, iterator, callback)\n\nThe same as map only no more than \"limit\" iterators will be simultaneously \nrunning at any time.\n\nNote that the items are not processed in batches, so there is no guarantee that\n the first \"limit\" iterator functions will complete before any others are \nstarted.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - The maximum number of iterators to run at any time.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n  If no error has occured, the callback should be run without arguments or \n  with an explicit null argument.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map(['file1','file2','file3'], 1, fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name=\"filter\" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n```js\nasync.filter(['file1','file2','file3'], path.exists, function(results){\n    // results now equals an array of the existing files\n});\n```\n\n---------------------------------------\n\n<a name=\"filterSeries\" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name=\"reject\" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name=\"rejectSeries\" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as reject, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name=\"reduce\" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then its probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback which accepts an optional error as its first argument, and the state\n  of the reduction as the second. If an error is passed to the callback, the\n  reduction is stopped and the main callback is immediately called with the\n  error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n```js\nasync.reduce([1,2,3], 0, function(memo, item, callback){\n    // pointless async:\n    process.nextTick(function(){\n        callback(null, memo + item)\n    });\n}, function(err, result){\n    // result is now equal to the last value of memo, which is 6\n});\n```\n\n---------------------------------------\n\n<a name=\"reduceRight\" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name=\"detect\" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n```js\nasync.detect(['file1','file2','file3'], path.exists, function(result){\n    // result now equals the first file in the list that exists\n});\n```\n\n---------------------------------------\n\n<a name=\"detectSeries\" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name=\"sortBy\" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a value to use as the sort criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n```js\nasync.sortBy(['file1','file2','file3'], function(file, callback){\n    fs.stat(file, function(err, stats){\n        callback(err, stats.mtime);\n    });\n}, function(err, results){\n    // results is now the original array of files sorted by\n    // modified date\n});\n```\n\n---------------------------------------\n\n<a name=\"some\" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n```js\nasync.some(['file1','file2','file3'], path.exists, function(result){\n    // if result is true then at least one of the files exists\n});\n```\n\n---------------------------------------\n\n<a name=\"every\" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n```js\nasync.every(['file1','file2','file3'], path.exists, function(result){\n    // if result is true then every file exists\n});\n```\n\n---------------------------------------\n\n<a name=\"concat\" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n```js\nasync.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files){\n    // files is now a list of filenames that exist in the 3 directories\n});\n```\n\n---------------------------------------\n\n<a name=\"concatSeries\" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name=\"series\" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n```js\nasync.series([\n    function(callback){\n        // do some stuff ...\n        callback(null, 'one');\n    },\n    function(callback){\n        // do some more stuff ...\n        callback(null, 'two');\n    }\n],\n// optional callback\nfunction(err, results){\n    // results is now equal to ['one', 'two']\n});\n\n\n// an example using an object instead of an array\nasync.series({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equal to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n```js\nasync.parallel([\n    function(callback){\n        setTimeout(function(){\n            callback(null, 'one');\n        }, 200);\n    },\n    function(callback){\n        setTimeout(function(){\n            callback(null, 'two');\n        }, 100);\n    }\n],\n// optional callback\nfunction(err, results){\n    // the results array will equal ['one','two'] even though\n    // the second function had a shorter timeout.\n});\n\n\n// an example using an object instead of an array\nasync.parallel({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equals to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallelLimit(tasks, limit, [callback])\n\nThe same as parallel only the tasks are executed in parallel with a maximum of \"limit\" \ntasks executing at any time.\n\nNote that the tasks are not executed in batches, so there is no guarantee that \nthe first \"limit\" tasks will complete before any others are started.\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* limit - The maximum number of tasks to run at any time.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n\n---------------------------------------\n\n<a name=\"whilst\" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback which must be called once it has completed with an optional\n  error as the first argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n```js\nvar count = 0;\n\nasync.whilst(\n    function () { return count < 5; },\n    function (callback) {\n        count++;\n        setTimeout(callback, 1000);\n    },\n    function (err) {\n        // 5 seconds have passed\n    }\n);\n```\n\n---------------------------------------\n\n<a name=\"doWhilst\" />\n### doWhilst(fn, test, callback)\n\nThe post check version of whilst. To reflect the difference in the order of operations `test` and `fn` arguments are switched. `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n\n---------------------------------------\n\n<a name=\"until\" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n---------------------------------------\n\n<a name=\"doUntil\" />\n### doUntil(fn, test, callback)\n\nLike doWhilst except the test is inverted. Note the argument ordering differs from `until`.\n\n\n---------------------------------------\n\n<a name=\"waterfall\" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task's callback.\n\n\n\n__Example__\n\n```js\nasync.waterfall([\n    function(callback){\n        callback(null, 'one', 'two');\n    },\n    function(arg1, arg2, callback){\n        callback(null, 'three');\n    },\n    function(arg1, callback){\n        // arg1 now equals 'three'\n        callback(null, 'done');\n    }\n], function (err, result) {\n   // result now equals 'done'    \n});\n```\n\n---------------------------------------\n<a name=\"compose\" />\n### compose(fn1, fn2...)\n\nCreates a function which is a composition of the passed asynchronous\nfunctions. Each function consumes the return value of the function that\nfollows. Composing functions f(), g() and h() would produce the result of\nf(g(h())), only this version uses callbacks to obtain the return values.\n\nEach function is executed with the `this` binding of the composed function.\n\n__Arguments__\n\n* functions... - the asynchronous functions to compose\n\n\n__Example__\n\n```js\nfunction add1(n, callback) {\n    setTimeout(function () [\n        callback(null, n + 1);\n    }, 10);\n}\n\nfunction mul3(n, callback) {\n    setTimeout(function () [\n        callback(null, n * 3);\n    }, 10);\n}\n\nvar add1mul3 = async.compose(mul3, add1);\n\nadd1mul3(4, function (err, result) {\n   // result now equals 15\n});\n```\n\n---------------------------------------\n\n<a name=\"queue\" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task's callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* unshift(task, [callback]) - add a new task to the front of the queue.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a queue object with concurrency 2\n\nvar q = async.queue(function (task, callback) {\n    console.log('hello ' + task.name);\n    callback();\n}, 2);\n\n\n// assign a callback\nq.drain = function() {\n    console.log('all items have been processed');\n}\n\n// add some items to the queue\n\nq.push({name: 'foo'}, function (err) {\n    console.log('finished processing foo');\n});\nq.push({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\n\n// add some items to the queue (batch-wise)\n\nq.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function (err) {\n    console.log('finished processing bar');\n});\n\n// add some items to the front of the queue\n\nq.unshift({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\n```\n\n---------------------------------------\n\n<a name=\"cargo\" />\n### cargo(worker, [payload])\n\nCreates a cargo object with the specified payload. Tasks added to the\ncargo will be processed altogether (up to the payload limit). If the\nworker is in progress, the task is queued until it is available. Once\nthe worker has completed some tasks, each callback of those tasks is called.\n\n__Arguments__\n\n* worker(tasks, callback) - An asynchronous function for processing queued\n  tasks.\n* payload - An optional integer for determining how many tasks should be\n  process per round, default is unlimited.\n\n__Cargo objects__\n\nThe cargo object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* payload - an integer for determining how many tasks should be\n  process per round. This property can be changed after a cargo is created to\n  alter the payload on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a cargo object with payload 2\n\nvar cargo = async.cargo(function (task, callback) {\n    console.log('hello ' + task.name);\n    callback();\n}, 2);\n\n\n// add some items\n\ncargo.push({name: 'foo'}, function (err) {\n    console.log('finished processing foo');\n});\ncargo.push({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\ncargo.push({name: 'baz'}, function (err) {\n    console.log('finished processing baz');\n});\n```\n\n---------------------------------------\n\n<a name=\"auto\" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The\n  syntax is easier to understand by looking at the example.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. If all tasks complete\n  successfully, it will receive an object containing their results.\n\n__Example__\n\n```js\nasync.auto({\n    get_data: function(callback){\n        // async code to get some data\n    },\n    make_folder: function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    },\n    write_file: ['get_data', 'make_folder', function(callback){\n        // once there is some data and the directory exists,\n        // write the data to a file in the directory\n        callback(null, filename);\n    }],\n    email_link: ['write_file', function(callback, results){\n        // once the file is written let's email a link to it...\n        // results.write_file contains the filename returned by write_file.\n    }]\n});\n```\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n```js\nasync.parallel([\n    function(callback){\n        // async code to get some data\n    },\n    function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    }\n],\nfunction(err, results){\n    async.series([\n        function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n        },\n        function(callback){\n            // once the file is written let's email a link to it...\n        }\n    ]);\n});\n```\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name=\"iterator\" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. Its also possible to\n'peek' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n\n__Example__\n\n```js\nvar iterator = async.iterator([\n    function(){ sys.p('one'); },\n    function(){ sys.p('two'); },\n    function(){ sys.p('three'); }\n]);\n\nnode> var iterator2 = iterator();\n'one'\nnode> var iterator3 = iterator2();\n'two'\nnode> iterator3();\n'three'\nnode> var nextfn = iterator2.next();\nnode> nextfn();\n'three'\n```\n\n---------------------------------------\n\n<a name=\"apply\" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n```js\n// using apply\n\nasync.parallel([\n    async.apply(fs.writeFile, 'testfile1', 'test1'),\n    async.apply(fs.writeFile, 'testfile2', 'test2'),\n]);\n\n\n// the same process without using apply\n\nasync.parallel([\n    function(callback){\n        fs.writeFile('testfile1', 'test1', callback);\n    },\n    function(callback){\n        fs.writeFile('testfile2', 'test2', callback);\n    }\n]);\n```\n\nIt's possible to pass any number of additional arguments when calling the\ncontinuation:\n\n```js\nnode> var fn = async.apply(sys.puts, 'one');\nnode> fn('two', 'three');\none\ntwo\nthree\n```\n\n---------------------------------------\n\n<a name=\"nextTick\" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setImmediate(callback)\nif available, otherwise setTimeout(callback, 0), which means other higher priority\nevents may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n```js\nvar call_order = [];\nasync.nextTick(function(){\n    call_order.push('two');\n    // call_order now equals ['one','two']\n});\ncall_order.push('one')\n```\n\n<a name=\"times\" />\n### times(n, callback)\n\nCalls the callback n times and accumulates results in the same manner\nyou would use with async.map.\n\n__Arguments__\n\n* n - The number of times to run the function.\n* callback - The function to call n times.\n\n__Example__\n\n```js\n// Pretend this is some complicated async factory\nvar createUser = function(id, callback) {\n  callback(null, {\n    id: 'user' + id\n  })\n}\n// generate 5 users\nasync.times(5, function(n, next){\n    createUser(n, function(err, user) {\n      next(err, user)\n    })\n}, function(err, users) {\n  // we should now have 5 users\n});\n```\n\n<a name=\"timesSeries\" />\n### timesSeries(n, callback)\n\nThe same as times only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n## Utils\n\n<a name=\"memoize\" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\nThe cache of results is exposed as the `memo` property of the function returned\nby `memoize`.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n```js\nvar slow_fn = function (name, callback) {\n    // do something\n    callback(null, result);\n};\nvar fn = async.memoize(slow_fn);\n\n// fn can now be used as if it were slow_fn\nfn('some name', function () {\n    // callback\n});\n```\n\n<a name=\"unmemoize\" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name=\"log\" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, 'hello ' + name);\n    }, 1000);\n};\n```\n```js\nnode> async.log(hello, 'world');\n'hello world'\n```\n\n---------------------------------------\n\n<a name=\"dir\" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, {hello: name});\n    }, 1000);\n};\n```\n```js\nnode> async.dir(hello, 'world');\n{hello: 'world'}\n```\n\n---------------------------------------\n\n<a name=\"noConflict\" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n","readmeFilename":"README.md","_id":"async@0.2.4","dist":{"shasum":"0550e510cf43b83e2fcf1cb96399f03f1efd50eb","tarball":"http://registry.npmjs.org/async/-/async-0.2.4.tgz"},"_npmVersion":"1.2.0","_npmUser":{"name":"caolan","email":"caolan.mcmahon@gmail.com"},"maintainers":[{"name":"caolan","email":"caolan@caolanmcmahon.com"}],"directories":{}},"0.2.5":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./lib/async","author":{"name":"Caolan McMahon"},"version":"0.2.5","repository":{"type":"git","url":"http://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"devDependencies":{"nodeunit":">0.0.0","uglify-js":"1.2.x","nodelint":">0.0.0"},"jam":{"main":"lib/async.js","include":["lib/async.js","README.md","LICENSE"]},"readme":"# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual 'functional'\nsuspects (map, reduce, filter, each…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n```javascript\nasync.map(['file1','file2','file3'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n\nasync.filter(['file1','file2','file3'], path.exists, function(results){\n    // results now equals an array of the existing files\n});\n\nasync.parallel([\n    function(){ ... },\n    function(){ ... }\n], callback);\n\nasync.series([\n    function(){ ... },\n    function(){ ... }\n]);\n```\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n\n## Download\n\nReleases are available for download from\n[GitHub](http://github.com/caolan/async/downloads).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 17.5kb Uncompressed\n\n__Production:__ [async.min.js](https://github.com/caolan/async/raw/master/dist/async.min.js) - 1.7kb Packed and Gzipped\n\n\n## In the Browser\n\nSo far its been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n```html\n<script type=\"text/javascript\" src=\"async.js\"></script>\n<script type=\"text/javascript\">\n\n    async.map(data, asyncProcess, function(err, results){\n        alert(results);\n    });\n\n</script>\n```\n\n## Documentation\n\n### Collections\n\n* [each](#each)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [doWhilst](#doWhilst)\n* [until](#until)\n* [doUntil](#doUntil)\n* [waterfall](#waterfall)\n* [compose](#compose)\n* [queue](#queue)\n* [cargo](#cargo)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n* [times](#times)\n* [timesSeries](#timesSeries)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name=\"forEach\" />\n<a name=\"each\" />\n### each(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the each function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err) which must be called once it has completed.\n  If no error has occured, the callback should be run without arguments or \n  with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// assuming openFiles is an array of file names and saveFile is a function\n// to save the modified contents of that file:\n\nasync.each(openFiles, saveFile, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name=\"forEachSeries\" />\n<a name=\"eachSeries\" />\n### eachSeries(arr, iterator, callback)\n\nThe same as each only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name=\"forEachLimit\" />\n<a name=\"eachLimit\" />\n### eachLimit(arr, limit, iterator, callback)\n\nThe same as each only no more than \"limit\" iterators will be simultaneously \nrunning at any time.\n\nNote that the items are not processed in batches, so there is no guarantee that\n the first \"limit\" iterator functions will complete before any others are \nstarted.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - The maximum number of iterators to run at any time.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n  If no error has occured, the callback should be run without arguments or \n  with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// Assume documents is an array of JSON objects and requestApi is a\n// function that interacts with a rate-limited REST api.\n\nasync.eachLimit(documents, 20, requestApi, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name=\"map\" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map(['file1','file2','file3'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name=\"mapSeries\" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name=\"mapLimit\" />\n### mapLimit(arr, limit, iterator, callback)\n\nThe same as map only no more than \"limit\" iterators will be simultaneously \nrunning at any time.\n\nNote that the items are not processed in batches, so there is no guarantee that\n the first \"limit\" iterator functions will complete before any others are \nstarted.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - The maximum number of iterators to run at any time.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n  If no error has occured, the callback should be run without arguments or \n  with an explicit null argument.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map(['file1','file2','file3'], 1, fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name=\"filter\" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n```js\nasync.filter(['file1','file2','file3'], path.exists, function(results){\n    // results now equals an array of the existing files\n});\n```\n\n---------------------------------------\n\n<a name=\"filterSeries\" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name=\"reject\" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name=\"rejectSeries\" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as reject, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name=\"reduce\" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then its probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback which accepts an optional error as its first argument, and the state\n  of the reduction as the second. If an error is passed to the callback, the\n  reduction is stopped and the main callback is immediately called with the\n  error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n```js\nasync.reduce([1,2,3], 0, function(memo, item, callback){\n    // pointless async:\n    process.nextTick(function(){\n        callback(null, memo + item)\n    });\n}, function(err, result){\n    // result is now equal to the last value of memo, which is 6\n});\n```\n\n---------------------------------------\n\n<a name=\"reduceRight\" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name=\"detect\" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n```js\nasync.detect(['file1','file2','file3'], path.exists, function(result){\n    // result now equals the first file in the list that exists\n});\n```\n\n---------------------------------------\n\n<a name=\"detectSeries\" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name=\"sortBy\" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a value to use as the sort criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n```js\nasync.sortBy(['file1','file2','file3'], function(file, callback){\n    fs.stat(file, function(err, stats){\n        callback(err, stats.mtime);\n    });\n}, function(err, results){\n    // results is now the original array of files sorted by\n    // modified date\n});\n```\n\n---------------------------------------\n\n<a name=\"some\" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n```js\nasync.some(['file1','file2','file3'], path.exists, function(result){\n    // if result is true then at least one of the files exists\n});\n```\n\n---------------------------------------\n\n<a name=\"every\" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called with a boolean argument\n  once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n```js\nasync.every(['file1','file2','file3'], path.exists, function(result){\n    // if result is true then every file exists\n});\n```\n\n---------------------------------------\n\n<a name=\"concat\" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n```js\nasync.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files){\n    // files is now a list of filenames that exist in the 3 directories\n});\n```\n\n---------------------------------------\n\n<a name=\"concatSeries\" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name=\"series\" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n```js\nasync.series([\n    function(callback){\n        // do some stuff ...\n        callback(null, 'one');\n    },\n    function(callback){\n        // do some more stuff ...\n        callback(null, 'two');\n    }\n],\n// optional callback\nfunction(err, results){\n    // results is now equal to ['one', 'two']\n});\n\n\n// an example using an object instead of an array\nasync.series({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equal to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n```js\nasync.parallel([\n    function(callback){\n        setTimeout(function(){\n            callback(null, 'one');\n        }, 200);\n    },\n    function(callback){\n        setTimeout(function(){\n            callback(null, 'two');\n        }, 100);\n    }\n],\n// optional callback\nfunction(err, results){\n    // the results array will equal ['one','two'] even though\n    // the second function had a shorter timeout.\n});\n\n\n// an example using an object instead of an array\nasync.parallel({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equals to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallelLimit(tasks, limit, [callback])\n\nThe same as parallel only the tasks are executed in parallel with a maximum of \"limit\" \ntasks executing at any time.\n\nNote that the tasks are not executed in batches, so there is no guarantee that \nthe first \"limit\" tasks will complete before any others are started.\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* limit - The maximum number of tasks to run at any time.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n\n---------------------------------------\n\n<a name=\"whilst\" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback which must be called once it has completed with an optional\n  error as the first argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n```js\nvar count = 0;\n\nasync.whilst(\n    function () { return count < 5; },\n    function (callback) {\n        count++;\n        setTimeout(callback, 1000);\n    },\n    function (err) {\n        // 5 seconds have passed\n    }\n);\n```\n\n---------------------------------------\n\n<a name=\"doWhilst\" />\n### doWhilst(fn, test, callback)\n\nThe post check version of whilst. To reflect the difference in the order of operations `test` and `fn` arguments are switched. `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n\n---------------------------------------\n\n<a name=\"until\" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n---------------------------------------\n\n<a name=\"doUntil\" />\n### doUntil(fn, test, callback)\n\nLike doWhilst except the test is inverted. Note the argument ordering differs from `until`.\n\n\n---------------------------------------\n\n<a name=\"waterfall\" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task's callback.\n\n\n\n__Example__\n\n```js\nasync.waterfall([\n    function(callback){\n        callback(null, 'one', 'two');\n    },\n    function(arg1, arg2, callback){\n        callback(null, 'three');\n    },\n    function(arg1, callback){\n        // arg1 now equals 'three'\n        callback(null, 'done');\n    }\n], function (err, result) {\n   // result now equals 'done'    \n});\n```\n\n---------------------------------------\n<a name=\"compose\" />\n### compose(fn1, fn2...)\n\nCreates a function which is a composition of the passed asynchronous\nfunctions. Each function consumes the return value of the function that\nfollows. Composing functions f(), g() and h() would produce the result of\nf(g(h())), only this version uses callbacks to obtain the return values.\n\nEach function is executed with the `this` binding of the composed function.\n\n__Arguments__\n\n* functions... - the asynchronous functions to compose\n\n\n__Example__\n\n```js\nfunction add1(n, callback) {\n    setTimeout(function () [\n        callback(null, n + 1);\n    }, 10);\n}\n\nfunction mul3(n, callback) {\n    setTimeout(function () [\n        callback(null, n * 3);\n    }, 10);\n}\n\nvar add1mul3 = async.compose(mul3, add1);\n\nadd1mul3(4, function (err, result) {\n   // result now equals 15\n});\n```\n\n---------------------------------------\n\n<a name=\"queue\" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task's callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* unshift(task, [callback]) - add a new task to the front of the queue.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a queue object with concurrency 2\n\nvar q = async.queue(function (task, callback) {\n    console.log('hello ' + task.name);\n    callback();\n}, 2);\n\n\n// assign a callback\nq.drain = function() {\n    console.log('all items have been processed');\n}\n\n// add some items to the queue\n\nq.push({name: 'foo'}, function (err) {\n    console.log('finished processing foo');\n});\nq.push({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\n\n// add some items to the queue (batch-wise)\n\nq.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function (err) {\n    console.log('finished processing bar');\n});\n\n// add some items to the front of the queue\n\nq.unshift({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\n```\n\n---------------------------------------\n\n<a name=\"cargo\" />\n### cargo(worker, [payload])\n\nCreates a cargo object with the specified payload. Tasks added to the\ncargo will be processed altogether (up to the payload limit). If the\nworker is in progress, the task is queued until it is available. Once\nthe worker has completed some tasks, each callback of those tasks is called.\n\n__Arguments__\n\n* worker(tasks, callback) - An asynchronous function for processing queued\n  tasks.\n* payload - An optional integer for determining how many tasks should be\n  process per round, default is unlimited.\n\n__Cargo objects__\n\nThe cargo object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* payload - an integer for determining how many tasks should be\n  process per round. This property can be changed after a cargo is created to\n  alter the payload on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a cargo object with payload 2\n\nvar cargo = async.cargo(function (task, callback) {\n    console.log('hello ' + task.name);\n    callback();\n}, 2);\n\n\n// add some items\n\ncargo.push({name: 'foo'}, function (err) {\n    console.log('finished processing foo');\n});\ncargo.push({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\ncargo.push({name: 'baz'}, function (err) {\n    console.log('finished processing baz');\n});\n```\n\n---------------------------------------\n\n<a name=\"auto\" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The\n  syntax is easier to understand by looking at the example.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. If all tasks complete\n  successfully, it will receive an object containing their results.\n\n__Example__\n\n```js\nasync.auto({\n    get_data: function(callback){\n        // async code to get some data\n    },\n    make_folder: function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    },\n    write_file: ['get_data', 'make_folder', function(callback){\n        // once there is some data and the directory exists,\n        // write the data to a file in the directory\n        callback(null, filename);\n    }],\n    email_link: ['write_file', function(callback, results){\n        // once the file is written let's email a link to it...\n        // results.write_file contains the filename returned by write_file.\n    }]\n});\n```\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n```js\nasync.parallel([\n    function(callback){\n        // async code to get some data\n    },\n    function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    }\n],\nfunction(err, results){\n    async.series([\n        function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n        },\n        function(callback){\n            // once the file is written let's email a link to it...\n        }\n    ]);\n});\n```\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name=\"iterator\" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. Its also possible to\n'peek' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n\n__Example__\n\n```js\nvar iterator = async.iterator([\n    function(){ sys.p('one'); },\n    function(){ sys.p('two'); },\n    function(){ sys.p('three'); }\n]);\n\nnode> var iterator2 = iterator();\n'one'\nnode> var iterator3 = iterator2();\n'two'\nnode> iterator3();\n'three'\nnode> var nextfn = iterator2.next();\nnode> nextfn();\n'three'\n```\n\n---------------------------------------\n\n<a name=\"apply\" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n```js\n// using apply\n\nasync.parallel([\n    async.apply(fs.writeFile, 'testfile1', 'test1'),\n    async.apply(fs.writeFile, 'testfile2', 'test2'),\n]);\n\n\n// the same process without using apply\n\nasync.parallel([\n    function(callback){\n        fs.writeFile('testfile1', 'test1', callback);\n    },\n    function(callback){\n        fs.writeFile('testfile2', 'test2', callback);\n    }\n]);\n```\n\nIt's possible to pass any number of additional arguments when calling the\ncontinuation:\n\n```js\nnode> var fn = async.apply(sys.puts, 'one');\nnode> fn('two', 'three');\none\ntwo\nthree\n```\n\n---------------------------------------\n\n<a name=\"nextTick\" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setImmediate(callback)\nif available, otherwise setTimeout(callback, 0), which means other higher priority\nevents may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n```js\nvar call_order = [];\nasync.nextTick(function(){\n    call_order.push('two');\n    // call_order now equals ['one','two']\n});\ncall_order.push('one')\n```\n\n<a name=\"times\" />\n### times(n, callback)\n\nCalls the callback n times and accumulates results in the same manner\nyou would use with async.map.\n\n__Arguments__\n\n* n - The number of times to run the function.\n* callback - The function to call n times.\n\n__Example__\n\n```js\n// Pretend this is some complicated async factory\nvar createUser = function(id, callback) {\n  callback(null, {\n    id: 'user' + id\n  })\n}\n// generate 5 users\nasync.times(5, function(n, next){\n    createUser(n, function(err, user) {\n      next(err, user)\n    })\n}, function(err, users) {\n  // we should now have 5 users\n});\n```\n\n<a name=\"timesSeries\" />\n### timesSeries(n, callback)\n\nThe same as times only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n## Utils\n\n<a name=\"memoize\" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\nThe cache of results is exposed as the `memo` property of the function returned\nby `memoize`.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n```js\nvar slow_fn = function (name, callback) {\n    // do something\n    callback(null, result);\n};\nvar fn = async.memoize(slow_fn);\n\n// fn can now be used as if it were slow_fn\nfn('some name', function () {\n    // callback\n});\n```\n\n<a name=\"unmemoize\" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name=\"log\" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, 'hello ' + name);\n    }, 1000);\n};\n```\n```js\nnode> async.log(hello, 'world');\n'hello world'\n```\n\n---------------------------------------\n\n<a name=\"dir\" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, {hello: name});\n    }, 1000);\n};\n```\n```js\nnode> async.dir(hello, 'world');\n{hello: 'world'}\n```\n\n---------------------------------------\n\n<a name=\"noConflict\" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n","readmeFilename":"README.md","_id":"async@0.2.5","dist":{"shasum":"45f05da480749ba4c1dcd8cd3a3747ae7b36fe52","tarball":"http://registry.npmjs.org/async/-/async-0.2.5.tgz"},"_npmVersion":"1.2.0","_npmUser":{"name":"caolan","email":"caolan.mcmahon@gmail.com"},"maintainers":[{"name":"caolan","email":"caolan@caolanmcmahon.com"}],"directories":{}},"0.2.6":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./lib/async","author":{"name":"Caolan McMahon"},"version":"0.2.6","repository":{"type":"git","url":"http://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"devDependencies":{"nodeunit":">0.0.0","uglify-js":"1.2.x","nodelint":">0.0.0"},"jam":{"main":"lib/async.js","include":["lib/async.js","README.md","LICENSE"]},"scripts":{"test":"nodeunit test/test-async.js"},"readme":"# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual 'functional'\nsuspects (map, reduce, filter, each…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n```javascript\nasync.map(['file1','file2','file3'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n\nasync.filter(['file1','file2','file3'], path.exists, function(results){\n    // results now equals an array of the existing files\n});\n\nasync.parallel([\n    function(){ ... },\n    function(){ ... }\n], callback);\n\nasync.series([\n    function(){ ... },\n    function(){ ... }\n]);\n```\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n\n## Download\n\nReleases are available for download from\n[GitHub](http://github.com/caolan/async/downloads).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 17.5kb Uncompressed\n\n__Production:__ [async.min.js](https://github.com/caolan/async/raw/master/dist/async.min.js) - 1.7kb Packed and Gzipped\n\n\n## In the Browser\n\nSo far its been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n```html\n<script type=\"text/javascript\" src=\"async.js\"></script>\n<script type=\"text/javascript\">\n\n    async.map(data, asyncProcess, function(err, results){\n        alert(results);\n    });\n\n</script>\n```\n\n## Documentation\n\n### Collections\n\n* [each](#each)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [doWhilst](#doWhilst)\n* [until](#until)\n* [doUntil](#doUntil)\n* [waterfall](#waterfall)\n* [compose](#compose)\n* [applyEach](#applyEach)\n* [queue](#queue)\n* [cargo](#cargo)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n* [times](#times)\n* [timesSeries](#timesSeries)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name=\"forEach\" />\n<a name=\"each\" />\n### each(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the each function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err) which must be called once it has \n  completed. If no error has occured, the callback should be run without \n  arguments or with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// assuming openFiles is an array of file names and saveFile is a function\n// to save the modified contents of that file:\n\nasync.each(openFiles, saveFile, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name=\"forEachSeries\" />\n<a name=\"eachSeries\" />\n### eachSeries(arr, iterator, callback)\n\nThe same as each only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name=\"forEachLimit\" />\n<a name=\"eachLimit\" />\n### eachLimit(arr, limit, iterator, callback)\n\nThe same as each only no more than \"limit\" iterators will be simultaneously \nrunning at any time.\n\nNote that the items are not processed in batches, so there is no guarantee that\n the first \"limit\" iterator functions will complete before any others are \nstarted.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - The maximum number of iterators to run at any time.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err) which must be called once it has \n  completed. If no error has occured, the callback should be run without \n  arguments or with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// Assume documents is an array of JSON objects and requestApi is a\n// function that interacts with a rate-limited REST api.\n\nasync.eachLimit(documents, 20, requestApi, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name=\"map\" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, transformed) which must be called once \n  it has completed with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map(['file1','file2','file3'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name=\"mapSeries\" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name=\"mapLimit\" />\n### mapLimit(arr, limit, iterator, callback)\n\nThe same as map only no more than \"limit\" iterators will be simultaneously \nrunning at any time.\n\nNote that the items are not processed in batches, so there is no guarantee that\n the first \"limit\" iterator functions will complete before any others are \nstarted.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - The maximum number of iterators to run at any time.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, transformed) which must be called once \n  it has completed with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map(['file1','file2','file3'], 1, fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name=\"filter\" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n```js\nasync.filter(['file1','file2','file3'], path.exists, function(results){\n    // results now equals an array of the existing files\n});\n```\n\n---------------------------------------\n\n<a name=\"filterSeries\" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name=\"reject\" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name=\"rejectSeries\" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as reject, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name=\"reduce\" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then its probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback(err, reduction) which accepts an optional error as its first \n  argument, and the state of the reduction as the second. If an error is \n  passed to the callback, the reduction is stopped and the main callback is \n  immediately called with the error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n```js\nasync.reduce([1,2,3], 0, function(memo, item, callback){\n    // pointless async:\n    process.nextTick(function(){\n        callback(null, memo + item)\n    });\n}, function(err, result){\n    // result is now equal to the last value of memo, which is 6\n});\n```\n\n---------------------------------------\n\n<a name=\"reduceRight\" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name=\"detect\" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n```js\nasync.detect(['file1','file2','file3'], path.exists, function(result){\n    // result now equals the first file in the list that exists\n});\n```\n\n---------------------------------------\n\n<a name=\"detectSeries\" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name=\"sortBy\" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, sortValue) which must be called once it\n  has completed with an error (which can be null) and a value to use as the sort\n  criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n```js\nasync.sortBy(['file1','file2','file3'], function(file, callback){\n    fs.stat(file, function(err, stats){\n        callback(err, stats.mtime);\n    });\n}, function(err, results){\n    // results is now the original array of files sorted by\n    // modified date\n});\n```\n\n---------------------------------------\n\n<a name=\"some\" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n```js\nasync.some(['file1','file2','file3'], path.exists, function(result){\n    // if result is true then at least one of the files exists\n});\n```\n\n---------------------------------------\n\n<a name=\"every\" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n```js\nasync.every(['file1','file2','file3'], path.exists, function(result){\n    // if result is true then every file exists\n});\n```\n\n---------------------------------------\n\n<a name=\"concat\" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, results) which must be called once it \n  has completed with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n```js\nasync.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files){\n    // files is now a list of filenames that exist in the 3 directories\n});\n```\n\n---------------------------------------\n\n<a name=\"concatSeries\" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name=\"series\" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n__Example__\n\n```js\nasync.series([\n    function(callback){\n        // do some stuff ...\n        callback(null, 'one');\n    },\n    function(callback){\n        // do some more stuff ...\n        callback(null, 'two');\n    }\n],\n// optional callback\nfunction(err, results){\n    // results is now equal to ['one', 'two']\n});\n\n\n// an example using an object instead of an array\nasync.series({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equal to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed \n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n__Example__\n\n```js\nasync.parallel([\n    function(callback){\n        setTimeout(function(){\n            callback(null, 'one');\n        }, 200);\n    },\n    function(callback){\n        setTimeout(function(){\n            callback(null, 'two');\n        }, 100);\n    }\n],\n// optional callback\nfunction(err, results){\n    // the results array will equal ['one','two'] even though\n    // the second function had a shorter timeout.\n});\n\n\n// an example using an object instead of an array\nasync.parallel({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equals to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallelLimit(tasks, limit, [callback])\n\nThe same as parallel only the tasks are executed in parallel with a maximum of \"limit\" \ntasks executing at any time.\n\nNote that the tasks are not executed in batches, so there is no guarantee that \nthe first \"limit\" tasks will complete before any others are started.\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed \n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* limit - The maximum number of tasks to run at any time.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n---------------------------------------\n\n<a name=\"whilst\" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback(err) which must be called once it has completed with an \n  optional error argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n```js\nvar count = 0;\n\nasync.whilst(\n    function () { return count < 5; },\n    function (callback) {\n        count++;\n        setTimeout(callback, 1000);\n    },\n    function (err) {\n        // 5 seconds have passed\n    }\n);\n```\n\n---------------------------------------\n\n<a name=\"doWhilst\" />\n### doWhilst(fn, test, callback)\n\nThe post check version of whilst. To reflect the difference in the order of operations `test` and `fn` arguments are switched. `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n\n---------------------------------------\n\n<a name=\"until\" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n---------------------------------------\n\n<a name=\"doUntil\" />\n### doUntil(fn, test, callback)\n\nLike doWhilst except the test is inverted. Note the argument ordering differs from `until`.\n\n\n---------------------------------------\n\n<a name=\"waterfall\" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a \n  callback(err, result1, result2, ...) it must call on completion. The first\n  argument is an error (which can be null) and any further arguments will be \n  passed as arguments in order to the next task.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task's callback.\n\n\n\n__Example__\n\n```js\nasync.waterfall([\n    function(callback){\n        callback(null, 'one', 'two');\n    },\n    function(arg1, arg2, callback){\n        callback(null, 'three');\n    },\n    function(arg1, callback){\n        // arg1 now equals 'three'\n        callback(null, 'done');\n    }\n], function (err, result) {\n   // result now equals 'done'    \n});\n```\n\n---------------------------------------\n<a name=\"compose\" />\n### compose(fn1, fn2...)\n\nCreates a function which is a composition of the passed asynchronous\nfunctions. Each function consumes the return value of the function that\nfollows. Composing functions f(), g() and h() would produce the result of\nf(g(h())), only this version uses callbacks to obtain the return values.\n\nEach function is executed with the `this` binding of the composed function.\n\n__Arguments__\n\n* functions... - the asynchronous functions to compose\n\n\n__Example__\n\n```js\nfunction add1(n, callback) {\n    setTimeout(function () {\n        callback(null, n + 1);\n    }, 10);\n}\n\nfunction mul3(n, callback) {\n    setTimeout(function () {\n        callback(null, n * 3);\n    }, 10);\n}\n\nvar add1mul3 = async.compose(mul3, add1);\n\nadd1mul3(4, function (err, result) {\n   // result now equals 15\n});\n```\n\n---------------------------------------\n<a name=\"applyEach\" />\n### applyEach(fns, args..., callback)\n\nApplies the provided arguments to each function in the array, calling the\ncallback after all functions have completed. If you only provide the first\nargument then it will return a function which lets you pass in the\narguments as if it were a single function call.\n\n__Arguments__\n\n* fns - the asynchronous functions to all call with the same arguments\n* args... - any number of separate arguments to pass to the function\n* callback - the final argument should be the callback, called when all\n  functions have completed processing\n\n\n__Example__\n\n```js\nasync.applyEach([enableSearch, updateSchema], 'bucket', callback);\n\n// partial application example:\nasync.each(\n    buckets,\n    async.applyEach([enableSearch, updateSchema]),\n    callback\n);\n```\n\n---------------------------------------\n\n<a name=\"queue\" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task's callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task, which must call its callback(err) argument when finished, with an \n  optional error as an argument.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* unshift(task, [callback]) - add a new task to the front of the queue.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a queue object with concurrency 2\n\nvar q = async.queue(function (task, callback) {\n    console.log('hello ' + task.name);\n    callback();\n}, 2);\n\n\n// assign a callback\nq.drain = function() {\n    console.log('all items have been processed');\n}\n\n// add some items to the queue\n\nq.push({name: 'foo'}, function (err) {\n    console.log('finished processing foo');\n});\nq.push({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\n\n// add some items to the queue (batch-wise)\n\nq.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function (err) {\n    console.log('finished processing bar');\n});\n\n// add some items to the front of the queue\n\nq.unshift({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\n```\n\n---------------------------------------\n\n<a name=\"cargo\" />\n### cargo(worker, [payload])\n\nCreates a cargo object with the specified payload. Tasks added to the\ncargo will be processed altogether (up to the payload limit). If the\nworker is in progress, the task is queued until it is available. Once\nthe worker has completed some tasks, each callback of those tasks is called.\n\n__Arguments__\n\n* worker(tasks, callback) - An asynchronous function for processing queued\n  tasks, which must call its callback(err) argument when finished, with an \n  optional error as an argument.\n* payload - An optional integer for determining how many tasks should be\n  process per round, default is unlimited.\n\n__Cargo objects__\n\nThe cargo object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* payload - an integer for determining how many tasks should be\n  process per round. This property can be changed after a cargo is created to\n  alter the payload on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a cargo object with payload 2\n\nvar cargo = async.cargo(function (task, callback) {\n    console.log('hello ' + task.name);\n    callback();\n}, 2);\n\n\n// add some items\n\ncargo.push({name: 'foo'}, function (err) {\n    console.log('finished processing foo');\n});\ncargo.push({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\ncargo.push({name: 'baz'}, function (err) {\n    console.log('finished processing baz');\n});\n```\n\n---------------------------------------\n\n<a name=\"auto\" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\nNote, all functions are called with a results object as a second argument, \nso it is unsafe to pass functions in the tasks object which cannot handle the\nextra argument. For example, this snippet of code:\n\n```js\nasync.auto({\n  readData: async.apply(fs.readFile, 'data.txt', 'utf-8');\n}, callback);\n```\n\nwill have the effect of calling readFile with the results object as the last\nargument, which will fail:\n\n```js\nfs.readFile('data.txt', 'utf-8', cb, {});\n```\n\nInstead, wrap the call to readFile in a function which does not forward the \nresults object:\n\n```js\nasync.auto({\n  readData: function(cb, results){\n    fs.readFile('data.txt', 'utf-8', cb);\n  }\n}, callback);\n```\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The \n  function receives two arguments: (1) a callback(err, result) which must be \n  called when finished, passing an error (which can be null) and the result of \n  the function's execution, and (2) a results object, containing the results of\n  the previously executed functions.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. Results will always be passed\n\tbut if an error occurred, no other tasks will be performed, and the results\n\tobject will only contain partial results.\n  \n\n__Example__\n\n```js\nasync.auto({\n    get_data: function(callback){\n        // async code to get some data\n    },\n    make_folder: function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    },\n    write_file: ['get_data', 'make_folder', function(callback){\n        // once there is some data and the directory exists,\n        // write the data to a file in the directory\n        callback(null, filename);\n    }],\n    email_link: ['write_file', function(callback, results){\n        // once the file is written let's email a link to it...\n        // results.write_file contains the filename returned by write_file.\n    }]\n});\n```\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n```js\nasync.parallel([\n    function(callback){\n        // async code to get some data\n    },\n    function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    }\n],\nfunction(err, results){\n    async.series([\n        function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n        },\n        function(callback){\n            // once the file is written let's email a link to it...\n        }\n    ]);\n});\n```\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name=\"iterator\" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. Its also possible to\n'peek' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run.\n\n__Example__\n\n```js\nvar iterator = async.iterator([\n    function(){ sys.p('one'); },\n    function(){ sys.p('two'); },\n    function(){ sys.p('three'); }\n]);\n\nnode> var iterator2 = iterator();\n'one'\nnode> var iterator3 = iterator2();\n'two'\nnode> iterator3();\n'three'\nnode> var nextfn = iterator2.next();\nnode> nextfn();\n'three'\n```\n\n---------------------------------------\n\n<a name=\"apply\" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n```js\n// using apply\n\nasync.parallel([\n    async.apply(fs.writeFile, 'testfile1', 'test1'),\n    async.apply(fs.writeFile, 'testfile2', 'test2'),\n]);\n\n\n// the same process without using apply\n\nasync.parallel([\n    function(callback){\n        fs.writeFile('testfile1', 'test1', callback);\n    },\n    function(callback){\n        fs.writeFile('testfile2', 'test2', callback);\n    }\n]);\n```\n\nIt's possible to pass any number of additional arguments when calling the\ncontinuation:\n\n```js\nnode> var fn = async.apply(sys.puts, 'one');\nnode> fn('two', 'three');\none\ntwo\nthree\n```\n\n---------------------------------------\n\n<a name=\"nextTick\" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setImmediate(callback)\nif available, otherwise setTimeout(callback, 0), which means other higher priority\nevents may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n```js\nvar call_order = [];\nasync.nextTick(function(){\n    call_order.push('two');\n    // call_order now equals ['one','two']\n});\ncall_order.push('one')\n```\n\n<a name=\"times\" />\n### times(n, callback)\n\nCalls the callback n times and accumulates results in the same manner\nyou would use with async.map.\n\n__Arguments__\n\n* n - The number of times to run the function.\n* callback - The function to call n times.\n\n__Example__\n\n```js\n// Pretend this is some complicated async factory\nvar createUser = function(id, callback) {\n  callback(null, {\n    id: 'user' + id\n  })\n}\n// generate 5 users\nasync.times(5, function(n, next){\n    createUser(n, function(err, user) {\n      next(err, user)\n    })\n}, function(err, users) {\n  // we should now have 5 users\n});\n```\n\n<a name=\"timesSeries\" />\n### timesSeries(n, callback)\n\nThe same as times only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n## Utils\n\n<a name=\"memoize\" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\nThe cache of results is exposed as the `memo` property of the function returned\nby `memoize`.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n```js\nvar slow_fn = function (name, callback) {\n    // do something\n    callback(null, result);\n};\nvar fn = async.memoize(slow_fn);\n\n// fn can now be used as if it were slow_fn\nfn('some name', function () {\n    // callback\n});\n```\n\n<a name=\"unmemoize\" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name=\"log\" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, 'hello ' + name);\n    }, 1000);\n};\n```\n```js\nnode> async.log(hello, 'world');\n'hello world'\n```\n\n---------------------------------------\n\n<a name=\"dir\" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, {hello: name});\n    }, 1000);\n};\n```\n```js\nnode> async.dir(hello, 'world');\n{hello: 'world'}\n```\n\n---------------------------------------\n\n<a name=\"noConflict\" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n","readmeFilename":"README.md","_id":"async@0.2.6","dist":{"shasum":"ad3f373d9249ae324881565582bc90e152abbd68","tarball":"http://registry.npmjs.org/async/-/async-0.2.6.tgz"},"_from":".","_npmVersion":"1.2.11","_npmUser":{"name":"caolan","email":"caolan.mcmahon@gmail.com"},"maintainers":[{"name":"caolan","email":"caolan@caolanmcmahon.com"}],"directories":{}},"0.2.7":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./lib/async","author":{"name":"Caolan McMahon"},"version":"0.2.7","repository":{"type":"git","url":"http://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"devDependencies":{"nodeunit":">0.0.0","uglify-js":"1.2.x","nodelint":">0.0.0"},"jam":{"main":"lib/async.js","include":["lib/async.js","README.md","LICENSE"]},"scripts":{"test":"nodeunit test/test-async.js"},"readme":"# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual 'functional'\nsuspects (map, reduce, filter, each…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n```javascript\nasync.map(['file1','file2','file3'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n\nasync.filter(['file1','file2','file3'], path.exists, function(results){\n    // results now equals an array of the existing files\n});\n\nasync.parallel([\n    function(){ ... },\n    function(){ ... }\n], callback);\n\nasync.series([\n    function(){ ... },\n    function(){ ... }\n]);\n```\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n## Common Pitfalls\n\n### Binding a context to an iterator\n\nThis section is really about bind, not about async. If you are wondering how to\nmake async execute your iterators in a given context, or are confused as to why\na method of another library isn't working as an iterator, study this example:\n\n```js\n// Here is a simple object with an (unnecessarily roundabout) squaring method\nvar AsyncSquaringLibrary = {\n  squareExponent: 2,\n  square: function(number, callback){ \n    var result = Math.pow(number, this.squareExponent);\n    setTimeout(function(){\n      callback(null, result);\n    }, 200);\n  }\n};\n\nasync.map([1, 2, 3], AsyncSquaringLibrary.square, function(err, result){\n  // result is [NaN, NaN, NaN]\n  // This fails because the `this.squareExponent` expression in the square\n  // function is not evaluated in the context of AsyncSquaringLibrary, and is\n  // therefore undefined.\n});\n\nasync.map([1, 2, 3], AsyncSquaringLibrary.square.bind(AsyncSquaringLibrary), function(err, result){\n  // result is [1, 4, 9]\n  // With the help of bind we can attach a context to the iterator before\n  // passing it to async. Now the square function will be executed in its \n  // 'home' AsyncSquaringLibrary context and the value of `this.squareExponent`\n  // will be as expected.\n});\n```\n\n## Download\n\nThe source is available for download from\n[GitHub](http://github.com/caolan/async).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 29.6kb Uncompressed\n\n## In the Browser\n\nSo far it's been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n```html\n<script type=\"text/javascript\" src=\"async.js\"></script>\n<script type=\"text/javascript\">\n\n    async.map(data, asyncProcess, function(err, results){\n        alert(results);\n    });\n\n</script>\n```\n\n## Documentation\n\n### Collections\n\n* [each](#each)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [doWhilst](#doWhilst)\n* [until](#until)\n* [doUntil](#doUntil)\n* [forever](#forever)\n* [waterfall](#waterfall)\n* [compose](#compose)\n* [applyEach](#applyEach)\n* [queue](#queue)\n* [cargo](#cargo)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n* [times](#times)\n* [timesSeries](#timesSeries)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name=\"forEach\" />\n<a name=\"each\" />\n### each(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the each function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err) which must be called once it has \n  completed. If no error has occured, the callback should be run without \n  arguments or with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// assuming openFiles is an array of file names and saveFile is a function\n// to save the modified contents of that file:\n\nasync.each(openFiles, saveFile, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name=\"forEachSeries\" />\n<a name=\"eachSeries\" />\n### eachSeries(arr, iterator, callback)\n\nThe same as each only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name=\"forEachLimit\" />\n<a name=\"eachLimit\" />\n### eachLimit(arr, limit, iterator, callback)\n\nThe same as each only no more than \"limit\" iterators will be simultaneously \nrunning at any time.\n\nNote that the items are not processed in batches, so there is no guarantee that\n the first \"limit\" iterator functions will complete before any others are \nstarted.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - The maximum number of iterators to run at any time.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err) which must be called once it has \n  completed. If no error has occured, the callback should be run without \n  arguments or with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// Assume documents is an array of JSON objects and requestApi is a\n// function that interacts with a rate-limited REST api.\n\nasync.eachLimit(documents, 20, requestApi, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name=\"map\" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, transformed) which must be called once \n  it has completed with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map(['file1','file2','file3'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name=\"mapSeries\" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name=\"mapLimit\" />\n### mapLimit(arr, limit, iterator, callback)\n\nThe same as map only no more than \"limit\" iterators will be simultaneously \nrunning at any time.\n\nNote that the items are not processed in batches, so there is no guarantee that\n the first \"limit\" iterator functions will complete before any others are \nstarted.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - The maximum number of iterators to run at any time.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, transformed) which must be called once \n  it has completed with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map(['file1','file2','file3'], 1, fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name=\"filter\" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n```js\nasync.filter(['file1','file2','file3'], path.exists, function(results){\n    // results now equals an array of the existing files\n});\n```\n\n---------------------------------------\n\n<a name=\"filterSeries\" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name=\"reject\" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name=\"rejectSeries\" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as reject, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name=\"reduce\" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then it's probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback(err, reduction) which accepts an optional error as its first \n  argument, and the state of the reduction as the second. If an error is \n  passed to the callback, the reduction is stopped and the main callback is \n  immediately called with the error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n```js\nasync.reduce([1,2,3], 0, function(memo, item, callback){\n    // pointless async:\n    process.nextTick(function(){\n        callback(null, memo + item)\n    });\n}, function(err, result){\n    // result is now equal to the last value of memo, which is 6\n});\n```\n\n---------------------------------------\n\n<a name=\"reduceRight\" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name=\"detect\" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n```js\nasync.detect(['file1','file2','file3'], path.exists, function(result){\n    // result now equals the first file in the list that exists\n});\n```\n\n---------------------------------------\n\n<a name=\"detectSeries\" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name=\"sortBy\" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, sortValue) which must be called once it\n  has completed with an error (which can be null) and a value to use as the sort\n  criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n```js\nasync.sortBy(['file1','file2','file3'], function(file, callback){\n    fs.stat(file, function(err, stats){\n        callback(err, stats.mtime);\n    });\n}, function(err, results){\n    // results is now the original array of files sorted by\n    // modified date\n});\n```\n\n---------------------------------------\n\n<a name=\"some\" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n```js\nasync.some(['file1','file2','file3'], path.exists, function(result){\n    // if result is true then at least one of the files exists\n});\n```\n\n---------------------------------------\n\n<a name=\"every\" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n```js\nasync.every(['file1','file2','file3'], path.exists, function(result){\n    // if result is true then every file exists\n});\n```\n\n---------------------------------------\n\n<a name=\"concat\" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, results) which must be called once it \n  has completed with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n```js\nasync.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files){\n    // files is now a list of filenames that exist in the 3 directories\n});\n```\n\n---------------------------------------\n\n<a name=\"concatSeries\" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name=\"series\" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n__Example__\n\n```js\nasync.series([\n    function(callback){\n        // do some stuff ...\n        callback(null, 'one');\n    },\n    function(callback){\n        // do some more stuff ...\n        callback(null, 'two');\n    }\n],\n// optional callback\nfunction(err, results){\n    // results is now equal to ['one', 'two']\n});\n\n\n// an example using an object instead of an array\nasync.series({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equal to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed \n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n__Example__\n\n```js\nasync.parallel([\n    function(callback){\n        setTimeout(function(){\n            callback(null, 'one');\n        }, 200);\n    },\n    function(callback){\n        setTimeout(function(){\n            callback(null, 'two');\n        }, 100);\n    }\n],\n// optional callback\nfunction(err, results){\n    // the results array will equal ['one','two'] even though\n    // the second function had a shorter timeout.\n});\n\n\n// an example using an object instead of an array\nasync.parallel({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equals to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name=\"parallel\" />\n### parallelLimit(tasks, limit, [callback])\n\nThe same as parallel only the tasks are executed in parallel with a maximum of \"limit\" \ntasks executing at any time.\n\nNote that the tasks are not executed in batches, so there is no guarantee that \nthe first \"limit\" tasks will complete before any others are started.\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed \n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* limit - The maximum number of tasks to run at any time.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n---------------------------------------\n\n<a name=\"whilst\" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback(err) which must be called once it has completed with an \n  optional error argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n```js\nvar count = 0;\n\nasync.whilst(\n    function () { return count < 5; },\n    function (callback) {\n        count++;\n        setTimeout(callback, 1000);\n    },\n    function (err) {\n        // 5 seconds have passed\n    }\n);\n```\n\n---------------------------------------\n\n<a name=\"doWhilst\" />\n### doWhilst(fn, test, callback)\n\nThe post check version of whilst. To reflect the difference in the order of operations `test` and `fn` arguments are switched. `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n\n---------------------------------------\n\n<a name=\"until\" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n---------------------------------------\n\n<a name=\"doUntil\" />\n### doUntil(fn, test, callback)\n\nLike doWhilst except the test is inverted. Note the argument ordering differs from `until`.\n\n---------------------------------------\n\n<a name=\"forever\" />\n### forever(fn, callback)\n\nCalls the asynchronous function 'fn' repeatedly, in series, indefinitely.\nIf an error is passed to fn's callback then 'callback' is called with the\nerror, otherwise it will never be called.\n\n---------------------------------------\n\n<a name=\"waterfall\" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a \n  callback(err, result1, result2, ...) it must call on completion. The first\n  argument is an error (which can be null) and any further arguments will be \n  passed as arguments in order to the next task.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task's callback.\n\n\n\n__Example__\n\n```js\nasync.waterfall([\n    function(callback){\n        callback(null, 'one', 'two');\n    },\n    function(arg1, arg2, callback){\n        callback(null, 'three');\n    },\n    function(arg1, callback){\n        // arg1 now equals 'three'\n        callback(null, 'done');\n    }\n], function (err, result) {\n   // result now equals 'done'    \n});\n```\n\n---------------------------------------\n<a name=\"compose\" />\n### compose(fn1, fn2...)\n\nCreates a function which is a composition of the passed asynchronous\nfunctions. Each function consumes the return value of the function that\nfollows. Composing functions f(), g() and h() would produce the result of\nf(g(h())), only this version uses callbacks to obtain the return values.\n\nEach function is executed with the `this` binding of the composed function.\n\n__Arguments__\n\n* functions... - the asynchronous functions to compose\n\n\n__Example__\n\n```js\nfunction add1(n, callback) {\n    setTimeout(function () {\n        callback(null, n + 1);\n    }, 10);\n}\n\nfunction mul3(n, callback) {\n    setTimeout(function () {\n        callback(null, n * 3);\n    }, 10);\n}\n\nvar add1mul3 = async.compose(mul3, add1);\n\nadd1mul3(4, function (err, result) {\n   // result now equals 15\n});\n```\n\n---------------------------------------\n<a name=\"applyEach\" />\n### applyEach(fns, args..., callback)\n\nApplies the provided arguments to each function in the array, calling the\ncallback after all functions have completed. If you only provide the first\nargument then it will return a function which lets you pass in the\narguments as if it were a single function call.\n\n__Arguments__\n\n* fns - the asynchronous functions to all call with the same arguments\n* args... - any number of separate arguments to pass to the function\n* callback - the final argument should be the callback, called when all\n  functions have completed processing\n\n\n__Example__\n\n```js\nasync.applyEach([enableSearch, updateSchema], 'bucket', callback);\n\n// partial application example:\nasync.each(\n    buckets,\n    async.applyEach([enableSearch, updateSchema]),\n    callback\n);\n```\n\n---------------------------------------\n\n<a name=\"applyEachSeries\" />\n### applyEachSeries(arr, iterator, callback)\n\nThe same as applyEach only the functions are applied in series.\n\n---------------------------------------\n\n<a name=\"queue\" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task's callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task, which must call its callback(err) argument when finished, with an \n  optional error as an argument.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* unshift(task, [callback]) - add a new task to the front of the queue.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a queue object with concurrency 2\n\nvar q = async.queue(function (task, callback) {\n    console.log('hello ' + task.name);\n    callback();\n}, 2);\n\n\n// assign a callback\nq.drain = function() {\n    console.log('all items have been processed');\n}\n\n// add some items to the queue\n\nq.push({name: 'foo'}, function (err) {\n    console.log('finished processing foo');\n});\nq.push({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\n\n// add some items to the queue (batch-wise)\n\nq.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function (err) {\n    console.log('finished processing bar');\n});\n\n// add some items to the front of the queue\n\nq.unshift({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\n```\n\n---------------------------------------\n\n<a name=\"cargo\" />\n### cargo(worker, [payload])\n\nCreates a cargo object with the specified payload. Tasks added to the\ncargo will be processed altogether (up to the payload limit). If the\nworker is in progress, the task is queued until it is available. Once\nthe worker has completed some tasks, each callback of those tasks is called.\n\n__Arguments__\n\n* worker(tasks, callback) - An asynchronous function for processing an array of\n  queued tasks, which must call its callback(err) argument when finished, with \n  an optional error as an argument.\n* payload - An optional integer for determining how many tasks should be\n  processed per round; if omitted, the default is unlimited.\n\n__Cargo objects__\n\nThe cargo object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* payload - an integer for determining how many tasks should be\n  process per round. This property can be changed after a cargo is created to\n  alter the payload on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a cargo object with payload 2\n\nvar cargo = async.cargo(function (tasks, callback) {\n    for(var i=0; i<tasks.length; i++){\n      console.log('hello ' + tasks[i].name);\n    }\n    callback();\n}, 2);\n\n\n// add some items\n\ncargo.push({name: 'foo'}, function (err) {\n    console.log('finished processing foo');\n});\ncargo.push({name: 'bar'}, function (err) {\n    console.log('finished processing bar');\n});\ncargo.push({name: 'baz'}, function (err) {\n    console.log('finished processing baz');\n});\n```\n\n---------------------------------------\n\n<a name=\"auto\" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\nNote, all functions are called with a results object as a second argument, \nso it is unsafe to pass functions in the tasks object which cannot handle the\nextra argument. For example, this snippet of code:\n\n```js\nasync.auto({\n  readData: async.apply(fs.readFile, 'data.txt', 'utf-8');\n}, callback);\n```\n\nwill have the effect of calling readFile with the results object as the last\nargument, which will fail:\n\n```js\nfs.readFile('data.txt', 'utf-8', cb, {});\n```\n\nInstead, wrap the call to readFile in a function which does not forward the \nresults object:\n\n```js\nasync.auto({\n  readData: function(cb, results){\n    fs.readFile('data.txt', 'utf-8', cb);\n  }\n}, callback);\n```\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The \n  function receives two arguments: (1) a callback(err, result) which must be \n  called when finished, passing an error (which can be null) and the result of \n  the function's execution, and (2) a results object, containing the results of\n  the previously executed functions.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. Results will always be passed\n\tbut if an error occurred, no other tasks will be performed, and the results\n\tobject will only contain partial results.\n  \n\n__Example__\n\n```js\nasync.auto({\n    get_data: function(callback){\n        // async code to get some data\n    },\n    make_folder: function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    },\n    write_file: ['get_data', 'make_folder', function(callback){\n        // once there is some data and the directory exists,\n        // write the data to a file in the directory\n        callback(null, filename);\n    }],\n    email_link: ['write_file', function(callback, results){\n        // once the file is written let's email a link to it...\n        // results.write_file contains the filename returned by write_file.\n    }]\n});\n```\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n```js\nasync.parallel([\n    function(callback){\n        // async code to get some data\n    },\n    function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    }\n],\nfunction(err, results){\n    async.series([\n        function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n        },\n        function(callback){\n            // once the file is written let's email a link to it...\n        }\n    ]);\n});\n```\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name=\"iterator\" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. It's also possible to\n'peek' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run.\n\n__Example__\n\n```js\nvar iterator = async.iterator([\n    function(){ sys.p('one'); },\n    function(){ sys.p('two'); },\n    function(){ sys.p('three'); }\n]);\n\nnode> var iterator2 = iterator();\n'one'\nnode> var iterator3 = iterator2();\n'two'\nnode> iterator3();\n'three'\nnode> var nextfn = iterator2.next();\nnode> nextfn();\n'three'\n```\n\n---------------------------------------\n\n<a name=\"apply\" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n```js\n// using apply\n\nasync.parallel([\n    async.apply(fs.writeFile, 'testfile1', 'test1'),\n    async.apply(fs.writeFile, 'testfile2', 'test2'),\n]);\n\n\n// the same process without using apply\n\nasync.parallel([\n    function(callback){\n        fs.writeFile('testfile1', 'test1', callback);\n    },\n    function(callback){\n        fs.writeFile('testfile2', 'test2', callback);\n    }\n]);\n```\n\nIt's possible to pass any number of additional arguments when calling the\ncontinuation:\n\n```js\nnode> var fn = async.apply(sys.puts, 'one');\nnode> fn('two', 'three');\none\ntwo\nthree\n```\n\n---------------------------------------\n\n<a name=\"nextTick\" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setImmediate(callback)\nif available, otherwise setTimeout(callback, 0), which means other higher priority\nevents may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n```js\nvar call_order = [];\nasync.nextTick(function(){\n    call_order.push('two');\n    // call_order now equals ['one','two']\n});\ncall_order.push('one')\n```\n\n<a name=\"times\" />\n### times(n, callback)\n\nCalls the callback n times and accumulates results in the same manner\nyou would use with async.map.\n\n__Arguments__\n\n* n - The number of times to run the function.\n* callback - The function to call n times.\n\n__Example__\n\n```js\n// Pretend this is some complicated async factory\nvar createUser = function(id, callback) {\n  callback(null, {\n    id: 'user' + id\n  })\n}\n// generate 5 users\nasync.times(5, function(n, next){\n    createUser(n, function(err, user) {\n      next(err, user)\n    })\n}, function(err, users) {\n  // we should now have 5 users\n});\n```\n\n<a name=\"timesSeries\" />\n### timesSeries(n, callback)\n\nThe same as times only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n## Utils\n\n<a name=\"memoize\" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\nThe cache of results is exposed as the `memo` property of the function returned\nby `memoize`.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n```js\nvar slow_fn = function (name, callback) {\n    // do something\n    callback(null, result);\n};\nvar fn = async.memoize(slow_fn);\n\n// fn can now be used as if it were slow_fn\nfn('some name', function () {\n    // callback\n});\n```\n\n<a name=\"unmemoize\" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name=\"log\" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, 'hello ' + name);\n    }, 1000);\n};\n```\n```js\nnode> async.log(hello, 'world');\n'hello world'\n```\n\n---------------------------------------\n\n<a name=\"dir\" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, {hello: name});\n    }, 1000);\n};\n```\n```js\nnode> async.dir(hello, 'world');\n{hello: 'world'}\n```\n\n---------------------------------------\n\n<a name=\"noConflict\" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n","readmeFilename":"README.md","_id":"async@0.2.7","dist":{"shasum":"44c5ee151aece6c4bf5364cfc7c28fe4e58f18df","tarball":"http://registry.npmjs.org/async/-/async-0.2.7.tgz"},"_from":".","_npmVersion":"1.2.11","_npmUser":{"name":"caolan","email":"caolan.mcmahon@gmail.com"},"maintainers":[{"name":"caolan","email":"caolan@caolanmcmahon.com"}],"directories":{}},"0.2.8":{"name":"async","description":"Higher-order functions and common patterns for asynchronous code","main":"./lib/async","author":{"name":"Caolan McMahon"},"version":"0.2.8","repository":{"type":"git","url":"http://github.com/caolan/async.git"},"bugs":{"url":"http://github.com/caolan/async/issues"},"licenses":[{"type":"MIT","url":"http://github.com/caolan/async/raw/master/LICENSE"}],"devDependencies":{"nodeunit":">0.0.0","uglify-js":"1.2.x","nodelint":">0.0.0"},"jam":{"main":"lib/async.js","include":["lib/async.js","README.md","LICENSE"]},"scripts":{"test":"nodeunit test/test-async.js"},"readme":"# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual 'functional'\nsuspects (map, reduce, filter, each…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n```javascript\nasync.map(['file1','file2','file3'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n\nasync.filter(['file1','file2','file3'], path.exists, function(results){\n    // results now equals an array of the existing files\n});\n\nasync.parallel([\n    function(){ ... },\n    function(){ ... }\n], callback);\n\nasync.series([\n    function(){ ... },\n    function(){ ... }\n]);\n```\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n## Common Pitfalls\n\n### Binding a context to an iterator\n\nThis section is really about bind, not about async. If you are wondering how to\nmake async execute your iterators in a given context, or are confused as to why\na method of another library isn't working as an iterator, study this example:\n\n```js\n// Here is a simple object with an (unnecessarily roundabout) squaring method\nvar AsyncSquaringLibrary = {\n  squareExponent: 2,\n  square: function(number, callback){ \n    var result = Math.pow(number, this.squareExponent);\n    setTimeout(function(){\n      callback(null, result);\n    }, 200);\n  }\n};\n\nasync.map([1, 2, 3], AsyncSquaringLibrary.square, function(err, result){\n  // result is [NaN, NaN, NaN]\n  // This fails because the `this.squareExponent
13596 error     at Object.parse (native)
13596 error     at RegClient.<anonymous> (c:\Program Files\nodejs\node_modules\npm\node_modules\npm-registry-client\lib\request.js:241:23)
13596 error     at Request.self.callback (c:\Program Files\nodejs\node_modules\npm\node_modules\request\request.js:123:22)
13596 error     at Request.EventEmitter.emit (events.js:98:17)
13596 error     at Request.<anonymous> (c:\Program Files\nodejs\node_modules\npm\node_modules\request\request.js:893:14)
13596 error     at Request.EventEmitter.emit (events.js:117:20)
13596 error     at IncomingMessage.<anonymous> (c:\Program Files\nodejs\node_modules\npm\node_modules\request\request.js:844:12)
13596 error     at IncomingMessage.EventEmitter.emit (events.js:117:20)
13596 error     at _stream_readable.js:920:16
13596 error     at process._tickCallback (node.js:415:13)
13597 error If you need help, you may report this *entire* log,
13597 error including the npm and node versions, at:
13597 error     <http://github.com/isaacs/npm/issues>
13598 error System Windows_NT 6.1.7601
13599 error command "c:\\Program Files\\nodejs\\node.exe" "c:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js" "install"
13600 error cwd C:\Users\Gaston\PhpstormProjects\frontTest
13601 error node -v v0.10.24
13602 error npm -v 1.3.21
13603 error type unexpected_eos
13604 verbose exit [ 1, true ]
